
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000594  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000594  00000628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800080  00800080  00000648  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b82  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb2  00000000  00000000  0000239e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df9  00000000  00000000  00002f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  00003d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ae4  00000000  00000000  00004134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012be  00000000  00000000  00004c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005ed6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_1>
   8:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_2>
   c:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 38       	cpi	r26, 0x88	; 136
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c8 02 	jmp	0x590	; 0x590 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	83 ed       	ldi	r24, 0xD3	; 211
  94:	90 e3       	ldi	r25, 0x30	; 48
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x4>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0xa>
  9c:	00 00       	nop

int main(void) {


	_delay_ms(50);
	H_LCD_void_Init();
  9e:	0e 94 2f 01 	call	0x25e	; 0x25e <H_LCD_void_Init>
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x10>

000000a4 <H_LCD_void_latchByte>:
	H_LCD_void_sendString("."); // Display the decimal point
	H_LCD_void_sendIntNum(fractional); // Display the fractional part
}


static void H_LCD_void_latchByte(u8 copy_u8Byte){
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	64 97       	sbiw	r28, 0x14	; 20
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
  bc:	08 2f       	mov	r16, r24
	DIO_Config dataPins[] = {
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	89 83       	std	Y+1, r24	; 0x01
  c2:	1a 82       	std	Y+2, r1	; 0x02
  c4:	8b 83       	std	Y+3, r24	; 0x03
  c6:	04 fb       	bst	r16, 4
  c8:	99 27       	eor	r25, r25
  ca:	90 f9       	bld	r25, 0
  cc:	9c 83       	std	Y+4, r25	; 0x04
  ce:	8d 83       	std	Y+5, r24	; 0x05
  d0:	8e 83       	std	Y+6, r24	; 0x06
  d2:	8f 83       	std	Y+7, r24	; 0x07
  d4:	05 fb       	bst	r16, 5
  d6:	99 27       	eor	r25, r25
  d8:	90 f9       	bld	r25, 0
  da:	98 87       	std	Y+8, r25	; 0x08
  dc:	89 87       	std	Y+9, r24	; 0x09
  de:	92 e0       	ldi	r25, 0x02	; 2
  e0:	9a 87       	std	Y+10, r25	; 0x0a
  e2:	8b 87       	std	Y+11, r24	; 0x0b
  e4:	06 fb       	bst	r16, 6
  e6:	99 27       	eor	r25, r25
  e8:	90 f9       	bld	r25, 0
  ea:	9c 87       	std	Y+12, r25	; 0x0c
  ec:	8d 87       	std	Y+13, r24	; 0x0d
  ee:	94 e0       	ldi	r25, 0x04	; 4
  f0:	9e 87       	std	Y+14, r25	; 0x0e
  f2:	8f 87       	std	Y+15, r24	; 0x0f
  f4:	80 2f       	mov	r24, r16
  f6:	88 1f       	adc	r24, r24
  f8:	88 27       	eor	r24, r24
  fa:	88 1f       	adc	r24, r24
  fc:	88 8b       	std	Y+16, r24	; 0x10
		{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 4)},//PD4 data bin
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 5)},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 6)},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 7)},//PD7 data bin
	};
	for (u8 i = 0; i < 4; i++) {
  fe:	10 e0       	ldi	r17, 0x00	; 0
 100:	0f c0       	rjmp	.+30     	; 0x120 <H_LCD_void_latchByte+0x7c>
		DIO_U8SetPinValue(&dataPins[i]);
 102:	81 2f       	mov	r24, r17
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	2c 0f       	add	r18, r28
 114:	3d 1f       	adc	r19, r29
 116:	82 0f       	add	r24, r18
 118:	93 1f       	adc	r25, r19
 11a:	0e 94 0b 02 	call	0x416	; 0x416 <DIO_U8SetPinValue>
		{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 4)},//PD4 data bin
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 5)},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 6)},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 7)},//PD7 data bin
	};
	for (u8 i = 0; i < 4; i++) {
 11e:	1f 5f       	subi	r17, 0xFF	; 255
 120:	14 30       	cpi	r17, 0x04	; 4
 122:	78 f3       	brcs	.-34     	; 0x102 <H_LCD_void_latchByte+0x5e>
		DIO_U8SetPinValue(&dataPins[i]);
	}

	DIO_Config enable;
	enable.port = LCD_EN_PORT;
 124:	19 8a       	std	Y+17, r1	; 0x11
	enable.pin = LCD_EN_PIN;
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	8a 8b       	std	Y+18, r24	; 0x12
	enable.value = DIO_PIN_LOW;
 12a:	1c 8a       	std	Y+20, r1	; 0x14
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <H_LCD_void_latchByte+0x8c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <H_LCD_void_latchByte+0x92>
 136:	00 00       	nop
	_delay_ms(1); /* delay for processing */
	DIO_U8SetPinValue(&enable);
 138:	ce 01       	movw	r24, r28
 13a:	41 96       	adiw	r24, 0x11	; 17
 13c:	0e 94 0b 02 	call	0x416	; 0x416 <DIO_U8SetPinValue>
 140:	e9 ef       	ldi	r30, 0xF9	; 249
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <H_LCD_void_latchByte+0xa0>
 148:	00 c0       	rjmp	.+0      	; 0x14a <H_LCD_void_latchByte+0xa6>
 14a:	00 00       	nop
	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_HIGH;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	8c 8b       	std	Y+20, r24	; 0x14
	DIO_U8SetPinValue(&enable);
 150:	ce 01       	movw	r24, r28
 152:	41 96       	adiw	r24, 0x11	; 17
 154:	0e 94 0b 02 	call	0x416	; 0x416 <DIO_U8SetPinValue>
 158:	89 ef       	ldi	r24, 0xF9	; 249
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <H_LCD_void_latchByte+0xb8>
 160:	00 c0       	rjmp	.+0      	; 0x162 <H_LCD_void_latchByte+0xbe>
 162:	00 00       	nop
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
 164:	10 e0       	ldi	r17, 0x00	; 0
 166:	1a c0       	rjmp	.+52     	; 0x19c <H_LCD_void_latchByte+0xf8>
		dataPins[i].value = GET_BIT(copy_u8Byte, i);
 168:	81 2f       	mov	r24, r17
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	20 2f       	mov	r18, r16
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	01 2e       	mov	r0, r17
 172:	02 c0       	rjmp	.+4      	; 0x178 <H_LCD_void_latchByte+0xd4>
 174:	35 95       	asr	r19
 176:	27 95       	ror	r18
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <H_LCD_void_latchByte+0xd0>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	e1 e0       	ldi	r30, 0x01	; 1
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ec 0f       	add	r30, r28
 18a:	fd 1f       	adc	r31, r29
 18c:	8e 0f       	add	r24, r30
 18e:	9f 1f       	adc	r25, r31
 190:	21 70       	andi	r18, 0x01	; 1
 192:	fc 01       	movw	r30, r24
 194:	23 83       	std	Z+3, r18	; 0x03
		DIO_U8SetPinValue(&dataPins[i]);
 196:	0e 94 0b 02 	call	0x416	; 0x416 <DIO_U8SetPinValue>
	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_HIGH;
	DIO_U8SetPinValue(&enable);
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
 19a:	1f 5f       	subi	r17, 0xFF	; 255
 19c:	14 30       	cpi	r17, 0x04	; 4
 19e:	20 f3       	brcs	.-56     	; 0x168 <H_LCD_void_latchByte+0xc4>
 1a0:	89 ef       	ldi	r24, 0xF9	; 249
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <H_LCD_void_latchByte+0x100>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <H_LCD_void_latchByte+0x106>
 1aa:	00 00       	nop
		dataPins[i].value = GET_BIT(copy_u8Byte, i);
		DIO_U8SetPinValue(&dataPins[i]);
	}

	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_LOW;
 1ac:	1c 8a       	std	Y+20, r1	; 0x14
	DIO_U8SetPinValue(&enable);
 1ae:	ce 01       	movw	r24, r28
 1b0:	41 96       	adiw	r24, 0x11	; 17
 1b2:	0e 94 0b 02 	call	0x416	; 0x416 <DIO_U8SetPinValue>
 1b6:	e9 ef       	ldi	r30, 0xF9	; 249
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <H_LCD_void_latchByte+0x116>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <H_LCD_void_latchByte+0x11c>
 1c0:	00 00       	nop
	_delay_ms(1); /* delay for processing*/


}
 1c2:	64 96       	adiw	r28, 0x14	; 20
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	08 95       	ret

000001d8 <H_LCD_void_sendCommand>:
}



void H_LCD_void_sendCommand(u8 copy_u8command)
{
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	28 97       	sbiw	r28, 0x08	; 8
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	08 2f       	mov	r16, r24
	//set mode to command
	DIO_Config mode[] = {
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	e0 e6       	ldi	r30, 0x60	; 96
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	de 01       	movw	r26, r28
 1fa:	11 96       	adiw	r26, 0x01	; 1
 1fc:	01 90       	ld	r0, Z+
 1fe:	0d 92       	st	X+, r0
 200:	8a 95       	dec	r24
 202:	e1 f7       	brne	.-8      	; 0x1fc <H_LCD_void_sendCommand+0x24>
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_LOW},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 204:	10 e0       	ldi	r17, 0x00	; 0
 206:	15 c0       	rjmp	.+42     	; 0x232 <H_LCD_void_sendCommand+0x5a>
		DIO_U8SetPinValue(&mode[i]);
 208:	81 2f       	mov	r24, r17
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	2c 0f       	add	r18, r28
 21a:	3d 1f       	adc	r19, r29
 21c:	82 0f       	add	r24, r18
 21e:	93 1f       	adc	r25, r19
 220:	0e 94 0b 02 	call	0x416	; 0x416 <DIO_U8SetPinValue>
 224:	89 ef       	ldi	r24, 0xF9	; 249
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <H_LCD_void_sendCommand+0x50>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <H_LCD_void_sendCommand+0x56>
 22e:	00 00       	nop
	DIO_Config mode[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_LOW},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 230:	1f 5f       	subi	r17, 0xFF	; 255
 232:	12 30       	cpi	r17, 0x02	; 2
 234:	48 f3       	brcs	.-46     	; 0x208 <H_LCD_void_sendCommand+0x30>
 236:	89 ef       	ldi	r24, 0xF9	; 249
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <H_LCD_void_sendCommand+0x62>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <H_LCD_void_sendCommand+0x68>
 240:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */


	#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	H_LCD_void_latchByte(copy_u8command);
 242:	80 2f       	mov	r24, r16
 244:	0e 94 52 00 	call	0xa4	; 0xa4 <H_LCD_void_latchByte>
	#else

	#endif

}
 248:	28 96       	adiw	r28, 0x08	; 8
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	f8 94       	cli
 24e:	de bf       	out	0x3e, r29	; 62
 250:	0f be       	out	0x3f, r0	; 63
 252:	cd bf       	out	0x3d, r28	; 61
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <H_LCD_void_Init>:
#include "LCD_config.h"


void functionSet();

void H_LCD_void_Init(void){
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	68 97       	sbiw	r28, 0x18	; 24
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
	DIO_Config lcdInit[] = {
 274:	fe 01       	movw	r30, r28
 276:	31 96       	adiw	r30, 0x01	; 1
 278:	88 e0       	ldi	r24, 0x08	; 8
 27a:	df 01       	movw	r26, r30
 27c:	1d 92       	st	X+, r1
 27e:	8a 95       	dec	r24
 280:	e9 f7       	brne	.-6      	; 0x27c <H_LCD_void_Init+0x1e>
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	8a 83       	std	Y+2, r24	; 0x02
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	8b 83       	std	Y+3, r24	; 0x03
 28a:	92 e0       	ldi	r25, 0x02	; 2
 28c:	9e 83       	std	Y+6, r25	; 0x06
 28e:	8f 83       	std	Y+7, r24	; 0x07
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 290:	10 e0       	ldi	r17, 0x00	; 0
 292:	0f c0       	rjmp	.+30     	; 0x2b2 <H_LCD_void_Init+0x54>
		DIO_U8SetPinDirection(&lcdInit[i]);
 294:	81 2f       	mov	r24, r17
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	2c 0f       	add	r18, r28
 2a6:	3d 1f       	adc	r19, r29
 2a8:	82 0f       	add	r24, r18
 2aa:	93 1f       	adc	r25, r19
 2ac:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_U8SetPinDirection>
	DIO_Config lcdInit[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 2b0:	1f 5f       	subi	r17, 0xFF	; 255
 2b2:	12 30       	cpi	r17, 0x02	; 2
 2b4:	78 f3       	brcs	.-34     	; 0x294 <H_LCD_void_Init+0x36>
		DIO_U8SetPinDirection(&lcdInit[i]);
	}

	#if (LCD_DATA_BITS_MODE == 4)
	DIO_Config dataPins[] = {
 2b6:	fe 01       	movw	r30, r28
 2b8:	39 96       	adiw	r30, 0x09	; 9
 2ba:	80 e1       	ldi	r24, 0x10	; 16
 2bc:	df 01       	movw	r26, r30
 2be:	1d 92       	st	X+, r1
 2c0:	8a 95       	dec	r24
 2c2:	e9 f7       	brne	.-6      	; 0x2be <H_LCD_void_Init+0x60>
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	89 87       	std	Y+9, r24	; 0x09
 2c8:	8b 87       	std	Y+11, r24	; 0x0b
 2ca:	8d 87       	std	Y+13, r24	; 0x0d
 2cc:	8e 87       	std	Y+14, r24	; 0x0e
 2ce:	8f 87       	std	Y+15, r24	; 0x0f
 2d0:	89 8b       	std	Y+17, r24	; 0x11
 2d2:	92 e0       	ldi	r25, 0x02	; 2
 2d4:	9a 8b       	std	Y+18, r25	; 0x12
 2d6:	8b 8b       	std	Y+19, r24	; 0x13
 2d8:	8d 8b       	std	Y+21, r24	; 0x15
 2da:	94 e0       	ldi	r25, 0x04	; 4
 2dc:	9e 8b       	std	Y+22, r25	; 0x16
 2de:	8f 8b       	std	Y+23, r24	; 0x17
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT},//PD7 data bin
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 4; i++) {
 2e0:	10 e0       	ldi	r17, 0x00	; 0
 2e2:	0f c0       	rjmp	.+30     	; 0x302 <H_LCD_void_Init+0xa4>
		DIO_U8SetPinDirection(&dataPins[i]);
 2e4:	81 2f       	mov	r24, r17
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	29 e0       	ldi	r18, 0x09	; 9
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	2c 0f       	add	r18, r28
 2f6:	3d 1f       	adc	r19, r29
 2f8:	82 0f       	add	r24, r18
 2fa:	93 1f       	adc	r25, r19
 2fc:	0e 94 cd 01 	call	0x39a	; 0x39a <DIO_U8SetPinDirection>
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT},//PD7 data bin
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 4; i++) {
 300:	1f 5f       	subi	r17, 0xFF	; 255
 302:	14 30       	cpi	r17, 0x04	; 4
 304:	78 f3       	brcs	.-34     	; 0x2e4 <H_LCD_void_Init+0x86>
		DIO_U8SetPinDirection(&dataPins[i]);
	}

	//Function Set Corner Case
	//functionSet();
	H_LCD_void_sendCommand(LCD_GO_TO_HOME);
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <H_LCD_void_sendCommand>
 30c:	89 ef       	ldi	r24, 0xF9	; 249
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	f1 f7       	brne	.-4      	; 0x310 <H_LCD_void_Init+0xb2>
 314:	00 c0       	rjmp	.+0      	; 0x316 <H_LCD_void_Init+0xb8>
 316:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 318:	88 e2       	ldi	r24, 0x28	; 40
 31a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <H_LCD_void_sendCommand>
 31e:	a9 ef       	ldi	r26, 0xF9	; 249
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	11 97       	sbiw	r26, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <H_LCD_void_Init+0xc4>
 326:	00 c0       	rjmp	.+0      	; 0x328 <H_LCD_void_Init+0xca>
 328:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x0F);
 32a:	8f e0       	ldi	r24, 0x0F	; 15
 32c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <H_LCD_void_sendCommand>
 330:	89 ef       	ldi	r24, 0xF9	; 249
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <H_LCD_void_Init+0xd6>
 338:	00 c0       	rjmp	.+0      	; 0x33a <H_LCD_void_Init+0xdc>
 33a:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x01);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <H_LCD_void_sendCommand>
 342:	a3 ef       	ldi	r26, 0xF3	; 243
 344:	b1 e0       	ldi	r27, 0x01	; 1
 346:	11 97       	sbiw	r26, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <H_LCD_void_Init+0xe8>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <H_LCD_void_Init+0xee>
 34c:	00 00       	nop
	_delay_ms(2);
	H_LCD_void_sendCommand(0x06);
 34e:	86 e0       	ldi	r24, 0x06	; 6
 350:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <H_LCD_void_sendCommand>

	#elif (LCD_DATA_BITS_MODE == 8)

	#endif
}
 354:	68 96       	adiw	r28, 0x18	; 24
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	1f 91       	pop	r17
 366:	08 95       	ret

00000368 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 368:	24 b1       	in	r18, 0x04	; 4
 36a:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 36c:	00 24       	eor	r0, r0
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	00 1c       	adc	r0, r0
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	00 1c       	adc	r0, r0
 37a:	23 2f       	mov	r18, r19
 37c:	30 2d       	mov	r19, r0
 37e:	85 b1       	in	r24, 0x05	; 5
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 38a:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
 38e:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x1>
 392:	82 2b       	or	r24, r18
 394:	93 2b       	or	r25, r19
 396:	09 95       	icall
 398:	08 95       	ret

0000039a <DIO_U8SetPinDirection>:
 39a:	dc 01       	movw	r26, r24
 39c:	ec 91       	ld	r30, X
 39e:	e4 30       	cpi	r30, 0x04	; 4
 3a0:	a0 f5       	brcc	.+104    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3a2:	11 96       	adiw	r26, 0x01	; 1
 3a4:	2c 91       	ld	r18, X
 3a6:	11 97       	sbiw	r26, 0x01	; 1
 3a8:	28 30       	cpi	r18, 0x08	; 8
 3aa:	88 f5       	brcc	.+98     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 3ac:	12 96       	adiw	r26, 0x02	; 2
 3ae:	8c 91       	ld	r24, X
 3b0:	81 11       	cpse	r24, r1
 3b2:	15 c0       	rjmp	.+42     	; 0x3de <DIO_U8SetPinDirection+0x44>
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	e8 58       	subi	r30, 0x88	; 136
 3bc:	ff 4f       	sbci	r31, 0xFF	; 255
 3be:	01 90       	ld	r0, Z+
 3c0:	f0 81       	ld	r31, Z
 3c2:	e0 2d       	mov	r30, r0
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_U8SetPinDirection+0x34>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	2a 95       	dec	r18
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_U8SetPinDirection+0x30>
 3d2:	80 95       	com	r24
 3d4:	90 81       	ld	r25, Z
 3d6:	89 23       	and	r24, r25
 3d8:	80 83       	st	Z, r24
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	c1 f4       	brne	.+48     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	ee 0f       	add	r30, r30
 3e6:	ff 1f       	adc	r31, r31
 3e8:	e8 58       	subi	r30, 0x88	; 136
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	01 90       	ld	r0, Z+
 3ee:	f0 81       	ld	r31, Z
 3f0:	e0 2d       	mov	r30, r0
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_U8SetPinDirection+0x62>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	2a 95       	dec	r18
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_U8SetPinDirection+0x5e>
 400:	90 81       	ld	r25, Z
 402:	89 2b       	or	r24, r25
 404:	80 83       	st	Z, r24
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	08 95       	ret
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	08 95       	ret
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	08 95       	ret
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	08 95       	ret

00000416 <DIO_U8SetPinValue>:
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	c1 f1       	breq	.+112    	; 0x48a <DIO_U8SetPinValue+0x74>
 41a:	dc 01       	movw	r26, r24
 41c:	ec 91       	ld	r30, X
 41e:	e4 30       	cpi	r30, 0x04	; 4
 420:	b0 f5       	brcc	.+108    	; 0x48e <DIO_U8SetPinValue+0x78>
 422:	11 96       	adiw	r26, 0x01	; 1
 424:	2c 91       	ld	r18, X
 426:	11 97       	sbiw	r26, 0x01	; 1
 428:	28 30       	cpi	r18, 0x08	; 8
 42a:	98 f5       	brcc	.+102    	; 0x492 <DIO_U8SetPinValue+0x7c>
 42c:	13 96       	adiw	r26, 0x03	; 3
 42e:	8c 91       	ld	r24, X
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	a1 f4       	brne	.+40     	; 0x45c <DIO_U8SetPinValue+0x46>
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	e0 59       	subi	r30, 0x90	; 144
 43c:	ff 4f       	sbci	r31, 0xFF	; 255
 43e:	01 90       	ld	r0, Z+
 440:	f0 81       	ld	r31, Z
 442:	e0 2d       	mov	r30, r0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_U8SetPinValue+0x38>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	2a 95       	dec	r18
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_U8SetPinValue+0x34>
 452:	90 81       	ld	r25, Z
 454:	89 2b       	or	r24, r25
 456:	80 83       	st	Z, r24
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	08 95       	ret
 45c:	81 11       	cpse	r24, r1
 45e:	1b c0       	rjmp	.+54     	; 0x496 <DIO_U8SetPinValue+0x80>
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	ee 0f       	add	r30, r30
 464:	ff 1f       	adc	r31, r31
 466:	e0 59       	subi	r30, 0x90	; 144
 468:	ff 4f       	sbci	r31, 0xFF	; 255
 46a:	01 90       	ld	r0, Z+
 46c:	f0 81       	ld	r31, Z
 46e:	e0 2d       	mov	r30, r0
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_U8SetPinValue+0x64>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	2a 95       	dec	r18
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_U8SetPinValue+0x60>
 47e:	80 95       	com	r24
 480:	90 81       	ld	r25, Z
 482:	89 23       	and	r24, r25
 484:	80 83       	st	Z, r24
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	08 95       	ret
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	08 95       	ret
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	08 95       	ret
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	08 95       	ret

0000049a <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
	if(Action[0]!= NULL){
 4bc:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <Action>
 4c0:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <Action+0x1>
 4c4:	30 97       	sbiw	r30, 0x00	; 0
 4c6:	09 f0       	breq	.+2      	; 0x4ca <__vector_1+0x30>
		Action[0]();
 4c8:	09 95       	icall
	}
}
 4ca:	ff 91       	pop	r31
 4cc:	ef 91       	pop	r30
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	0f 90       	pop	r0
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	0f 90       	pop	r0
 4e8:	1f 90       	pop	r1
 4ea:	18 95       	reti

000004ec <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	2f 93       	push	r18
 4f8:	3f 93       	push	r19
 4fa:	4f 93       	push	r20
 4fc:	5f 93       	push	r21
 4fe:	6f 93       	push	r22
 500:	7f 93       	push	r23
 502:	8f 93       	push	r24
 504:	9f 93       	push	r25
 506:	af 93       	push	r26
 508:	bf 93       	push	r27
 50a:	ef 93       	push	r30
 50c:	ff 93       	push	r31
	if(Action[1]!= NULL){
 50e:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <Action+0x2>
 512:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <Action+0x3>
 516:	30 97       	sbiw	r30, 0x00	; 0
 518:	09 f0       	breq	.+2      	; 0x51c <__vector_2+0x30>
		Action[1]();
 51a:	09 95       	icall
	}
}
 51c:	ff 91       	pop	r31
 51e:	ef 91       	pop	r30
 520:	bf 91       	pop	r27
 522:	af 91       	pop	r26
 524:	9f 91       	pop	r25
 526:	8f 91       	pop	r24
 528:	7f 91       	pop	r23
 52a:	6f 91       	pop	r22
 52c:	5f 91       	pop	r21
 52e:	4f 91       	pop	r20
 530:	3f 91       	pop	r19
 532:	2f 91       	pop	r18
 534:	0f 90       	pop	r0
 536:	0f be       	out	0x3f, r0	; 63
 538:	0f 90       	pop	r0
 53a:	1f 90       	pop	r1
 53c:	18 95       	reti

0000053e <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 53e:	1f 92       	push	r1
 540:	0f 92       	push	r0
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	0f 92       	push	r0
 546:	11 24       	eor	r1, r1
 548:	2f 93       	push	r18
 54a:	3f 93       	push	r19
 54c:	4f 93       	push	r20
 54e:	5f 93       	push	r21
 550:	6f 93       	push	r22
 552:	7f 93       	push	r23
 554:	8f 93       	push	r24
 556:	9f 93       	push	r25
 558:	af 93       	push	r26
 55a:	bf 93       	push	r27
 55c:	ef 93       	push	r30
 55e:	ff 93       	push	r31
	if(Action[2]!= NULL){
 560:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <Action+0x4>
 564:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <Action+0x5>
 568:	30 97       	sbiw	r30, 0x00	; 0
 56a:	09 f0       	breq	.+2      	; 0x56e <__vector_3+0x30>
		Action[2]();
 56c:	09 95       	icall
	}
}
 56e:	ff 91       	pop	r31
 570:	ef 91       	pop	r30
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <_exit>:
 590:	f8 94       	cli

00000592 <__stop_program>:
 592:	ff cf       	rjmp	.-2      	; 0x592 <__stop_program>
