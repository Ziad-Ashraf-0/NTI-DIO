
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000008aa  0000093e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800080  00800080  0000095e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000990  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002bbf  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001089  00000000  00000000  00003893  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000166e  00000000  00000000  0000491c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000090c  00000000  00000000  00005f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013f7  00000000  00000000  00006898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e9d  00000000  00000000  00007c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00009b2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_1>
   8:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__vector_2>
   c:	0c 94 a8 02 	jmp	0x550	; 0x550 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_6>
  1c:	0c 94 c0 03 	jmp	0x780	; 0x780 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_9>
  28:	0c 94 2c 03 	jmp	0x658	; 0x658 <__vector_10>
  2c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3b       	cpi	r26, 0xB5	; 181
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  8a:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UartCallback>:
		M_TIMER1_void_setEdgeDetectionType(RISING);
	}
	else if(g_edgeCount == 3)
	{
		/* Store the Period time value */
		g_timePeriod = M_TIMER1_void_getInputCaptureValue();
  92:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__data_end>
  96:	0e 94 1c 04 	call	0x838	; 0x838 <UART_sendByte>
  9a:	08 95       	ret

0000009c <main>:
	
	//TIMER0 output pin OC0
	//DIO_Config oc0_bit = {DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT};
	//DIO_U8SetPinDirection(&oc0_bit);
	
	GIE_enable();
  9c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <GIE_enable>
	H_LCD_void_Init();
  a0:	0e 94 38 01 	call	0x270	; 0x270 <H_LCD_void_Init>
	//u32 dutyCycle = ((float)(g_timeHigh) / (g_timePeriod)) * 100;
	//H_LCD_void_sendIntNum(dutyCycle);
	//H_LCD_void_sendData('%');
	
	
	USART_Init();
  a4:	0e 94 12 04 	call	0x824	; 0x824 <USART_Init>
	UART_setReceiveCallback(UartCallback);
  a8:	89 e4       	ldi	r24, 0x49	; 73
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 24 04 	call	0x848	; 0x848 <UART_setReceiveCallback>
	UART_receiveByteAsynchCallBack();
  b0:	0e 94 20 04 	call	0x840	; 0x840 <UART_receiveByteAsynchCallBack>
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x18>

000000b6 <H_LCD_void_latchByte>:
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	64 97       	sbiw	r28, 0x14	; 20
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
  ce:	08 2f       	mov	r16, r24
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	1a 82       	std	Y+2, r1	; 0x02
  d6:	8b 83       	std	Y+3, r24	; 0x03
  d8:	04 fb       	bst	r16, 4
  da:	99 27       	eor	r25, r25
  dc:	90 f9       	bld	r25, 0
  de:	9c 83       	std	Y+4, r25	; 0x04
  e0:	8d 83       	std	Y+5, r24	; 0x05
  e2:	8e 83       	std	Y+6, r24	; 0x06
  e4:	8f 83       	std	Y+7, r24	; 0x07
  e6:	05 fb       	bst	r16, 5
  e8:	99 27       	eor	r25, r25
  ea:	90 f9       	bld	r25, 0
  ec:	98 87       	std	Y+8, r25	; 0x08
  ee:	89 87       	std	Y+9, r24	; 0x09
  f0:	92 e0       	ldi	r25, 0x02	; 2
  f2:	9a 87       	std	Y+10, r25	; 0x0a
  f4:	8b 87       	std	Y+11, r24	; 0x0b
  f6:	06 fb       	bst	r16, 6
  f8:	99 27       	eor	r25, r25
  fa:	90 f9       	bld	r25, 0
  fc:	9c 87       	std	Y+12, r25	; 0x0c
  fe:	8d 87       	std	Y+13, r24	; 0x0d
 100:	94 e0       	ldi	r25, 0x04	; 4
 102:	9e 87       	std	Y+14, r25	; 0x0e
 104:	8f 87       	std	Y+15, r24	; 0x0f
 106:	80 2f       	mov	r24, r16
 108:	88 1f       	adc	r24, r24
 10a:	88 27       	eor	r24, r24
 10c:	88 1f       	adc	r24, r24
 10e:	88 8b       	std	Y+16, r24	; 0x10
 110:	10 e0       	ldi	r17, 0x00	; 0
 112:	0f c0       	rjmp	.+30     	; 0x132 <H_LCD_void_latchByte+0x7c>
 114:	81 2f       	mov	r24, r17
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	2c 0f       	add	r18, r28
 126:	3d 1f       	adc	r19, r29
 128:	82 0f       	add	r24, r18
 12a:	93 1f       	adc	r25, r19
 12c:	0e 94 14 02 	call	0x428	; 0x428 <DIO_U8SetPinValue>
 130:	1f 5f       	subi	r17, 0xFF	; 255
 132:	14 30       	cpi	r17, 0x04	; 4
 134:	78 f3       	brcs	.-34     	; 0x114 <H_LCD_void_latchByte+0x5e>
 136:	19 8a       	std	Y+17, r1	; 0x11
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	8a 8b       	std	Y+18, r24	; 0x12
 13c:	1c 8a       	std	Y+20, r1	; 0x14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	89 ef       	ldi	r24, 0xF9	; 249
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <H_LCD_void_latchByte+0x8c>
 146:	00 c0       	rjmp	.+0      	; 0x148 <H_LCD_void_latchByte+0x92>
 148:	00 00       	nop
 14a:	ce 01       	movw	r24, r28
 14c:	41 96       	adiw	r24, 0x11	; 17
 14e:	0e 94 14 02 	call	0x428	; 0x428 <DIO_U8SetPinValue>
 152:	e9 ef       	ldi	r30, 0xF9	; 249
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <H_LCD_void_latchByte+0xa0>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <H_LCD_void_latchByte+0xa6>
 15c:	00 00       	nop
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	8c 8b       	std	Y+20, r24	; 0x14
 162:	ce 01       	movw	r24, r28
 164:	41 96       	adiw	r24, 0x11	; 17
 166:	0e 94 14 02 	call	0x428	; 0x428 <DIO_U8SetPinValue>
 16a:	89 ef       	ldi	r24, 0xF9	; 249
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <H_LCD_void_latchByte+0xb8>
 172:	00 c0       	rjmp	.+0      	; 0x174 <H_LCD_void_latchByte+0xbe>
 174:	00 00       	nop
 176:	10 e0       	ldi	r17, 0x00	; 0
 178:	1a c0       	rjmp	.+52     	; 0x1ae <H_LCD_void_latchByte+0xf8>
 17a:	81 2f       	mov	r24, r17
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	20 2f       	mov	r18, r16
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	01 2e       	mov	r0, r17
 184:	02 c0       	rjmp	.+4      	; 0x18a <H_LCD_void_latchByte+0xd4>
 186:	35 95       	asr	r19
 188:	27 95       	ror	r18
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <H_LCD_void_latchByte+0xd0>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	e1 e0       	ldi	r30, 0x01	; 1
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ec 0f       	add	r30, r28
 19c:	fd 1f       	adc	r31, r29
 19e:	8e 0f       	add	r24, r30
 1a0:	9f 1f       	adc	r25, r31
 1a2:	21 70       	andi	r18, 0x01	; 1
 1a4:	fc 01       	movw	r30, r24
 1a6:	23 83       	std	Z+3, r18	; 0x03
 1a8:	0e 94 14 02 	call	0x428	; 0x428 <DIO_U8SetPinValue>
 1ac:	1f 5f       	subi	r17, 0xFF	; 255
 1ae:	14 30       	cpi	r17, 0x04	; 4
 1b0:	20 f3       	brcs	.-56     	; 0x17a <H_LCD_void_latchByte+0xc4>
 1b2:	89 ef       	ldi	r24, 0xF9	; 249
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <H_LCD_void_latchByte+0x100>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <H_LCD_void_latchByte+0x106>
 1bc:	00 00       	nop
 1be:	1c 8a       	std	Y+20, r1	; 0x14
 1c0:	ce 01       	movw	r24, r28
 1c2:	41 96       	adiw	r24, 0x11	; 17
 1c4:	0e 94 14 02 	call	0x428	; 0x428 <DIO_U8SetPinValue>
 1c8:	e9 ef       	ldi	r30, 0xF9	; 249
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <H_LCD_void_latchByte+0x116>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <H_LCD_void_latchByte+0x11c>
 1d2:	00 00       	nop
 1d4:	64 96       	adiw	r28, 0x14	; 20
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	de bf       	out	0x3e, r29	; 62
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <H_LCD_void_sendCommand>:
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	28 97       	sbiw	r28, 0x08	; 8
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	08 2f       	mov	r16, r24
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	e0 e6       	ldi	r30, 0x60	; 96
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	de 01       	movw	r26, r28
 20c:	11 96       	adiw	r26, 0x01	; 1
 20e:	01 90       	ld	r0, Z+
 210:	0d 92       	st	X+, r0
 212:	8a 95       	dec	r24
 214:	e1 f7       	brne	.-8      	; 0x20e <H_LCD_void_sendCommand+0x24>
 216:	10 e0       	ldi	r17, 0x00	; 0
 218:	15 c0       	rjmp	.+42     	; 0x244 <H_LCD_void_sendCommand+0x5a>
 21a:	81 2f       	mov	r24, r17
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	2c 0f       	add	r18, r28
 22c:	3d 1f       	adc	r19, r29
 22e:	82 0f       	add	r24, r18
 230:	93 1f       	adc	r25, r19
 232:	0e 94 14 02 	call	0x428	; 0x428 <DIO_U8SetPinValue>
 236:	89 ef       	ldi	r24, 0xF9	; 249
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <H_LCD_void_sendCommand+0x50>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <H_LCD_void_sendCommand+0x56>
 240:	00 00       	nop
 242:	1f 5f       	subi	r17, 0xFF	; 255
 244:	12 30       	cpi	r17, 0x02	; 2
 246:	48 f3       	brcs	.-46     	; 0x21a <H_LCD_void_sendCommand+0x30>
 248:	89 ef       	ldi	r24, 0xF9	; 249
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <H_LCD_void_sendCommand+0x62>
 250:	00 c0       	rjmp	.+0      	; 0x252 <H_LCD_void_sendCommand+0x68>
 252:	00 00       	nop
 254:	80 2f       	mov	r24, r16
 256:	0e 94 5b 00 	call	0xb6	; 0xb6 <H_LCD_void_latchByte>
 25a:	28 96       	adiw	r28, 0x08	; 8
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	08 95       	ret

00000270 <H_LCD_void_Init>:
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	68 97       	sbiw	r28, 0x18	; 24
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
 286:	fe 01       	movw	r30, r28
 288:	31 96       	adiw	r30, 0x01	; 1
 28a:	88 e0       	ldi	r24, 0x08	; 8
 28c:	df 01       	movw	r26, r30
 28e:	1d 92       	st	X+, r1
 290:	8a 95       	dec	r24
 292:	e9 f7       	brne	.-6      	; 0x28e <H_LCD_void_Init+0x1e>
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	8a 83       	std	Y+2, r24	; 0x02
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	8b 83       	std	Y+3, r24	; 0x03
 29c:	92 e0       	ldi	r25, 0x02	; 2
 29e:	9e 83       	std	Y+6, r25	; 0x06
 2a0:	8f 83       	std	Y+7, r24	; 0x07
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <H_LCD_void_Init+0x54>
 2a6:	81 2f       	mov	r24, r17
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	21 e0       	ldi	r18, 0x01	; 1
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	2c 0f       	add	r18, r28
 2b8:	3d 1f       	adc	r19, r29
 2ba:	82 0f       	add	r24, r18
 2bc:	93 1f       	adc	r25, r19
 2be:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_U8SetPinDirection>
 2c2:	1f 5f       	subi	r17, 0xFF	; 255
 2c4:	12 30       	cpi	r17, 0x02	; 2
 2c6:	78 f3       	brcs	.-34     	; 0x2a6 <H_LCD_void_Init+0x36>
 2c8:	fe 01       	movw	r30, r28
 2ca:	39 96       	adiw	r30, 0x09	; 9
 2cc:	80 e1       	ldi	r24, 0x10	; 16
 2ce:	df 01       	movw	r26, r30
 2d0:	1d 92       	st	X+, r1
 2d2:	8a 95       	dec	r24
 2d4:	e9 f7       	brne	.-6      	; 0x2d0 <H_LCD_void_Init+0x60>
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	89 87       	std	Y+9, r24	; 0x09
 2da:	8b 87       	std	Y+11, r24	; 0x0b
 2dc:	8d 87       	std	Y+13, r24	; 0x0d
 2de:	8e 87       	std	Y+14, r24	; 0x0e
 2e0:	8f 87       	std	Y+15, r24	; 0x0f
 2e2:	89 8b       	std	Y+17, r24	; 0x11
 2e4:	92 e0       	ldi	r25, 0x02	; 2
 2e6:	9a 8b       	std	Y+18, r25	; 0x12
 2e8:	8b 8b       	std	Y+19, r24	; 0x13
 2ea:	8d 8b       	std	Y+21, r24	; 0x15
 2ec:	94 e0       	ldi	r25, 0x04	; 4
 2ee:	9e 8b       	std	Y+22, r25	; 0x16
 2f0:	8f 8b       	std	Y+23, r24	; 0x17
 2f2:	10 e0       	ldi	r17, 0x00	; 0
 2f4:	0f c0       	rjmp	.+30     	; 0x314 <H_LCD_void_Init+0xa4>
 2f6:	81 2f       	mov	r24, r17
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	29 e0       	ldi	r18, 0x09	; 9
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	2c 0f       	add	r18, r28
 308:	3d 1f       	adc	r19, r29
 30a:	82 0f       	add	r24, r18
 30c:	93 1f       	adc	r25, r19
 30e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <DIO_U8SetPinDirection>
 312:	1f 5f       	subi	r17, 0xFF	; 255
 314:	14 30       	cpi	r17, 0x04	; 4
 316:	78 f3       	brcs	.-34     	; 0x2f6 <H_LCD_void_Init+0x86>
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <H_LCD_void_sendCommand>
 31e:	89 ef       	ldi	r24, 0xF9	; 249
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <H_LCD_void_Init+0xb2>
 326:	00 c0       	rjmp	.+0      	; 0x328 <H_LCD_void_Init+0xb8>
 328:	00 00       	nop
 32a:	88 e2       	ldi	r24, 0x28	; 40
 32c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <H_LCD_void_sendCommand>
 330:	a9 ef       	ldi	r26, 0xF9	; 249
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	11 97       	sbiw	r26, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <H_LCD_void_Init+0xc4>
 338:	00 c0       	rjmp	.+0      	; 0x33a <H_LCD_void_Init+0xca>
 33a:	00 00       	nop
 33c:	8f e0       	ldi	r24, 0x0F	; 15
 33e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <H_LCD_void_sendCommand>
 342:	89 ef       	ldi	r24, 0xF9	; 249
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <H_LCD_void_Init+0xd6>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <H_LCD_void_Init+0xdc>
 34c:	00 00       	nop
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 f5 00 	call	0x1ea	; 0x1ea <H_LCD_void_sendCommand>
 354:	a3 ef       	ldi	r26, 0xF3	; 243
 356:	b1 e0       	ldi	r27, 0x01	; 1
 358:	11 97       	sbiw	r26, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <H_LCD_void_Init+0xe8>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <H_LCD_void_Init+0xee>
 35e:	00 00       	nop
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	0e 94 f5 00 	call	0x1ea	; 0x1ea <H_LCD_void_sendCommand>
 366:	68 96       	adiw	r28, 0x18	; 24
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	08 95       	ret

0000037a <__vector_16>:
 37a:	24 b1       	in	r18, 0x04	; 4
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	00 24       	eor	r0, r0
 380:	22 0f       	add	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	00 1c       	adc	r0, r0
 386:	22 0f       	add	r18, r18
 388:	33 1f       	adc	r19, r19
 38a:	00 1c       	adc	r0, r0
 38c:	23 2f       	mov	r18, r19
 38e:	30 2d       	mov	r19, r0
 390:	85 b1       	in	r24, 0x05	; 5
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <ADC_callBack>
 3a0:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <ADC_callBack+0x1>
 3a4:	82 2b       	or	r24, r18
 3a6:	93 2b       	or	r25, r19
 3a8:	09 95       	icall
 3aa:	08 95       	ret

000003ac <DIO_U8SetPinDirection>:
 3ac:	dc 01       	movw	r26, r24
 3ae:	ec 91       	ld	r30, X
 3b0:	e4 30       	cpi	r30, 0x04	; 4
 3b2:	a0 f5       	brcc	.+104    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3b4:	11 96       	adiw	r26, 0x01	; 1
 3b6:	2c 91       	ld	r18, X
 3b8:	11 97       	sbiw	r26, 0x01	; 1
 3ba:	28 30       	cpi	r18, 0x08	; 8
 3bc:	88 f5       	brcc	.+98     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3be:	12 96       	adiw	r26, 0x02	; 2
 3c0:	8c 91       	ld	r24, X
 3c2:	81 11       	cpse	r24, r1
 3c4:	15 c0       	rjmp	.+42     	; 0x3f0 <DIO_U8SetPinDirection+0x44>
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	ee 0f       	add	r30, r30
 3ca:	ff 1f       	adc	r31, r31
 3cc:	e8 58       	subi	r30, 0x88	; 136
 3ce:	ff 4f       	sbci	r31, 0xFF	; 255
 3d0:	01 90       	ld	r0, Z+
 3d2:	f0 81       	ld	r31, Z
 3d4:	e0 2d       	mov	r30, r0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_U8SetPinDirection+0x34>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	2a 95       	dec	r18
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_U8SetPinDirection+0x30>
 3e4:	80 95       	com	r24
 3e6:	90 81       	ld	r25, Z
 3e8:	89 23       	and	r24, r25
 3ea:	80 83       	st	Z, r24
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	08 95       	ret
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	c1 f4       	brne	.+48     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	e8 58       	subi	r30, 0x88	; 136
 3fc:	ff 4f       	sbci	r31, 0xFF	; 255
 3fe:	01 90       	ld	r0, Z+
 400:	f0 81       	ld	r31, Z
 402:	e0 2d       	mov	r30, r0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	2a 95       	dec	r18
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	90 81       	ld	r25, Z
 414:	89 2b       	or	r24, r25
 416:	80 83       	st	Z, r24
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	08 95       	ret
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	08 95       	ret
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	08 95       	ret
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	08 95       	ret

00000428 <DIO_U8SetPinValue>:
 428:	00 97       	sbiw	r24, 0x00	; 0
 42a:	c1 f1       	breq	.+112    	; 0x49c <DIO_U8SetPinValue+0x74>
 42c:	dc 01       	movw	r26, r24
 42e:	ec 91       	ld	r30, X
 430:	e4 30       	cpi	r30, 0x04	; 4
 432:	b0 f5       	brcc	.+108    	; 0x4a0 <DIO_U8SetPinValue+0x78>
 434:	11 96       	adiw	r26, 0x01	; 1
 436:	2c 91       	ld	r18, X
 438:	11 97       	sbiw	r26, 0x01	; 1
 43a:	28 30       	cpi	r18, 0x08	; 8
 43c:	98 f5       	brcc	.+102    	; 0x4a4 <DIO_U8SetPinValue+0x7c>
 43e:	13 96       	adiw	r26, 0x03	; 3
 440:	8c 91       	ld	r24, X
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	a1 f4       	brne	.+40     	; 0x46e <DIO_U8SetPinValue+0x46>
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	ee 0f       	add	r30, r30
 44a:	ff 1f       	adc	r31, r31
 44c:	e0 59       	subi	r30, 0x90	; 144
 44e:	ff 4f       	sbci	r31, 0xFF	; 255
 450:	01 90       	ld	r0, Z+
 452:	f0 81       	ld	r31, Z
 454:	e0 2d       	mov	r30, r0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_U8SetPinValue+0x38>
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	2a 95       	dec	r18
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_U8SetPinValue+0x34>
 464:	90 81       	ld	r25, Z
 466:	89 2b       	or	r24, r25
 468:	80 83       	st	Z, r24
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	08 95       	ret
 46e:	81 11       	cpse	r24, r1
 470:	1b c0       	rjmp	.+54     	; 0x4a8 <DIO_U8SetPinValue+0x80>
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	ee 0f       	add	r30, r30
 476:	ff 1f       	adc	r31, r31
 478:	e0 59       	subi	r30, 0x90	; 144
 47a:	ff 4f       	sbci	r31, 0xFF	; 255
 47c:	01 90       	ld	r0, Z+
 47e:	f0 81       	ld	r31, Z
 480:	e0 2d       	mov	r30, r0
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_U8SetPinValue+0x64>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	2a 95       	dec	r18
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_U8SetPinValue+0x60>
 490:	80 95       	com	r24
 492:	90 81       	ld	r25, Z
 494:	89 23       	and	r24, r25
 496:	80 83       	st	Z, r24
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	08 95       	ret
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	08 95       	ret
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	08 95       	ret
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	08 95       	ret
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	08 95       	ret

000004ac <__vector_1>:
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	11 24       	eor	r1, r1
 4b6:	2f 93       	push	r18
 4b8:	3f 93       	push	r19
 4ba:	4f 93       	push	r20
 4bc:	5f 93       	push	r21
 4be:	6f 93       	push	r22
 4c0:	7f 93       	push	r23
 4c2:	8f 93       	push	r24
 4c4:	9f 93       	push	r25
 4c6:	af 93       	push	r26
 4c8:	bf 93       	push	r27
 4ca:	ef 93       	push	r30
 4cc:	ff 93       	push	r31
 4ce:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <Action>
 4d2:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <Action+0x1>
 4d6:	30 97       	sbiw	r30, 0x00	; 0
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__vector_1+0x30>
 4da:	09 95       	icall
 4dc:	ff 91       	pop	r31
 4de:	ef 91       	pop	r30
 4e0:	bf 91       	pop	r27
 4e2:	af 91       	pop	r26
 4e4:	9f 91       	pop	r25
 4e6:	8f 91       	pop	r24
 4e8:	7f 91       	pop	r23
 4ea:	6f 91       	pop	r22
 4ec:	5f 91       	pop	r21
 4ee:	4f 91       	pop	r20
 4f0:	3f 91       	pop	r19
 4f2:	2f 91       	pop	r18
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <__vector_2>:
 4fe:	1f 92       	push	r1
 500:	0f 92       	push	r0
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	0f 92       	push	r0
 506:	11 24       	eor	r1, r1
 508:	2f 93       	push	r18
 50a:	3f 93       	push	r19
 50c:	4f 93       	push	r20
 50e:	5f 93       	push	r21
 510:	6f 93       	push	r22
 512:	7f 93       	push	r23
 514:	8f 93       	push	r24
 516:	9f 93       	push	r25
 518:	af 93       	push	r26
 51a:	bf 93       	push	r27
 51c:	ef 93       	push	r30
 51e:	ff 93       	push	r31
 520:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <Action+0x2>
 524:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <Action+0x3>
 528:	30 97       	sbiw	r30, 0x00	; 0
 52a:	09 f0       	breq	.+2      	; 0x52e <__vector_2+0x30>
 52c:	09 95       	icall
 52e:	ff 91       	pop	r31
 530:	ef 91       	pop	r30
 532:	bf 91       	pop	r27
 534:	af 91       	pop	r26
 536:	9f 91       	pop	r25
 538:	8f 91       	pop	r24
 53a:	7f 91       	pop	r23
 53c:	6f 91       	pop	r22
 53e:	5f 91       	pop	r21
 540:	4f 91       	pop	r20
 542:	3f 91       	pop	r19
 544:	2f 91       	pop	r18
 546:	0f 90       	pop	r0
 548:	0f be       	out	0x3f, r0	; 63
 54a:	0f 90       	pop	r0
 54c:	1f 90       	pop	r1
 54e:	18 95       	reti

00000550 <__vector_3>:
 550:	1f 92       	push	r1
 552:	0f 92       	push	r0
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	0f 92       	push	r0
 558:	11 24       	eor	r1, r1
 55a:	2f 93       	push	r18
 55c:	3f 93       	push	r19
 55e:	4f 93       	push	r20
 560:	5f 93       	push	r21
 562:	6f 93       	push	r22
 564:	7f 93       	push	r23
 566:	8f 93       	push	r24
 568:	9f 93       	push	r25
 56a:	af 93       	push	r26
 56c:	bf 93       	push	r27
 56e:	ef 93       	push	r30
 570:	ff 93       	push	r31
 572:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <Action+0x4>
 576:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <Action+0x5>
 57a:	30 97       	sbiw	r30, 0x00	; 0
 57c:	09 f0       	breq	.+2      	; 0x580 <__vector_3+0x30>
 57e:	09 95       	icall
 580:	ff 91       	pop	r31
 582:	ef 91       	pop	r30
 584:	bf 91       	pop	r27
 586:	af 91       	pop	r26
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	7f 91       	pop	r23
 58e:	6f 91       	pop	r22
 590:	5f 91       	pop	r21
 592:	4f 91       	pop	r20
 594:	3f 91       	pop	r19
 596:	2f 91       	pop	r18
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <GIE_enable>:
 5a2:	78 94       	sei
 5a4:	08 95       	ret

000005a6 <__vector_11>:
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	6f 93       	push	r22
 5ba:	7f 93       	push	r23
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	af 93       	push	r26
 5c2:	bf 93       	push	r27
 5c4:	ef 93       	push	r30
 5c6:	ff 93       	push	r31
 5c8:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <Action_Timer>
 5cc:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <Action_Timer+0x1>
 5d0:	89 2b       	or	r24, r25
 5d2:	89 f1       	breq	.+98     	; 0x636 <__vector_11+0x90>
 5d4:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <counter.1685>
 5d8:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <counter.1685+0x1>
 5dc:	a0 91 8b 00 	lds	r26, 0x008B	; 0x80008b <counter.1685+0x2>
 5e0:	b0 91 8c 00 	lds	r27, 0x008C	; 0x80008c <counter.1685+0x3>
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	a1 1d       	adc	r26, r1
 5e8:	b1 1d       	adc	r27, r1
 5ea:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <counter.1685>
 5ee:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <counter.1685+0x1>
 5f2:	a0 93 8b 00 	sts	0x008B, r26	; 0x80008b <counter.1685+0x2>
 5f6:	b0 93 8c 00 	sts	0x008C, r27	; 0x80008c <counter.1685+0x3>
 5fa:	40 91 95 00 	lds	r20, 0x0095	; 0x800095 <numOverflows>
 5fe:	50 91 96 00 	lds	r21, 0x0096	; 0x800096 <numOverflows+0x1>
 602:	60 91 97 00 	lds	r22, 0x0097	; 0x800097 <numOverflows+0x2>
 606:	70 91 98 00 	lds	r23, 0x0098	; 0x800098 <numOverflows+0x3>
 60a:	84 17       	cp	r24, r20
 60c:	95 07       	cpc	r25, r21
 60e:	a6 07       	cpc	r26, r22
 610:	b7 07       	cpc	r27, r23
 612:	89 f4       	brne	.+34     	; 0x636 <__vector_11+0x90>
 614:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <remainingCounts>
 618:	81 95       	neg	r24
 61a:	82 bf       	out	0x32, r24	; 50
 61c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <counter.1685>
 620:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <counter.1685+0x1>
 624:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <counter.1685+0x2>
 628:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <counter.1685+0x3>
 62c:	e0 91 8d 00 	lds	r30, 0x008D	; 0x80008d <Action_Timer>
 630:	f0 91 8e 00 	lds	r31, 0x008E	; 0x80008e <Action_Timer+0x1>
 634:	09 95       	icall
 636:	ff 91       	pop	r31
 638:	ef 91       	pop	r30
 63a:	bf 91       	pop	r27
 63c:	af 91       	pop	r26
 63e:	9f 91       	pop	r25
 640:	8f 91       	pop	r24
 642:	7f 91       	pop	r23
 644:	6f 91       	pop	r22
 646:	5f 91       	pop	r21
 648:	4f 91       	pop	r20
 64a:	3f 91       	pop	r19
 64c:	2f 91       	pop	r18
 64e:	0f 90       	pop	r0
 650:	0f be       	out	0x3f, r0	; 63
 652:	0f 90       	pop	r0
 654:	1f 90       	pop	r1
 656:	18 95       	reti

00000658 <__vector_10>:
 658:	1f 92       	push	r1
 65a:	0f 92       	push	r0
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	0f 92       	push	r0
 660:	11 24       	eor	r1, r1
 662:	2f 93       	push	r18
 664:	3f 93       	push	r19
 666:	4f 93       	push	r20
 668:	5f 93       	push	r21
 66a:	6f 93       	push	r22
 66c:	7f 93       	push	r23
 66e:	8f 93       	push	r24
 670:	9f 93       	push	r25
 672:	af 93       	push	r26
 674:	bf 93       	push	r27
 676:	ef 93       	push	r30
 678:	ff 93       	push	r31
 67a:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <Action_Timer+0x2>
 67e:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <Action_Timer+0x3>
 682:	30 97       	sbiw	r30, 0x00	; 0
 684:	09 f0       	breq	.+2      	; 0x688 <__vector_10+0x30>
 686:	09 95       	icall
 688:	ff 91       	pop	r31
 68a:	ef 91       	pop	r30
 68c:	bf 91       	pop	r27
 68e:	af 91       	pop	r26
 690:	9f 91       	pop	r25
 692:	8f 91       	pop	r24
 694:	7f 91       	pop	r23
 696:	6f 91       	pop	r22
 698:	5f 91       	pop	r21
 69a:	4f 91       	pop	r20
 69c:	3f 91       	pop	r19
 69e:	2f 91       	pop	r18
 6a0:	0f 90       	pop	r0
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	0f 90       	pop	r0
 6a6:	1f 90       	pop	r1
 6a8:	18 95       	reti

000006aa <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 6aa:	1f 92       	push	r1
 6ac:	0f 92       	push	r0
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	0f 92       	push	r0
 6b2:	11 24       	eor	r1, r1
 6b4:	2f 93       	push	r18
 6b6:	3f 93       	push	r19
 6b8:	4f 93       	push	r20
 6ba:	5f 93       	push	r21
 6bc:	6f 93       	push	r22
 6be:	7f 93       	push	r23
 6c0:	8f 93       	push	r24
 6c2:	9f 93       	push	r25
 6c4:	af 93       	push	r26
 6c6:	bf 93       	push	r27
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	ef 93       	push	r30
 6ce:	ff 93       	push	r31
	Action_Timer[0]();
 6d0:	cd e9       	ldi	r28, 0x9D	; 157
 6d2:	d0 e0       	ldi	r29, 0x00	; 0
 6d4:	e8 81       	ld	r30, Y
 6d6:	f9 81       	ldd	r31, Y+1	; 0x01
 6d8:	09 95       	icall
	numOverflows++;
 6da:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <numOverflows>
 6de:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <numOverflows+0x1>
 6e2:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <numOverflows+0x2>
 6e6:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <numOverflows+0x3>
 6ea:	01 96       	adiw	r24, 0x01	; 1
 6ec:	a1 1d       	adc	r26, r1
 6ee:	b1 1d       	adc	r27, r1
 6f0:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <numOverflows>
 6f4:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <numOverflows+0x1>
 6f8:	a0 93 a7 00 	sts	0x00A7, r26	; 0x8000a7 <numOverflows+0x2>
 6fc:	b0 93 a8 00 	sts	0x00A8, r27	; 0x8000a8 <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 700:	e8 81       	ld	r30, Y
 702:	f9 81       	ldd	r31, Y+1	; 0x01
 704:	30 97       	sbiw	r30, 0x00	; 0
 706:	49 f1       	breq	.+82     	; 0x75a <__vector_9+0xb0>
		counter++;
 708:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <counter.1744>
 70c:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <counter.1744+0x1>
 710:	a0 91 9b 00 	lds	r26, 0x009B	; 0x80009b <counter.1744+0x2>
 714:	b0 91 9c 00 	lds	r27, 0x009C	; 0x80009c <counter.1744+0x3>
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	a1 1d       	adc	r26, r1
 71c:	b1 1d       	adc	r27, r1
 71e:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <counter.1744>
 722:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <counter.1744+0x1>
 726:	a0 93 9b 00 	sts	0x009B, r26	; 0x80009b <counter.1744+0x2>
 72a:	b0 93 9c 00 	sts	0x009C, r27	; 0x80009c <counter.1744+0x3>
		if(counter == req_numOverflows){
 72e:	40 91 a9 00 	lds	r20, 0x00A9	; 0x8000a9 <req_numOverflows>
 732:	50 91 aa 00 	lds	r21, 0x00AA	; 0x8000aa <req_numOverflows+0x1>
 736:	60 91 ab 00 	lds	r22, 0x00AB	; 0x8000ab <req_numOverflows+0x2>
 73a:	70 91 ac 00 	lds	r23, 0x00AC	; 0x8000ac <req_numOverflows+0x3>
 73e:	84 17       	cp	r24, r20
 740:	95 07       	cpc	r25, r21
 742:	a6 07       	cpc	r26, r22
 744:	b7 07       	cpc	r27, r23
 746:	49 f4       	brne	.+18     	; 0x75a <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 748:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <counter.1744>
 74c:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <counter.1744+0x1>
 750:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <counter.1744+0x2>
 754:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <counter.1744+0x3>
			Action_Timer[0]();
 758:	09 95       	icall
		}
		
	}
}
 75a:	ff 91       	pop	r31
 75c:	ef 91       	pop	r30
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	bf 91       	pop	r27
 764:	af 91       	pop	r26
 766:	9f 91       	pop	r25
 768:	8f 91       	pop	r24
 76a:	7f 91       	pop	r23
 76c:	6f 91       	pop	r22
 76e:	5f 91       	pop	r21
 770:	4f 91       	pop	r20
 772:	3f 91       	pop	r19
 774:	2f 91       	pop	r18
 776:	0f 90       	pop	r0
 778:	0f be       	out	0x3f, r0	; 63
 77a:	0f 90       	pop	r0
 77c:	1f 90       	pop	r1
 77e:	18 95       	reti

00000780 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 780:	1f 92       	push	r1
 782:	0f 92       	push	r0
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	0f 92       	push	r0
 788:	11 24       	eor	r1, r1
 78a:	2f 93       	push	r18
 78c:	3f 93       	push	r19
 78e:	4f 93       	push	r20
 790:	5f 93       	push	r21
 792:	6f 93       	push	r22
 794:	7f 93       	push	r23
 796:	8f 93       	push	r24
 798:	9f 93       	push	r25
 79a:	af 93       	push	r26
 79c:	bf 93       	push	r27
 79e:	ef 93       	push	r30
 7a0:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 7a2:	e0 91 9f 00 	lds	r30, 0x009F	; 0x80009f <Action_Timer+0x2>
 7a6:	f0 91 a0 00 	lds	r31, 0x00A0	; 0x8000a0 <Action_Timer+0x3>
 7aa:	30 97       	sbiw	r30, 0x00	; 0
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <__vector_7+0x30>
		Action_Timer[1]();
 7ae:	09 95       	icall
	}
}
 7b0:	ff 91       	pop	r31
 7b2:	ef 91       	pop	r30
 7b4:	bf 91       	pop	r27
 7b6:	af 91       	pop	r26
 7b8:	9f 91       	pop	r25
 7ba:	8f 91       	pop	r24
 7bc:	7f 91       	pop	r23
 7be:	6f 91       	pop	r22
 7c0:	5f 91       	pop	r21
 7c2:	4f 91       	pop	r20
 7c4:	3f 91       	pop	r19
 7c6:	2f 91       	pop	r18
 7c8:	0f 90       	pop	r0
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	0f 90       	pop	r0
 7ce:	1f 90       	pop	r1
 7d0:	18 95       	reti

000007d2 <__vector_6>:


ISR(TIMER1_CAPT_vect){
 7d2:	1f 92       	push	r1
 7d4:	0f 92       	push	r0
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	0f 92       	push	r0
 7da:	11 24       	eor	r1, r1
 7dc:	2f 93       	push	r18
 7de:	3f 93       	push	r19
 7e0:	4f 93       	push	r20
 7e2:	5f 93       	push	r21
 7e4:	6f 93       	push	r22
 7e6:	7f 93       	push	r23
 7e8:	8f 93       	push	r24
 7ea:	9f 93       	push	r25
 7ec:	af 93       	push	r26
 7ee:	bf 93       	push	r27
 7f0:	ef 93       	push	r30
 7f2:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 7f4:	e0 91 a3 00 	lds	r30, 0x00A3	; 0x8000a3 <Action_Timer+0x6>
 7f8:	f0 91 a4 00 	lds	r31, 0x00A4	; 0x8000a4 <Action_Timer+0x7>
 7fc:	30 97       	sbiw	r30, 0x00	; 0
 7fe:	09 f0       	breq	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			Action_Timer[3]();
 800:	09 95       	icall
			
			
		}
 802:	ff 91       	pop	r31
 804:	ef 91       	pop	r30
 806:	bf 91       	pop	r27
 808:	af 91       	pop	r26
 80a:	9f 91       	pop	r25
 80c:	8f 91       	pop	r24
 80e:	7f 91       	pop	r23
 810:	6f 91       	pop	r22
 812:	5f 91       	pop	r21
 814:	4f 91       	pop	r20
 816:	3f 91       	pop	r19
 818:	2f 91       	pop	r18
 81a:	0f 90       	pop	r0
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	0f 90       	pop	r0
 820:	1f 90       	pop	r1
 822:	18 95       	reti

00000824 <USART_Init>:
		Str[i] = MUART_voidRecieveByteSynch();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
}
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	8b b9       	out	0x0b, r24	; 11
 828:	88 e1       	ldi	r24, 0x18	; 24
 82a:	8a b9       	out	0x0a, r24	; 10
 82c:	86 e8       	ldi	r24, 0x86	; 134
 82e:	80 bd       	out	0x20, r24	; 32
 830:	10 bc       	out	0x20, r1	; 32
 832:	87 e6       	ldi	r24, 0x67	; 103
 834:	89 b9       	out	0x09, r24	; 9
 836:	08 95       	ret

00000838 <UART_sendByte>:
 838:	5d 9b       	sbis	0x0b, 5	; 11
 83a:	fe cf       	rjmp	.-4      	; 0x838 <UART_sendByte>
 83c:	8c b9       	out	0x0c, r24	; 12
 83e:	08 95       	ret

00000840 <UART_receiveByteAsynchCallBack>:

void UART_receiveByteAsynchCallBack() {
	// Enable UART receiver interrupt
	UCSRB |= (1 << RXCIE);
 840:	8a b1       	in	r24, 0x0a	; 10
 842:	80 68       	ori	r24, 0x80	; 128
 844:	8a b9       	out	0x0a, r24	; 10
 846:	08 95       	ret

00000848 <UART_setReceiveCallback>:
}

void UART_setReceiveCallback(void (*ptrfn)(u8)){
	Action_Uart[0] = ptrfn;
 848:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <Action_Uart+0x1>
 84c:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <Action_Uart>
 850:	08 95       	ret

00000852 <__vector_13>:
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 852:	1f 92       	push	r1
 854:	0f 92       	push	r0
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	0f 92       	push	r0
 85a:	11 24       	eor	r1, r1
 85c:	2f 93       	push	r18
 85e:	3f 93       	push	r19
 860:	4f 93       	push	r20
 862:	5f 93       	push	r21
 864:	6f 93       	push	r22
 866:	7f 93       	push	r23
 868:	8f 93       	push	r24
 86a:	9f 93       	push	r25
 86c:	af 93       	push	r26
 86e:	bf 93       	push	r27
 870:	ef 93       	push	r30
 872:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 874:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 876:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <Action_Uart>
 87a:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <Action_Uart+0x1>
 87e:	30 97       	sbiw	r30, 0x00	; 0
 880:	09 f0       	breq	.+2      	; 0x884 <__stack+0x25>
		Action_Uart[0](receivedData);
 882:	09 95       	icall
	}
 884:	ff 91       	pop	r31
 886:	ef 91       	pop	r30
 888:	bf 91       	pop	r27
 88a:	af 91       	pop	r26
 88c:	9f 91       	pop	r25
 88e:	8f 91       	pop	r24
 890:	7f 91       	pop	r23
 892:	6f 91       	pop	r22
 894:	5f 91       	pop	r21
 896:	4f 91       	pop	r20
 898:	3f 91       	pop	r19
 89a:	2f 91       	pop	r18
 89c:	0f 90       	pop	r0
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	0f 90       	pop	r0
 8a2:	1f 90       	pop	r1
 8a4:	18 95       	reti

000008a6 <_exit>:
 8a6:	f8 94       	cli

000008a8 <__stop_program>:
 8a8:	ff cf       	rjmp	.-2      	; 0x8a8 <__stop_program>
