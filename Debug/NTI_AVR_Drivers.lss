
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000115c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  0000115c  000011f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  0080009e  0080009e  0000122e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000388  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003a4e  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013a9  00000000  00000000  00005072  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d57  00000000  00000000  0000641b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000aac  00000000  00000000  00008174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001663  00000000  00000000  00008c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022f3  00000000  00000000  0000a283  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000c576  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <__vector_1>
       8:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__vector_2>
       c:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__vector_6>
      1c:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__vector_9>
      28:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__vector_10>
      2c:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__vector_11>
      30:	0c 94 a7 06 	jmp	0xd4e	; 0xd4e <__vector_12>
      34:	0c 94 41 08 	jmp	0x1082	; 0x1082 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 93 05 	jmp	0xb26	; 0xb26 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3d       	cpi	r26, 0xD2	; 210
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "../HAL/RTC/RTC_interface.h"
#include <util/delay.h>



int main(void) {
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	2e 97       	sbiw	r28, 0x0e	; 14
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	H_LCD_void_Init();
      a6:	0e 94 ac 01 	call	0x358	; 0x358 <H_LCD_void_Init>
	H_RTC_void_Init();
      aa:	0e 94 bd 02 	call	0x57a	; 0x57a <H_RTC_void_Init>
	Time_Config config = {10,18,59,HOUR_12,PM};
      ae:	85 e0       	ldi	r24, 0x05	; 5
      b0:	e0 e6       	ldi	r30, 0x60	; 96
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	de 01       	movw	r26, r28
      b6:	11 96       	adiw	r26, 0x01	; 1
      b8:	01 90       	ld	r0, Z+
      ba:	0d 92       	st	X+, r0
      bc:	8a 95       	dec	r24
      be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x26>
	H_RTC_void_setTime(&config);
      c0:	ce 01       	movw	r24, r28
      c2:	01 96       	adiw	r24, 0x01	; 1
      c4:	0e 94 cf 02 	call	0x59e	; 0x59e <H_RTC_void_setTime>
	Date_config date_config = {Monday,25,10,23};
      c8:	83 e0       	ldi	r24, 0x03	; 3
      ca:	8e 83       	std	Y+6, r24	; 0x06
      cc:	89 e1       	ldi	r24, 0x19	; 25
      ce:	8f 83       	std	Y+7, r24	; 0x07
      d0:	8a e0       	ldi	r24, 0x0A	; 10
      d2:	88 87       	std	Y+8, r24	; 0x08
      d4:	87 e1       	ldi	r24, 0x17	; 23
      d6:	89 87       	std	Y+9, r24	; 0x09
	H_RTC_void_setDate(&date_config);
      d8:	ce 01       	movw	r24, r28
      da:	06 96       	adiw	r24, 0x06	; 6
      dc:	0e 94 3e 04 	call	0x87c	; 0x87c <H_RTC_void_setDate>
	Time_Config time;
	
	while (1) {
		H_LCD_void_clearScreen();
      e0:	0e 94 b9 02 	call	0x572	; 0x572 <H_LCD_void_clearScreen>
		H_RTC_void_getDate(&date_config);
      e4:	ce 01       	movw	r24, r28
      e6:	06 96       	adiw	r24, 0x06	; 6
      e8:	0e 94 cf 04 	call	0x99e	; 0x99e <H_RTC_void_getDate>
		H_RTC_void_getTime(&time);
      ec:	ce 01       	movw	r24, r28
      ee:	0a 96       	adiw	r24, 0x0a	; 10
      f0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <H_RTC_void_getTime>
		H_LCD_void_sendString("TIME : ");
      f4:	85 e7       	ldi	r24, 0x75	; 117
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 74 02 	call	0x4e8	; 0x4e8 <H_LCD_void_sendString>
		H_LCD_void_sendIntNum(time.hour);
      fc:	6a 85       	ldd	r22, Y+10	; 0x0a
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 87 02 	call	0x50e	; 0x50e <H_LCD_void_sendIntNum>
		H_LCD_void_sendData(':');
     108:	8a e3       	ldi	r24, 0x3A	; 58
     10a:	0e 94 31 02 	call	0x462	; 0x462 <H_LCD_void_sendData>
		H_LCD_void_sendIntNum(time.minute);
     10e:	6b 85       	ldd	r22, Y+11	; 0x0b
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	0e 94 87 02 	call	0x50e	; 0x50e <H_LCD_void_sendIntNum>
		H_LCD_void_sendData(':');
     11a:	8a e3       	ldi	r24, 0x3A	; 58
     11c:	0e 94 31 02 	call	0x462	; 0x462 <H_LCD_void_sendData>
		H_LCD_void_sendIntNum(time.sec);
     120:	6c 85       	ldd	r22, Y+12	; 0x0c
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	0e 94 87 02 	call	0x50e	; 0x50e <H_LCD_void_sendIntNum>
		if(time.hour_type == HOUR_12){
     12c:	8d 85       	ldd	r24, Y+13	; 0x0d
     12e:	81 30       	cpi	r24, 0x01	; 1
     130:	61 f4       	brne	.+24     	; 0x14a <main+0xb8>
			if(time.hour_value == AM){
     132:	8e 85       	ldd	r24, Y+14	; 0x0e
     134:	81 11       	cpse	r24, r1
     136:	05 c0       	rjmp	.+10     	; 0x142 <main+0xb0>
				H_LCD_void_sendString(" AM");
     138:	8d e7       	ldi	r24, 0x7D	; 125
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <H_LCD_void_sendString>
     140:	04 c0       	rjmp	.+8      	; 0x14a <main+0xb8>
				}else{
				H_LCD_void_sendString(" PM");
     142:	81 e8       	ldi	r24, 0x81	; 129
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 74 02 	call	0x4e8	; 0x4e8 <H_LCD_void_sendString>
			}
			
		}
		H_LCD_void_gotoXY(1,0);
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	0e 94 a6 02 	call	0x54c	; 0x54c <H_LCD_void_gotoXY>
		H_LCD_void_sendString("DATE : ");
     152:	85 e8       	ldi	r24, 0x85	; 133
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 74 02 	call	0x4e8	; 0x4e8 <H_LCD_void_sendString>
		H_LCD_void_sendIntNum(date_config.date);
     15a:	6f 81       	ldd	r22, Y+7	; 0x07
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 87 02 	call	0x50e	; 0x50e <H_LCD_void_sendIntNum>
		H_LCD_void_sendData(':');
     166:	8a e3       	ldi	r24, 0x3A	; 58
     168:	0e 94 31 02 	call	0x462	; 0x462 <H_LCD_void_sendData>
		H_LCD_void_sendIntNum(date_config.month);
     16c:	68 85       	ldd	r22, Y+8	; 0x08
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 87 02 	call	0x50e	; 0x50e <H_LCD_void_sendIntNum>
		H_LCD_void_sendData(':');
     178:	8a e3       	ldi	r24, 0x3A	; 58
     17a:	0e 94 31 02 	call	0x462	; 0x462 <H_LCD_void_sendData>
		H_LCD_void_sendIntNum(date_config.year);
     17e:	69 85       	ldd	r22, Y+9	; 0x09
     180:	70 e0       	ldi	r23, 0x00	; 0
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 87 02 	call	0x50e	; 0x50e <H_LCD_void_sendIntNum>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18a:	2f ef       	ldi	r18, 0xFF	; 255
     18c:	89 e6       	ldi	r24, 0x69	; 105
     18e:	98 e1       	ldi	r25, 0x18	; 24
     190:	21 50       	subi	r18, 0x01	; 1
     192:	80 40       	sbci	r24, 0x00	; 0
     194:	90 40       	sbci	r25, 0x00	; 0
     196:	e1 f7       	brne	.-8      	; 0x190 <main+0xfe>
     198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x108>
     19a:	00 00       	nop
     19c:	a1 cf       	rjmp	.-190    	; 0xe0 <main+0x4e>

0000019e <H_LCD_void_latchByte>:
     19e:	0f 93       	push	r16
     1a0:	1f 93       	push	r17
     1a2:	cf 93       	push	r28
     1a4:	df 93       	push	r29
     1a6:	cd b7       	in	r28, 0x3d	; 61
     1a8:	de b7       	in	r29, 0x3e	; 62
     1aa:	64 97       	sbiw	r28, 0x14	; 20
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	f8 94       	cli
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	0f be       	out	0x3f, r0	; 63
     1b4:	cd bf       	out	0x3d, r28	; 61
     1b6:	08 2f       	mov	r16, r24
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	89 83       	std	Y+1, r24	; 0x01
     1bc:	1a 82       	std	Y+2, r1	; 0x02
     1be:	8b 83       	std	Y+3, r24	; 0x03
     1c0:	04 fb       	bst	r16, 4
     1c2:	99 27       	eor	r25, r25
     1c4:	90 f9       	bld	r25, 0
     1c6:	9c 83       	std	Y+4, r25	; 0x04
     1c8:	8d 83       	std	Y+5, r24	; 0x05
     1ca:	8e 83       	std	Y+6, r24	; 0x06
     1cc:	8f 83       	std	Y+7, r24	; 0x07
     1ce:	05 fb       	bst	r16, 5
     1d0:	99 27       	eor	r25, r25
     1d2:	90 f9       	bld	r25, 0
     1d4:	98 87       	std	Y+8, r25	; 0x08
     1d6:	89 87       	std	Y+9, r24	; 0x09
     1d8:	92 e0       	ldi	r25, 0x02	; 2
     1da:	9a 87       	std	Y+10, r25	; 0x0a
     1dc:	8b 87       	std	Y+11, r24	; 0x0b
     1de:	06 fb       	bst	r16, 6
     1e0:	99 27       	eor	r25, r25
     1e2:	90 f9       	bld	r25, 0
     1e4:	9c 87       	std	Y+12, r25	; 0x0c
     1e6:	8d 87       	std	Y+13, r24	; 0x0d
     1e8:	94 e0       	ldi	r25, 0x04	; 4
     1ea:	9e 87       	std	Y+14, r25	; 0x0e
     1ec:	8f 87       	std	Y+15, r24	; 0x0f
     1ee:	80 2f       	mov	r24, r16
     1f0:	88 1f       	adc	r24, r24
     1f2:	88 27       	eor	r24, r24
     1f4:	88 1f       	adc	r24, r24
     1f6:	88 8b       	std	Y+16, r24	; 0x10
     1f8:	10 e0       	ldi	r17, 0x00	; 0
     1fa:	0f c0       	rjmp	.+30     	; 0x21a <H_LCD_void_latchByte+0x7c>
     1fc:	81 2f       	mov	r24, r17
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	88 0f       	add	r24, r24
     202:	99 1f       	adc	r25, r25
     204:	88 0f       	add	r24, r24
     206:	99 1f       	adc	r25, r25
     208:	21 e0       	ldi	r18, 0x01	; 1
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	2c 0f       	add	r18, r28
     20e:	3d 1f       	adc	r19, r29
     210:	82 0f       	add	r24, r18
     212:	93 1f       	adc	r25, r19
     214:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_U8SetPinValue>
     218:	1f 5f       	subi	r17, 0xFF	; 255
     21a:	14 30       	cpi	r17, 0x04	; 4
     21c:	78 f3       	brcs	.-34     	; 0x1fc <H_LCD_void_latchByte+0x5e>
     21e:	19 8a       	std	Y+17, r1	; 0x11
     220:	82 e0       	ldi	r24, 0x02	; 2
     222:	8a 8b       	std	Y+18, r24	; 0x12
     224:	1c 8a       	std	Y+20, r1	; 0x14
     226:	8f e9       	ldi	r24, 0x9F	; 159
     228:	9f e0       	ldi	r25, 0x0F	; 15
     22a:	01 97       	sbiw	r24, 0x01	; 1
     22c:	f1 f7       	brne	.-4      	; 0x22a <H_LCD_void_latchByte+0x8c>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <H_LCD_void_latchByte+0x92>
     230:	00 00       	nop
     232:	ce 01       	movw	r24, r28
     234:	41 96       	adiw	r24, 0x11	; 17
     236:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_U8SetPinValue>
     23a:	ef e9       	ldi	r30, 0x9F	; 159
     23c:	ff e0       	ldi	r31, 0x0F	; 15
     23e:	31 97       	sbiw	r30, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <H_LCD_void_latchByte+0xa0>
     242:	00 c0       	rjmp	.+0      	; 0x244 <H_LCD_void_latchByte+0xa6>
     244:	00 00       	nop
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	8c 8b       	std	Y+20, r24	; 0x14
     24a:	ce 01       	movw	r24, r28
     24c:	41 96       	adiw	r24, 0x11	; 17
     24e:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_U8SetPinValue>
     252:	8f e9       	ldi	r24, 0x9F	; 159
     254:	9f e0       	ldi	r25, 0x0F	; 15
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <H_LCD_void_latchByte+0xb8>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <H_LCD_void_latchByte+0xbe>
     25c:	00 00       	nop
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	1a c0       	rjmp	.+52     	; 0x296 <H_LCD_void_latchByte+0xf8>
     262:	81 2f       	mov	r24, r17
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	20 2f       	mov	r18, r16
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	01 2e       	mov	r0, r17
     26c:	02 c0       	rjmp	.+4      	; 0x272 <H_LCD_void_latchByte+0xd4>
     26e:	35 95       	asr	r19
     270:	27 95       	ror	r18
     272:	0a 94       	dec	r0
     274:	e2 f7       	brpl	.-8      	; 0x26e <H_LCD_void_latchByte+0xd0>
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	e1 e0       	ldi	r30, 0x01	; 1
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	ec 0f       	add	r30, r28
     284:	fd 1f       	adc	r31, r29
     286:	8e 0f       	add	r24, r30
     288:	9f 1f       	adc	r25, r31
     28a:	21 70       	andi	r18, 0x01	; 1
     28c:	fc 01       	movw	r30, r24
     28e:	23 83       	std	Z+3, r18	; 0x03
     290:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_U8SetPinValue>
     294:	1f 5f       	subi	r17, 0xFF	; 255
     296:	14 30       	cpi	r17, 0x04	; 4
     298:	20 f3       	brcs	.-56     	; 0x262 <H_LCD_void_latchByte+0xc4>
     29a:	8f e9       	ldi	r24, 0x9F	; 159
     29c:	9f e0       	ldi	r25, 0x0F	; 15
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <H_LCD_void_latchByte+0x100>
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <H_LCD_void_latchByte+0x106>
     2a4:	00 00       	nop
     2a6:	1c 8a       	std	Y+20, r1	; 0x14
     2a8:	ce 01       	movw	r24, r28
     2aa:	41 96       	adiw	r24, 0x11	; 17
     2ac:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_U8SetPinValue>
     2b0:	ef e9       	ldi	r30, 0x9F	; 159
     2b2:	ff e0       	ldi	r31, 0x0F	; 15
     2b4:	31 97       	sbiw	r30, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <H_LCD_void_latchByte+0x116>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <H_LCD_void_latchByte+0x11c>
     2ba:	00 00       	nop
     2bc:	64 96       	adiw	r28, 0x14	; 20
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	f8 94       	cli
     2c2:	de bf       	out	0x3e, r29	; 62
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	cd bf       	out	0x3d, r28	; 61
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	1f 91       	pop	r17
     2ce:	0f 91       	pop	r16
     2d0:	08 95       	ret

000002d2 <H_LCD_void_sendCommand>:
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	cd b7       	in	r28, 0x3d	; 61
     2dc:	de b7       	in	r29, 0x3e	; 62
     2de:	28 97       	sbiw	r28, 0x08	; 8
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	de bf       	out	0x3e, r29	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	cd bf       	out	0x3d, r28	; 61
     2ea:	08 2f       	mov	r16, r24
     2ec:	88 e0       	ldi	r24, 0x08	; 8
     2ee:	e5 e6       	ldi	r30, 0x65	; 101
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	de 01       	movw	r26, r28
     2f4:	11 96       	adiw	r26, 0x01	; 1
     2f6:	01 90       	ld	r0, Z+
     2f8:	0d 92       	st	X+, r0
     2fa:	8a 95       	dec	r24
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <H_LCD_void_sendCommand+0x24>
     2fe:	10 e0       	ldi	r17, 0x00	; 0
     300:	15 c0       	rjmp	.+42     	; 0x32c <H_LCD_void_sendCommand+0x5a>
     302:	81 2f       	mov	r24, r17
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	21 e0       	ldi	r18, 0x01	; 1
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	2c 0f       	add	r18, r28
     314:	3d 1f       	adc	r19, r29
     316:	82 0f       	add	r24, r18
     318:	93 1f       	adc	r25, r19
     31a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_U8SetPinValue>
     31e:	8f e9       	ldi	r24, 0x9F	; 159
     320:	9f e0       	ldi	r25, 0x0F	; 15
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <H_LCD_void_sendCommand+0x50>
     326:	00 c0       	rjmp	.+0      	; 0x328 <H_LCD_void_sendCommand+0x56>
     328:	00 00       	nop
     32a:	1f 5f       	subi	r17, 0xFF	; 255
     32c:	12 30       	cpi	r17, 0x02	; 2
     32e:	48 f3       	brcs	.-46     	; 0x302 <H_LCD_void_sendCommand+0x30>
     330:	8f e9       	ldi	r24, 0x9F	; 159
     332:	9f e0       	ldi	r25, 0x0F	; 15
     334:	01 97       	sbiw	r24, 0x01	; 1
     336:	f1 f7       	brne	.-4      	; 0x334 <H_LCD_void_sendCommand+0x62>
     338:	00 c0       	rjmp	.+0      	; 0x33a <H_LCD_void_sendCommand+0x68>
     33a:	00 00       	nop
     33c:	80 2f       	mov	r24, r16
     33e:	0e 94 cf 00 	call	0x19e	; 0x19e <H_LCD_void_latchByte>
     342:	28 96       	adiw	r28, 0x08	; 8
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	08 95       	ret

00000358 <H_LCD_void_Init>:
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	68 97       	sbiw	r28, 0x18	; 24
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
     36e:	fe 01       	movw	r30, r28
     370:	31 96       	adiw	r30, 0x01	; 1
     372:	88 e0       	ldi	r24, 0x08	; 8
     374:	df 01       	movw	r26, r30
     376:	1d 92       	st	X+, r1
     378:	8a 95       	dec	r24
     37a:	e9 f7       	brne	.-6      	; 0x376 <H_LCD_void_Init+0x1e>
     37c:	83 e0       	ldi	r24, 0x03	; 3
     37e:	8a 83       	std	Y+2, r24	; 0x02
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	92 e0       	ldi	r25, 0x02	; 2
     386:	9e 83       	std	Y+6, r25	; 0x06
     388:	8f 83       	std	Y+7, r24	; 0x07
     38a:	10 e0       	ldi	r17, 0x00	; 0
     38c:	0f c0       	rjmp	.+30     	; 0x3ac <H_LCD_void_Init+0x54>
     38e:	81 2f       	mov	r24, r17
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	88 0f       	add	r24, r24
     398:	99 1f       	adc	r25, r25
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	2c 0f       	add	r18, r28
     3a0:	3d 1f       	adc	r19, r29
     3a2:	82 0f       	add	r24, r18
     3a4:	93 1f       	adc	r25, r19
     3a6:	0e 94 ac 05 	call	0xb58	; 0xb58 <DIO_U8SetPinDirection>
     3aa:	1f 5f       	subi	r17, 0xFF	; 255
     3ac:	12 30       	cpi	r17, 0x02	; 2
     3ae:	78 f3       	brcs	.-34     	; 0x38e <H_LCD_void_Init+0x36>
     3b0:	fe 01       	movw	r30, r28
     3b2:	39 96       	adiw	r30, 0x09	; 9
     3b4:	80 e1       	ldi	r24, 0x10	; 16
     3b6:	df 01       	movw	r26, r30
     3b8:	1d 92       	st	X+, r1
     3ba:	8a 95       	dec	r24
     3bc:	e9 f7       	brne	.-6      	; 0x3b8 <H_LCD_void_Init+0x60>
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	89 87       	std	Y+9, r24	; 0x09
     3c2:	8b 87       	std	Y+11, r24	; 0x0b
     3c4:	8d 87       	std	Y+13, r24	; 0x0d
     3c6:	8e 87       	std	Y+14, r24	; 0x0e
     3c8:	8f 87       	std	Y+15, r24	; 0x0f
     3ca:	89 8b       	std	Y+17, r24	; 0x11
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	9a 8b       	std	Y+18, r25	; 0x12
     3d0:	8b 8b       	std	Y+19, r24	; 0x13
     3d2:	8d 8b       	std	Y+21, r24	; 0x15
     3d4:	94 e0       	ldi	r25, 0x04	; 4
     3d6:	9e 8b       	std	Y+22, r25	; 0x16
     3d8:	8f 8b       	std	Y+23, r24	; 0x17
     3da:	10 e0       	ldi	r17, 0x00	; 0
     3dc:	0f c0       	rjmp	.+30     	; 0x3fc <H_LCD_void_Init+0xa4>
     3de:	81 2f       	mov	r24, r17
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	29 e0       	ldi	r18, 0x09	; 9
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	2c 0f       	add	r18, r28
     3f0:	3d 1f       	adc	r19, r29
     3f2:	82 0f       	add	r24, r18
     3f4:	93 1f       	adc	r25, r19
     3f6:	0e 94 ac 05 	call	0xb58	; 0xb58 <DIO_U8SetPinDirection>
     3fa:	1f 5f       	subi	r17, 0xFF	; 255
     3fc:	14 30       	cpi	r17, 0x04	; 4
     3fe:	78 f3       	brcs	.-34     	; 0x3de <H_LCD_void_Init+0x86>
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	0e 94 69 01 	call	0x2d2	; 0x2d2 <H_LCD_void_sendCommand>
     406:	8f e9       	ldi	r24, 0x9F	; 159
     408:	9f e0       	ldi	r25, 0x0F	; 15
     40a:	01 97       	sbiw	r24, 0x01	; 1
     40c:	f1 f7       	brne	.-4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     410:	00 00       	nop
     412:	88 e2       	ldi	r24, 0x28	; 40
     414:	0e 94 69 01 	call	0x2d2	; 0x2d2 <H_LCD_void_sendCommand>
     418:	af e9       	ldi	r26, 0x9F	; 159
     41a:	bf e0       	ldi	r27, 0x0F	; 15
     41c:	11 97       	sbiw	r26, 0x01	; 1
     41e:	f1 f7       	brne	.-4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     422:	00 00       	nop
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	0e 94 69 01 	call	0x2d2	; 0x2d2 <H_LCD_void_sendCommand>
     42a:	8f e9       	ldi	r24, 0x9F	; 159
     42c:	9f e0       	ldi	r25, 0x0F	; 15
     42e:	01 97       	sbiw	r24, 0x01	; 1
     430:	f1 f7       	brne	.-4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     432:	00 c0       	rjmp	.+0      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     434:	00 00       	nop
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	0e 94 69 01 	call	0x2d2	; 0x2d2 <H_LCD_void_sendCommand>
     43c:	af e3       	ldi	r26, 0x3F	; 63
     43e:	bf e1       	ldi	r27, 0x1F	; 31
     440:	11 97       	sbiw	r26, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     444:	00 c0       	rjmp	.+0      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     446:	00 00       	nop
     448:	86 e0       	ldi	r24, 0x06	; 6
     44a:	0e 94 69 01 	call	0x2d2	; 0x2d2 <H_LCD_void_sendCommand>
     44e:	68 96       	adiw	r28, 0x18	; 24
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	08 95       	ret

00000462 <H_LCD_void_sendData>:
     462:	0f 93       	push	r16
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	28 97       	sbiw	r28, 0x08	; 8
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	08 2f       	mov	r16, r24
     47c:	88 e0       	ldi	r24, 0x08	; 8
     47e:	ed e6       	ldi	r30, 0x6D	; 109
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	de 01       	movw	r26, r28
     484:	11 96       	adiw	r26, 0x01	; 1
     486:	01 90       	ld	r0, Z+
     488:	0d 92       	st	X+, r0
     48a:	8a 95       	dec	r24
     48c:	e1 f7       	brne	.-8      	; 0x486 <H_LCD_void_sendData+0x24>
     48e:	10 e0       	ldi	r17, 0x00	; 0
     490:	15 c0       	rjmp	.+42     	; 0x4bc <H_LCD_void_sendData+0x5a>
     492:	81 2f       	mov	r24, r17
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	88 0f       	add	r24, r24
     49c:	99 1f       	adc	r25, r25
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	2c 0f       	add	r18, r28
     4a4:	3d 1f       	adc	r19, r29
     4a6:	82 0f       	add	r24, r18
     4a8:	93 1f       	adc	r25, r19
     4aa:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <DIO_U8SetPinValue>
     4ae:	8f e9       	ldi	r24, 0x9F	; 159
     4b0:	9f e0       	ldi	r25, 0x0F	; 15
     4b2:	01 97       	sbiw	r24, 0x01	; 1
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <H_LCD_void_sendData+0x50>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <H_LCD_void_sendData+0x56>
     4b8:	00 00       	nop
     4ba:	1f 5f       	subi	r17, 0xFF	; 255
     4bc:	12 30       	cpi	r17, 0x02	; 2
     4be:	48 f3       	brcs	.-46     	; 0x492 <H_LCD_void_sendData+0x30>
     4c0:	8f e9       	ldi	r24, 0x9F	; 159
     4c2:	9f e0       	ldi	r25, 0x0F	; 15
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <H_LCD_void_sendData+0x62>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <H_LCD_void_sendData+0x68>
     4ca:	00 00       	nop
     4cc:	80 2f       	mov	r24, r16
     4ce:	0e 94 cf 00 	call	0x19e	; 0x19e <H_LCD_void_latchByte>
     4d2:	28 96       	adiw	r28, 0x08	; 8
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	cd bf       	out	0x3d, r28	; 61
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	08 95       	ret

000004e8 <H_LCD_void_sendString>:
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	8c 01       	movw	r16, r24
     4f0:	c0 e0       	ldi	r28, 0x00	; 0
     4f2:	03 c0       	rjmp	.+6      	; 0x4fa <H_LCD_void_sendString+0x12>
     4f4:	0e 94 31 02 	call	0x462	; 0x462 <H_LCD_void_sendData>
     4f8:	cf 5f       	subi	r28, 0xFF	; 255
     4fa:	f8 01       	movw	r30, r16
     4fc:	ec 0f       	add	r30, r28
     4fe:	f1 1d       	adc	r31, r1
     500:	80 81       	ld	r24, Z
     502:	81 11       	cpse	r24, r1
     504:	f7 cf       	rjmp	.-18     	; 0x4f4 <H_LCD_void_sendString+0xc>
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	08 95       	ret

0000050e <H_LCD_void_sendIntNum>:
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	60 97       	sbiw	r28, 0x10	; 16
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	dc 01       	movw	r26, r24
     524:	cb 01       	movw	r24, r22
     526:	4a e0       	ldi	r20, 0x0A	; 10
     528:	be 01       	movw	r22, r28
     52a:	6f 5f       	subi	r22, 0xFF	; 255
     52c:	7f 4f       	sbci	r23, 0xFF	; 255
     52e:	0e 94 77 08 	call	0x10ee	; 0x10ee <__itoa_ncheck>
     532:	ce 01       	movw	r24, r28
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	0e 94 74 02 	call	0x4e8	; 0x4e8 <H_LCD_void_sendString>
     53a:	60 96       	adiw	r28, 0x10	; 16
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

0000054c <H_LCD_void_gotoXY>:
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	39 f0       	breq	.+14     	; 0x55e <H_LCD_void_gotoXY+0x12>
     550:	58 f0       	brcs	.+22     	; 0x568 <H_LCD_void_gotoXY+0x1c>
     552:	82 30       	cpi	r24, 0x02	; 2
     554:	31 f0       	breq	.+12     	; 0x562 <H_LCD_void_gotoXY+0x16>
     556:	83 30       	cpi	r24, 0x03	; 3
     558:	31 f0       	breq	.+12     	; 0x566 <H_LCD_void_gotoXY+0x1a>
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	05 c0       	rjmp	.+10     	; 0x568 <H_LCD_void_gotoXY+0x1c>
     55e:	60 5c       	subi	r22, 0xC0	; 192
     560:	03 c0       	rjmp	.+6      	; 0x568 <H_LCD_void_gotoXY+0x1c>
     562:	60 5f       	subi	r22, 0xF0	; 240
     564:	01 c0       	rjmp	.+2      	; 0x568 <H_LCD_void_gotoXY+0x1c>
     566:	60 5b       	subi	r22, 0xB0	; 176
     568:	86 2f       	mov	r24, r22
     56a:	80 68       	ori	r24, 0x80	; 128
     56c:	0e 94 69 01 	call	0x2d2	; 0x2d2 <H_LCD_void_sendCommand>
     570:	08 95       	ret

00000572 <H_LCD_void_clearScreen>:
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	0e 94 69 01 	call	0x2d2	; 0x2d2 <H_LCD_void_sendCommand>
     578:	08 95       	ret

0000057a <H_RTC_void_Init>:
#include "RTC_private.h"



void H_RTC_void_Init()
{
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	00 d0       	rcall	.+0      	; 0x580 <H_RTC_void_Init+0x6>
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
	TWI_Config twi_config = {BIT_RATE_100};
     584:	1a 82       	std	Y+2, r1	; 0x02
     586:	19 82       	std	Y+1, r1	; 0x01
     588:	88 e4       	ldi	r24, 0x48	; 72
     58a:	89 83       	std	Y+1, r24	; 0x01
	M_TWI_void_init(&twi_config);
     58c:	ce 01       	movw	r24, r28
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	0e 94 10 08 	call	0x1020	; 0x1020 <M_TWI_void_init>
}
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <H_RTC_void_setTime>:

u8 H_RTC_void_setTime(Time_Config * config){
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	1f 92       	push	r1
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	8c 01       	movw	r16, r24
	u8 status;
	M_TWI_void_start();
     5ae:	0e 94 1a 08 	call	0x1034	; 0x1034 <M_TWI_void_start>
	M_TWI_void_getStatus(&status);
     5b2:	ce 01       	movw	r24, r28
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_START)
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	88 30       	cpi	r24, 0x08	; 8
     5be:	09 f0       	breq	.+2      	; 0x5c2 <H_RTC_void_setTime+0x24>
     5c0:	7c c0       	rjmp	.+248    	; 0x6ba <H_RTC_void_setTime+0x11c>
	return ERROR;
	M_TWI_void_writeByte(Device_Write_address);
     5c2:	80 ed       	ldi	r24, 0xD0	; 208
     5c4:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     5c8:	ce 01       	movw	r24, r28
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_SLA_W_ACK)
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	88 31       	cpi	r24, 0x18	; 24
     5d4:	09 f0       	breq	.+2      	; 0x5d8 <H_RTC_void_setTime+0x3a>
     5d6:	73 c0       	rjmp	.+230    	; 0x6be <H_RTC_void_setTime+0x120>
	return ERROR;
	M_TWI_void_writeByte(0x00);
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     5de:	ce 01       	movw	r24, r28
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	88 32       	cpi	r24, 0x28	; 40
     5ea:	09 f0       	breq	.+2      	; 0x5ee <H_RTC_void_setTime+0x50>
     5ec:	6a c0       	rjmp	.+212    	; 0x6c2 <H_RTC_void_setTime+0x124>
	return ERROR;
	M_TWI_void_writeByte((config->sec / 10) << 4 | (config->sec % 10));
     5ee:	d8 01       	movw	r26, r16
     5f0:	12 96       	adiw	r26, 0x02	; 2
     5f2:	2c 91       	ld	r18, X
     5f4:	9d ec       	ldi	r25, 0xCD	; 205
     5f6:	29 9f       	mul	r18, r25
     5f8:	91 2d       	mov	r25, r1
     5fa:	11 24       	eor	r1, r1
     5fc:	96 95       	lsr	r25
     5fe:	96 95       	lsr	r25
     600:	96 95       	lsr	r25
     602:	b0 e1       	ldi	r27, 0x10	; 16
     604:	9b 9f       	mul	r25, r27
     606:	a0 01       	movw	r20, r0
     608:	11 24       	eor	r1, r1
     60a:	99 0f       	add	r25, r25
     60c:	39 2f       	mov	r19, r25
     60e:	33 0f       	add	r19, r19
     610:	33 0f       	add	r19, r19
     612:	93 0f       	add	r25, r19
     614:	82 2f       	mov	r24, r18
     616:	89 1b       	sub	r24, r25
     618:	84 2b       	or	r24, r20
     61a:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     61e:	ce 01       	movw	r24, r28
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
     626:	89 81       	ldd	r24, Y+1	; 0x01
     628:	88 32       	cpi	r24, 0x28	; 40
     62a:	09 f0       	breq	.+2      	; 0x62e <H_RTC_void_setTime+0x90>
     62c:	4c c0       	rjmp	.+152    	; 0x6c6 <H_RTC_void_setTime+0x128>
	return ERROR;
	M_TWI_void_writeByte((config->minute / 10) << 4 | (config->minute % 10));
     62e:	f8 01       	movw	r30, r16
     630:	21 81       	ldd	r18, Z+1	; 0x01
     632:	9d ec       	ldi	r25, 0xCD	; 205
     634:	29 9f       	mul	r18, r25
     636:	91 2d       	mov	r25, r1
     638:	11 24       	eor	r1, r1
     63a:	96 95       	lsr	r25
     63c:	96 95       	lsr	r25
     63e:	96 95       	lsr	r25
     640:	f0 e1       	ldi	r31, 0x10	; 16
     642:	9f 9f       	mul	r25, r31
     644:	a0 01       	movw	r20, r0
     646:	11 24       	eor	r1, r1
     648:	99 0f       	add	r25, r25
     64a:	39 2f       	mov	r19, r25
     64c:	33 0f       	add	r19, r19
     64e:	33 0f       	add	r19, r19
     650:	93 0f       	add	r25, r19
     652:	82 2f       	mov	r24, r18
     654:	89 1b       	sub	r24, r25
     656:	84 2b       	or	r24, r20
     658:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     65c:	ce 01       	movw	r24, r28
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	88 32       	cpi	r24, 0x28	; 40
     668:	81 f5       	brne	.+96     	; 0x6ca <H_RTC_void_setTime+0x12c>
	return ERROR;
	M_TWI_void_writeByte(config->hour_type << 6 | config->hour_value << 5 | (config->hour / 10) << 4 | (config->hour % 10));
     66a:	d8 01       	movw	r26, r16
     66c:	13 96       	adiw	r26, 0x03	; 3
     66e:	4c 91       	ld	r20, X
     670:	b0 e4       	ldi	r27, 0x40	; 64
     672:	4b 9f       	mul	r20, r27
     674:	f0 01       	movw	r30, r0
     676:	11 24       	eor	r1, r1
     678:	d8 01       	movw	r26, r16
     67a:	14 96       	adiw	r26, 0x04	; 4
     67c:	8c 91       	ld	r24, X
     67e:	b0 e2       	ldi	r27, 0x20	; 32
     680:	8b 9f       	mul	r24, r27
     682:	a0 01       	movw	r20, r0
     684:	11 24       	eor	r1, r1
     686:	d8 01       	movw	r26, r16
     688:	8c 91       	ld	r24, X
     68a:	6a e0       	ldi	r22, 0x0A	; 10
     68c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__udivmodqi4>
     690:	b0 e1       	ldi	r27, 0x10	; 16
     692:	8b 9f       	mul	r24, r27
     694:	90 01       	movw	r18, r0
     696:	11 24       	eor	r1, r1
     698:	4e 2b       	or	r20, r30
     69a:	84 2f       	mov	r24, r20
     69c:	82 2b       	or	r24, r18
     69e:	89 2b       	or	r24, r25
     6a0:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     6a4:	ce 01       	movw	r24, r28
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	88 32       	cpi	r24, 0x28	; 40
     6b0:	71 f4       	brne	.+28     	; 0x6ce <H_RTC_void_setTime+0x130>
	return ERROR;
	M_TWI_void_stop();
     6b2:	0e 94 20 08 	call	0x1040	; 0x1040 <M_TWI_void_stop>
	return SUCCESS;
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0b c0       	rjmp	.+22     	; 0x6d0 <H_RTC_void_setTime+0x132>
u8 H_RTC_void_setTime(Time_Config * config){
	u8 status;
	M_TWI_void_start();
	M_TWI_void_getStatus(&status);
	if(status != TWI_START)
	return ERROR;
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	09 c0       	rjmp	.+18     	; 0x6d0 <H_RTC_void_setTime+0x132>
	M_TWI_void_writeByte(Device_Write_address);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_SLA_W_ACK)
	return ERROR;
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	07 c0       	rjmp	.+14     	; 0x6d0 <H_RTC_void_setTime+0x132>
	M_TWI_void_writeByte(0x00);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	05 c0       	rjmp	.+10     	; 0x6d0 <H_RTC_void_setTime+0x132>
	M_TWI_void_writeByte((config->sec / 10) << 4 | (config->sec % 10));
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <H_RTC_void_setTime+0x132>
	M_TWI_void_writeByte((config->minute / 10) << 4 | (config->minute % 10));
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <H_RTC_void_setTime+0x132>
	M_TWI_void_writeByte(config->hour_type << 6 | config->hour_value << 5 | (config->hour / 10) << 4 | (config->hour % 10));
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
     6ce:	80 e0       	ldi	r24, 0x00	; 0
	M_TWI_void_stop();
	return SUCCESS;
}
     6d0:	0f 90       	pop	r0
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	08 95       	ret

000006dc <H_RTC_void_getTime>:


u8 H_RTC_void_getTime(Time_Config * config){
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <H_RTC_void_getTime+0xa>
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	8c 01       	movw	r16, r24
	u8 status,data;
	M_TWI_void_start();
     6ec:	0e 94 1a 08 	call	0x1034	; 0x1034 <M_TWI_void_start>
	M_TWI_void_getStatus(&status);
     6f0:	ce 01       	movw	r24, r28
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_START)
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	88 30       	cpi	r24, 0x08	; 8
     6fc:	09 f0       	breq	.+2      	; 0x700 <H_RTC_void_getTime+0x24>
     6fe:	a8 c0       	rjmp	.+336    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
	return ERROR;
	
	M_TWI_void_writeByte(Device_Write_address);
     700:	80 ed       	ldi	r24, 0xD0	; 208
     702:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_SLA_W_ACK)
     70e:	89 81       	ldd	r24, Y+1	; 0x01
     710:	88 31       	cpi	r24, 0x18	; 24
     712:	09 f0       	breq	.+2      	; 0x716 <H_RTC_void_getTime+0x3a>
     714:	9f c0       	rjmp	.+318    	; 0x854 <__DATA_REGION_LENGTH__+0x54>
	return ERROR;
	
	M_TWI_void_writeByte(0x00);
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	88 32       	cpi	r24, 0x28	; 40
     728:	09 f0       	breq	.+2      	; 0x72c <H_RTC_void_getTime+0x50>
     72a:	96 c0       	rjmp	.+300    	; 0x858 <__DATA_REGION_LENGTH__+0x58>
	return ERROR;
	
	M_TWI_void_start();
     72c:	0e 94 1a 08 	call	0x1034	; 0x1034 <M_TWI_void_start>
	M_TWI_void_getStatus(&status);
     730:	ce 01       	movw	r24, r28
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_REP_START)
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	80 31       	cpi	r24, 0x10	; 16
     73c:	09 f0       	breq	.+2      	; 0x740 <H_RTC_void_getTime+0x64>
     73e:	8e c0       	rjmp	.+284    	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
	return ERROR;
	
	M_TWI_void_writeByte(Device_Read_address);
     740:	81 ed       	ldi	r24, 0xD1	; 209
     742:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     746:	ce 01       	movw	r24, r28
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_SLA_R_ACK)
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	80 34       	cpi	r24, 0x40	; 64
     752:	09 f0       	breq	.+2      	; 0x756 <H_RTC_void_getTime+0x7a>
     754:	85 c0       	rjmp	.+266    	; 0x860 <__stack+0x1>
	return ERROR;
	
	M_TWI_void_readByteWithACK(&data);
     756:	ce 01       	movw	r24, r28
     758:	02 96       	adiw	r24, 0x02	; 2
     75a:	0e 94 2a 08 	call	0x1054	; 0x1054 <M_TWI_void_readByteWithACK>
	M_TWI_void_getStatus(&status);
     75e:	ce 01       	movw	r24, r28
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MR_DATA_ACK)
     766:	89 81       	ldd	r24, Y+1	; 0x01
     768:	80 35       	cpi	r24, 0x50	; 80
     76a:	09 f0       	breq	.+2      	; 0x76e <H_RTC_void_getTime+0x92>
     76c:	7b c0       	rjmp	.+246    	; 0x864 <__stack+0x5>
	return ERROR;
	config->sec = (data & 0x0F) + (((data & 0x70) * 10) >> 4);
     76e:	2a 81       	ldd	r18, Y+2	; 0x02
     770:	82 2f       	mov	r24, r18
     772:	80 77       	andi	r24, 0x70	; 112
     774:	3a e0       	ldi	r19, 0x0A	; 10
     776:	83 9f       	mul	r24, r19
     778:	c0 01       	movw	r24, r0
     77a:	11 24       	eor	r1, r1
     77c:	95 95       	asr	r25
     77e:	87 95       	ror	r24
     780:	95 95       	asr	r25
     782:	87 95       	ror	r24
     784:	95 95       	asr	r25
     786:	87 95       	ror	r24
     788:	95 95       	asr	r25
     78a:	87 95       	ror	r24
     78c:	2f 70       	andi	r18, 0x0F	; 15
     78e:	82 0f       	add	r24, r18
     790:	f8 01       	movw	r30, r16
     792:	82 83       	std	Z+2, r24	; 0x02
	
	M_TWI_void_readByteWithACK(&data);
     794:	ce 01       	movw	r24, r28
     796:	02 96       	adiw	r24, 0x02	; 2
     798:	0e 94 2a 08 	call	0x1054	; 0x1054 <M_TWI_void_readByteWithACK>
	M_TWI_void_getStatus(&status);
     79c:	ce 01       	movw	r24, r28
     79e:	01 96       	adiw	r24, 0x01	; 1
     7a0:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MR_DATA_ACK)
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	80 35       	cpi	r24, 0x50	; 80
     7a8:	09 f0       	breq	.+2      	; 0x7ac <H_RTC_void_getTime+0xd0>
     7aa:	5e c0       	rjmp	.+188    	; 0x868 <__stack+0x9>
	return ERROR;
	config->minute = (data & 0x0F) + (((data & 0x70) * 10) >> 4);
     7ac:	2a 81       	ldd	r18, Y+2	; 0x02
     7ae:	82 2f       	mov	r24, r18
     7b0:	80 77       	andi	r24, 0x70	; 112
     7b2:	fa e0       	ldi	r31, 0x0A	; 10
     7b4:	8f 9f       	mul	r24, r31
     7b6:	c0 01       	movw	r24, r0
     7b8:	11 24       	eor	r1, r1
     7ba:	95 95       	asr	r25
     7bc:	87 95       	ror	r24
     7be:	95 95       	asr	r25
     7c0:	87 95       	ror	r24
     7c2:	95 95       	asr	r25
     7c4:	87 95       	ror	r24
     7c6:	95 95       	asr	r25
     7c8:	87 95       	ror	r24
     7ca:	2f 70       	andi	r18, 0x0F	; 15
     7cc:	82 0f       	add	r24, r18
     7ce:	f8 01       	movw	r30, r16
     7d0:	81 83       	std	Z+1, r24	; 0x01
	
	M_TWI_void_readByteWithNACK(&data);
     7d2:	ce 01       	movw	r24, r28
     7d4:	02 96       	adiw	r24, 0x02	; 2
     7d6:	0e 94 33 08 	call	0x1066	; 0x1066 <M_TWI_void_readByteWithNACK>
	M_TWI_void_getStatus(&status);
     7da:	ce 01       	movw	r24, r28
     7dc:	01 96       	adiw	r24, 0x01	; 1
     7de:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MR_DATA_NACK)
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	88 35       	cpi	r24, 0x58	; 88
     7e6:	09 f0       	breq	.+2      	; 0x7ea <H_RTC_void_getTime+0x10e>
     7e8:	41 c0       	rjmp	.+130    	; 0x86c <__stack+0xd>
	return ERROR;
	if(BIT_IS_SET(data,6)){
     7ea:	8a 81       	ldd	r24, Y+2	; 0x02
     7ec:	86 ff       	sbrs	r24, 6
     7ee:	1a c0       	rjmp	.+52     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		config->hour = (data & 0x0F) + (((data & 0x10) * 10) >> 4);
     7f0:	28 2f       	mov	r18, r24
     7f2:	20 71       	andi	r18, 0x10	; 16
     7f4:	fa e0       	ldi	r31, 0x0A	; 10
     7f6:	2f 9f       	mul	r18, r31
     7f8:	90 01       	movw	r18, r0
     7fa:	11 24       	eor	r1, r1
     7fc:	35 95       	asr	r19
     7fe:	27 95       	ror	r18
     800:	35 95       	asr	r19
     802:	27 95       	ror	r18
     804:	35 95       	asr	r19
     806:	27 95       	ror	r18
     808:	35 95       	asr	r19
     80a:	27 95       	ror	r18
     80c:	8f 70       	andi	r24, 0x0F	; 15
     80e:	82 0f       	add	r24, r18
     810:	f8 01       	movw	r30, r16
     812:	80 83       	st	Z, r24
		config->hour_type = HOUR_12;
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	83 83       	std	Z+3, r24	; 0x03
		config->hour_value = (data >> 5 ) & 1;
     818:	8a 81       	ldd	r24, Y+2	; 0x02
     81a:	85 fb       	bst	r24, 5
     81c:	88 27       	eor	r24, r24
     81e:	80 f9       	bld	r24, 0
     820:	84 83       	std	Z+4, r24	; 0x04
     822:	12 c0       	rjmp	.+36     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
		}else{
		config->hour = (data & 0x0F) + (((data & 0x30) * 10) >> 4);
     824:	28 2f       	mov	r18, r24
     826:	20 73       	andi	r18, 0x30	; 48
     828:	fa e0       	ldi	r31, 0x0A	; 10
     82a:	2f 9f       	mul	r18, r31
     82c:	90 01       	movw	r18, r0
     82e:	11 24       	eor	r1, r1
     830:	35 95       	asr	r19
     832:	27 95       	ror	r18
     834:	35 95       	asr	r19
     836:	27 95       	ror	r18
     838:	35 95       	asr	r19
     83a:	27 95       	ror	r18
     83c:	35 95       	asr	r19
     83e:	27 95       	ror	r18
     840:	8f 70       	andi	r24, 0x0F	; 15
     842:	82 0f       	add	r24, r18
     844:	f8 01       	movw	r30, r16
     846:	80 83       	st	Z, r24
	}
	
	M_TWI_void_stop();
     848:	0e 94 20 08 	call	0x1040	; 0x1040 <M_TWI_void_stop>
	return SUCCESS;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	0f c0       	rjmp	.+30     	; 0x86e <__stack+0xf>
u8 H_RTC_void_getTime(Time_Config * config){
	u8 status,data;
	M_TWI_void_start();
	M_TWI_void_getStatus(&status);
	if(status != TWI_START)
	return ERROR;
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	0d c0       	rjmp	.+26     	; 0x86e <__stack+0xf>
	
	M_TWI_void_writeByte(Device_Write_address);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_SLA_W_ACK)
	return ERROR;
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	0b c0       	rjmp	.+22     	; 0x86e <__stack+0xf>
	
	M_TWI_void_writeByte(0x00);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	09 c0       	rjmp	.+18     	; 0x86e <__stack+0xf>
	
	M_TWI_void_start();
	M_TWI_void_getStatus(&status);
	if(status != TWI_REP_START)
	return ERROR;
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	07 c0       	rjmp	.+14     	; 0x86e <__stack+0xf>
	
	M_TWI_void_writeByte(Device_Read_address);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_SLA_R_ACK)
	return ERROR;
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	05 c0       	rjmp	.+10     	; 0x86e <__stack+0xf>
	
	M_TWI_void_readByteWithACK(&data);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MR_DATA_ACK)
	return ERROR;
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	03 c0       	rjmp	.+6      	; 0x86e <__stack+0xf>
	config->sec = (data & 0x0F) + (((data & 0x70) * 10) >> 4);
	
	M_TWI_void_readByteWithACK(&data);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MR_DATA_ACK)
	return ERROR;
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	01 c0       	rjmp	.+2      	; 0x86e <__stack+0xf>
	config->minute = (data & 0x0F) + (((data & 0x70) * 10) >> 4);
	
	M_TWI_void_readByteWithNACK(&data);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MR_DATA_NACK)
	return ERROR;
     86c:	80 e0       	ldi	r24, 0x00	; 0
		config->hour = (data & 0x0F) + (((data & 0x30) * 10) >> 4);
	}
	
	M_TWI_void_stop();
	return SUCCESS;
}
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	08 95       	ret

0000087c <H_RTC_void_setDate>:


u8 H_RTC_void_setDate(Date_config * config){
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	1f 92       	push	r1
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	8c 01       	movw	r16, r24
	u8 status;
	M_TWI_void_start();
     88c:	0e 94 1a 08 	call	0x1034	; 0x1034 <M_TWI_void_start>
	M_TWI_void_getStatus(&status);
     890:	ce 01       	movw	r24, r28
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_START)
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	88 30       	cpi	r24, 0x08	; 8
     89c:	09 f0       	breq	.+2      	; 0x8a0 <H_RTC_void_setDate+0x24>
     89e:	6c c0       	rjmp	.+216    	; 0x978 <H_RTC_void_setDate+0xfc>
	return ERROR;
	
	M_TWI_void_writeByte(Device_Write_address);
     8a0:	80 ed       	ldi	r24, 0xD0	; 208
     8a2:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     8a6:	ce 01       	movw	r24, r28
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_SLA_W_ACK)
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
     8b0:	88 31       	cpi	r24, 0x18	; 24
     8b2:	09 f0       	breq	.+2      	; 0x8b6 <H_RTC_void_setDate+0x3a>
     8b4:	63 c0       	rjmp	.+198    	; 0x97c <H_RTC_void_setDate+0x100>
	return ERROR;
	
	M_TWI_void_writeByte(0x03);
     8b6:	83 e0       	ldi	r24, 0x03	; 3
     8b8:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	88 32       	cpi	r24, 0x28	; 40
     8c8:	09 f0       	breq	.+2      	; 0x8cc <H_RTC_void_setDate+0x50>
     8ca:	5a c0       	rjmp	.+180    	; 0x980 <H_RTC_void_setDate+0x104>
	return ERROR;
	
	M_TWI_void_writeByte(config->day);
     8cc:	f8 01       	movw	r30, r16
     8ce:	80 81       	ld	r24, Z
     8d0:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	88 32       	cpi	r24, 0x28	; 40
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <H_RTC_void_setDate+0x68>
     8e2:	50 c0       	rjmp	.+160    	; 0x984 <H_RTC_void_setDate+0x108>
	return ERROR;
	
	M_TWI_void_writeByte((config->date / 10) << 4 | (config->date % 10));
     8e4:	f8 01       	movw	r30, r16
     8e6:	21 81       	ldd	r18, Z+1	; 0x01
     8e8:	9d ec       	ldi	r25, 0xCD	; 205
     8ea:	29 9f       	mul	r18, r25
     8ec:	91 2d       	mov	r25, r1
     8ee:	11 24       	eor	r1, r1
     8f0:	96 95       	lsr	r25
     8f2:	96 95       	lsr	r25
     8f4:	96 95       	lsr	r25
     8f6:	f0 e1       	ldi	r31, 0x10	; 16
     8f8:	9f 9f       	mul	r25, r31
     8fa:	a0 01       	movw	r20, r0
     8fc:	11 24       	eor	r1, r1
     8fe:	99 0f       	add	r25, r25
     900:	39 2f       	mov	r19, r25
     902:	33 0f       	add	r19, r19
     904:	33 0f       	add	r19, r19
     906:	93 0f       	add	r25, r19
     908:	82 2f       	mov	r24, r18
     90a:	89 1b       	sub	r24, r25
     90c:	84 2b       	or	r24, r20
     90e:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     912:	ce 01       	movw	r24, r28
     914:	01 96       	adiw	r24, 0x01	; 1
     916:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	88 32       	cpi	r24, 0x28	; 40
     91e:	a1 f5       	brne	.+104    	; 0x988 <H_RTC_void_setDate+0x10c>
	return ERROR;
	
	M_TWI_void_writeByte((config->month / 10) << 4 | (config->month % 10));
     920:	f8 01       	movw	r30, r16
     922:	82 81       	ldd	r24, Z+2	; 0x02
     924:	6a e0       	ldi	r22, 0x0A	; 10
     926:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__udivmodqi4>
     92a:	29 2f       	mov	r18, r25
     92c:	f0 e1       	ldi	r31, 0x10	; 16
     92e:	8f 9f       	mul	r24, r31
     930:	c0 01       	movw	r24, r0
     932:	11 24       	eor	r1, r1
     934:	82 2b       	or	r24, r18
     936:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     93a:	ce 01       	movw	r24, r28
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	88 32       	cpi	r24, 0x28	; 40
     946:	11 f5       	brne	.+68     	; 0x98c <H_RTC_void_setDate+0x110>
	return ERROR;
	
	M_TWI_void_writeByte((config->year / 10) << 4 | (config->year % 10));
     948:	f8 01       	movw	r30, r16
     94a:	83 81       	ldd	r24, Z+3	; 0x03
     94c:	6a e0       	ldi	r22, 0x0A	; 10
     94e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__udivmodqi4>
     952:	29 2f       	mov	r18, r25
     954:	f0 e1       	ldi	r31, 0x10	; 16
     956:	8f 9f       	mul	r24, r31
     958:	c0 01       	movw	r24, r0
     95a:	11 24       	eor	r1, r1
     95c:	82 2b       	or	r24, r18
     95e:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
     96a:	89 81       	ldd	r24, Y+1	; 0x01
     96c:	88 32       	cpi	r24, 0x28	; 40
     96e:	81 f4       	brne	.+32     	; 0x990 <H_RTC_void_setDate+0x114>
	return ERROR;
	
	
	M_TWI_void_stop();
     970:	0e 94 20 08 	call	0x1040	; 0x1040 <M_TWI_void_stop>
	return SUCCESS;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	0d c0       	rjmp	.+26     	; 0x992 <H_RTC_void_setDate+0x116>
u8 H_RTC_void_setDate(Date_config * config){
	u8 status;
	M_TWI_void_start();
	M_TWI_void_getStatus(&status);
	if(status != TWI_START)
	return ERROR;
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	0b c0       	rjmp	.+22     	; 0x992 <H_RTC_void_setDate+0x116>
	
	M_TWI_void_writeByte(Device_Write_address);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_SLA_W_ACK)
	return ERROR;
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	09 c0       	rjmp	.+18     	; 0x992 <H_RTC_void_setDate+0x116>
	
	M_TWI_void_writeByte(0x03);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	07 c0       	rjmp	.+14     	; 0x992 <H_RTC_void_setDate+0x116>
	
	M_TWI_void_writeByte(config->day);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	05 c0       	rjmp	.+10     	; 0x992 <H_RTC_void_setDate+0x116>
	
	M_TWI_void_writeByte((config->date / 10) << 4 | (config->date % 10));
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	03 c0       	rjmp	.+6      	; 0x992 <H_RTC_void_setDate+0x116>
	
	M_TWI_void_writeByte((config->month / 10) << 4 | (config->month % 10));
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	01 c0       	rjmp	.+2      	; 0x992 <H_RTC_void_setDate+0x116>
	
	M_TWI_void_writeByte((config->year / 10) << 4 | (config->year % 10));
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
     990:	80 e0       	ldi	r24, 0x00	; 0
	
	
	M_TWI_void_stop();
	return SUCCESS;
}
     992:	0f 90       	pop	r0
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	08 95       	ret

0000099e <H_RTC_void_getDate>:


u8 H_RTC_void_getDate(Date_config * config){
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <H_RTC_void_getDate+0xa>
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	8c 01       	movw	r16, r24
	u8 status,data;
	M_TWI_void_start();
     9ae:	0e 94 1a 08 	call	0x1034	; 0x1034 <M_TWI_void_start>
	M_TWI_void_getStatus(&status);
     9b2:	ce 01       	movw	r24, r28
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_START)
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	88 30       	cpi	r24, 0x08	; 8
     9be:	09 f0       	breq	.+2      	; 0x9c2 <H_RTC_void_getDate+0x24>
     9c0:	9a c0       	rjmp	.+308    	; 0xaf6 <H_RTC_void_getDate+0x158>
	return ERROR;
	
	M_TWI_void_writeByte(Device_Write_address);
     9c2:	80 ed       	ldi	r24, 0xD0	; 208
     9c4:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     9c8:	ce 01       	movw	r24, r28
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_SLA_W_ACK)
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	88 31       	cpi	r24, 0x18	; 24
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <H_RTC_void_getDate+0x3a>
     9d6:	91 c0       	rjmp	.+290    	; 0xafa <H_RTC_void_getDate+0x15c>
	return ERROR;
	
	M_TWI_void_writeByte(0x03);
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     9de:	ce 01       	movw	r24, r28
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	88 32       	cpi	r24, 0x28	; 40
     9ea:	09 f0       	breq	.+2      	; 0x9ee <H_RTC_void_getDate+0x50>
     9ec:	88 c0       	rjmp	.+272    	; 0xafe <H_RTC_void_getDate+0x160>
	return ERROR;
	
	M_TWI_void_start();
     9ee:	0e 94 1a 08 	call	0x1034	; 0x1034 <M_TWI_void_start>
	M_TWI_void_getStatus(&status);
     9f2:	ce 01       	movw	r24, r28
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_REP_START)
     9fa:	89 81       	ldd	r24, Y+1	; 0x01
     9fc:	80 31       	cpi	r24, 0x10	; 16
     9fe:	09 f0       	breq	.+2      	; 0xa02 <H_RTC_void_getDate+0x64>
     a00:	80 c0       	rjmp	.+256    	; 0xb02 <H_RTC_void_getDate+0x164>
	return ERROR;
	
	M_TWI_void_writeByte(Device_Read_address);
     a02:	81 ed       	ldi	r24, 0xD1	; 209
     a04:	0e 94 23 08 	call	0x1046	; 0x1046 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
     a08:	ce 01       	movw	r24, r28
     a0a:	01 96       	adiw	r24, 0x01	; 1
     a0c:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MT_SLA_R_ACK)
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	80 34       	cpi	r24, 0x40	; 64
     a14:	09 f0       	breq	.+2      	; 0xa18 <H_RTC_void_getDate+0x7a>
     a16:	77 c0       	rjmp	.+238    	; 0xb06 <H_RTC_void_getDate+0x168>
	return ERROR;
	
	M_TWI_void_readByteWithACK(&data);
     a18:	ce 01       	movw	r24, r28
     a1a:	02 96       	adiw	r24, 0x02	; 2
     a1c:	0e 94 2a 08 	call	0x1054	; 0x1054 <M_TWI_void_readByteWithACK>
	M_TWI_void_getStatus(&status);
     a20:	ce 01       	movw	r24, r28
     a22:	01 96       	adiw	r24, 0x01	; 1
     a24:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MR_DATA_ACK)
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	80 35       	cpi	r24, 0x50	; 80
     a2c:	09 f0       	breq	.+2      	; 0xa30 <H_RTC_void_getDate+0x92>
     a2e:	6d c0       	rjmp	.+218    	; 0xb0a <H_RTC_void_getDate+0x16c>
	return ERROR;
	config->day = data;
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	f8 01       	movw	r30, r16
     a34:	80 83       	st	Z, r24
	
	M_TWI_void_readByteWithACK(&data);
     a36:	ce 01       	movw	r24, r28
     a38:	02 96       	adiw	r24, 0x02	; 2
     a3a:	0e 94 2a 08 	call	0x1054	; 0x1054 <M_TWI_void_readByteWithACK>
	M_TWI_void_getStatus(&status);
     a3e:	ce 01       	movw	r24, r28
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MR_DATA_ACK)
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	80 35       	cpi	r24, 0x50	; 80
     a4a:	09 f0       	breq	.+2      	; 0xa4e <H_RTC_void_getDate+0xb0>
     a4c:	60 c0       	rjmp	.+192    	; 0xb0e <H_RTC_void_getDate+0x170>
	return ERROR;
	config->date = (data & 0x0F) + (((data & 0x30) * 10) >> 4);
     a4e:	2a 81       	ldd	r18, Y+2	; 0x02
     a50:	82 2f       	mov	r24, r18
     a52:	80 73       	andi	r24, 0x30	; 48
     a54:	fa e0       	ldi	r31, 0x0A	; 10
     a56:	8f 9f       	mul	r24, r31
     a58:	c0 01       	movw	r24, r0
     a5a:	11 24       	eor	r1, r1
     a5c:	95 95       	asr	r25
     a5e:	87 95       	ror	r24
     a60:	95 95       	asr	r25
     a62:	87 95       	ror	r24
     a64:	95 95       	asr	r25
     a66:	87 95       	ror	r24
     a68:	95 95       	asr	r25
     a6a:	87 95       	ror	r24
     a6c:	2f 70       	andi	r18, 0x0F	; 15
     a6e:	82 0f       	add	r24, r18
     a70:	f8 01       	movw	r30, r16
     a72:	81 83       	std	Z+1, r24	; 0x01
	
	M_TWI_void_readByteWithACK(&data);
     a74:	ce 01       	movw	r24, r28
     a76:	02 96       	adiw	r24, 0x02	; 2
     a78:	0e 94 2a 08 	call	0x1054	; 0x1054 <M_TWI_void_readByteWithACK>
	M_TWI_void_getStatus(&status);
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MR_DATA_ACK)
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	80 35       	cpi	r24, 0x50	; 80
     a88:	09 f0       	breq	.+2      	; 0xa8c <H_RTC_void_getDate+0xee>
     a8a:	43 c0       	rjmp	.+134    	; 0xb12 <H_RTC_void_getDate+0x174>
	return ERROR;
	config->month = (data & 0x0F) + (((data & 0x10) * 10) >> 4);
     a8c:	2a 81       	ldd	r18, Y+2	; 0x02
     a8e:	82 2f       	mov	r24, r18
     a90:	80 71       	andi	r24, 0x10	; 16
     a92:	fa e0       	ldi	r31, 0x0A	; 10
     a94:	8f 9f       	mul	r24, r31
     a96:	c0 01       	movw	r24, r0
     a98:	11 24       	eor	r1, r1
     a9a:	95 95       	asr	r25
     a9c:	87 95       	ror	r24
     a9e:	95 95       	asr	r25
     aa0:	87 95       	ror	r24
     aa2:	95 95       	asr	r25
     aa4:	87 95       	ror	r24
     aa6:	95 95       	asr	r25
     aa8:	87 95       	ror	r24
     aaa:	2f 70       	andi	r18, 0x0F	; 15
     aac:	82 0f       	add	r24, r18
     aae:	f8 01       	movw	r30, r16
     ab0:	82 83       	std	Z+2, r24	; 0x02
	
	M_TWI_void_readByteWithNACK(&data);
     ab2:	ce 01       	movw	r24, r28
     ab4:	02 96       	adiw	r24, 0x02	; 2
     ab6:	0e 94 33 08 	call	0x1066	; 0x1066 <M_TWI_void_readByteWithNACK>
	M_TWI_void_getStatus(&status);
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	0e 94 3c 08 	call	0x1078	; 0x1078 <M_TWI_void_getStatus>
	if(status != TWI_MR_DATA_NACK)
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	88 35       	cpi	r24, 0x58	; 88
     ac6:	39 f5       	brne	.+78     	; 0xb16 <H_RTC_void_getDate+0x178>
	return ERROR;
	config->year = (data & 0x0F) + (((data & 0xF0) * 10) >> 4);
     ac8:	2a 81       	ldd	r18, Y+2	; 0x02
     aca:	82 2f       	mov	r24, r18
     acc:	80 7f       	andi	r24, 0xF0	; 240
     ace:	fa e0       	ldi	r31, 0x0A	; 10
     ad0:	8f 9f       	mul	r24, r31
     ad2:	c0 01       	movw	r24, r0
     ad4:	11 24       	eor	r1, r1
     ad6:	95 95       	asr	r25
     ad8:	87 95       	ror	r24
     ada:	95 95       	asr	r25
     adc:	87 95       	ror	r24
     ade:	95 95       	asr	r25
     ae0:	87 95       	ror	r24
     ae2:	95 95       	asr	r25
     ae4:	87 95       	ror	r24
     ae6:	2f 70       	andi	r18, 0x0F	; 15
     ae8:	82 0f       	add	r24, r18
     aea:	f8 01       	movw	r30, r16
     aec:	83 83       	std	Z+3, r24	; 0x03

	
	M_TWI_void_stop();
     aee:	0e 94 20 08 	call	0x1040	; 0x1040 <M_TWI_void_stop>
	return SUCCESS;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	11 c0       	rjmp	.+34     	; 0xb18 <H_RTC_void_getDate+0x17a>
u8 H_RTC_void_getDate(Date_config * config){
	u8 status,data;
	M_TWI_void_start();
	M_TWI_void_getStatus(&status);
	if(status != TWI_START)
	return ERROR;
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0f c0       	rjmp	.+30     	; 0xb18 <H_RTC_void_getDate+0x17a>
	
	M_TWI_void_writeByte(Device_Write_address);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_SLA_W_ACK)
	return ERROR;
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0d c0       	rjmp	.+26     	; 0xb18 <H_RTC_void_getDate+0x17a>
	
	M_TWI_void_writeByte(0x03);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	0b c0       	rjmp	.+22     	; 0xb18 <H_RTC_void_getDate+0x17a>
	
	M_TWI_void_start();
	M_TWI_void_getStatus(&status);
	if(status != TWI_REP_START)
	return ERROR;
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <H_RTC_void_getDate+0x17a>
	
	M_TWI_void_writeByte(Device_Read_address);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_SLA_R_ACK)
	return ERROR;
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	07 c0       	rjmp	.+14     	; 0xb18 <H_RTC_void_getDate+0x17a>
	
	M_TWI_void_readByteWithACK(&data);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MR_DATA_ACK)
	return ERROR;
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	05 c0       	rjmp	.+10     	; 0xb18 <H_RTC_void_getDate+0x17a>
	config->day = data;
	
	M_TWI_void_readByteWithACK(&data);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MR_DATA_ACK)
	return ERROR;
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <H_RTC_void_getDate+0x17a>
	config->date = (data & 0x0F) + (((data & 0x30) * 10) >> 4);
	
	M_TWI_void_readByteWithACK(&data);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MR_DATA_ACK)
	return ERROR;
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <H_RTC_void_getDate+0x17a>
	config->month = (data & 0x0F) + (((data & 0x10) * 10) >> 4);
	
	M_TWI_void_readByteWithNACK(&data);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MR_DATA_NACK)
	return ERROR;
     b16:	80 e0       	ldi	r24, 0x00	; 0
	config->year = (data & 0x0F) + (((data & 0xF0) * 10) >> 4);

	
	M_TWI_void_stop();
	return SUCCESS;
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	08 95       	ret

00000b26 <__vector_16>:
     b26:	24 b1       	in	r18, 0x04	; 4
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	00 24       	eor	r0, r0
     b2c:	22 0f       	add	r18, r18
     b2e:	33 1f       	adc	r19, r19
     b30:	00 1c       	adc	r0, r0
     b32:	22 0f       	add	r18, r18
     b34:	33 1f       	adc	r19, r19
     b36:	00 1c       	adc	r0, r0
     b38:	23 2f       	mov	r18, r19
     b3a:	30 2d       	mov	r19, r0
     b3c:	85 b1       	in	r24, 0x05	; 5
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	88 0f       	add	r24, r24
     b46:	99 1f       	adc	r25, r25
     b48:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <__data_end>
     b4c:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <__data_end+0x1>
     b50:	82 2b       	or	r24, r18
     b52:	93 2b       	or	r25, r19
     b54:	09 95       	icall
     b56:	08 95       	ret

00000b58 <DIO_U8SetPinDirection>:
     b58:	dc 01       	movw	r26, r24
     b5a:	ec 91       	ld	r30, X
     b5c:	e4 30       	cpi	r30, 0x04	; 4
     b5e:	a0 f5       	brcc	.+104    	; 0xbc8 <DIO_U8SetPinDirection+0x70>
     b60:	11 96       	adiw	r26, 0x01	; 1
     b62:	2c 91       	ld	r18, X
     b64:	11 97       	sbiw	r26, 0x01	; 1
     b66:	28 30       	cpi	r18, 0x08	; 8
     b68:	88 f5       	brcc	.+98     	; 0xbcc <DIO_U8SetPinDirection+0x74>
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8c 91       	ld	r24, X
     b6e:	81 11       	cpse	r24, r1
     b70:	15 c0       	rjmp	.+42     	; 0xb9c <DIO_U8SetPinDirection+0x44>
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	eb 56       	subi	r30, 0x6B	; 107
     b7a:	ff 4f       	sbci	r31, 0xFF	; 255
     b7c:	01 90       	ld	r0, Z+
     b7e:	f0 81       	ld	r31, Z
     b80:	e0 2d       	mov	r30, r0
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <DIO_U8SetPinDirection+0x34>
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	2a 95       	dec	r18
     b8e:	e2 f7       	brpl	.-8      	; 0xb88 <DIO_U8SetPinDirection+0x30>
     b90:	80 95       	com	r24
     b92:	90 81       	ld	r25, Z
     b94:	89 23       	and	r24, r25
     b96:	80 83       	st	Z, r24
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	08 95       	ret
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	c1 f4       	brne	.+48     	; 0xbd0 <DIO_U8SetPinDirection+0x78>
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	ee 0f       	add	r30, r30
     ba4:	ff 1f       	adc	r31, r31
     ba6:	eb 56       	subi	r30, 0x6B	; 107
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	01 90       	ld	r0, Z+
     bac:	f0 81       	ld	r31, Z
     bae:	e0 2d       	mov	r30, r0
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <DIO_U8SetPinDirection+0x62>
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	2a 95       	dec	r18
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <DIO_U8SetPinDirection+0x5e>
     bbe:	90 81       	ld	r25, Z
     bc0:	89 2b       	or	r24, r25
     bc2:	80 83       	st	Z, r24
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	08 95       	ret
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	08 95       	ret
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	08 95       	ret
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	08 95       	ret

00000bd4 <DIO_U8SetPinValue>:
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	c1 f1       	breq	.+112    	; 0xc48 <DIO_U8SetPinValue+0x74>
     bd8:	dc 01       	movw	r26, r24
     bda:	ec 91       	ld	r30, X
     bdc:	e4 30       	cpi	r30, 0x04	; 4
     bde:	b0 f5       	brcc	.+108    	; 0xc4c <DIO_U8SetPinValue+0x78>
     be0:	11 96       	adiw	r26, 0x01	; 1
     be2:	2c 91       	ld	r18, X
     be4:	11 97       	sbiw	r26, 0x01	; 1
     be6:	28 30       	cpi	r18, 0x08	; 8
     be8:	98 f5       	brcc	.+102    	; 0xc50 <DIO_U8SetPinValue+0x7c>
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	8c 91       	ld	r24, X
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	a1 f4       	brne	.+40     	; 0xc1a <DIO_U8SetPinValue+0x46>
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	e3 57       	subi	r30, 0x73	; 115
     bfa:	ff 4f       	sbci	r31, 0xFF	; 255
     bfc:	01 90       	ld	r0, Z+
     bfe:	f0 81       	ld	r31, Z
     c00:	e0 2d       	mov	r30, r0
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <DIO_U8SetPinValue+0x38>
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	2a 95       	dec	r18
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <DIO_U8SetPinValue+0x34>
     c10:	90 81       	ld	r25, Z
     c12:	89 2b       	or	r24, r25
     c14:	80 83       	st	Z, r24
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	08 95       	ret
     c1a:	81 11       	cpse	r24, r1
     c1c:	1b c0       	rjmp	.+54     	; 0xc54 <DIO_U8SetPinValue+0x80>
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	e3 57       	subi	r30, 0x73	; 115
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	01 90       	ld	r0, Z+
     c2a:	f0 81       	ld	r31, Z
     c2c:	e0 2d       	mov	r30, r0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <DIO_U8SetPinValue+0x64>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	2a 95       	dec	r18
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <DIO_U8SetPinValue+0x60>
     c3c:	80 95       	com	r24
     c3e:	90 81       	ld	r25, Z
     c40:	89 23       	and	r24, r25
     c42:	80 83       	st	Z, r24
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	08 95       	ret
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	08 95       	ret
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	08 95       	ret
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	08 95       	ret
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	08 95       	ret

00000c58 <__vector_1>:
     c58:	1f 92       	push	r1
     c5a:	0f 92       	push	r0
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	0f 92       	push	r0
     c60:	11 24       	eor	r1, r1
     c62:	2f 93       	push	r18
     c64:	3f 93       	push	r19
     c66:	4f 93       	push	r20
     c68:	5f 93       	push	r21
     c6a:	6f 93       	push	r22
     c6c:	7f 93       	push	r23
     c6e:	8f 93       	push	r24
     c70:	9f 93       	push	r25
     c72:	af 93       	push	r26
     c74:	bf 93       	push	r27
     c76:	ef 93       	push	r30
     c78:	ff 93       	push	r31
     c7a:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <Action>
     c7e:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <Action+0x1>
     c82:	30 97       	sbiw	r30, 0x00	; 0
     c84:	09 f0       	breq	.+2      	; 0xc88 <__vector_1+0x30>
     c86:	09 95       	icall
     c88:	ff 91       	pop	r31
     c8a:	ef 91       	pop	r30
     c8c:	bf 91       	pop	r27
     c8e:	af 91       	pop	r26
     c90:	9f 91       	pop	r25
     c92:	8f 91       	pop	r24
     c94:	7f 91       	pop	r23
     c96:	6f 91       	pop	r22
     c98:	5f 91       	pop	r21
     c9a:	4f 91       	pop	r20
     c9c:	3f 91       	pop	r19
     c9e:	2f 91       	pop	r18
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	0f 90       	pop	r0
     ca6:	1f 90       	pop	r1
     ca8:	18 95       	reti

00000caa <__vector_2>:
     caa:	1f 92       	push	r1
     cac:	0f 92       	push	r0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	0f 92       	push	r0
     cb2:	11 24       	eor	r1, r1
     cb4:	2f 93       	push	r18
     cb6:	3f 93       	push	r19
     cb8:	4f 93       	push	r20
     cba:	5f 93       	push	r21
     cbc:	6f 93       	push	r22
     cbe:	7f 93       	push	r23
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	af 93       	push	r26
     cc6:	bf 93       	push	r27
     cc8:	ef 93       	push	r30
     cca:	ff 93       	push	r31
     ccc:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <Action+0x2>
     cd0:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <Action+0x3>
     cd4:	30 97       	sbiw	r30, 0x00	; 0
     cd6:	09 f0       	breq	.+2      	; 0xcda <__vector_2+0x30>
     cd8:	09 95       	icall
     cda:	ff 91       	pop	r31
     cdc:	ef 91       	pop	r30
     cde:	bf 91       	pop	r27
     ce0:	af 91       	pop	r26
     ce2:	9f 91       	pop	r25
     ce4:	8f 91       	pop	r24
     ce6:	7f 91       	pop	r23
     ce8:	6f 91       	pop	r22
     cea:	5f 91       	pop	r21
     cec:	4f 91       	pop	r20
     cee:	3f 91       	pop	r19
     cf0:	2f 91       	pop	r18
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0
     cf8:	1f 90       	pop	r1
     cfa:	18 95       	reti

00000cfc <__vector_3>:
     cfc:	1f 92       	push	r1
     cfe:	0f 92       	push	r0
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	0f 92       	push	r0
     d04:	11 24       	eor	r1, r1
     d06:	2f 93       	push	r18
     d08:	3f 93       	push	r19
     d0a:	4f 93       	push	r20
     d0c:	5f 93       	push	r21
     d0e:	6f 93       	push	r22
     d10:	7f 93       	push	r23
     d12:	8f 93       	push	r24
     d14:	9f 93       	push	r25
     d16:	af 93       	push	r26
     d18:	bf 93       	push	r27
     d1a:	ef 93       	push	r30
     d1c:	ff 93       	push	r31
     d1e:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <Action+0x4>
     d22:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <Action+0x5>
     d26:	30 97       	sbiw	r30, 0x00	; 0
     d28:	09 f0       	breq	.+2      	; 0xd2c <__vector_3+0x30>
     d2a:	09 95       	icall
     d2c:	ff 91       	pop	r31
     d2e:	ef 91       	pop	r30
     d30:	bf 91       	pop	r27
     d32:	af 91       	pop	r26
     d34:	9f 91       	pop	r25
     d36:	8f 91       	pop	r24
     d38:	7f 91       	pop	r23
     d3a:	6f 91       	pop	r22
     d3c:	5f 91       	pop	r21
     d3e:	4f 91       	pop	r20
     d40:	3f 91       	pop	r19
     d42:	2f 91       	pop	r18
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
     d4e:	1f 92       	push	r1
     d50:	0f 92       	push	r0
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	0f 92       	push	r0
     d56:	11 24       	eor	r1, r1
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
	if(Action_Spi != NULL){
     d70:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <Action_Spi>
     d74:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <Action_Spi+0x1>
     d78:	30 97       	sbiw	r30, 0x00	; 0
     d7a:	11 f0       	breq	.+4      	; 0xd80 <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
     d7c:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
     d7e:	09 95       	icall
	}
     d80:	ff 91       	pop	r31
     d82:	ef 91       	pop	r30
     d84:	bf 91       	pop	r27
     d86:	af 91       	pop	r26
     d88:	9f 91       	pop	r25
     d8a:	8f 91       	pop	r24
     d8c:	7f 91       	pop	r23
     d8e:	6f 91       	pop	r22
     d90:	5f 91       	pop	r21
     d92:	4f 91       	pop	r20
     d94:	3f 91       	pop	r19
     d96:	2f 91       	pop	r18
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	0f 90       	pop	r0
     d9e:	1f 90       	pop	r1
     da0:	18 95       	reti

00000da2 <__vector_11>:
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	2f 93       	push	r18
     dae:	3f 93       	push	r19
     db0:	4f 93       	push	r20
     db2:	5f 93       	push	r21
     db4:	6f 93       	push	r22
     db6:	7f 93       	push	r23
     db8:	8f 93       	push	r24
     dba:	9f 93       	push	r25
     dbc:	af 93       	push	r26
     dbe:	bf 93       	push	r27
     dc0:	ef 93       	push	r30
     dc2:	ff 93       	push	r31
     dc4:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <Action_Timer>
     dc8:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <Action_Timer+0x1>
     dcc:	89 2b       	or	r24, r25
     dce:	89 f1       	breq	.+98     	; 0xe32 <__vector_11+0x90>
     dd0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <counter.1685>
     dd4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <counter.1685+0x1>
     dd8:	a0 91 aa 00 	lds	r26, 0x00AA	; 0x8000aa <counter.1685+0x2>
     ddc:	b0 91 ab 00 	lds	r27, 0x00AB	; 0x8000ab <counter.1685+0x3>
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	a1 1d       	adc	r26, r1
     de4:	b1 1d       	adc	r27, r1
     de6:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <counter.1685>
     dea:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <counter.1685+0x1>
     dee:	a0 93 aa 00 	sts	0x00AA, r26	; 0x8000aa <counter.1685+0x2>
     df2:	b0 93 ab 00 	sts	0x00AB, r27	; 0x8000ab <counter.1685+0x3>
     df6:	40 91 b4 00 	lds	r20, 0x00B4	; 0x8000b4 <numOverflows>
     dfa:	50 91 b5 00 	lds	r21, 0x00B5	; 0x8000b5 <numOverflows+0x1>
     dfe:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <numOverflows+0x2>
     e02:	70 91 b7 00 	lds	r23, 0x00B7	; 0x8000b7 <numOverflows+0x3>
     e06:	84 17       	cp	r24, r20
     e08:	95 07       	cpc	r25, r21
     e0a:	a6 07       	cpc	r26, r22
     e0c:	b7 07       	cpc	r27, r23
     e0e:	89 f4       	brne	.+34     	; 0xe32 <__vector_11+0x90>
     e10:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <remainingCounts>
     e14:	81 95       	neg	r24
     e16:	82 bf       	out	0x32, r24	; 50
     e18:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <counter.1685>
     e1c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <counter.1685+0x1>
     e20:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <counter.1685+0x2>
     e24:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <counter.1685+0x3>
     e28:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <Action_Timer>
     e2c:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <Action_Timer+0x1>
     e30:	09 95       	icall
     e32:	ff 91       	pop	r31
     e34:	ef 91       	pop	r30
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	7f 91       	pop	r23
     e40:	6f 91       	pop	r22
     e42:	5f 91       	pop	r21
     e44:	4f 91       	pop	r20
     e46:	3f 91       	pop	r19
     e48:	2f 91       	pop	r18
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <__vector_10>:
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	0f 92       	push	r0
     e5c:	11 24       	eor	r1, r1
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
     e76:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <Action_Timer+0x2>
     e7a:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <Action_Timer+0x3>
     e7e:	30 97       	sbiw	r30, 0x00	; 0
     e80:	09 f0       	breq	.+2      	; 0xe84 <__vector_10+0x30>
     e82:	09 95       	icall
     e84:	ff 91       	pop	r31
     e86:	ef 91       	pop	r30
     e88:	bf 91       	pop	r27
     e8a:	af 91       	pop	r26
     e8c:	9f 91       	pop	r25
     e8e:	8f 91       	pop	r24
     e90:	7f 91       	pop	r23
     e92:	6f 91       	pop	r22
     e94:	5f 91       	pop	r21
     e96:	4f 91       	pop	r20
     e98:	3f 91       	pop	r19
     e9a:	2f 91       	pop	r18
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti

00000ea6 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
     ea6:	1f 92       	push	r1
     ea8:	0f 92       	push	r0
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	0f 92       	push	r0
     eae:	11 24       	eor	r1, r1
     eb0:	2f 93       	push	r18
     eb2:	3f 93       	push	r19
     eb4:	4f 93       	push	r20
     eb6:	5f 93       	push	r21
     eb8:	6f 93       	push	r22
     eba:	7f 93       	push	r23
     ebc:	8f 93       	push	r24
     ebe:	9f 93       	push	r25
     ec0:	af 93       	push	r26
     ec2:	bf 93       	push	r27
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	ef 93       	push	r30
     eca:	ff 93       	push	r31
	Action_Timer[0]();
     ecc:	cc eb       	ldi	r28, 0xBC	; 188
     ece:	d0 e0       	ldi	r29, 0x00	; 0
     ed0:	e8 81       	ld	r30, Y
     ed2:	f9 81       	ldd	r31, Y+1	; 0x01
     ed4:	09 95       	icall
	numOverflows++;
     ed6:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <numOverflows>
     eda:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <numOverflows+0x1>
     ede:	a0 91 c6 00 	lds	r26, 0x00C6	; 0x8000c6 <numOverflows+0x2>
     ee2:	b0 91 c7 00 	lds	r27, 0x00C7	; 0x8000c7 <numOverflows+0x3>
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	a1 1d       	adc	r26, r1
     eea:	b1 1d       	adc	r27, r1
     eec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <numOverflows>
     ef0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <numOverflows+0x1>
     ef4:	a0 93 c6 00 	sts	0x00C6, r26	; 0x8000c6 <numOverflows+0x2>
     ef8:	b0 93 c7 00 	sts	0x00C7, r27	; 0x8000c7 <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
     efc:	e8 81       	ld	r30, Y
     efe:	f9 81       	ldd	r31, Y+1	; 0x01
     f00:	30 97       	sbiw	r30, 0x00	; 0
     f02:	49 f1       	breq	.+82     	; 0xf56 <__vector_9+0xb0>
		counter++;
     f04:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <counter.1744>
     f08:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <counter.1744+0x1>
     f0c:	a0 91 ba 00 	lds	r26, 0x00BA	; 0x8000ba <counter.1744+0x2>
     f10:	b0 91 bb 00 	lds	r27, 0x00BB	; 0x8000bb <counter.1744+0x3>
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	a1 1d       	adc	r26, r1
     f18:	b1 1d       	adc	r27, r1
     f1a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <counter.1744>
     f1e:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <counter.1744+0x1>
     f22:	a0 93 ba 00 	sts	0x00BA, r26	; 0x8000ba <counter.1744+0x2>
     f26:	b0 93 bb 00 	sts	0x00BB, r27	; 0x8000bb <counter.1744+0x3>
		if(counter == req_numOverflows){
     f2a:	40 91 c8 00 	lds	r20, 0x00C8	; 0x8000c8 <req_numOverflows>
     f2e:	50 91 c9 00 	lds	r21, 0x00C9	; 0x8000c9 <req_numOverflows+0x1>
     f32:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <req_numOverflows+0x2>
     f36:	70 91 cb 00 	lds	r23, 0x00CB	; 0x8000cb <req_numOverflows+0x3>
     f3a:	84 17       	cp	r24, r20
     f3c:	95 07       	cpc	r25, r21
     f3e:	a6 07       	cpc	r26, r22
     f40:	b7 07       	cpc	r27, r23
     f42:	49 f4       	brne	.+18     	; 0xf56 <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
     f44:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <counter.1744>
     f48:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <counter.1744+0x1>
     f4c:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <counter.1744+0x2>
     f50:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <counter.1744+0x3>
			Action_Timer[0]();
     f54:	09 95       	icall
		}
		
	}
}
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	7f 91       	pop	r23
     f68:	6f 91       	pop	r22
     f6a:	5f 91       	pop	r21
     f6c:	4f 91       	pop	r20
     f6e:	3f 91       	pop	r19
     f70:	2f 91       	pop	r18
     f72:	0f 90       	pop	r0
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	0f 90       	pop	r0
     f78:	1f 90       	pop	r1
     f7a:	18 95       	reti

00000f7c <__vector_7>:

ISR(TIMER1_COMPA_vect){
     f7c:	1f 92       	push	r1
     f7e:	0f 92       	push	r0
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	0f 92       	push	r0
     f84:	11 24       	eor	r1, r1
     f86:	2f 93       	push	r18
     f88:	3f 93       	push	r19
     f8a:	4f 93       	push	r20
     f8c:	5f 93       	push	r21
     f8e:	6f 93       	push	r22
     f90:	7f 93       	push	r23
     f92:	8f 93       	push	r24
     f94:	9f 93       	push	r25
     f96:	af 93       	push	r26
     f98:	bf 93       	push	r27
     f9a:	ef 93       	push	r30
     f9c:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
     f9e:	e0 91 be 00 	lds	r30, 0x00BE	; 0x8000be <Action_Timer+0x2>
     fa2:	f0 91 bf 00 	lds	r31, 0x00BF	; 0x8000bf <Action_Timer+0x3>
     fa6:	30 97       	sbiw	r30, 0x00	; 0
     fa8:	09 f0       	breq	.+2      	; 0xfac <__vector_7+0x30>
		Action_Timer[1]();
     faa:	09 95       	icall
	}
}
     fac:	ff 91       	pop	r31
     fae:	ef 91       	pop	r30
     fb0:	bf 91       	pop	r27
     fb2:	af 91       	pop	r26
     fb4:	9f 91       	pop	r25
     fb6:	8f 91       	pop	r24
     fb8:	7f 91       	pop	r23
     fba:	6f 91       	pop	r22
     fbc:	5f 91       	pop	r21
     fbe:	4f 91       	pop	r20
     fc0:	3f 91       	pop	r19
     fc2:	2f 91       	pop	r18
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
     fc8:	0f 90       	pop	r0
     fca:	1f 90       	pop	r1
     fcc:	18 95       	reti

00000fce <__vector_6>:


ISR(TIMER1_CAPT_vect){
     fce:	1f 92       	push	r1
     fd0:	0f 92       	push	r0
     fd2:	0f b6       	in	r0, 0x3f	; 63
     fd4:	0f 92       	push	r0
     fd6:	11 24       	eor	r1, r1
     fd8:	2f 93       	push	r18
     fda:	3f 93       	push	r19
     fdc:	4f 93       	push	r20
     fde:	5f 93       	push	r21
     fe0:	6f 93       	push	r22
     fe2:	7f 93       	push	r23
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	af 93       	push	r26
     fea:	bf 93       	push	r27
     fec:	ef 93       	push	r30
     fee:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
     ff0:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <Action_Timer+0x6>
     ff4:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <Action_Timer+0x7>
     ff8:	30 97       	sbiw	r30, 0x00	; 0
     ffa:	09 f0       	breq	.+2      	; 0xffe <__vector_6+0x30>
			Action_Timer[3]();
     ffc:	09 95       	icall
			
			
		}
     ffe:	ff 91       	pop	r31
    1000:	ef 91       	pop	r30
    1002:	bf 91       	pop	r27
    1004:	af 91       	pop	r26
    1006:	9f 91       	pop	r25
    1008:	8f 91       	pop	r24
    100a:	7f 91       	pop	r23
    100c:	6f 91       	pop	r22
    100e:	5f 91       	pop	r21
    1010:	4f 91       	pop	r20
    1012:	3f 91       	pop	r19
    1014:	2f 91       	pop	r18
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 90       	pop	r0
    101c:	1f 90       	pop	r1
    101e:	18 95       	reti

00001020 <M_TWI_void_init>:
void M_TWI_void_init(const TWI_Config *Config_Ptr)
{
	//put 2 in case of 8 mhz 400 bit
	//put 32 in case of 8mhz 100 bit
   // TWI->TWBR = Config_Ptr->twbr;
    TWI->TWBR = 32;
    1020:	20 e2       	ldi	r18, 0x20	; 32
    1022:	20 b9       	out	0x00, r18	; 0
	TWI->TWSR = 0;
    1024:	11 b8       	out	0x01, r1	; 1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWI->TWAR = Config_Ptr->myAddress << 1 ; // my address = 0x01 :)
    1026:	fc 01       	movw	r30, r24
    1028:	81 81       	ldd	r24, Z+1	; 0x01
    102a:	88 0f       	add	r24, r24
    102c:	82 b9       	out	0x02, r24	; 2
	
    TWI->TWCR = (1<<TWEN); /* enable TWI */
    102e:	84 e0       	ldi	r24, 0x04	; 4
    1030:	86 bf       	out	0x36, r24	; 54
    1032:	08 95       	ret

00001034 <M_TWI_void_start>:
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWI->TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1034:	84 ea       	ldi	r24, 0xA4	; 164
    1036:	86 bf       	out	0x36, r24	; 54
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWI->TWCR,TWINT));
    1038:	06 b6       	in	r0, 0x36	; 54
    103a:	07 fe       	sbrs	r0, 7
    103c:	fd cf       	rjmp	.-6      	; 0x1038 <M_TWI_void_start+0x4>
}
    103e:	08 95       	ret

00001040 <M_TWI_void_stop>:
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWI->TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1040:	84 e9       	ldi	r24, 0x94	; 148
    1042:	86 bf       	out	0x36, r24	; 54
    1044:	08 95       	ret

00001046 <M_TWI_void_writeByte>:
}

void M_TWI_void_writeByte(u8 data)
{
    /* Put data On TWI data Register */
    TWI->TWDR = data;
    1046:	83 b9       	out	0x03, r24	; 3
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWI->TWCR = (1 << TWINT) | (1 << TWEN);
    1048:	84 e8       	ldi	r24, 0x84	; 132
    104a:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWI->TWCR,TWINT));
    104c:	06 b6       	in	r0, 0x36	; 54
    104e:	07 fe       	sbrs	r0, 7
    1050:	fd cf       	rjmp	.-6      	; 0x104c <M_TWI_void_writeByte+0x6>
}
    1052:	08 95       	ret

00001054 <M_TWI_void_readByteWithACK>:
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWI->TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1054:	24 ec       	ldi	r18, 0xC4	; 196
    1056:	26 bf       	out	0x36, r18	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWI->TWCR,TWINT));
    1058:	06 b6       	in	r0, 0x36	; 54
    105a:	07 fe       	sbrs	r0, 7
    105c:	fd cf       	rjmp	.-6      	; 0x1058 <M_TWI_void_readByteWithACK+0x4>
    /* Read Data */
    *ptr = TWI->TWDR;
    105e:	23 b1       	in	r18, 0x03	; 3
    1060:	fc 01       	movw	r30, r24
    1062:	20 83       	st	Z, r18
    1064:	08 95       	ret

00001066 <M_TWI_void_readByteWithNACK>:
{
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWI->TWCR = (1 << TWINT) | (1 << TWEN);
    1066:	24 e8       	ldi	r18, 0x84	; 132
    1068:	26 bf       	out	0x36, r18	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWI->TWCR,TWINT));
    106a:	06 b6       	in	r0, 0x36	; 54
    106c:	07 fe       	sbrs	r0, 7
    106e:	fd cf       	rjmp	.-6      	; 0x106a <M_TWI_void_readByteWithNACK+0x4>
    /* Read Data */
    *ptr = TWI->TWDR;
    1070:	23 b1       	in	r18, 0x03	; 3
    1072:	fc 01       	movw	r30, r24
    1074:	20 83       	st	Z, r18
    1076:	08 95       	ret

00001078 <M_TWI_void_getStatus>:
}

void M_TWI_void_getStatus(u8 * status)
{
    1078:	fc 01       	movw	r30, r24
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    *status = TWI->TWSR & 0xF8;
    107a:	91 b1       	in	r25, 0x01	; 1
    107c:	98 7f       	andi	r25, 0xF8	; 248
    107e:	90 83       	st	Z, r25
    1080:	08 95       	ret

00001082 <__vector_13>:
	//set callback
	Action_Uart[0] = ptrfn;
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
    1082:	1f 92       	push	r1
    1084:	0f 92       	push	r0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	0f 92       	push	r0
    108a:	11 24       	eor	r1, r1
    108c:	2f 93       	push	r18
    108e:	3f 93       	push	r19
    1090:	4f 93       	push	r20
    1092:	5f 93       	push	r21
    1094:	6f 93       	push	r22
    1096:	7f 93       	push	r23
    1098:	8f 93       	push	r24
    109a:	9f 93       	push	r25
    109c:	af 93       	push	r26
    109e:	bf 93       	push	r27
    10a0:	ef 93       	push	r30
    10a2:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
    10a4:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
    10a6:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <Action_Uart>
    10aa:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <Action_Uart+0x1>
    10ae:	30 97       	sbiw	r30, 0x00	; 0
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <__vector_13+0x32>
		Action_Uart[0](receivedData);
    10b2:	09 95       	icall
	}
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	0f 90       	pop	r0
    10d2:	1f 90       	pop	r1
    10d4:	18 95       	reti

000010d6 <__udivmodqi4>:
    10d6:	99 1b       	sub	r25, r25
    10d8:	79 e0       	ldi	r23, 0x09	; 9
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <__udivmodqi4_ep>

000010dc <__udivmodqi4_loop>:
    10dc:	99 1f       	adc	r25, r25
    10de:	96 17       	cp	r25, r22
    10e0:	08 f0       	brcs	.+2      	; 0x10e4 <__udivmodqi4_ep>
    10e2:	96 1b       	sub	r25, r22

000010e4 <__udivmodqi4_ep>:
    10e4:	88 1f       	adc	r24, r24
    10e6:	7a 95       	dec	r23
    10e8:	c9 f7       	brne	.-14     	; 0x10dc <__udivmodqi4_loop>
    10ea:	80 95       	com	r24
    10ec:	08 95       	ret

000010ee <__itoa_ncheck>:
    10ee:	bb 27       	eor	r27, r27
    10f0:	4a 30       	cpi	r20, 0x0A	; 10
    10f2:	31 f4       	brne	.+12     	; 0x1100 <__itoa_ncheck+0x12>
    10f4:	99 23       	and	r25, r25
    10f6:	22 f4       	brpl	.+8      	; 0x1100 <__itoa_ncheck+0x12>
    10f8:	bd e2       	ldi	r27, 0x2D	; 45
    10fa:	90 95       	com	r25
    10fc:	81 95       	neg	r24
    10fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1100:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__utoa_common>

00001104 <__utoa_ncheck>:
    1104:	bb 27       	eor	r27, r27

00001106 <__utoa_common>:
    1106:	fb 01       	movw	r30, r22
    1108:	55 27       	eor	r21, r21
    110a:	aa 27       	eor	r26, r26
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	aa 1f       	adc	r26, r26
    1112:	a4 17       	cp	r26, r20
    1114:	10 f0       	brcs	.+4      	; 0x111a <__utoa_common+0x14>
    1116:	a4 1b       	sub	r26, r20
    1118:	83 95       	inc	r24
    111a:	50 51       	subi	r21, 0x10	; 16
    111c:	b9 f7       	brne	.-18     	; 0x110c <__utoa_common+0x6>
    111e:	a0 5d       	subi	r26, 0xD0	; 208
    1120:	aa 33       	cpi	r26, 0x3A	; 58
    1122:	08 f0       	brcs	.+2      	; 0x1126 <__utoa_common+0x20>
    1124:	a9 5d       	subi	r26, 0xD9	; 217
    1126:	a1 93       	st	Z+, r26
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	79 f7       	brne	.-34     	; 0x110a <__utoa_common+0x4>
    112c:	b1 11       	cpse	r27, r1
    112e:	b1 93       	st	Z+, r27
    1130:	11 92       	st	Z+, r1
    1132:	cb 01       	movw	r24, r22
    1134:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <strrev>

00001138 <strrev>:
    1138:	dc 01       	movw	r26, r24
    113a:	fc 01       	movw	r30, r24
    113c:	67 2f       	mov	r22, r23
    113e:	71 91       	ld	r23, Z+
    1140:	77 23       	and	r23, r23
    1142:	e1 f7       	brne	.-8      	; 0x113c <strrev+0x4>
    1144:	32 97       	sbiw	r30, 0x02	; 2
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <strrev+0x18>
    1148:	7c 91       	ld	r23, X
    114a:	6d 93       	st	X+, r22
    114c:	70 83       	st	Z, r23
    114e:	62 91       	ld	r22, -Z
    1150:	ae 17       	cp	r26, r30
    1152:	bf 07       	cpc	r27, r31
    1154:	c8 f3       	brcs	.-14     	; 0x1148 <strrev+0x10>
    1156:	08 95       	ret

00001158 <_exit>:
    1158:	f8 94       	cli

0000115a <__stop_program>:
    115a:	ff cf       	rjmp	.-2      	; 0x115a <__stop_program>
