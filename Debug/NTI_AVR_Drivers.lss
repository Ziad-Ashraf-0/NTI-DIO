
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  00000d92  00000e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800104  00800104  00000eca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d55  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c2  00000000  00000000  00003f05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017b2  00000000  00000000  00004fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b4  00000000  00000000  0000677c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012b9  00000000  00000000  00006f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002045  00000000  00000000  000081e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  0000a22e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 b2 04 	jmp	0x964	; 0x964 <__vector_1>
   8:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_2>
   c:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__vector_3>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__vector_6>
  1c:	0c 94 00 06 	jmp	0xc00	; 0xc00 <__vector_7>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_9>
  28:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__vector_10>
  2c:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__vector_11>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	30 01       	movw	r6, r0
  56:	4c 01       	movw	r8, r24
  58:	32 01       	movw	r6, r4
  5a:	34 01       	movw	r6, r8
  5c:	36 01       	movw	r6, r12
  5e:	38 01       	movw	r6, r16
  60:	3a 01       	movw	r6, r20
  62:	3c 01       	movw	r6, r24
  64:	3e 01       	movw	r6, r28
  66:	40 01       	movw	r8, r0
  68:	42 01       	movw	r8, r4
  6a:	44 01       	movw	r8, r8
  6c:	4d 01       	movw	r8, r26
  6e:	46 01       	movw	r8, r12
  70:	48 01       	movw	r8, r16
  72:	4a 01       	movw	r8, r20

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e2 e9       	ldi	r30, 0x92	; 146
  88:	fd e0       	ldi	r31, 0x0D	; 13
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a4 30       	cpi	r26, 0x04	; 4
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a4 e0       	ldi	r26, 0x04	; 4
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a3 33       	cpi	r26, 0x33	; 51
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  aa:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	83 ed       	ldi	r24, 0xD3	; 211
  b4:	90 e3       	ldi	r25, 0x30	; 48
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0xa>
  bc:	00 00       	nop

	// Define variables to store the user's input
	s32 enteredID = 0;
	s32 enteredPassword = 0;
	_delay_ms(50);
	H_LCD_void_Init();
  be:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <H_LCD_void_Init>
	//H_LCD_void_creatCustomChar(Character1,0);
	//H_LCD_void_displayCustomChar(0);
	
	
	// Display a message to enter the ID
	H_LCD_void_sendString("  Enter ID: ");
  c2:	84 e8       	ldi	r24, 0x84	; 132
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 ba 03 	call	0x774	; 0x774 <H_LCD_void_sendString>

	// Get the user's input for ID using the keypad
	for (u8 i = 0; i < 4; i++) {
  ca:	c0 e0       	ldi	r28, 0x00	; 0


int main(void) {

	// Define variables to store the user's input
	s32 enteredID = 0;
  cc:	c1 2c       	mov	r12, r1
  ce:	d1 2c       	mov	r13, r1
  d0:	76 01       	movw	r14, r12
	
	// Display a message to enter the ID
	H_LCD_void_sendString("  Enter ID: ");

	// Get the user's input for ID using the keypad
	for (u8 i = 0; i < 4; i++) {
  d2:	21 c0       	rjmp	.+66     	; 0x116 <main+0x64>
		u8 key = KEYPAD_getPressedKey();
  d4:	0e 94 4e 01 	call	0x29c	; 0x29c <KEYPAD_getPressedKey>
		H_LCD_void_sendIntNum(key);
  d8:	88 2e       	mov	r8, r24
  da:	91 2c       	mov	r9, r1
  dc:	a1 2c       	mov	r10, r1
  de:	b1 2c       	mov	r11, r1
  e0:	c5 01       	movw	r24, r10
  e2:	b4 01       	movw	r22, r8
  e4:	0e 94 cd 03 	call	0x79a	; 0x79a <H_LCD_void_sendIntNum>
		enteredID = enteredID * 10 + key;
  e8:	cc 0c       	add	r12, r12
  ea:	dd 1c       	adc	r13, r13
  ec:	ee 1c       	adc	r14, r14
  ee:	ff 1c       	adc	r15, r15
  f0:	d7 01       	movw	r26, r14
  f2:	c6 01       	movw	r24, r12
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	aa 1f       	adc	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	aa 1f       	adc	r26, r26
 102:	bb 1f       	adc	r27, r27
 104:	c8 0e       	add	r12, r24
 106:	d9 1e       	adc	r13, r25
 108:	ea 1e       	adc	r14, r26
 10a:	fb 1e       	adc	r15, r27
 10c:	c8 0c       	add	r12, r8
 10e:	d9 1c       	adc	r13, r9
 110:	ea 1c       	adc	r14, r10
 112:	fb 1c       	adc	r15, r11
	
	// Display a message to enter the ID
	H_LCD_void_sendString("  Enter ID: ");

	// Get the user's input for ID using the keypad
	for (u8 i = 0; i < 4; i++) {
 114:	cf 5f       	subi	r28, 0xFF	; 255
 116:	c4 30       	cpi	r28, 0x04	; 4
 118:	e8 f2       	brcs	.-70     	; 0xd4 <main+0x22>
		u8 key = KEYPAD_getPressedKey();
		H_LCD_void_sendIntNum(key);
		enteredID = enteredID * 10 + key;
	}
	// Clear the LCD screen
	H_LCD_void_clearScreen();
 11a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <H_LCD_void_clearScreen>

	// Display a message to enter the password
	H_LCD_void_sendString(" Enter Password: ");
 11e:	81 e9       	ldi	r24, 0x91	; 145
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 ba 03 	call	0x774	; 0x774 <H_LCD_void_sendString>

	// Get the user's input for the password using the keypad and display '*' characters
	for (u8 i = 0; i < 4; i++) {
 126:	c0 e0       	ldi	r28, 0x00	; 0

int main(void) {

	// Define variables to store the user's input
	s32 enteredID = 0;
	s32 enteredPassword = 0;
 128:	81 2c       	mov	r8, r1
 12a:	91 2c       	mov	r9, r1
 12c:	54 01       	movw	r10, r8

	// Display a message to enter the password
	H_LCD_void_sendString(" Enter Password: ");

	// Get the user's input for the password using the keypad and display '*' characters
	for (u8 i = 0; i < 4; i++) {
 12e:	1c c0       	rjmp	.+56     	; 0x168 <main+0xb6>
		u8 key = KEYPAD_getPressedKey();
 130:	0e 94 4e 01 	call	0x29c	; 0x29c <KEYPAD_getPressedKey>
		enteredPassword = enteredPassword * 10 + key;
 134:	88 0c       	add	r8, r8
 136:	99 1c       	adc	r9, r9
 138:	aa 1c       	adc	r10, r10
 13a:	bb 1c       	adc	r11, r11
 13c:	b5 01       	movw	r22, r10
 13e:	a4 01       	movw	r20, r8
 140:	44 0f       	add	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	66 1f       	adc	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	66 1f       	adc	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	84 0e       	add	r8, r20
 152:	95 1e       	adc	r9, r21
 154:	a6 1e       	adc	r10, r22
 156:	b7 1e       	adc	r11, r23
 158:	88 0e       	add	r8, r24
 15a:	91 1c       	adc	r9, r1
 15c:	a1 1c       	adc	r10, r1
 15e:	b1 1c       	adc	r11, r1
		H_LCD_void_sendData('*');
 160:	8a e2       	ldi	r24, 0x2A	; 42
 162:	0e 94 77 03 	call	0x6ee	; 0x6ee <H_LCD_void_sendData>

	// Display a message to enter the password
	H_LCD_void_sendString(" Enter Password: ");

	// Get the user's input for the password using the keypad and display '*' characters
	for (u8 i = 0; i < 4; i++) {
 166:	cf 5f       	subi	r28, 0xFF	; 255
 168:	c4 30       	cpi	r28, 0x04	; 4
 16a:	10 f3       	brcs	.-60     	; 0x130 <main+0x7e>
		u8 key = KEYPAD_getPressedKey();
		enteredPassword = enteredPassword * 10 + key;
		H_LCD_void_sendData('*');
	}
	
	H_LCD_void_clearScreen();
 16c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <H_LCD_void_clearScreen>
	// You can compare these values with the database as shown in the previous response.
	// The following code assumes that you have a database as mentioned earlier.

	int found = 0;
	u8 i;
	for (u8 i = 0; i < databaseSize; i++) {
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	23 c0       	rjmp	.+70     	; 0x1ba <main+0x108>
		if (enteredID == IDs[i] && enteredPassword == passwords[i]) {
 174:	82 2f       	mov	r24, r18
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	ed 51       	subi	r30, 0x1D	; 29
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	40 81       	ld	r20, Z
 188:	51 81       	ldd	r21, Z+1	; 0x01
 18a:	62 81       	ldd	r22, Z+2	; 0x02
 18c:	73 81       	ldd	r23, Z+3	; 0x03
 18e:	c4 16       	cp	r12, r20
 190:	d5 06       	cpc	r13, r21
 192:	e6 06       	cpc	r14, r22
 194:	f7 06       	cpc	r15, r23
 196:	81 f4       	brne	.+32     	; 0x1b8 <main+0x106>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	fc 01       	movw	r30, r24
 1a2:	e5 52       	subi	r30, 0x25	; 37
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	80 81       	ld	r24, Z
 1a8:	91 81       	ldd	r25, Z+1	; 0x01
 1aa:	a2 81       	ldd	r26, Z+2	; 0x02
 1ac:	b3 81       	ldd	r27, Z+3	; 0x03
 1ae:	88 16       	cp	r8, r24
 1b0:	99 06       	cpc	r9, r25
 1b2:	aa 06       	cpc	r10, r26
 1b4:	bb 06       	cpc	r11, r27
 1b6:	61 f0       	breq	.+24     	; 0x1d0 <main+0x11e>
	// You can compare these values with the database as shown in the previous response.
	// The following code assumes that you have a database as mentioned earlier.

	int found = 0;
	u8 i;
	for (u8 i = 0; i < databaseSize; i++) {
 1b8:	2f 5f       	subi	r18, 0xFF	; 255
 1ba:	82 2f       	mov	r24, r18
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	a0 e0       	ldi	r26, 0x00	; 0
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	02 97       	sbiw	r24, 0x02	; 2
 1c4:	a1 05       	cpc	r26, r1
 1c6:	b1 05       	cpc	r27, r1
 1c8:	ac f2       	brlt	.-86     	; 0x174 <main+0xc2>
	
	// At this point, 'enteredID' and 'enteredPassword' variables hold the user's input.
	// You can compare these values with the database as shown in the previous response.
	// The following code assumes that you have a database as mentioned earlier.

	int found = 0;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <main+0x122>
	u8 i;
	for (u8 i = 0; i < databaseSize; i++) {
		if (enteredID == IDs[i] && enteredPassword == passwords[i]) {
			found = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}

	// Display appropriate messages based on the comparison results
	if (found) {
 1d4:	89 2b       	or	r24, r25
 1d6:	f1 f0       	breq	.+60     	; 0x214 <main+0x162>
		H_LCD_void_sendString("  Welcome, ");
 1d8:	83 ea       	ldi	r24, 0xA3	; 163
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 ba 03 	call	0x774	; 0x774 <H_LCD_void_sendString>
		H_LCD_void_sendString(names[i]);
 1e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1e4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 1e8:	0e 94 ba 03 	call	0x774	; 0x774 <H_LCD_void_sendString>
 1ec:	2d c0       	rjmp	.+90     	; 0x248 <main+0x196>
		} else {
		// Check if the ID is incorrect
		int incorrectID = 1;
		for (u8 i = 0; i < databaseSize; i++) {
			if (enteredID == IDs[i]) {
 1ee:	e8 2f       	mov	r30, r24
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	ed 51       	subi	r30, 0x1D	; 29
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	40 81       	ld	r20, Z
 200:	51 81       	ldd	r21, Z+1	; 0x01
 202:	62 81       	ldd	r22, Z+2	; 0x02
 204:	73 81       	ldd	r23, Z+3	; 0x03
 206:	c4 16       	cp	r12, r20
 208:	d5 06       	cpc	r13, r21
 20a:	e6 06       	cpc	r14, r22
 20c:	f7 06       	cpc	r15, r23
 20e:	79 f0       	breq	.+30     	; 0x22e <main+0x17c>
		H_LCD_void_sendString("  Welcome, ");
		H_LCD_void_sendString(names[i]);
		} else {
		// Check if the ID is incorrect
		int incorrectID = 1;
		for (u8 i = 0; i < databaseSize; i++) {
 210:	8f 5f       	subi	r24, 0xFF	; 255
 212:	01 c0       	rjmp	.+2      	; 0x216 <main+0x164>
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	48 2f       	mov	r20, r24
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	42 30       	cpi	r20, 0x02	; 2
 220:	51 05       	cpc	r21, r1
 222:	61 05       	cpc	r22, r1
 224:	71 05       	cpc	r23, r1
 226:	1c f3       	brlt	.-58     	; 0x1ee <main+0x13c>
	if (found) {
		H_LCD_void_sendString("  Welcome, ");
		H_LCD_void_sendString(names[i]);
		} else {
		// Check if the ID is incorrect
		int incorrectID = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <main+0x180>
		for (u8 i = 0; i < databaseSize; i++) {
			if (enteredID == IDs[i]) {
				incorrectID = 0;
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
				break;
			}
		}

		if (incorrectID) {
 232:	89 2b       	or	r24, r25
 234:	29 f0       	breq	.+10     	; 0x240 <main+0x18e>
			H_LCD_void_sendString("Wrong ID");
 236:	8f ea       	ldi	r24, 0xAF	; 175
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 ba 03 	call	0x774	; 0x774 <H_LCD_void_sendString>
 23e:	04 c0       	rjmp	.+8      	; 0x248 <main+0x196>
			} else {
			H_LCD_void_sendString("Wrong Password");
 240:	88 eb       	ldi	r24, 0xB8	; 184
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 ba 03 	call	0x774	; 0x774 <H_LCD_void_sendString>
 248:	ff cf       	rjmp	.-2      	; 0x248 <main+0x196>

0000024a <KEYPAD_4x4_adjustKeyNumber>:
* Update the keypad pressed button value with the correct one in keypad 4x4 shape
*/
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number)
{
	u8 keypad_button = 0;
	switch(button_number)
 24a:	48 2f       	mov	r20, r24
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	fa 01       	movw	r30, r20
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	e0 31       	cpi	r30, 0x10	; 16
 254:	f1 05       	cpc	r31, r1
 256:	08 f5       	brcc	.+66     	; 0x29a <KEYPAD_4x4_adjustKeyNumber+0x50>
 258:	e6 5d       	subi	r30, 0xD6	; 214
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__tablejump2__>
	{
		case 1: keypad_button = 7;
 260:	87 e0       	ldi	r24, 0x07	; 7
 262:	08 95       	ret
		break;
		case 2: keypad_button = 8;
		break;
		case 3: keypad_button = 9;
 264:	89 e0       	ldi	r24, 0x09	; 9
		break;
 266:	08 95       	ret
		case 4: keypad_button = '%'; // ASCII Code of %
 268:	85 e2       	ldi	r24, 0x25	; 37
		break;
 26a:	08 95       	ret
		case 5: keypad_button = 4;
 26c:	84 e0       	ldi	r24, 0x04	; 4
		break;
 26e:	08 95       	ret
		case 6: keypad_button = 5;
 270:	85 e0       	ldi	r24, 0x05	; 5
		break;
 272:	08 95       	ret
		case 7: keypad_button = 6;
 274:	86 e0       	ldi	r24, 0x06	; 6
		break;
 276:	08 95       	ret
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
 278:	8a e2       	ldi	r24, 0x2A	; 42
		break;
 27a:	08 95       	ret
		case 9: keypad_button = 1;
 27c:	81 e0       	ldi	r24, 0x01	; 1
		break;
 27e:	08 95       	ret
		case 10: keypad_button = 2;
 280:	82 e0       	ldi	r24, 0x02	; 2
		break;
 282:	08 95       	ret
		case 11: keypad_button = 3;
 284:	83 e0       	ldi	r24, 0x03	; 3
		break;
 286:	08 95       	ret
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
 288:	8d e2       	ldi	r24, 0x2D	; 45
		break;
 28a:	08 95       	ret
		case 13: keypad_button = 13;  /* ASCII of Enter */
		break;
		case 14: keypad_button = 0;
 28c:	80 e0       	ldi	r24, 0x00	; 0
		break;
 28e:	08 95       	ret
		case 15: keypad_button = '='; /* ASCII Code of '=' */
 290:	8d e3       	ldi	r24, 0x3D	; 61
		break;
 292:	08 95       	ret
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
 294:	8b e2       	ldi	r24, 0x2B	; 43
		break;
 296:	08 95       	ret
	u8 keypad_button = 0;
	switch(button_number)
	{
		case 1: keypad_button = 7;
		break;
		case 2: keypad_button = 8;
 298:	88 e0       	ldi	r24, 0x08	; 8
		break;
		default: keypad_button = button_number;
		break;
	}
	return keypad_button;
}
 29a:	08 95       	ret

0000029c <KEYPAD_getPressedKey>:
#include "Keypad_config.h"
#include "Keypad_private.h"



u8 KEYPAD_getPressedKey(){
 29c:	9f 92       	push	r9
 29e:	af 92       	push	r10
 2a0:	bf 92       	push	r11
 2a2:	cf 92       	push	r12
 2a4:	df 92       	push	r13
 2a6:	ef 92       	push	r14
 2a8:	ff 92       	push	r15
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	a1 97       	sbiw	r28, 0x21	; 33
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
	u8 col,row;
	u8 prevKey = 0; // Previous key state
	u8 currentKey = 0; // Current key state
 2c2:	19 82       	std	Y+1, r1	; 0x01
	// Configuration for the columns
	DIO_Config colPins[] = {
 2c4:	80 e1       	ldi	r24, 0x10	; 16
 2c6:	e4 e6       	ldi	r30, 0x64	; 100
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	de 01       	movw	r26, r28
 2cc:	12 96       	adiw	r26, 0x02	; 2
 2ce:	01 90       	ld	r0, Z+
 2d0:	0d 92       	st	X+, r0
 2d2:	8a 95       	dec	r24
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <KEYPAD_getPressedKey+0x32>
		{COL2_PORT, COL2_PIN, DIO_PIN_INPUT, DIO_PIN_HIGH},
		{COL3_PORT, COL3_PIN, DIO_PIN_INPUT, DIO_PIN_HIGH},
		{COL4_PORT, COL4_PIN, DIO_PIN_INPUT, DIO_PIN_HIGH},
	};
	// Configuration for the rows
	DIO_Config rowPins[] = {
 2d6:	fe 01       	movw	r30, r28
 2d8:	72 96       	adiw	r30, 0x12	; 18
 2da:	80 e1       	ldi	r24, 0x10	; 16
 2dc:	df 01       	movw	r26, r30
 2de:	1d 92       	st	X+, r1
 2e0:	8a 95       	dec	r24
 2e2:	e9 f7       	brne	.-6      	; 0x2de <KEYPAD_getPressedKey+0x42>
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	8a 8b       	std	Y+18, r24	; 0x12
 2e8:	95 e0       	ldi	r25, 0x05	; 5
 2ea:	9b 8b       	std	Y+19, r25	; 0x13
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	9c 8b       	std	Y+20, r25	; 0x14
 2f0:	8e 8b       	std	Y+22, r24	; 0x16
 2f2:	24 e0       	ldi	r18, 0x04	; 4
 2f4:	2f 8b       	std	Y+23, r18	; 0x17
 2f6:	98 8f       	std	Y+24, r25	; 0x18
 2f8:	8a 8f       	std	Y+26, r24	; 0x1a
 2fa:	23 e0       	ldi	r18, 0x03	; 3
 2fc:	2b 8f       	std	Y+27, r18	; 0x1b
 2fe:	9c 8f       	std	Y+28, r25	; 0x1c
 300:	8e 8f       	std	Y+30, r24	; 0x1e
 302:	8f 8f       	std	Y+31, r24	; 0x1f
 304:	98 a3       	std	Y+32, r25	; 0x20
		{ROW3_PORT, ROW3_PIN, DIO_PIN_OUTPUT},
		{ROW4_PORT, ROW4_PIN, DIO_PIN_OUTPUT},
	};

	// Initialize the keypad pins
	for (u8 i = 0; i < 4; i++) {
 306:	d1 2c       	mov	r13, r1
 308:	1b c0       	rjmp	.+54     	; 0x340 <KEYPAD_getPressedKey+0xa4>
		DIO_U8SetPinDirection(&colPins[i]);
 30a:	ed 2c       	mov	r14, r13
 30c:	f1 2c       	mov	r15, r1
 30e:	ee 0c       	add	r14, r14
 310:	ff 1c       	adc	r15, r15
 312:	ee 0c       	add	r14, r14
 314:	ff 1c       	adc	r15, r15
 316:	02 e0       	ldi	r16, 0x02	; 2
 318:	10 e0       	ldi	r17, 0x00	; 0
 31a:	0c 0f       	add	r16, r28
 31c:	1d 1f       	adc	r17, r29
 31e:	0e 0d       	add	r16, r14
 320:	1f 1d       	adc	r17, r15
 322:	c8 01       	movw	r24, r16
 324:	0e 94 09 04 	call	0x812	; 0x812 <DIO_U8SetPinDirection>
		DIO_U8SetPinDirection(&rowPins[i]);
 328:	82 e1       	ldi	r24, 0x12	; 18
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	8c 0f       	add	r24, r28
 32e:	9d 1f       	adc	r25, r29
 330:	8e 0d       	add	r24, r14
 332:	9f 1d       	adc	r25, r15
 334:	0e 94 09 04 	call	0x812	; 0x812 <DIO_U8SetPinDirection>
		DIO_U8SetPinValue(&colPins[i]);
 338:	c8 01       	movw	r24, r16
 33a:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_U8SetPinValue>
		{ROW3_PORT, ROW3_PIN, DIO_PIN_OUTPUT},
		{ROW4_PORT, ROW4_PIN, DIO_PIN_OUTPUT},
	};

	// Initialize the keypad pins
	for (u8 i = 0; i < 4; i++) {
 33e:	d3 94       	inc	r13
 340:	b3 e0       	ldi	r27, 0x03	; 3
 342:	bd 15       	cp	r27, r13
 344:	10 f7       	brcc	.-60     	; 0x30a <KEYPAD_getPressedKey+0x6e>
 346:	a1 2c       	mov	r10, r1
	}

	while(1)
	{
		/*for loop to scan all keypad columns*/
		for (row = 0 ; row < 4 ; row++)
 348:	91 2c       	mov	r9, r1
 34a:	58 c0       	rjmp	.+176    	; 0x3fc <KEYPAD_getPressedKey+0x160>
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
 34c:	e9 2c       	mov	r14, r9
 34e:	f1 2c       	mov	r15, r1
 350:	67 01       	movw	r12, r14
 352:	cc 0c       	add	r12, r12
 354:	dd 1c       	adc	r13, r13
 356:	cc 0c       	add	r12, r12
 358:	dd 1c       	adc	r13, r13
 35a:	e1 e0       	ldi	r30, 0x01	; 1
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	ec 0f       	add	r30, r28
 360:	fd 1f       	adc	r31, r29
 362:	ec 0d       	add	r30, r12
 364:	fd 1d       	adc	r31, r13
 366:	14 8a       	std	Z+20, r1	; 0x14
			DIO_U8SetPinValue(&rowPins[row]);
 368:	82 e1       	ldi	r24, 0x12	; 18
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	8c 0f       	add	r24, r28
 36e:	9d 1f       	adc	r25, r29
 370:	c8 0e       	add	r12, r24
 372:	d9 1e       	adc	r13, r25
 374:	c6 01       	movw	r24, r12
 376:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_U8SetPinValue>
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 37a:	b1 2c       	mov	r11, r1
 37c:	2c c0       	rjmp	.+88     	; 0x3d6 <KEYPAD_getPressedKey+0x13a>
			{
				DIO_U8GetPinValue(&colPins[col], &currentKey);
 37e:	0b 2d       	mov	r16, r11
 380:	10 e0       	ldi	r17, 0x00	; 0
 382:	00 0f       	add	r16, r16
 384:	11 1f       	adc	r17, r17
 386:	00 0f       	add	r16, r16
 388:	11 1f       	adc	r17, r17
 38a:	a2 e0       	ldi	r26, 0x02	; 2
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	ac 0f       	add	r26, r28
 390:	bd 1f       	adc	r27, r29
 392:	0a 0f       	add	r16, r26
 394:	1b 1f       	adc	r17, r27
 396:	be 01       	movw	r22, r28
 398:	6f 5f       	subi	r22, 0xFF	; 255
 39a:	7f 4f       	sbci	r23, 0xFF	; 255
 39c:	c8 01       	movw	r24, r16
 39e:	0e 94 89 04 	call	0x912	; 0x912 <DIO_U8GetPinValue>

				/* Check current row pin value */
				if (DIO_PIN_LOW == currentKey && DIO_PIN_HIGH == prevKey) {
 3a2:	99 81       	ldd	r25, Y+1	; 0x01
 3a4:	91 11       	cpse	r25, r1
 3a6:	15 c0       	rjmp	.+42     	; 0x3d2 <KEYPAD_getPressedKey+0x136>
 3a8:	b1 e0       	ldi	r27, 0x01	; 1
 3aa:	ab 12       	cpse	r10, r27
 3ac:	12 c0       	rjmp	.+36     	; 0x3d2 <KEYPAD_getPressedKey+0x136>
 3ae:	06 c0       	rjmp	.+12     	; 0x3bc <KEYPAD_getPressedKey+0x120>
					/* Key is pressed, return the pressed button value */
					while (currentKey != DIO_PIN_HIGH) {
						DIO_U8GetPinValue(&colPins[col], &currentKey);
 3b0:	be 01       	movw	r22, r28
 3b2:	6f 5f       	subi	r22, 0xFF	; 255
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255
 3b6:	c8 01       	movw	r24, r16
 3b8:	0e 94 89 04 	call	0x912	; 0x912 <DIO_U8GetPinValue>
				DIO_U8GetPinValue(&colPins[col], &currentKey);

				/* Check current row pin value */
				if (DIO_PIN_LOW == currentKey && DIO_PIN_HIGH == prevKey) {
					/* Key is pressed, return the pressed button value */
					while (currentKey != DIO_PIN_HIGH) {
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	b9 f7       	brne	.-18     	; 0x3b0 <KEYPAD_getPressedKey+0x114>
						DIO_U8GetPinValue(&colPins[col], &currentKey);
					}
					return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
 3c2:	89 2d       	mov	r24, r9
 3c4:	88 0f       	add	r24, r24
 3c6:	88 0f       	add	r24, r24
 3c8:	8b 0d       	add	r24, r11
 3ca:	8f 5f       	subi	r24, 0xFF	; 255
 3cc:	0e 94 25 01 	call	0x24a	; 0x24a <KEYPAD_4x4_adjustKeyNumber>
 3d0:	1a c0       	rjmp	.+52     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
			DIO_U8SetPinValue(&rowPins[row]);
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 3d2:	b3 94       	inc	r11
						DIO_U8GetPinValue(&colPins[col], &currentKey);
					}
					return KEYPAD_4x4_adjustKeyNumber((row * KEYPAD_NUM_COLS) + col + 1);
				}

				prevKey = currentKey; // Update the previous key state
 3d4:	a9 2e       	mov	r10, r25
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
			DIO_U8SetPinValue(&rowPins[row]);
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 3d6:	83 e0       	ldi	r24, 0x03	; 3
 3d8:	8b 15       	cp	r24, r11
 3da:	88 f6       	brcc	.-94     	; 0x37e <KEYPAD_getPressedKey+0xe2>

				prevKey = currentKey; // Update the previous key state
				/*end of for loop*/
			}
			/*set current column pin HIGH again*/
			rowPins[row].value = DIO_PIN_HIGH;
 3dc:	ee 0c       	add	r14, r14
 3de:	ff 1c       	adc	r15, r15
 3e0:	ee 0c       	add	r14, r14
 3e2:	ff 1c       	adc	r15, r15
 3e4:	e1 e0       	ldi	r30, 0x01	; 1
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	ec 0f       	add	r30, r28
 3ea:	fd 1f       	adc	r31, r29
 3ec:	ee 0d       	add	r30, r14
 3ee:	ff 1d       	adc	r31, r15
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	84 8b       	std	Z+20, r24	; 0x14
			DIO_U8SetPinValue(&rowPins[row]);
 3f4:	c6 01       	movw	r24, r12
 3f6:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_U8SetPinValue>
	}

	while(1)
	{
		/*for loop to scan all keypad columns*/
		for (row = 0 ; row < 4 ; row++)
 3fa:	93 94       	inc	r9
 3fc:	93 e0       	ldi	r25, 0x03	; 3
 3fe:	99 15       	cp	r25, r9
 400:	08 f0       	brcs	.+2      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 402:	a4 cf       	rjmp	.-184    	; 0x34c <KEYPAD_getPressedKey+0xb0>
 404:	a1 cf       	rjmp	.-190    	; 0x348 <KEYPAD_getPressedKey+0xac>
			DIO_U8SetPinValue(&rowPins[row]);

		}
		/*end of for loop*/
	}
}
 406:	a1 96       	adiw	r28, 0x21	; 33
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	df 90       	pop	r13
 420:	cf 90       	pop	r12
 422:	bf 90       	pop	r11
 424:	af 90       	pop	r10
 426:	9f 90       	pop	r9
 428:	08 95       	ret

0000042a <H_LCD_void_latchByte>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode){

	H_LCD_void_sendCommand(0xc0);
	H_LCD_void_sendData(copy_u8charCode);

}
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	64 97       	sbiw	r28, 0x14	; 20
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	08 2f       	mov	r16, r24
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	89 83       	std	Y+1, r24	; 0x01
 448:	1a 82       	std	Y+2, r1	; 0x02
 44a:	8b 83       	std	Y+3, r24	; 0x03
 44c:	04 fb       	bst	r16, 4
 44e:	99 27       	eor	r25, r25
 450:	90 f9       	bld	r25, 0
 452:	9c 83       	std	Y+4, r25	; 0x04
 454:	8d 83       	std	Y+5, r24	; 0x05
 456:	8e 83       	std	Y+6, r24	; 0x06
 458:	8f 83       	std	Y+7, r24	; 0x07
 45a:	05 fb       	bst	r16, 5
 45c:	99 27       	eor	r25, r25
 45e:	90 f9       	bld	r25, 0
 460:	98 87       	std	Y+8, r25	; 0x08
 462:	89 87       	std	Y+9, r24	; 0x09
 464:	92 e0       	ldi	r25, 0x02	; 2
 466:	9a 87       	std	Y+10, r25	; 0x0a
 468:	8b 87       	std	Y+11, r24	; 0x0b
 46a:	06 fb       	bst	r16, 6
 46c:	99 27       	eor	r25, r25
 46e:	90 f9       	bld	r25, 0
 470:	9c 87       	std	Y+12, r25	; 0x0c
 472:	8d 87       	std	Y+13, r24	; 0x0d
 474:	94 e0       	ldi	r25, 0x04	; 4
 476:	9e 87       	std	Y+14, r25	; 0x0e
 478:	8f 87       	std	Y+15, r24	; 0x0f
 47a:	80 2f       	mov	r24, r16
 47c:	88 1f       	adc	r24, r24
 47e:	88 27       	eor	r24, r24
 480:	88 1f       	adc	r24, r24
 482:	88 8b       	std	Y+16, r24	; 0x10
 484:	10 e0       	ldi	r17, 0x00	; 0
 486:	0f c0       	rjmp	.+30     	; 0x4a6 <H_LCD_void_latchByte+0x7c>
 488:	81 2f       	mov	r24, r17
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	2c 0f       	add	r18, r28
 49a:	3d 1f       	adc	r19, r29
 49c:	82 0f       	add	r24, r18
 49e:	93 1f       	adc	r25, r19
 4a0:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_U8SetPinValue>
 4a4:	1f 5f       	subi	r17, 0xFF	; 255
 4a6:	14 30       	cpi	r17, 0x04	; 4
 4a8:	78 f3       	brcs	.-34     	; 0x488 <H_LCD_void_latchByte+0x5e>
 4aa:	19 8a       	std	Y+17, r1	; 0x11
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	8a 8b       	std	Y+18, r24	; 0x12
 4b0:	1c 8a       	std	Y+20, r1	; 0x14
 4b2:	89 ef       	ldi	r24, 0xF9	; 249
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <H_LCD_void_latchByte+0x8c>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <H_LCD_void_latchByte+0x92>
 4bc:	00 00       	nop
 4be:	ce 01       	movw	r24, r28
 4c0:	41 96       	adiw	r24, 0x11	; 17
 4c2:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_U8SetPinValue>
 4c6:	e9 ef       	ldi	r30, 0xF9	; 249
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	31 97       	sbiw	r30, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <H_LCD_void_latchByte+0xa0>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <H_LCD_void_latchByte+0xa6>
 4d0:	00 00       	nop
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	8c 8b       	std	Y+20, r24	; 0x14
 4d6:	ce 01       	movw	r24, r28
 4d8:	41 96       	adiw	r24, 0x11	; 17
 4da:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_U8SetPinValue>
 4de:	89 ef       	ldi	r24, 0xF9	; 249
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <H_LCD_void_latchByte+0xb8>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <H_LCD_void_latchByte+0xbe>
 4e8:	00 00       	nop
 4ea:	10 e0       	ldi	r17, 0x00	; 0
 4ec:	1a c0       	rjmp	.+52     	; 0x522 <H_LCD_void_latchByte+0xf8>
 4ee:	81 2f       	mov	r24, r17
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	20 2f       	mov	r18, r16
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	01 2e       	mov	r0, r17
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <H_LCD_void_latchByte+0xd4>
 4fa:	35 95       	asr	r19
 4fc:	27 95       	ror	r18
 4fe:	0a 94       	dec	r0
 500:	e2 f7       	brpl	.-8      	; 0x4fa <H_LCD_void_latchByte+0xd0>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	e1 e0       	ldi	r30, 0x01	; 1
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	ec 0f       	add	r30, r28
 510:	fd 1f       	adc	r31, r29
 512:	8e 0f       	add	r24, r30
 514:	9f 1f       	adc	r25, r31
 516:	21 70       	andi	r18, 0x01	; 1
 518:	fc 01       	movw	r30, r24
 51a:	23 83       	std	Z+3, r18	; 0x03
 51c:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_U8SetPinValue>
 520:	1f 5f       	subi	r17, 0xFF	; 255
 522:	14 30       	cpi	r17, 0x04	; 4
 524:	20 f3       	brcs	.-56     	; 0x4ee <H_LCD_void_latchByte+0xc4>
 526:	89 ef       	ldi	r24, 0xF9	; 249
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <H_LCD_void_latchByte+0x100>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <H_LCD_void_latchByte+0x106>
 530:	00 00       	nop
 532:	1c 8a       	std	Y+20, r1	; 0x14
 534:	ce 01       	movw	r24, r28
 536:	41 96       	adiw	r24, 0x11	; 17
 538:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_U8SetPinValue>
 53c:	e9 ef       	ldi	r30, 0xF9	; 249
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	31 97       	sbiw	r30, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <H_LCD_void_latchByte+0x116>
 544:	00 c0       	rjmp	.+0      	; 0x546 <H_LCD_void_latchByte+0x11c>
 546:	00 00       	nop
 548:	64 96       	adiw	r28, 0x14	; 20
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	08 95       	ret

0000055e <H_LCD_void_sendCommand>:
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	cd b7       	in	r28, 0x3d	; 61
 568:	de b7       	in	r29, 0x3e	; 62
 56a:	28 97       	sbiw	r28, 0x08	; 8
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	f8 94       	cli
 570:	de bf       	out	0x3e, r29	; 62
 572:	0f be       	out	0x3f, r0	; 63
 574:	cd bf       	out	0x3d, r28	; 61
 576:	08 2f       	mov	r16, r24
 578:	88 e0       	ldi	r24, 0x08	; 8
 57a:	e4 e7       	ldi	r30, 0x74	; 116
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	de 01       	movw	r26, r28
 580:	11 96       	adiw	r26, 0x01	; 1
 582:	01 90       	ld	r0, Z+
 584:	0d 92       	st	X+, r0
 586:	8a 95       	dec	r24
 588:	e1 f7       	brne	.-8      	; 0x582 <H_LCD_void_sendCommand+0x24>
 58a:	10 e0       	ldi	r17, 0x00	; 0
 58c:	15 c0       	rjmp	.+42     	; 0x5b8 <H_LCD_void_sendCommand+0x5a>
 58e:	81 2f       	mov	r24, r17
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	21 e0       	ldi	r18, 0x01	; 1
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	2c 0f       	add	r18, r28
 5a0:	3d 1f       	adc	r19, r29
 5a2:	82 0f       	add	r24, r18
 5a4:	93 1f       	adc	r25, r19
 5a6:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_U8SetPinValue>
 5aa:	89 ef       	ldi	r24, 0xF9	; 249
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <H_LCD_void_sendCommand+0x50>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <H_LCD_void_sendCommand+0x56>
 5b4:	00 00       	nop
 5b6:	1f 5f       	subi	r17, 0xFF	; 255
 5b8:	12 30       	cpi	r17, 0x02	; 2
 5ba:	48 f3       	brcs	.-46     	; 0x58e <H_LCD_void_sendCommand+0x30>
 5bc:	89 ef       	ldi	r24, 0xF9	; 249
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <H_LCD_void_sendCommand+0x62>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <H_LCD_void_sendCommand+0x68>
 5c6:	00 00       	nop
 5c8:	80 2f       	mov	r24, r16
 5ca:	0e 94 15 02 	call	0x42a	; 0x42a <H_LCD_void_latchByte>
 5ce:	28 96       	adiw	r28, 0x08	; 8
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	f8 94       	cli
 5d4:	de bf       	out	0x3e, r29	; 62
 5d6:	0f be       	out	0x3f, r0	; 63
 5d8:	cd bf       	out	0x3d, r28	; 61
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	1f 91       	pop	r17
 5e0:	0f 91       	pop	r16
 5e2:	08 95       	ret

000005e4 <H_LCD_void_Init>:
 5e4:	1f 93       	push	r17
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	68 97       	sbiw	r28, 0x18	; 24
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	f8 94       	cli
 5f4:	de bf       	out	0x3e, r29	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	cd bf       	out	0x3d, r28	; 61
 5fa:	fe 01       	movw	r30, r28
 5fc:	31 96       	adiw	r30, 0x01	; 1
 5fe:	88 e0       	ldi	r24, 0x08	; 8
 600:	df 01       	movw	r26, r30
 602:	1d 92       	st	X+, r1
 604:	8a 95       	dec	r24
 606:	e9 f7       	brne	.-6      	; 0x602 <H_LCD_void_Init+0x1e>
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	8a 83       	std	Y+2, r24	; 0x02
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	8b 83       	std	Y+3, r24	; 0x03
 610:	92 e0       	ldi	r25, 0x02	; 2
 612:	9e 83       	std	Y+6, r25	; 0x06
 614:	8f 83       	std	Y+7, r24	; 0x07
 616:	10 e0       	ldi	r17, 0x00	; 0
 618:	0f c0       	rjmp	.+30     	; 0x638 <H_LCD_void_Init+0x54>
 61a:	81 2f       	mov	r24, r17
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	21 e0       	ldi	r18, 0x01	; 1
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	2c 0f       	add	r18, r28
 62c:	3d 1f       	adc	r19, r29
 62e:	82 0f       	add	r24, r18
 630:	93 1f       	adc	r25, r19
 632:	0e 94 09 04 	call	0x812	; 0x812 <DIO_U8SetPinDirection>
 636:	1f 5f       	subi	r17, 0xFF	; 255
 638:	12 30       	cpi	r17, 0x02	; 2
 63a:	78 f3       	brcs	.-34     	; 0x61a <H_LCD_void_Init+0x36>
 63c:	fe 01       	movw	r30, r28
 63e:	39 96       	adiw	r30, 0x09	; 9
 640:	80 e1       	ldi	r24, 0x10	; 16
 642:	df 01       	movw	r26, r30
 644:	1d 92       	st	X+, r1
 646:	8a 95       	dec	r24
 648:	e9 f7       	brne	.-6      	; 0x644 <H_LCD_void_Init+0x60>
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	89 87       	std	Y+9, r24	; 0x09
 64e:	8b 87       	std	Y+11, r24	; 0x0b
 650:	8d 87       	std	Y+13, r24	; 0x0d
 652:	8e 87       	std	Y+14, r24	; 0x0e
 654:	8f 87       	std	Y+15, r24	; 0x0f
 656:	89 8b       	std	Y+17, r24	; 0x11
 658:	92 e0       	ldi	r25, 0x02	; 2
 65a:	9a 8b       	std	Y+18, r25	; 0x12
 65c:	8b 8b       	std	Y+19, r24	; 0x13
 65e:	8d 8b       	std	Y+21, r24	; 0x15
 660:	94 e0       	ldi	r25, 0x04	; 4
 662:	9e 8b       	std	Y+22, r25	; 0x16
 664:	8f 8b       	std	Y+23, r24	; 0x17
 666:	10 e0       	ldi	r17, 0x00	; 0
 668:	0f c0       	rjmp	.+30     	; 0x688 <H_LCD_void_Init+0xa4>
 66a:	81 2f       	mov	r24, r17
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	29 e0       	ldi	r18, 0x09	; 9
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	2c 0f       	add	r18, r28
 67c:	3d 1f       	adc	r19, r29
 67e:	82 0f       	add	r24, r18
 680:	93 1f       	adc	r25, r19
 682:	0e 94 09 04 	call	0x812	; 0x812 <DIO_U8SetPinDirection>
 686:	1f 5f       	subi	r17, 0xFF	; 255
 688:	14 30       	cpi	r17, 0x04	; 4
 68a:	78 f3       	brcs	.-34     	; 0x66a <H_LCD_void_Init+0x86>
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	0e 94 af 02 	call	0x55e	; 0x55e <H_LCD_void_sendCommand>
 692:	89 ef       	ldi	r24, 0xF9	; 249
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	01 97       	sbiw	r24, 0x01	; 1
 698:	f1 f7       	brne	.-4      	; 0x696 <H_LCD_void_Init+0xb2>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <H_LCD_void_Init+0xb8>
 69c:	00 00       	nop
 69e:	88 e2       	ldi	r24, 0x28	; 40
 6a0:	0e 94 af 02 	call	0x55e	; 0x55e <H_LCD_void_sendCommand>
 6a4:	a9 ef       	ldi	r26, 0xF9	; 249
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	11 97       	sbiw	r26, 0x01	; 1
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <H_LCD_void_Init+0xc4>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <H_LCD_void_Init+0xca>
 6ae:	00 00       	nop
 6b0:	8f e0       	ldi	r24, 0x0F	; 15
 6b2:	0e 94 af 02 	call	0x55e	; 0x55e <H_LCD_void_sendCommand>
 6b6:	89 ef       	ldi	r24, 0xF9	; 249
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	01 97       	sbiw	r24, 0x01	; 1
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <H_LCD_void_Init+0xd6>
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <H_LCD_void_Init+0xdc>
 6c0:	00 00       	nop
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	0e 94 af 02 	call	0x55e	; 0x55e <H_LCD_void_sendCommand>
 6c8:	a3 ef       	ldi	r26, 0xF3	; 243
 6ca:	b1 e0       	ldi	r27, 0x01	; 1
 6cc:	11 97       	sbiw	r26, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <H_LCD_void_Init+0xe8>
 6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <H_LCD_void_Init+0xee>
 6d2:	00 00       	nop
 6d4:	86 e0       	ldi	r24, 0x06	; 6
 6d6:	0e 94 af 02 	call	0x55e	; 0x55e <H_LCD_void_sendCommand>
 6da:	68 96       	adiw	r28, 0x18	; 24
 6dc:	0f b6       	in	r0, 0x3f	; 63
 6de:	f8 94       	cli
 6e0:	de bf       	out	0x3e, r29	; 62
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	cd bf       	out	0x3d, r28	; 61
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	1f 91       	pop	r17
 6ec:	08 95       	ret

000006ee <H_LCD_void_sendData>:
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
 6fa:	28 97       	sbiw	r28, 0x08	; 8
 6fc:	0f b6       	in	r0, 0x3f	; 63
 6fe:	f8 94       	cli
 700:	de bf       	out	0x3e, r29	; 62
 702:	0f be       	out	0x3f, r0	; 63
 704:	cd bf       	out	0x3d, r28	; 61
 706:	08 2f       	mov	r16, r24
 708:	88 e0       	ldi	r24, 0x08	; 8
 70a:	ec e7       	ldi	r30, 0x7C	; 124
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	de 01       	movw	r26, r28
 710:	11 96       	adiw	r26, 0x01	; 1
 712:	01 90       	ld	r0, Z+
 714:	0d 92       	st	X+, r0
 716:	8a 95       	dec	r24
 718:	e1 f7       	brne	.-8      	; 0x712 <H_LCD_void_sendData+0x24>
 71a:	10 e0       	ldi	r17, 0x00	; 0
 71c:	15 c0       	rjmp	.+42     	; 0x748 <H_LCD_void_sendData+0x5a>
 71e:	81 2f       	mov	r24, r17
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	88 0f       	add	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	21 e0       	ldi	r18, 0x01	; 1
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	2c 0f       	add	r18, r28
 730:	3d 1f       	adc	r19, r29
 732:	82 0f       	add	r24, r18
 734:	93 1f       	adc	r25, r19
 736:	0e 94 47 04 	call	0x88e	; 0x88e <DIO_U8SetPinValue>
 73a:	89 ef       	ldi	r24, 0xF9	; 249
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	01 97       	sbiw	r24, 0x01	; 1
 740:	f1 f7       	brne	.-4      	; 0x73e <H_LCD_void_sendData+0x50>
 742:	00 c0       	rjmp	.+0      	; 0x744 <H_LCD_void_sendData+0x56>
 744:	00 00       	nop
 746:	1f 5f       	subi	r17, 0xFF	; 255
 748:	12 30       	cpi	r17, 0x02	; 2
 74a:	48 f3       	brcs	.-46     	; 0x71e <H_LCD_void_sendData+0x30>
 74c:	89 ef       	ldi	r24, 0xF9	; 249
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <H_LCD_void_sendData+0x62>
 754:	00 c0       	rjmp	.+0      	; 0x756 <H_LCD_void_sendData+0x68>
 756:	00 00       	nop
 758:	80 2f       	mov	r24, r16
 75a:	0e 94 15 02 	call	0x42a	; 0x42a <H_LCD_void_latchByte>
 75e:	28 96       	adiw	r28, 0x08	; 8
 760:	0f b6       	in	r0, 0x3f	; 63
 762:	f8 94       	cli
 764:	de bf       	out	0x3e, r29	; 62
 766:	0f be       	out	0x3f, r0	; 63
 768:	cd bf       	out	0x3d, r28	; 61
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	1f 91       	pop	r17
 770:	0f 91       	pop	r16
 772:	08 95       	ret

00000774 <H_LCD_void_sendString>:
 774:	0f 93       	push	r16
 776:	1f 93       	push	r17
 778:	cf 93       	push	r28
 77a:	8c 01       	movw	r16, r24
 77c:	c0 e0       	ldi	r28, 0x00	; 0
 77e:	03 c0       	rjmp	.+6      	; 0x786 <H_LCD_void_sendString+0x12>
 780:	0e 94 77 03 	call	0x6ee	; 0x6ee <H_LCD_void_sendData>
 784:	cf 5f       	subi	r28, 0xFF	; 255
 786:	f8 01       	movw	r30, r16
 788:	ec 0f       	add	r30, r28
 78a:	f1 1d       	adc	r31, r1
 78c:	80 81       	ld	r24, Z
 78e:	81 11       	cpse	r24, r1
 790:	f7 cf       	rjmp	.-18     	; 0x780 <H_LCD_void_sendString+0xc>
 792:	cf 91       	pop	r28
 794:	1f 91       	pop	r17
 796:	0f 91       	pop	r16
 798:	08 95       	ret

0000079a <H_LCD_void_sendIntNum>:
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
 7a2:	60 97       	sbiw	r28, 0x10	; 16
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	f8 94       	cli
 7a8:	de bf       	out	0x3e, r29	; 62
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	cd bf       	out	0x3d, r28	; 61
 7ae:	dc 01       	movw	r26, r24
 7b0:	cb 01       	movw	r24, r22
 7b2:	4a e0       	ldi	r20, 0x0A	; 10
 7b4:	be 01       	movw	r22, r28
 7b6:	6f 5f       	subi	r22, 0xFF	; 255
 7b8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ba:	0e 94 92 06 	call	0xd24	; 0xd24 <__itoa_ncheck>
 7be:	ce 01       	movw	r24, r28
 7c0:	01 96       	adiw	r24, 0x01	; 1
 7c2:	0e 94 ba 03 	call	0x774	; 0x774 <H_LCD_void_sendString>
 7c6:	60 96       	adiw	r28, 0x10	; 16
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	f8 94       	cli
 7cc:	de bf       	out	0x3e, r29	; 62
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	cd bf       	out	0x3d, r28	; 61
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	08 95       	ret

000007d8 <H_LCD_void_clearScreen>:

void H_LCD_void_clearScreen(void){
	H_LCD_void_sendCommand(LCD_CLEAR_COMMAND);
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	0e 94 af 02 	call	0x55e	; 0x55e <H_LCD_void_sendCommand>
 7de:	08 95       	ret

000007e0 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 7e0:	24 b1       	in	r18, 0x04	; 4
 7e2:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 7e4:	00 24       	eor	r0, r0
 7e6:	22 0f       	add	r18, r18
 7e8:	33 1f       	adc	r19, r19
 7ea:	00 1c       	adc	r0, r0
 7ec:	22 0f       	add	r18, r18
 7ee:	33 1f       	adc	r19, r19
 7f0:	00 1c       	adc	r0, r0
 7f2:	23 2f       	mov	r18, r19
 7f4:	30 2d       	mov	r19, r0
 7f6:	85 b1       	in	r24, 0x05	; 5
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 802:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 806:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <__data_end+0x1>
 80a:	82 2b       	or	r24, r18
 80c:	93 2b       	or	r25, r19
 80e:	09 95       	icall
 810:	08 95       	ret

00000812 <DIO_U8SetPinDirection>:
        *writeRegisters[port] = ~(*writeRegisters[port]);
        return NO_ERROR;
    } else {
        return ERROR;
    }
}
 812:	dc 01       	movw	r26, r24
 814:	ec 91       	ld	r30, X
 816:	e4 30       	cpi	r30, 0x04	; 4
 818:	a0 f5       	brcc	.+104    	; 0x882 <__stack+0x23>
 81a:	11 96       	adiw	r26, 0x01	; 1
 81c:	2c 91       	ld	r18, X
 81e:	11 97       	sbiw	r26, 0x01	; 1
 820:	28 30       	cpi	r18, 0x08	; 8
 822:	88 f5       	brcc	.+98     	; 0x886 <__stack+0x27>
 824:	12 96       	adiw	r26, 0x02	; 2
 826:	8c 91       	ld	r24, X
 828:	81 11       	cpse	r24, r1
 82a:	15 c0       	rjmp	.+42     	; 0x856 <DIO_U8SetPinDirection+0x44>
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	ee 0f       	add	r30, r30
 830:	ff 1f       	adc	r31, r31
 832:	e5 50       	subi	r30, 0x05	; 5
 834:	ff 4f       	sbci	r31, 0xFF	; 255
 836:	01 90       	ld	r0, Z+
 838:	f0 81       	ld	r31, Z
 83a:	e0 2d       	mov	r30, r0
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <DIO_U8SetPinDirection+0x34>
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	2a 95       	dec	r18
 848:	e2 f7       	brpl	.-8      	; 0x842 <DIO_U8SetPinDirection+0x30>
 84a:	80 95       	com	r24
 84c:	90 81       	ld	r25, Z
 84e:	89 23       	and	r24, r25
 850:	80 83       	st	Z, r24
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	08 95       	ret
 856:	81 30       	cpi	r24, 0x01	; 1
 858:	c1 f4       	brne	.+48     	; 0x88a <__stack+0x2b>
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	ee 0f       	add	r30, r30
 85e:	ff 1f       	adc	r31, r31
 860:	e5 50       	subi	r30, 0x05	; 5
 862:	ff 4f       	sbci	r31, 0xFF	; 255
 864:	01 90       	ld	r0, Z+
 866:	f0 81       	ld	r31, Z
 868:	e0 2d       	mov	r30, r0
 86a:	81 e0       	ldi	r24, 0x01	; 1
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	02 c0       	rjmp	.+4      	; 0x874 <__stack+0x15>
 870:	88 0f       	add	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	2a 95       	dec	r18
 876:	e2 f7       	brpl	.-8      	; 0x870 <__stack+0x11>
 878:	90 81       	ld	r25, Z
 87a:	89 2b       	or	r24, r25
 87c:	80 83       	st	Z, r24
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	08 95       	ret
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	08 95       	ret
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	08 95       	ret
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	08 95       	ret

0000088e <DIO_U8SetPinValue>:
 88e:	00 97       	sbiw	r24, 0x00	; 0
 890:	c1 f1       	breq	.+112    	; 0x902 <DIO_U8SetPinValue+0x74>
 892:	dc 01       	movw	r26, r24
 894:	ec 91       	ld	r30, X
 896:	e4 30       	cpi	r30, 0x04	; 4
 898:	b0 f5       	brcc	.+108    	; 0x906 <DIO_U8SetPinValue+0x78>
 89a:	11 96       	adiw	r26, 0x01	; 1
 89c:	2c 91       	ld	r18, X
 89e:	11 97       	sbiw	r26, 0x01	; 1
 8a0:	28 30       	cpi	r18, 0x08	; 8
 8a2:	98 f5       	brcc	.+102    	; 0x90a <DIO_U8SetPinValue+0x7c>
 8a4:	13 96       	adiw	r26, 0x03	; 3
 8a6:	8c 91       	ld	r24, X
 8a8:	81 30       	cpi	r24, 0x01	; 1
 8aa:	a1 f4       	brne	.+40     	; 0x8d4 <DIO_U8SetPinValue+0x46>
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	ee 0f       	add	r30, r30
 8b0:	ff 1f       	adc	r31, r31
 8b2:	ed 50       	subi	r30, 0x0D	; 13
 8b4:	ff 4f       	sbci	r31, 0xFF	; 255
 8b6:	01 90       	ld	r0, Z+
 8b8:	f0 81       	ld	r31, Z
 8ba:	e0 2d       	mov	r30, r0
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <DIO_U8SetPinValue+0x38>
 8c2:	88 0f       	add	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	2a 95       	dec	r18
 8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <DIO_U8SetPinValue+0x34>
 8ca:	90 81       	ld	r25, Z
 8cc:	89 2b       	or	r24, r25
 8ce:	80 83       	st	Z, r24
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	08 95       	ret
 8d4:	81 11       	cpse	r24, r1
 8d6:	1b c0       	rjmp	.+54     	; 0x90e <DIO_U8SetPinValue+0x80>
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	ee 0f       	add	r30, r30
 8dc:	ff 1f       	adc	r31, r31
 8de:	ed 50       	subi	r30, 0x0D	; 13
 8e0:	ff 4f       	sbci	r31, 0xFF	; 255
 8e2:	01 90       	ld	r0, Z+
 8e4:	f0 81       	ld	r31, Z
 8e6:	e0 2d       	mov	r30, r0
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <DIO_U8SetPinValue+0x64>
 8ee:	88 0f       	add	r24, r24
 8f0:	99 1f       	adc	r25, r25
 8f2:	2a 95       	dec	r18
 8f4:	e2 f7       	brpl	.-8      	; 0x8ee <DIO_U8SetPinValue+0x60>
 8f6:	80 95       	com	r24
 8f8:	90 81       	ld	r25, Z
 8fa:	89 23       	and	r24, r25
 8fc:	80 83       	st	Z, r24
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	08 95       	ret
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	08 95       	ret
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	08 95       	ret
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	08 95       	ret
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	08 95       	ret

00000912 <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(const DIO_Config* config, u8* value) {
    if (config != NULL && value != NULL) {
 912:	00 97       	sbiw	r24, 0x00	; 0
 914:	f9 f0       	breq	.+62     	; 0x954 <DIO_U8GetPinValue+0x42>
 916:	61 15       	cp	r22, r1
 918:	71 05       	cpc	r23, r1
 91a:	f1 f0       	breq	.+60     	; 0x958 <DIO_U8GetPinValue+0x46>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 91c:	dc 01       	movw	r26, r24
 91e:	ec 91       	ld	r30, X
 920:	e4 30       	cpi	r30, 0x04	; 4
 922:	e0 f4       	brcc	.+56     	; 0x95c <DIO_U8GetPinValue+0x4a>
 924:	11 96       	adiw	r26, 0x01	; 1
 926:	2c 91       	ld	r18, X
 928:	28 30       	cpi	r18, 0x08	; 8
 92a:	d0 f4       	brcc	.+52     	; 0x960 <DIO_U8GetPinValue+0x4e>
            *value = GET_BIT(*readRegisters[config->port], config->pin);
 92c:	f0 e0       	ldi	r31, 0x00	; 0
 92e:	ee 0f       	add	r30, r30
 930:	ff 1f       	adc	r31, r31
 932:	e5 51       	subi	r30, 0x15	; 21
 934:	ff 4f       	sbci	r31, 0xFF	; 255
 936:	01 90       	ld	r0, Z+
 938:	f0 81       	ld	r31, Z
 93a:	e0 2d       	mov	r30, r0
 93c:	80 81       	ld	r24, Z
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	02 c0       	rjmp	.+4      	; 0x946 <DIO_U8GetPinValue+0x34>
 942:	95 95       	asr	r25
 944:	87 95       	ror	r24
 946:	2a 95       	dec	r18
 948:	e2 f7       	brpl	.-8      	; 0x942 <DIO_U8GetPinValue+0x30>
 94a:	81 70       	andi	r24, 0x01	; 1
 94c:	fb 01       	movw	r30, r22
 94e:	80 83       	st	Z, r24
            return NO_ERROR;
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	08 95       	ret
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	08 95       	ret
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	08 95       	ret
    if (config != NULL && value != NULL) {
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
            *value = GET_BIT(*readRegisters[config->port], config->pin);
            return NO_ERROR;
        } else {
            return ERROR;
 95c:	81 e0       	ldi	r24, 0x01	; 1
 95e:	08 95       	ret
 960:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        return ERROR;
    }
}
 962:	08 95       	ret

00000964 <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 964:	1f 92       	push	r1
 966:	0f 92       	push	r0
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	0f 92       	push	r0
 96c:	11 24       	eor	r1, r1
 96e:	2f 93       	push	r18
 970:	3f 93       	push	r19
 972:	4f 93       	push	r20
 974:	5f 93       	push	r21
 976:	6f 93       	push	r22
 978:	7f 93       	push	r23
 97a:	8f 93       	push	r24
 97c:	9f 93       	push	r25
 97e:	af 93       	push	r26
 980:	bf 93       	push	r27
 982:	ef 93       	push	r30
 984:	ff 93       	push	r31
	if(Action[0]!= NULL){
 986:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <Action>
 98a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <Action+0x1>
 98e:	30 97       	sbiw	r30, 0x00	; 0
 990:	09 f0       	breq	.+2      	; 0x994 <__vector_1+0x30>
		Action[0]();
 992:	09 95       	icall
	}
}
 994:	ff 91       	pop	r31
 996:	ef 91       	pop	r30
 998:	bf 91       	pop	r27
 99a:	af 91       	pop	r26
 99c:	9f 91       	pop	r25
 99e:	8f 91       	pop	r24
 9a0:	7f 91       	pop	r23
 9a2:	6f 91       	pop	r22
 9a4:	5f 91       	pop	r21
 9a6:	4f 91       	pop	r20
 9a8:	3f 91       	pop	r19
 9aa:	2f 91       	pop	r18
 9ac:	0f 90       	pop	r0
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	0f 90       	pop	r0
 9b2:	1f 90       	pop	r1
 9b4:	18 95       	reti

000009b6 <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 9b6:	1f 92       	push	r1
 9b8:	0f 92       	push	r0
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	0f 92       	push	r0
 9be:	11 24       	eor	r1, r1
 9c0:	2f 93       	push	r18
 9c2:	3f 93       	push	r19
 9c4:	4f 93       	push	r20
 9c6:	5f 93       	push	r21
 9c8:	6f 93       	push	r22
 9ca:	7f 93       	push	r23
 9cc:	8f 93       	push	r24
 9ce:	9f 93       	push	r25
 9d0:	af 93       	push	r26
 9d2:	bf 93       	push	r27
 9d4:	ef 93       	push	r30
 9d6:	ff 93       	push	r31
	if(Action[1]!= NULL){
 9d8:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <Action+0x2>
 9dc:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <Action+0x3>
 9e0:	30 97       	sbiw	r30, 0x00	; 0
 9e2:	09 f0       	breq	.+2      	; 0x9e6 <__vector_2+0x30>
		Action[1]();
 9e4:	09 95       	icall
	}
}
 9e6:	ff 91       	pop	r31
 9e8:	ef 91       	pop	r30
 9ea:	bf 91       	pop	r27
 9ec:	af 91       	pop	r26
 9ee:	9f 91       	pop	r25
 9f0:	8f 91       	pop	r24
 9f2:	7f 91       	pop	r23
 9f4:	6f 91       	pop	r22
 9f6:	5f 91       	pop	r21
 9f8:	4f 91       	pop	r20
 9fa:	3f 91       	pop	r19
 9fc:	2f 91       	pop	r18
 9fe:	0f 90       	pop	r0
 a00:	0f be       	out	0x3f, r0	; 63
 a02:	0f 90       	pop	r0
 a04:	1f 90       	pop	r1
 a06:	18 95       	reti

00000a08 <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 a08:	1f 92       	push	r1
 a0a:	0f 92       	push	r0
 a0c:	0f b6       	in	r0, 0x3f	; 63
 a0e:	0f 92       	push	r0
 a10:	11 24       	eor	r1, r1
 a12:	2f 93       	push	r18
 a14:	3f 93       	push	r19
 a16:	4f 93       	push	r20
 a18:	5f 93       	push	r21
 a1a:	6f 93       	push	r22
 a1c:	7f 93       	push	r23
 a1e:	8f 93       	push	r24
 a20:	9f 93       	push	r25
 a22:	af 93       	push	r26
 a24:	bf 93       	push	r27
 a26:	ef 93       	push	r30
 a28:	ff 93       	push	r31
	if(Action[2]!= NULL){
 a2a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <Action+0x4>
 a2e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <Action+0x5>
 a32:	30 97       	sbiw	r30, 0x00	; 0
 a34:	09 f0       	breq	.+2      	; 0xa38 <__vector_3+0x30>
		Action[2]();
 a36:	09 95       	icall
	}
}
 a38:	ff 91       	pop	r31
 a3a:	ef 91       	pop	r30
 a3c:	bf 91       	pop	r27
 a3e:	af 91       	pop	r26
 a40:	9f 91       	pop	r25
 a42:	8f 91       	pop	r24
 a44:	7f 91       	pop	r23
 a46:	6f 91       	pop	r22
 a48:	5f 91       	pop	r21
 a4a:	4f 91       	pop	r20
 a4c:	3f 91       	pop	r19
 a4e:	2f 91       	pop	r18
 a50:	0f 90       	pop	r0
 a52:	0f be       	out	0x3f, r0	; 63
 a54:	0f 90       	pop	r0
 a56:	1f 90       	pop	r1
 a58:	18 95       	reti

00000a5a <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 a5a:	1f 92       	push	r1
 a5c:	0f 92       	push	r0
 a5e:	0f b6       	in	r0, 0x3f	; 63
 a60:	0f 92       	push	r0
 a62:	11 24       	eor	r1, r1
 a64:	2f 93       	push	r18
 a66:	3f 93       	push	r19
 a68:	4f 93       	push	r20
 a6a:	5f 93       	push	r21
 a6c:	6f 93       	push	r22
 a6e:	7f 93       	push	r23
 a70:	8f 93       	push	r24
 a72:	9f 93       	push	r25
 a74:	af 93       	push	r26
 a76:	bf 93       	push	r27
 a78:	ef 93       	push	r30
 a7a:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 a7c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Action_Timer>
 a80:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <Action_Timer+0x1>
 a84:	89 2b       	or	r24, r25
 a86:	89 f1       	breq	.+98     	; 0xaea <__vector_11+0x90>
		counter++;
 a88:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <counter.1685>
 a8c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <counter.1685+0x1>
 a90:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <counter.1685+0x2>
 a94:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <counter.1685+0x3>
 a98:	01 96       	adiw	r24, 0x01	; 1
 a9a:	a1 1d       	adc	r26, r1
 a9c:	b1 1d       	adc	r27, r1
 a9e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <counter.1685>
 aa2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <counter.1685+0x1>
 aa6:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <counter.1685+0x2>
 aaa:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <counter.1685+0x3>
		if(counter == numOverflows){
 aae:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <numOverflows>
 ab2:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <numOverflows+0x1>
 ab6:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <numOverflows+0x2>
 aba:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <numOverflows+0x3>
 abe:	84 17       	cp	r24, r20
 ac0:	95 07       	cpc	r25, r21
 ac2:	a6 07       	cpc	r26, r22
 ac4:	b7 07       	cpc	r27, r23
 ac6:	89 f4       	brne	.+34     	; 0xaea <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 ac8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <remainingCounts>
 acc:	81 95       	neg	r24
 ace:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 ad0:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter.1685>
 ad4:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <counter.1685+0x1>
 ad8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <counter.1685+0x2>
 adc:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <counter.1685+0x3>
			Action_Timer[0]();
 ae0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <Action_Timer>
 ae4:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <Action_Timer+0x1>
 ae8:	09 95       	icall
		}
		
	}
}
 aea:	ff 91       	pop	r31
 aec:	ef 91       	pop	r30
 aee:	bf 91       	pop	r27
 af0:	af 91       	pop	r26
 af2:	9f 91       	pop	r25
 af4:	8f 91       	pop	r24
 af6:	7f 91       	pop	r23
 af8:	6f 91       	pop	r22
 afa:	5f 91       	pop	r21
 afc:	4f 91       	pop	r20
 afe:	3f 91       	pop	r19
 b00:	2f 91       	pop	r18
 b02:	0f 90       	pop	r0
 b04:	0f be       	out	0x3f, r0	; 63
 b06:	0f 90       	pop	r0
 b08:	1f 90       	pop	r1
 b0a:	18 95       	reti

00000b0c <__vector_10>:

ISR(TIMER0_COMP_vect){
 b0c:	1f 92       	push	r1
 b0e:	0f 92       	push	r0
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	0f 92       	push	r0
 b14:	11 24       	eor	r1, r1
 b16:	2f 93       	push	r18
 b18:	3f 93       	push	r19
 b1a:	4f 93       	push	r20
 b1c:	5f 93       	push	r21
 b1e:	6f 93       	push	r22
 b20:	7f 93       	push	r23
 b22:	8f 93       	push	r24
 b24:	9f 93       	push	r25
 b26:	af 93       	push	r26
 b28:	bf 93       	push	r27
 b2a:	ef 93       	push	r30
 b2c:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 b2e:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <Action_Timer+0x2>
 b32:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <Action_Timer+0x3>
 b36:	30 97       	sbiw	r30, 0x00	; 0
 b38:	09 f0       	breq	.+2      	; 0xb3c <__vector_10+0x30>
		Action_Timer[1]();
 b3a:	09 95       	icall
		
	}
}
 b3c:	ff 91       	pop	r31
 b3e:	ef 91       	pop	r30
 b40:	bf 91       	pop	r27
 b42:	af 91       	pop	r26
 b44:	9f 91       	pop	r25
 b46:	8f 91       	pop	r24
 b48:	7f 91       	pop	r23
 b4a:	6f 91       	pop	r22
 b4c:	5f 91       	pop	r21
 b4e:	4f 91       	pop	r20
 b50:	3f 91       	pop	r19
 b52:	2f 91       	pop	r18
 b54:	0f 90       	pop	r0
 b56:	0f be       	out	0x3f, r0	; 63
 b58:	0f 90       	pop	r0
 b5a:	1f 90       	pop	r1
 b5c:	18 95       	reti

00000b5e <__vector_9>:
	dutyCycle = ((float)(g_timePeriodPlusHigh-g_timePeriod) / (g_timePeriod)) * 100;
	return dutyCycle;
	
}

ISR(TIMER1_OVF_vect){
 b5e:	1f 92       	push	r1
 b60:	0f 92       	push	r0
 b62:	0f b6       	in	r0, 0x3f	; 63
 b64:	0f 92       	push	r0
 b66:	11 24       	eor	r1, r1
 b68:	2f 93       	push	r18
 b6a:	3f 93       	push	r19
 b6c:	4f 93       	push	r20
 b6e:	5f 93       	push	r21
 b70:	6f 93       	push	r22
 b72:	7f 93       	push	r23
 b74:	8f 93       	push	r24
 b76:	9f 93       	push	r25
 b78:	af 93       	push	r26
 b7a:	bf 93       	push	r27
 b7c:	ef 93       	push	r30
 b7e:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){	
 b80:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <Action_Timer>
 b84:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <Action_Timer+0x1>
 b88:	30 97       	sbiw	r30, 0x00	; 0
 b8a:	49 f1       	breq	.+82     	; 0xbde <__vector_9+0x80>
		counter++;
 b8c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <counter.1721>
 b90:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <counter.1721+0x1>
 b94:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <counter.1721+0x2>
 b98:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <counter.1721+0x3>
 b9c:	01 96       	adiw	r24, 0x01	; 1
 b9e:	a1 1d       	adc	r26, r1
 ba0:	b1 1d       	adc	r27, r1
 ba2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <counter.1721>
 ba6:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <counter.1721+0x1>
 baa:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <counter.1721+0x2>
 bae:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <counter.1721+0x3>
		if(counter == numOverflows){
 bb2:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <numOverflows>
 bb6:	50 91 30 01 	lds	r21, 0x0130	; 0x800130 <numOverflows+0x1>
 bba:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <numOverflows+0x2>
 bbe:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <numOverflows+0x3>
 bc2:	84 17       	cp	r24, r20
 bc4:	95 07       	cpc	r25, r21
 bc6:	a6 07       	cpc	r26, r22
 bc8:	b7 07       	cpc	r27, r23
 bca:	49 f4       	brne	.+18     	; 0xbde <__vector_9+0x80>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 bcc:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <counter.1721>
 bd0:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <counter.1721+0x1>
 bd4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <counter.1721+0x2>
 bd8:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <counter.1721+0x3>
			Action_Timer[0]();
 bdc:	09 95       	icall
		}
		
	}
}
 bde:	ff 91       	pop	r31
 be0:	ef 91       	pop	r30
 be2:	bf 91       	pop	r27
 be4:	af 91       	pop	r26
 be6:	9f 91       	pop	r25
 be8:	8f 91       	pop	r24
 bea:	7f 91       	pop	r23
 bec:	6f 91       	pop	r22
 bee:	5f 91       	pop	r21
 bf0:	4f 91       	pop	r20
 bf2:	3f 91       	pop	r19
 bf4:	2f 91       	pop	r18
 bf6:	0f 90       	pop	r0
 bf8:	0f be       	out	0x3f, r0	; 63
 bfa:	0f 90       	pop	r0
 bfc:	1f 90       	pop	r1
 bfe:	18 95       	reti

00000c00 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 c00:	1f 92       	push	r1
 c02:	0f 92       	push	r0
 c04:	0f b6       	in	r0, 0x3f	; 63
 c06:	0f 92       	push	r0
 c08:	11 24       	eor	r1, r1
 c0a:	2f 93       	push	r18
 c0c:	3f 93       	push	r19
 c0e:	4f 93       	push	r20
 c10:	5f 93       	push	r21
 c12:	6f 93       	push	r22
 c14:	7f 93       	push	r23
 c16:	8f 93       	push	r24
 c18:	9f 93       	push	r25
 c1a:	af 93       	push	r26
 c1c:	bf 93       	push	r27
 c1e:	ef 93       	push	r30
 c20:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 c22:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <Action_Timer+0x2>
 c26:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <Action_Timer+0x3>
 c2a:	30 97       	sbiw	r30, 0x00	; 0
 c2c:	09 f0       	breq	.+2      	; 0xc30 <__vector_7+0x30>
		Action_Timer[1]();
 c2e:	09 95       	icall
	}
}
 c30:	ff 91       	pop	r31
 c32:	ef 91       	pop	r30
 c34:	bf 91       	pop	r27
 c36:	af 91       	pop	r26
 c38:	9f 91       	pop	r25
 c3a:	8f 91       	pop	r24
 c3c:	7f 91       	pop	r23
 c3e:	6f 91       	pop	r22
 c40:	5f 91       	pop	r21
 c42:	4f 91       	pop	r20
 c44:	3f 91       	pop	r19
 c46:	2f 91       	pop	r18
 c48:	0f 90       	pop	r0
 c4a:	0f be       	out	0x3f, r0	; 63
 c4c:	0f 90       	pop	r0
 c4e:	1f 90       	pop	r1
 c50:	18 95       	reti

00000c52 <__vector_6>:


ISR(TIMER1_CAPT_vect){
 c52:	1f 92       	push	r1
 c54:	0f 92       	push	r0
 c56:	0f b6       	in	r0, 0x3f	; 63
 c58:	0f 92       	push	r0
 c5a:	11 24       	eor	r1, r1
 c5c:	2f 93       	push	r18
 c5e:	8f 93       	push	r24
 c60:	9f 93       	push	r25
	g_edgeCount++;
 c62:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_edgeCount>
 c66:	8f 5f       	subi	r24, 0xFF	; 255
 c68:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <g_edgeCount>
	if(g_edgeCount == 1)
 c6c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_edgeCount>
 c70:	81 30       	cpi	r24, 0x01	; 1
 c72:	31 f4       	brne	.+12     	; 0xc80 <__vector_6+0x2e>
	{
		/*
		* Clear the timer counter register to start measurements from the
		* first detected rising edge
		*/
		TIMER1_BASE->TCNT1L = 0;
 c74:	1c bc       	out	0x2c, r1	; 44
		TIMER1_BASE->TCNT1H = 0;
 c76:	1d bc       	out	0x2d, r1	; 45
		/* Detect falling edge */
		TIMER1_BASE-> TCCR1B = (TIMER1_BASE-> TCCR1B & 0xBF) | (FALLING << 6);
 c78:	8e b5       	in	r24, 0x2e	; 46
 c7a:	8f 7b       	andi	r24, 0xBF	; 191
 c7c:	8e bd       	out	0x2e, r24	; 46
 c7e:	44 c0       	rjmp	.+136    	; 0xd08 <__vector_6+0xb6>
	}
	else if(g_edgeCount == 2)
 c80:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_edgeCount>
 c84:	82 30       	cpi	r24, 0x02	; 2
 c86:	81 f4       	brne	.+32     	; 0xca8 <__vector_6+0x56>
	{
		/* Store the High time value */
		g_timeHigh = TIMER1_BASE->ICR1H;
 c88:	87 b5       	in	r24, 0x27	; 39
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_timeHigh+0x1>
 c90:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_timeHigh>
		g_timeHigh = TIMER1_BASE->ICR1L;
 c94:	86 b5       	in	r24, 0x26	; 38
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <g_timeHigh+0x1>
 c9c:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <g_timeHigh>
		/* Detect rising edge */
		TIMER1_BASE-> TCCR1B = (TIMER1_BASE-> TCCR1B & 0xBF) | (RISING << 6);
 ca0:	8e b5       	in	r24, 0x2e	; 46
 ca2:	80 64       	ori	r24, 0x40	; 64
 ca4:	8e bd       	out	0x2e, r24	; 46
 ca6:	30 c0       	rjmp	.+96     	; 0xd08 <__vector_6+0xb6>
	}
	else if(g_edgeCount == 3)
 ca8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_edgeCount>
 cac:	83 30       	cpi	r24, 0x03	; 3
 cae:	b1 f4       	brne	.+44     	; 0xcdc <__vector_6+0x8a>
	{
		/* Store the Period time value */
		g_timePeriod = TIMER1_BASE->ICR1H;
 cb0:	87 b5       	in	r24, 0x27	; 39
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <g_timePeriod+0x1>
 cb8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <g_timePeriod>
		g_timePeriod = g_timePeriod << 8 | TIMER1_BASE->ICR1L;
 cbc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <g_timePeriod>
 cc0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <g_timePeriod+0x1>
 cc4:	98 2f       	mov	r25, r24
 cc6:	88 27       	eor	r24, r24
 cc8:	26 b5       	in	r18, 0x26	; 38
 cca:	82 2b       	or	r24, r18
 ccc:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <g_timePeriod+0x1>
 cd0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <g_timePeriod>
		/* Detect falling edge */
		TIMER1_BASE-> TCCR1B = (TIMER1_BASE-> TCCR1B & 0xBF) | (FALLING << 6);
 cd4:	8e b5       	in	r24, 0x2e	; 46
 cd6:	8f 7b       	andi	r24, 0xBF	; 191
 cd8:	8e bd       	out	0x2e, r24	; 46
 cda:	16 c0       	rjmp	.+44     	; 0xd08 <__vector_6+0xb6>
	}
	else if(g_edgeCount == 4)
 cdc:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <g_edgeCount>
 ce0:	84 30       	cpi	r24, 0x04	; 4
 ce2:	91 f4       	brne	.+36     	; 0xd08 <__vector_6+0xb6>
	{
		/* Store the Period time value + High time value */
		g_timePeriodPlusHigh = TIMER1_BASE->ICR1H;
 ce4:	87 b5       	in	r24, 0x27	; 39
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <g_timePeriodPlusHigh+0x1>
 cec:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <g_timePeriodPlusHigh>
		g_timePeriodPlusHigh = g_timePeriodPlusHigh << 8 | TIMER1_BASE->ICR1L;
 cf0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <g_timePeriodPlusHigh>
 cf4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <g_timePeriodPlusHigh+0x1>
 cf8:	98 2f       	mov	r25, r24
 cfa:	88 27       	eor	r24, r24
 cfc:	26 b5       	in	r18, 0x26	; 38
 cfe:	82 2b       	or	r24, r18
 d00:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <g_timePeriodPlusHigh+0x1>
 d04:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <g_timePeriodPlusHigh>
	}
 d08:	9f 91       	pop	r25
 d0a:	8f 91       	pop	r24
 d0c:	2f 91       	pop	r18
 d0e:	0f 90       	pop	r0
 d10:	0f be       	out	0x3f, r0	; 63
 d12:	0f 90       	pop	r0
 d14:	1f 90       	pop	r1
 d16:	18 95       	reti

00000d18 <__tablejump2__>:
 d18:	ee 0f       	add	r30, r30
 d1a:	ff 1f       	adc	r31, r31
 d1c:	05 90       	lpm	r0, Z+
 d1e:	f4 91       	lpm	r31, Z
 d20:	e0 2d       	mov	r30, r0
 d22:	09 94       	ijmp

00000d24 <__itoa_ncheck>:
 d24:	bb 27       	eor	r27, r27
 d26:	4a 30       	cpi	r20, 0x0A	; 10
 d28:	31 f4       	brne	.+12     	; 0xd36 <__itoa_ncheck+0x12>
 d2a:	99 23       	and	r25, r25
 d2c:	22 f4       	brpl	.+8      	; 0xd36 <__itoa_ncheck+0x12>
 d2e:	bd e2       	ldi	r27, 0x2D	; 45
 d30:	90 95       	com	r25
 d32:	81 95       	neg	r24
 d34:	9f 4f       	sbci	r25, 0xFF	; 255
 d36:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__utoa_common>

00000d3a <__utoa_ncheck>:
 d3a:	bb 27       	eor	r27, r27

00000d3c <__utoa_common>:
 d3c:	fb 01       	movw	r30, r22
 d3e:	55 27       	eor	r21, r21
 d40:	aa 27       	eor	r26, r26
 d42:	88 0f       	add	r24, r24
 d44:	99 1f       	adc	r25, r25
 d46:	aa 1f       	adc	r26, r26
 d48:	a4 17       	cp	r26, r20
 d4a:	10 f0       	brcs	.+4      	; 0xd50 <__utoa_common+0x14>
 d4c:	a4 1b       	sub	r26, r20
 d4e:	83 95       	inc	r24
 d50:	50 51       	subi	r21, 0x10	; 16
 d52:	b9 f7       	brne	.-18     	; 0xd42 <__utoa_common+0x6>
 d54:	a0 5d       	subi	r26, 0xD0	; 208
 d56:	aa 33       	cpi	r26, 0x3A	; 58
 d58:	08 f0       	brcs	.+2      	; 0xd5c <__utoa_common+0x20>
 d5a:	a9 5d       	subi	r26, 0xD9	; 217
 d5c:	a1 93       	st	Z+, r26
 d5e:	00 97       	sbiw	r24, 0x00	; 0
 d60:	79 f7       	brne	.-34     	; 0xd40 <__utoa_common+0x4>
 d62:	b1 11       	cpse	r27, r1
 d64:	b1 93       	st	Z+, r27
 d66:	11 92       	st	Z+, r1
 d68:	cb 01       	movw	r24, r22
 d6a:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <strrev>

00000d6e <strrev>:
 d6e:	dc 01       	movw	r26, r24
 d70:	fc 01       	movw	r30, r24
 d72:	67 2f       	mov	r22, r23
 d74:	71 91       	ld	r23, Z+
 d76:	77 23       	and	r23, r23
 d78:	e1 f7       	brne	.-8      	; 0xd72 <strrev+0x4>
 d7a:	32 97       	sbiw	r30, 0x02	; 2
 d7c:	04 c0       	rjmp	.+8      	; 0xd86 <strrev+0x18>
 d7e:	7c 91       	ld	r23, X
 d80:	6d 93       	st	X+, r22
 d82:	70 83       	st	Z, r23
 d84:	62 91       	ld	r22, -Z
 d86:	ae 17       	cp	r26, r30
 d88:	bf 07       	cpc	r27, r31
 d8a:	c8 f3       	brcs	.-14     	; 0xd7e <strrev+0x10>
 d8c:	08 95       	ret

00000d8e <_exit>:
 d8e:	f8 94       	cli

00000d90 <__stop_program>:
 d90:	ff cf       	rjmp	.-2      	; 0xd90 <__stop_program>
