
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000b2e  00000bc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  008000a0  008000a0  00000c02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003122  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ca  00000000  00000000  000040fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a1b  00000000  00000000  000053c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a34  00000000  00000000  00006de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001557  00000000  00000000  00007814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002296  00000000  00000000  00008d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000b001  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3a 03 	jmp	0x674	; 0x674 <__vector_1>
   8:	0c 94 63 03 	jmp	0x6c6	; 0x6c6 <__vector_2>
   c:	0c 94 8c 03 	jmp	0x718	; 0x718 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__vector_6>
  1c:	0c 94 ce 04 	jmp	0x99c	; 0x99c <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <__vector_9>
  28:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_10>
  2c:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <__vector_11>
  30:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__vector_12>
  34:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3e       	cpi	r26, 0xEE	; 238
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 95 05 	jmp	0xb2a	; 0xb2a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>



int main(void) {
	GIE_enable();
  92:	0e 94 b5 03 	call	0x76a	; 0x76a <GIE_enable>
	USART_Init();
  96:	0e 94 20 05 	call	0xa40	; 0xa40 <USART_Init>
	H_LCD_void_Init();
  9a:	0e 94 85 01 	call	0x30a	; 0x30a <H_LCD_void_Init>
	//FingerPS_strTemplate(0x01, 0xF769);
	
	while (1) {
		H_LCD_void_clearScreen();
  9e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <H_LCD_void_clearScreen>
		u8 key = FingerPS_genImg();
  a2:	0e 94 6e 00 	call	0xdc	; 0xdc <FingerPS_genImg>
		H_LCD_void_sendHexNum(key);
  a6:	68 2f       	mov	r22, r24
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 64 02 	call	0x4c8	; 0x4c8 <H_LCD_void_sendHexNum>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	83 ed       	ldi	r24, 0xD3	; 211
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x26>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x30>
  c2:	00 00       	nop
  c4:	ec cf       	rjmp	.-40     	; 0x9e <main+0xc>

000000c6 <receiveCallback>:
	
	//Call Check Sum Func()
	//Call Clear Buffer()
	
	return buffer[9];
}
  c6:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__data_end>
  ca:	e9 2f       	mov	r30, r25
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	eb 52       	subi	r30, 0x2B	; 43
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	80 83       	st	Z, r24
  d4:	9f 5f       	subi	r25, 0xFF	; 255
  d6:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__data_end>
  da:	08 95       	ret

000000dc <FingerPS_genImg>:


u8 FingerPS_genImg()
{
  dc:	1f 93       	push	r17
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	2c 97       	sbiw	r28, 0x0c	; 12
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	f8 94       	cli
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	cd bf       	out	0x3d, r28	; 61
	byte_no = 0;
  f2:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
	u8 GetImgFrame[]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01, 0x00, 0x05};
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	ec e6       	ldi	r30, 0x6C	; 108
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	de 01       	movw	r26, r28
  fe:	11 96       	adiw	r26, 0x01	; 1
 100:	01 90       	ld	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	8a 95       	dec	r24
 106:	e1 f7       	brne	.-8      	; 0x100 <FingerPS_genImg+0x24>
	u8 size=sizeof(GetImgFrame)/sizeof(GetImgFrame[0]);
	
	for (u8 i = 0; i < size; i++)
 108:	10 e0       	ldi	r17, 0x00	; 0
 10a:	0a c0       	rjmp	.+20     	; 0x120 <FingerPS_genImg+0x44>
	{
		UART_sendByte(GetImgFrame[i]);
 10c:	e1 e0       	ldi	r30, 0x01	; 1
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	ec 0f       	add	r30, r28
 112:	fd 1f       	adc	r31, r29
 114:	e1 0f       	add	r30, r17
 116:	f1 1d       	adc	r31, r1
 118:	80 81       	ld	r24, Z
 11a:	0e 94 2a 05 	call	0xa54	; 0xa54 <UART_sendByte>
{
	byte_no = 0;
	u8 GetImgFrame[]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01, 0x00, 0x05};
	u8 size=sizeof(GetImgFrame)/sizeof(GetImgFrame[0]);
	
	for (u8 i = 0; i < size; i++)
 11e:	1f 5f       	subi	r17, 0xFF	; 255
 120:	1c 30       	cpi	r17, 0x0C	; 12
 122:	a0 f3       	brcs	.-24     	; 0x10c <FingerPS_genImg+0x30>
	{
		UART_sendByte(GetImgFrame[i]);
	}
	
	UART_receiveByteAsynchCallBack(receiveCallback);
 124:	83 e6       	ldi	r24, 0x63	; 99
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 2e 05 	call	0xa5c	; 0xa5c <UART_receiveByteAsynchCallBack>
 12c:	8f e1       	ldi	r24, 0x1F	; 31
 12e:	9e e4       	ldi	r25, 0x4E	; 78
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <FingerPS_genImg+0x54>
 134:	00 c0       	rjmp	.+0      	; 0x136 <FingerPS_genImg+0x5a>
 136:	00 00       	nop
	
	return buffer[9];
	
	//Call Check Sum Func()
	//Call Clear Buffer()
}
 138:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <buffer+0x9>
 13c:	2c 96       	adiw	r28, 0x0c	; 12
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	08 95       	ret

00000150 <H_LCD_void_latchByte>:
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	64 97       	sbiw	r28, 0x14	; 20
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
 168:	08 2f       	mov	r16, r24
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	89 83       	std	Y+1, r24	; 0x01
 16e:	1a 82       	std	Y+2, r1	; 0x02
 170:	8b 83       	std	Y+3, r24	; 0x03
 172:	04 fb       	bst	r16, 4
 174:	99 27       	eor	r25, r25
 176:	90 f9       	bld	r25, 0
 178:	9c 83       	std	Y+4, r25	; 0x04
 17a:	8d 83       	std	Y+5, r24	; 0x05
 17c:	8e 83       	std	Y+6, r24	; 0x06
 17e:	8f 83       	std	Y+7, r24	; 0x07
 180:	05 fb       	bst	r16, 5
 182:	99 27       	eor	r25, r25
 184:	90 f9       	bld	r25, 0
 186:	98 87       	std	Y+8, r25	; 0x08
 188:	89 87       	std	Y+9, r24	; 0x09
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	9a 87       	std	Y+10, r25	; 0x0a
 18e:	8b 87       	std	Y+11, r24	; 0x0b
 190:	06 fb       	bst	r16, 6
 192:	99 27       	eor	r25, r25
 194:	90 f9       	bld	r25, 0
 196:	9c 87       	std	Y+12, r25	; 0x0c
 198:	8d 87       	std	Y+13, r24	; 0x0d
 19a:	94 e0       	ldi	r25, 0x04	; 4
 19c:	9e 87       	std	Y+14, r25	; 0x0e
 19e:	8f 87       	std	Y+15, r24	; 0x0f
 1a0:	80 2f       	mov	r24, r16
 1a2:	88 1f       	adc	r24, r24
 1a4:	88 27       	eor	r24, r24
 1a6:	88 1f       	adc	r24, r24
 1a8:	88 8b       	std	Y+16, r24	; 0x10
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	0f c0       	rjmp	.+30     	; 0x1cc <H_LCD_void_latchByte+0x7c>
 1ae:	81 2f       	mov	r24, r17
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	2c 0f       	add	r18, r28
 1c0:	3d 1f       	adc	r19, r29
 1c2:	82 0f       	add	r24, r18
 1c4:	93 1f       	adc	r25, r19
 1c6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_U8SetPinValue>
 1ca:	1f 5f       	subi	r17, 0xFF	; 255
 1cc:	14 30       	cpi	r17, 0x04	; 4
 1ce:	78 f3       	brcs	.-34     	; 0x1ae <H_LCD_void_latchByte+0x5e>
 1d0:	19 8a       	std	Y+17, r1	; 0x11
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	8a 8b       	std	Y+18, r24	; 0x12
 1d6:	1c 8a       	std	Y+20, r1	; 0x14
 1d8:	8f e9       	ldi	r24, 0x9F	; 159
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <H_LCD_void_latchByte+0x8c>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <H_LCD_void_latchByte+0x92>
 1e2:	00 00       	nop
 1e4:	ce 01       	movw	r24, r28
 1e6:	41 96       	adiw	r24, 0x11	; 17
 1e8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_U8SetPinValue>
 1ec:	ef e9       	ldi	r30, 0x9F	; 159
 1ee:	ff e0       	ldi	r31, 0x0F	; 15
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <H_LCD_void_latchByte+0xa0>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <H_LCD_void_latchByte+0xa6>
 1f6:	00 00       	nop
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	8c 8b       	std	Y+20, r24	; 0x14
 1fc:	ce 01       	movw	r24, r28
 1fe:	41 96       	adiw	r24, 0x11	; 17
 200:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_U8SetPinValue>
 204:	8f e9       	ldi	r24, 0x9F	; 159
 206:	9f e0       	ldi	r25, 0x0F	; 15
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <H_LCD_void_latchByte+0xb8>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <H_LCD_void_latchByte+0xbe>
 20e:	00 00       	nop
 210:	10 e0       	ldi	r17, 0x00	; 0
 212:	1a c0       	rjmp	.+52     	; 0x248 <H_LCD_void_latchByte+0xf8>
 214:	81 2f       	mov	r24, r17
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	20 2f       	mov	r18, r16
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	01 2e       	mov	r0, r17
 21e:	02 c0       	rjmp	.+4      	; 0x224 <H_LCD_void_latchByte+0xd4>
 220:	35 95       	asr	r19
 222:	27 95       	ror	r18
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <H_LCD_void_latchByte+0xd0>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	e1 e0       	ldi	r30, 0x01	; 1
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	ec 0f       	add	r30, r28
 236:	fd 1f       	adc	r31, r29
 238:	8e 0f       	add	r24, r30
 23a:	9f 1f       	adc	r25, r31
 23c:	21 70       	andi	r18, 0x01	; 1
 23e:	fc 01       	movw	r30, r24
 240:	23 83       	std	Z+3, r18	; 0x03
 242:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_U8SetPinValue>
 246:	1f 5f       	subi	r17, 0xFF	; 255
 248:	14 30       	cpi	r17, 0x04	; 4
 24a:	20 f3       	brcs	.-56     	; 0x214 <H_LCD_void_latchByte+0xc4>
 24c:	8f e9       	ldi	r24, 0x9F	; 159
 24e:	9f e0       	ldi	r25, 0x0F	; 15
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <H_LCD_void_latchByte+0x100>
 254:	00 c0       	rjmp	.+0      	; 0x256 <H_LCD_void_latchByte+0x106>
 256:	00 00       	nop
 258:	1c 8a       	std	Y+20, r1	; 0x14
 25a:	ce 01       	movw	r24, r28
 25c:	41 96       	adiw	r24, 0x11	; 17
 25e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_U8SetPinValue>
 262:	ef e9       	ldi	r30, 0x9F	; 159
 264:	ff e0       	ldi	r31, 0x0F	; 15
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <H_LCD_void_latchByte+0x116>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <H_LCD_void_latchByte+0x11c>
 26c:	00 00       	nop
 26e:	64 96       	adiw	r28, 0x14	; 20
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	08 95       	ret

00000284 <H_LCD_void_sendCommand>:
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	28 97       	sbiw	r28, 0x08	; 8
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	08 2f       	mov	r16, r24
 29e:	88 e0       	ldi	r24, 0x08	; 8
 2a0:	e8 e7       	ldi	r30, 0x78	; 120
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	de 01       	movw	r26, r28
 2a6:	11 96       	adiw	r26, 0x01	; 1
 2a8:	01 90       	ld	r0, Z+
 2aa:	0d 92       	st	X+, r0
 2ac:	8a 95       	dec	r24
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <H_LCD_void_sendCommand+0x24>
 2b0:	10 e0       	ldi	r17, 0x00	; 0
 2b2:	15 c0       	rjmp	.+42     	; 0x2de <H_LCD_void_sendCommand+0x5a>
 2b4:	81 2f       	mov	r24, r17
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	2c 0f       	add	r18, r28
 2c6:	3d 1f       	adc	r19, r29
 2c8:	82 0f       	add	r24, r18
 2ca:	93 1f       	adc	r25, r19
 2cc:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_U8SetPinValue>
 2d0:	8f e9       	ldi	r24, 0x9F	; 159
 2d2:	9f e0       	ldi	r25, 0x0F	; 15
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <H_LCD_void_sendCommand+0x50>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <H_LCD_void_sendCommand+0x56>
 2da:	00 00       	nop
 2dc:	1f 5f       	subi	r17, 0xFF	; 255
 2de:	12 30       	cpi	r17, 0x02	; 2
 2e0:	48 f3       	brcs	.-46     	; 0x2b4 <H_LCD_void_sendCommand+0x30>
 2e2:	8f e9       	ldi	r24, 0x9F	; 159
 2e4:	9f e0       	ldi	r25, 0x0F	; 15
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <H_LCD_void_sendCommand+0x62>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <H_LCD_void_sendCommand+0x68>
 2ec:	00 00       	nop
 2ee:	80 2f       	mov	r24, r16
 2f0:	0e 94 a8 00 	call	0x150	; 0x150 <H_LCD_void_latchByte>
 2f4:	28 96       	adiw	r28, 0x08	; 8
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	f8 94       	cli
 2fa:	de bf       	out	0x3e, r29	; 62
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	cd bf       	out	0x3d, r28	; 61
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	08 95       	ret

0000030a <H_LCD_void_Init>:
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
 314:	68 97       	sbiw	r28, 0x18	; 24
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	fe 01       	movw	r30, r28
 322:	31 96       	adiw	r30, 0x01	; 1
 324:	88 e0       	ldi	r24, 0x08	; 8
 326:	df 01       	movw	r26, r30
 328:	1d 92       	st	X+, r1
 32a:	8a 95       	dec	r24
 32c:	e9 f7       	brne	.-6      	; 0x328 <H_LCD_void_Init+0x1e>
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	8a 83       	std	Y+2, r24	; 0x02
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	8b 83       	std	Y+3, r24	; 0x03
 336:	92 e0       	ldi	r25, 0x02	; 2
 338:	9e 83       	std	Y+6, r25	; 0x06
 33a:	8f 83       	std	Y+7, r24	; 0x07
 33c:	10 e0       	ldi	r17, 0x00	; 0
 33e:	0f c0       	rjmp	.+30     	; 0x35e <H_LCD_void_Init+0x54>
 340:	81 2f       	mov	r24, r17
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	2c 0f       	add	r18, r28
 352:	3d 1f       	adc	r19, r29
 354:	82 0f       	add	r24, r18
 356:	93 1f       	adc	r25, r19
 358:	0e 94 ba 02 	call	0x574	; 0x574 <DIO_U8SetPinDirection>
 35c:	1f 5f       	subi	r17, 0xFF	; 255
 35e:	12 30       	cpi	r17, 0x02	; 2
 360:	78 f3       	brcs	.-34     	; 0x340 <H_LCD_void_Init+0x36>
 362:	fe 01       	movw	r30, r28
 364:	39 96       	adiw	r30, 0x09	; 9
 366:	80 e1       	ldi	r24, 0x10	; 16
 368:	df 01       	movw	r26, r30
 36a:	1d 92       	st	X+, r1
 36c:	8a 95       	dec	r24
 36e:	e9 f7       	brne	.-6      	; 0x36a <H_LCD_void_Init+0x60>
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	89 87       	std	Y+9, r24	; 0x09
 374:	8b 87       	std	Y+11, r24	; 0x0b
 376:	8d 87       	std	Y+13, r24	; 0x0d
 378:	8e 87       	std	Y+14, r24	; 0x0e
 37a:	8f 87       	std	Y+15, r24	; 0x0f
 37c:	89 8b       	std	Y+17, r24	; 0x11
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	9a 8b       	std	Y+18, r25	; 0x12
 382:	8b 8b       	std	Y+19, r24	; 0x13
 384:	8d 8b       	std	Y+21, r24	; 0x15
 386:	94 e0       	ldi	r25, 0x04	; 4
 388:	9e 8b       	std	Y+22, r25	; 0x16
 38a:	8f 8b       	std	Y+23, r24	; 0x17
 38c:	10 e0       	ldi	r17, 0x00	; 0
 38e:	0f c0       	rjmp	.+30     	; 0x3ae <H_LCD_void_Init+0xa4>
 390:	81 2f       	mov	r24, r17
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	29 e0       	ldi	r18, 0x09	; 9
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	2c 0f       	add	r18, r28
 3a2:	3d 1f       	adc	r19, r29
 3a4:	82 0f       	add	r24, r18
 3a6:	93 1f       	adc	r25, r19
 3a8:	0e 94 ba 02 	call	0x574	; 0x574 <DIO_U8SetPinDirection>
 3ac:	1f 5f       	subi	r17, 0xFF	; 255
 3ae:	14 30       	cpi	r17, 0x04	; 4
 3b0:	78 f3       	brcs	.-34     	; 0x390 <H_LCD_void_Init+0x86>
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	0e 94 42 01 	call	0x284	; 0x284 <H_LCD_void_sendCommand>
 3b8:	8f e9       	ldi	r24, 0x9F	; 159
 3ba:	9f e0       	ldi	r25, 0x0F	; 15
 3bc:	01 97       	sbiw	r24, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <H_LCD_void_Init+0xb2>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <H_LCD_void_Init+0xb8>
 3c2:	00 00       	nop
 3c4:	88 e2       	ldi	r24, 0x28	; 40
 3c6:	0e 94 42 01 	call	0x284	; 0x284 <H_LCD_void_sendCommand>
 3ca:	af e9       	ldi	r26, 0x9F	; 159
 3cc:	bf e0       	ldi	r27, 0x0F	; 15
 3ce:	11 97       	sbiw	r26, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <H_LCD_void_Init+0xc4>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <H_LCD_void_Init+0xca>
 3d4:	00 00       	nop
 3d6:	8f e0       	ldi	r24, 0x0F	; 15
 3d8:	0e 94 42 01 	call	0x284	; 0x284 <H_LCD_void_sendCommand>
 3dc:	8f e9       	ldi	r24, 0x9F	; 159
 3de:	9f e0       	ldi	r25, 0x0F	; 15
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <H_LCD_void_Init+0xd6>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <H_LCD_void_Init+0xdc>
 3e6:	00 00       	nop
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 42 01 	call	0x284	; 0x284 <H_LCD_void_sendCommand>
 3ee:	af e3       	ldi	r26, 0x3F	; 63
 3f0:	bf e1       	ldi	r27, 0x1F	; 31
 3f2:	11 97       	sbiw	r26, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <H_LCD_void_Init+0xe8>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <H_LCD_void_Init+0xee>
 3f8:	00 00       	nop
 3fa:	86 e0       	ldi	r24, 0x06	; 6
 3fc:	0e 94 42 01 	call	0x284	; 0x284 <H_LCD_void_sendCommand>
 400:	68 96       	adiw	r28, 0x18	; 24
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	08 95       	ret

00000414 <H_LCD_void_sendData>:
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
 420:	28 97       	sbiw	r28, 0x08	; 8
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	f8 94       	cli
 426:	de bf       	out	0x3e, r29	; 62
 428:	0f be       	out	0x3f, r0	; 63
 42a:	cd bf       	out	0x3d, r28	; 61
 42c:	08 2f       	mov	r16, r24
 42e:	88 e0       	ldi	r24, 0x08	; 8
 430:	e0 e8       	ldi	r30, 0x80	; 128
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	de 01       	movw	r26, r28
 436:	11 96       	adiw	r26, 0x01	; 1
 438:	01 90       	ld	r0, Z+
 43a:	0d 92       	st	X+, r0
 43c:	8a 95       	dec	r24
 43e:	e1 f7       	brne	.-8      	; 0x438 <H_LCD_void_sendData+0x24>
 440:	10 e0       	ldi	r17, 0x00	; 0
 442:	15 c0       	rjmp	.+42     	; 0x46e <H_LCD_void_sendData+0x5a>
 444:	81 2f       	mov	r24, r17
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	2c 0f       	add	r18, r28
 456:	3d 1f       	adc	r19, r29
 458:	82 0f       	add	r24, r18
 45a:	93 1f       	adc	r25, r19
 45c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <DIO_U8SetPinValue>
 460:	8f e9       	ldi	r24, 0x9F	; 159
 462:	9f e0       	ldi	r25, 0x0F	; 15
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <H_LCD_void_sendData+0x50>
 468:	00 c0       	rjmp	.+0      	; 0x46a <H_LCD_void_sendData+0x56>
 46a:	00 00       	nop
 46c:	1f 5f       	subi	r17, 0xFF	; 255
 46e:	12 30       	cpi	r17, 0x02	; 2
 470:	48 f3       	brcs	.-46     	; 0x444 <H_LCD_void_sendData+0x30>
 472:	8f e9       	ldi	r24, 0x9F	; 159
 474:	9f e0       	ldi	r25, 0x0F	; 15
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <H_LCD_void_sendData+0x62>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <H_LCD_void_sendData+0x68>
 47c:	00 00       	nop
 47e:	80 2f       	mov	r24, r16
 480:	0e 94 a8 00 	call	0x150	; 0x150 <H_LCD_void_latchByte>
 484:	28 96       	adiw	r28, 0x08	; 8
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	f8 94       	cli
 48a:	de bf       	out	0x3e, r29	; 62
 48c:	0f be       	out	0x3f, r0	; 63
 48e:	cd bf       	out	0x3d, r28	; 61
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	08 95       	ret

0000049a <H_LCD_void_sendString>:
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	8c 01       	movw	r16, r24
 4a2:	c0 e0       	ldi	r28, 0x00	; 0
 4a4:	03 c0       	rjmp	.+6      	; 0x4ac <H_LCD_void_sendString+0x12>
 4a6:	0e 94 0a 02 	call	0x414	; 0x414 <H_LCD_void_sendData>
 4aa:	cf 5f       	subi	r28, 0xFF	; 255
 4ac:	f8 01       	movw	r30, r16
 4ae:	ec 0f       	add	r30, r28
 4b0:	f1 1d       	adc	r31, r1
 4b2:	80 81       	ld	r24, Z
 4b4:	81 11       	cpse	r24, r1
 4b6:	f7 cf       	rjmp	.-18     	; 0x4a6 <H_LCD_void_sendString+0xc>
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	0f 91       	pop	r16
 4be:	08 95       	ret

000004c0 <H_LCD_void_clearScreen>:
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 42 01 	call	0x284	; 0x284 <H_LCD_void_sendCommand>
 4c6:	08 95       	ret

000004c8 <H_LCD_void_sendHexNum>:
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	60 97       	sbiw	r28, 0x10	; 16
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	f8 94       	cli
 4d6:	de bf       	out	0x3e, r29	; 62
 4d8:	0f be       	out	0x3f, r0	; 63
 4da:	cd bf       	out	0x3d, r28	; 61
 4dc:	dc 01       	movw	r26, r24
 4de:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4e0:	40 e1       	ldi	r20, 0x10	; 16
 4e2:	be 01       	movw	r22, r28
 4e4:	6f 5f       	subi	r22, 0xFF	; 255
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	0e 94 60 05 	call	0xac0	; 0xac0 <__itoa_ncheck>
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0d c0       	rjmp	.+26     	; 0x50a <H_LCD_void_sendHexNum+0x42>
 4f0:	4f e9       	ldi	r20, 0x9F	; 159
 4f2:	48 0f       	add	r20, r24
 4f4:	46 30       	cpi	r20, 0x06	; 6
 4f6:	40 f4       	brcc	.+16     	; 0x508 <H_LCD_void_sendHexNum+0x40>
 4f8:	80 52       	subi	r24, 0x20	; 32
 4fa:	e1 e0       	ldi	r30, 0x01	; 1
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	ec 0f       	add	r30, r28
 500:	fd 1f       	adc	r31, r29
 502:	e2 0f       	add	r30, r18
 504:	f3 1f       	adc	r31, r19
 506:	80 83       	st	Z, r24
 508:	9f 5f       	subi	r25, 0xFF	; 255
 50a:	29 2f       	mov	r18, r25
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	e1 e0       	ldi	r30, 0x01	; 1
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	ec 0f       	add	r30, r28
 514:	fd 1f       	adc	r31, r29
 516:	e2 0f       	add	r30, r18
 518:	f3 1f       	adc	r31, r19
 51a:	80 81       	ld	r24, Z
 51c:	81 11       	cpse	r24, r1
 51e:	e8 cf       	rjmp	.-48     	; 0x4f0 <H_LCD_void_sendHexNum+0x28>
 520:	8a e8       	ldi	r24, 0x8A	; 138
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 4d 02 	call	0x49a	; 0x49a <H_LCD_void_sendString>
 528:	ce 01       	movw	r24, r28
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	0e 94 4d 02 	call	0x49a	; 0x49a <H_LCD_void_sendString>
 530:	60 96       	adiw	r28, 0x10	; 16
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	f8 94       	cli
 536:	de bf       	out	0x3e, r29	; 62
 538:	0f be       	out	0x3f, r0	; 63
 53a:	cd bf       	out	0x3d, r28	; 61
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <__vector_16>:
 542:	24 b1       	in	r18, 0x04	; 4
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	00 24       	eor	r0, r0
 548:	22 0f       	add	r18, r18
 54a:	33 1f       	adc	r19, r19
 54c:	00 1c       	adc	r0, r0
 54e:	22 0f       	add	r18, r18
 550:	33 1f       	adc	r19, r19
 552:	00 1c       	adc	r0, r0
 554:	23 2f       	mov	r18, r19
 556:	30 2d       	mov	r19, r0
 558:	85 b1       	in	r24, 0x05	; 5
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	e0 91 a1 00 	lds	r30, 0x00A1	; 0x8000a1 <ADC_callBack>
 568:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <ADC_callBack+0x1>
 56c:	82 2b       	or	r24, r18
 56e:	93 2b       	or	r25, r19
 570:	09 95       	icall
 572:	08 95       	ret

00000574 <DIO_U8SetPinDirection>:
 574:	dc 01       	movw	r26, r24
 576:	ec 91       	ld	r30, X
 578:	e4 30       	cpi	r30, 0x04	; 4
 57a:	a0 f5       	brcc	.+104    	; 0x5e4 <DIO_U8SetPinDirection+0x70>
 57c:	11 96       	adiw	r26, 0x01	; 1
 57e:	2c 91       	ld	r18, X
 580:	11 97       	sbiw	r26, 0x01	; 1
 582:	28 30       	cpi	r18, 0x08	; 8
 584:	88 f5       	brcc	.+98     	; 0x5e8 <DIO_U8SetPinDirection+0x74>
 586:	12 96       	adiw	r26, 0x02	; 2
 588:	8c 91       	ld	r24, X
 58a:	81 11       	cpse	r24, r1
 58c:	15 c0       	rjmp	.+42     	; 0x5b8 <DIO_U8SetPinDirection+0x44>
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	ee 0f       	add	r30, r30
 592:	ff 1f       	adc	r31, r31
 594:	e8 56       	subi	r30, 0x68	; 104
 596:	ff 4f       	sbci	r31, 0xFF	; 255
 598:	01 90       	ld	r0, Z+
 59a:	f0 81       	ld	r31, Z
 59c:	e0 2d       	mov	r30, r0
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_U8SetPinDirection+0x34>
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	2a 95       	dec	r18
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_U8SetPinDirection+0x30>
 5ac:	80 95       	com	r24
 5ae:	90 81       	ld	r25, Z
 5b0:	89 23       	and	r24, r25
 5b2:	80 83       	st	Z, r24
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	c1 f4       	brne	.+48     	; 0x5ec <DIO_U8SetPinDirection+0x78>
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	ee 0f       	add	r30, r30
 5c0:	ff 1f       	adc	r31, r31
 5c2:	e8 56       	subi	r30, 0x68	; 104
 5c4:	ff 4f       	sbci	r31, 0xFF	; 255
 5c6:	01 90       	ld	r0, Z+
 5c8:	f0 81       	ld	r31, Z
 5ca:	e0 2d       	mov	r30, r0
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_U8SetPinDirection+0x62>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	2a 95       	dec	r18
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_U8SetPinDirection+0x5e>
 5da:	90 81       	ld	r25, Z
 5dc:	89 2b       	or	r24, r25
 5de:	80 83       	st	Z, r24
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	08 95       	ret
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	08 95       	ret
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	08 95       	ret
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	08 95       	ret

000005f0 <DIO_U8SetPinValue>:
 5f0:	00 97       	sbiw	r24, 0x00	; 0
 5f2:	c1 f1       	breq	.+112    	; 0x664 <DIO_U8SetPinValue+0x74>
 5f4:	dc 01       	movw	r26, r24
 5f6:	ec 91       	ld	r30, X
 5f8:	e4 30       	cpi	r30, 0x04	; 4
 5fa:	b0 f5       	brcc	.+108    	; 0x668 <DIO_U8SetPinValue+0x78>
 5fc:	11 96       	adiw	r26, 0x01	; 1
 5fe:	2c 91       	ld	r18, X
 600:	11 97       	sbiw	r26, 0x01	; 1
 602:	28 30       	cpi	r18, 0x08	; 8
 604:	98 f5       	brcc	.+102    	; 0x66c <DIO_U8SetPinValue+0x7c>
 606:	13 96       	adiw	r26, 0x03	; 3
 608:	8c 91       	ld	r24, X
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	a1 f4       	brne	.+40     	; 0x636 <DIO_U8SetPinValue+0x46>
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	e0 57       	subi	r30, 0x70	; 112
 616:	ff 4f       	sbci	r31, 0xFF	; 255
 618:	01 90       	ld	r0, Z+
 61a:	f0 81       	ld	r31, Z
 61c:	e0 2d       	mov	r30, r0
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_U8SetPinValue+0x38>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	2a 95       	dec	r18
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_U8SetPinValue+0x34>
 62c:	90 81       	ld	r25, Z
 62e:	89 2b       	or	r24, r25
 630:	80 83       	st	Z, r24
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	08 95       	ret
 636:	81 11       	cpse	r24, r1
 638:	1b c0       	rjmp	.+54     	; 0x670 <DIO_U8SetPinValue+0x80>
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	e0 57       	subi	r30, 0x70	; 112
 642:	ff 4f       	sbci	r31, 0xFF	; 255
 644:	01 90       	ld	r0, Z+
 646:	f0 81       	ld	r31, Z
 648:	e0 2d       	mov	r30, r0
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <DIO_U8SetPinValue+0x64>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	2a 95       	dec	r18
 656:	e2 f7       	brpl	.-8      	; 0x650 <DIO_U8SetPinValue+0x60>
 658:	80 95       	com	r24
 65a:	90 81       	ld	r25, Z
 65c:	89 23       	and	r24, r25
 65e:	80 83       	st	Z, r24
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	08 95       	ret
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	08 95       	ret
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	08 95       	ret
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	08 95       	ret
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	08 95       	ret

00000674 <__vector_1>:
 674:	1f 92       	push	r1
 676:	0f 92       	push	r0
 678:	0f b6       	in	r0, 0x3f	; 63
 67a:	0f 92       	push	r0
 67c:	11 24       	eor	r1, r1
 67e:	2f 93       	push	r18
 680:	3f 93       	push	r19
 682:	4f 93       	push	r20
 684:	5f 93       	push	r21
 686:	6f 93       	push	r22
 688:	7f 93       	push	r23
 68a:	8f 93       	push	r24
 68c:	9f 93       	push	r25
 68e:	af 93       	push	r26
 690:	bf 93       	push	r27
 692:	ef 93       	push	r30
 694:	ff 93       	push	r31
 696:	e0 91 a3 00 	lds	r30, 0x00A3	; 0x8000a3 <Action>
 69a:	f0 91 a4 00 	lds	r31, 0x00A4	; 0x8000a4 <Action+0x1>
 69e:	30 97       	sbiw	r30, 0x00	; 0
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <__vector_1+0x30>
 6a2:	09 95       	icall
 6a4:	ff 91       	pop	r31
 6a6:	ef 91       	pop	r30
 6a8:	bf 91       	pop	r27
 6aa:	af 91       	pop	r26
 6ac:	9f 91       	pop	r25
 6ae:	8f 91       	pop	r24
 6b0:	7f 91       	pop	r23
 6b2:	6f 91       	pop	r22
 6b4:	5f 91       	pop	r21
 6b6:	4f 91       	pop	r20
 6b8:	3f 91       	pop	r19
 6ba:	2f 91       	pop	r18
 6bc:	0f 90       	pop	r0
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	0f 90       	pop	r0
 6c2:	1f 90       	pop	r1
 6c4:	18 95       	reti

000006c6 <__vector_2>:
 6c6:	1f 92       	push	r1
 6c8:	0f 92       	push	r0
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	0f 92       	push	r0
 6ce:	11 24       	eor	r1, r1
 6d0:	2f 93       	push	r18
 6d2:	3f 93       	push	r19
 6d4:	4f 93       	push	r20
 6d6:	5f 93       	push	r21
 6d8:	6f 93       	push	r22
 6da:	7f 93       	push	r23
 6dc:	8f 93       	push	r24
 6de:	9f 93       	push	r25
 6e0:	af 93       	push	r26
 6e2:	bf 93       	push	r27
 6e4:	ef 93       	push	r30
 6e6:	ff 93       	push	r31
 6e8:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <Action+0x2>
 6ec:	f0 91 a6 00 	lds	r31, 0x00A6	; 0x8000a6 <Action+0x3>
 6f0:	30 97       	sbiw	r30, 0x00	; 0
 6f2:	09 f0       	breq	.+2      	; 0x6f6 <__vector_2+0x30>
 6f4:	09 95       	icall
 6f6:	ff 91       	pop	r31
 6f8:	ef 91       	pop	r30
 6fa:	bf 91       	pop	r27
 6fc:	af 91       	pop	r26
 6fe:	9f 91       	pop	r25
 700:	8f 91       	pop	r24
 702:	7f 91       	pop	r23
 704:	6f 91       	pop	r22
 706:	5f 91       	pop	r21
 708:	4f 91       	pop	r20
 70a:	3f 91       	pop	r19
 70c:	2f 91       	pop	r18
 70e:	0f 90       	pop	r0
 710:	0f be       	out	0x3f, r0	; 63
 712:	0f 90       	pop	r0
 714:	1f 90       	pop	r1
 716:	18 95       	reti

00000718 <__vector_3>:
 718:	1f 92       	push	r1
 71a:	0f 92       	push	r0
 71c:	0f b6       	in	r0, 0x3f	; 63
 71e:	0f 92       	push	r0
 720:	11 24       	eor	r1, r1
 722:	2f 93       	push	r18
 724:	3f 93       	push	r19
 726:	4f 93       	push	r20
 728:	5f 93       	push	r21
 72a:	6f 93       	push	r22
 72c:	7f 93       	push	r23
 72e:	8f 93       	push	r24
 730:	9f 93       	push	r25
 732:	af 93       	push	r26
 734:	bf 93       	push	r27
 736:	ef 93       	push	r30
 738:	ff 93       	push	r31
 73a:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <Action+0x4>
 73e:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <Action+0x5>
 742:	30 97       	sbiw	r30, 0x00	; 0
 744:	09 f0       	breq	.+2      	; 0x748 <__vector_3+0x30>
 746:	09 95       	icall
 748:	ff 91       	pop	r31
 74a:	ef 91       	pop	r30
 74c:	bf 91       	pop	r27
 74e:	af 91       	pop	r26
 750:	9f 91       	pop	r25
 752:	8f 91       	pop	r24
 754:	7f 91       	pop	r23
 756:	6f 91       	pop	r22
 758:	5f 91       	pop	r21
 75a:	4f 91       	pop	r20
 75c:	3f 91       	pop	r19
 75e:	2f 91       	pop	r18
 760:	0f 90       	pop	r0
 762:	0f be       	out	0x3f, r0	; 63
 764:	0f 90       	pop	r0
 766:	1f 90       	pop	r1
 768:	18 95       	reti

0000076a <GIE_enable>:
 76a:	78 94       	sei
 76c:	08 95       	ret

0000076e <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 76e:	1f 92       	push	r1
 770:	0f 92       	push	r0
 772:	0f b6       	in	r0, 0x3f	; 63
 774:	0f 92       	push	r0
 776:	11 24       	eor	r1, r1
 778:	2f 93       	push	r18
 77a:	3f 93       	push	r19
 77c:	4f 93       	push	r20
 77e:	5f 93       	push	r21
 780:	6f 93       	push	r22
 782:	7f 93       	push	r23
 784:	8f 93       	push	r24
 786:	9f 93       	push	r25
 788:	af 93       	push	r26
 78a:	bf 93       	push	r27
 78c:	ef 93       	push	r30
 78e:	ff 93       	push	r31
	if(Action_Spi != NULL){
 790:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <Action_Spi>
 794:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <Action_Spi+0x1>
 798:	30 97       	sbiw	r30, 0x00	; 0
 79a:	11 f0       	breq	.+4      	; 0x7a0 <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 79c:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 79e:	09 95       	icall
	}
 7a0:	ff 91       	pop	r31
 7a2:	ef 91       	pop	r30
 7a4:	bf 91       	pop	r27
 7a6:	af 91       	pop	r26
 7a8:	9f 91       	pop	r25
 7aa:	8f 91       	pop	r24
 7ac:	7f 91       	pop	r23
 7ae:	6f 91       	pop	r22
 7b0:	5f 91       	pop	r21
 7b2:	4f 91       	pop	r20
 7b4:	3f 91       	pop	r19
 7b6:	2f 91       	pop	r18
 7b8:	0f 90       	pop	r0
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	0f 90       	pop	r0
 7be:	1f 90       	pop	r1
 7c0:	18 95       	reti

000007c2 <__vector_11>:
 7c2:	1f 92       	push	r1
 7c4:	0f 92       	push	r0
 7c6:	0f b6       	in	r0, 0x3f	; 63
 7c8:	0f 92       	push	r0
 7ca:	11 24       	eor	r1, r1
 7cc:	2f 93       	push	r18
 7ce:	3f 93       	push	r19
 7d0:	4f 93       	push	r20
 7d2:	5f 93       	push	r21
 7d4:	6f 93       	push	r22
 7d6:	7f 93       	push	r23
 7d8:	8f 93       	push	r24
 7da:	9f 93       	push	r25
 7dc:	af 93       	push	r26
 7de:	bf 93       	push	r27
 7e0:	ef 93       	push	r30
 7e2:	ff 93       	push	r31
 7e4:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <Action_Timer>
 7e8:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <Action_Timer+0x1>
 7ec:	89 2b       	or	r24, r25
 7ee:	89 f1       	breq	.+98     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 7f0:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <counter.1685>
 7f4:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <counter.1685+0x1>
 7f8:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <counter.1685+0x2>
 7fc:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <counter.1685+0x3>
 800:	01 96       	adiw	r24, 0x01	; 1
 802:	a1 1d       	adc	r26, r1
 804:	b1 1d       	adc	r27, r1
 806:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <counter.1685>
 80a:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <counter.1685+0x1>
 80e:	a0 93 ad 00 	sts	0x00AD, r26	; 0x8000ad <counter.1685+0x2>
 812:	b0 93 ae 00 	sts	0x00AE, r27	; 0x8000ae <counter.1685+0x3>
 816:	40 91 b7 00 	lds	r20, 0x00B7	; 0x8000b7 <numOverflows>
 81a:	50 91 b8 00 	lds	r21, 0x00B8	; 0x8000b8 <numOverflows+0x1>
 81e:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <numOverflows+0x2>
 822:	70 91 ba 00 	lds	r23, 0x00BA	; 0x8000ba <numOverflows+0x3>
 826:	84 17       	cp	r24, r20
 828:	95 07       	cpc	r25, r21
 82a:	a6 07       	cpc	r26, r22
 82c:	b7 07       	cpc	r27, r23
 82e:	89 f4       	brne	.+34     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 830:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <remainingCounts>
 834:	81 95       	neg	r24
 836:	82 bf       	out	0x32, r24	; 50
 838:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <counter.1685>
 83c:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <counter.1685+0x1>
 840:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <counter.1685+0x2>
 844:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <counter.1685+0x3>
 848:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <Action_Timer>
 84c:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <Action_Timer+0x1>
 850:	09 95       	icall
 852:	ff 91       	pop	r31
 854:	ef 91       	pop	r30
 856:	bf 91       	pop	r27
 858:	af 91       	pop	r26
 85a:	9f 91       	pop	r25
 85c:	8f 91       	pop	r24
 85e:	7f 91       	pop	r23
 860:	6f 91       	pop	r22
 862:	5f 91       	pop	r21
 864:	4f 91       	pop	r20
 866:	3f 91       	pop	r19
 868:	2f 91       	pop	r18
 86a:	0f 90       	pop	r0
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	0f 90       	pop	r0
 870:	1f 90       	pop	r1
 872:	18 95       	reti

00000874 <__vector_10>:
 874:	1f 92       	push	r1
 876:	0f 92       	push	r0
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	0f 92       	push	r0
 87c:	11 24       	eor	r1, r1
 87e:	2f 93       	push	r18
 880:	3f 93       	push	r19
 882:	4f 93       	push	r20
 884:	5f 93       	push	r21
 886:	6f 93       	push	r22
 888:	7f 93       	push	r23
 88a:	8f 93       	push	r24
 88c:	9f 93       	push	r25
 88e:	af 93       	push	r26
 890:	bf 93       	push	r27
 892:	ef 93       	push	r30
 894:	ff 93       	push	r31
 896:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <Action_Timer+0x2>
 89a:	f0 91 b2 00 	lds	r31, 0x00B2	; 0x8000b2 <Action_Timer+0x3>
 89e:	30 97       	sbiw	r30, 0x00	; 0
 8a0:	09 f0       	breq	.+2      	; 0x8a4 <__vector_10+0x30>
 8a2:	09 95       	icall
 8a4:	ff 91       	pop	r31
 8a6:	ef 91       	pop	r30
 8a8:	bf 91       	pop	r27
 8aa:	af 91       	pop	r26
 8ac:	9f 91       	pop	r25
 8ae:	8f 91       	pop	r24
 8b0:	7f 91       	pop	r23
 8b2:	6f 91       	pop	r22
 8b4:	5f 91       	pop	r21
 8b6:	4f 91       	pop	r20
 8b8:	3f 91       	pop	r19
 8ba:	2f 91       	pop	r18
 8bc:	0f 90       	pop	r0
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	0f 90       	pop	r0
 8c2:	1f 90       	pop	r1
 8c4:	18 95       	reti

000008c6 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 8c6:	1f 92       	push	r1
 8c8:	0f 92       	push	r0
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	0f 92       	push	r0
 8ce:	11 24       	eor	r1, r1
 8d0:	2f 93       	push	r18
 8d2:	3f 93       	push	r19
 8d4:	4f 93       	push	r20
 8d6:	5f 93       	push	r21
 8d8:	6f 93       	push	r22
 8da:	7f 93       	push	r23
 8dc:	8f 93       	push	r24
 8de:	9f 93       	push	r25
 8e0:	af 93       	push	r26
 8e2:	bf 93       	push	r27
 8e4:	cf 93       	push	r28
 8e6:	df 93       	push	r29
 8e8:	ef 93       	push	r30
 8ea:	ff 93       	push	r31
	Action_Timer[0]();
 8ec:	cf eb       	ldi	r28, 0xBF	; 191
 8ee:	d0 e0       	ldi	r29, 0x00	; 0
 8f0:	e8 81       	ld	r30, Y
 8f2:	f9 81       	ldd	r31, Y+1	; 0x01
 8f4:	09 95       	icall
	numOverflows++;
 8f6:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <numOverflows>
 8fa:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <numOverflows+0x1>
 8fe:	a0 91 c9 00 	lds	r26, 0x00C9	; 0x8000c9 <numOverflows+0x2>
 902:	b0 91 ca 00 	lds	r27, 0x00CA	; 0x8000ca <numOverflows+0x3>
 906:	01 96       	adiw	r24, 0x01	; 1
 908:	a1 1d       	adc	r26, r1
 90a:	b1 1d       	adc	r27, r1
 90c:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <numOverflows>
 910:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <numOverflows+0x1>
 914:	a0 93 c9 00 	sts	0x00C9, r26	; 0x8000c9 <numOverflows+0x2>
 918:	b0 93 ca 00 	sts	0x00CA, r27	; 0x8000ca <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 91c:	e8 81       	ld	r30, Y
 91e:	f9 81       	ldd	r31, Y+1	; 0x01
 920:	30 97       	sbiw	r30, 0x00	; 0
 922:	49 f1       	breq	.+82     	; 0x976 <__vector_9+0xb0>
		counter++;
 924:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <counter.1744>
 928:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <counter.1744+0x1>
 92c:	a0 91 bd 00 	lds	r26, 0x00BD	; 0x8000bd <counter.1744+0x2>
 930:	b0 91 be 00 	lds	r27, 0x00BE	; 0x8000be <counter.1744+0x3>
 934:	01 96       	adiw	r24, 0x01	; 1
 936:	a1 1d       	adc	r26, r1
 938:	b1 1d       	adc	r27, r1
 93a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <counter.1744>
 93e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <counter.1744+0x1>
 942:	a0 93 bd 00 	sts	0x00BD, r26	; 0x8000bd <counter.1744+0x2>
 946:	b0 93 be 00 	sts	0x00BE, r27	; 0x8000be <counter.1744+0x3>
		if(counter == req_numOverflows){
 94a:	40 91 cb 00 	lds	r20, 0x00CB	; 0x8000cb <req_numOverflows>
 94e:	50 91 cc 00 	lds	r21, 0x00CC	; 0x8000cc <req_numOverflows+0x1>
 952:	60 91 cd 00 	lds	r22, 0x00CD	; 0x8000cd <req_numOverflows+0x2>
 956:	70 91 ce 00 	lds	r23, 0x00CE	; 0x8000ce <req_numOverflows+0x3>
 95a:	84 17       	cp	r24, r20
 95c:	95 07       	cpc	r25, r21
 95e:	a6 07       	cpc	r26, r22
 960:	b7 07       	cpc	r27, r23
 962:	49 f4       	brne	.+18     	; 0x976 <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 964:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <counter.1744>
 968:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <counter.1744+0x1>
 96c:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <counter.1744+0x2>
 970:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <counter.1744+0x3>
			Action_Timer[0]();
 974:	09 95       	icall
		}
		
	}
}
 976:	ff 91       	pop	r31
 978:	ef 91       	pop	r30
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	bf 91       	pop	r27
 980:	af 91       	pop	r26
 982:	9f 91       	pop	r25
 984:	8f 91       	pop	r24
 986:	7f 91       	pop	r23
 988:	6f 91       	pop	r22
 98a:	5f 91       	pop	r21
 98c:	4f 91       	pop	r20
 98e:	3f 91       	pop	r19
 990:	2f 91       	pop	r18
 992:	0f 90       	pop	r0
 994:	0f be       	out	0x3f, r0	; 63
 996:	0f 90       	pop	r0
 998:	1f 90       	pop	r1
 99a:	18 95       	reti

0000099c <__vector_7>:

ISR(TIMER1_COMPA_vect){
 99c:	1f 92       	push	r1
 99e:	0f 92       	push	r0
 9a0:	0f b6       	in	r0, 0x3f	; 63
 9a2:	0f 92       	push	r0
 9a4:	11 24       	eor	r1, r1
 9a6:	2f 93       	push	r18
 9a8:	3f 93       	push	r19
 9aa:	4f 93       	push	r20
 9ac:	5f 93       	push	r21
 9ae:	6f 93       	push	r22
 9b0:	7f 93       	push	r23
 9b2:	8f 93       	push	r24
 9b4:	9f 93       	push	r25
 9b6:	af 93       	push	r26
 9b8:	bf 93       	push	r27
 9ba:	ef 93       	push	r30
 9bc:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 9be:	e0 91 c1 00 	lds	r30, 0x00C1	; 0x8000c1 <Action_Timer+0x2>
 9c2:	f0 91 c2 00 	lds	r31, 0x00C2	; 0x8000c2 <Action_Timer+0x3>
 9c6:	30 97       	sbiw	r30, 0x00	; 0
 9c8:	09 f0       	breq	.+2      	; 0x9cc <__vector_7+0x30>
		Action_Timer[1]();
 9ca:	09 95       	icall
	}
}
 9cc:	ff 91       	pop	r31
 9ce:	ef 91       	pop	r30
 9d0:	bf 91       	pop	r27
 9d2:	af 91       	pop	r26
 9d4:	9f 91       	pop	r25
 9d6:	8f 91       	pop	r24
 9d8:	7f 91       	pop	r23
 9da:	6f 91       	pop	r22
 9dc:	5f 91       	pop	r21
 9de:	4f 91       	pop	r20
 9e0:	3f 91       	pop	r19
 9e2:	2f 91       	pop	r18
 9e4:	0f 90       	pop	r0
 9e6:	0f be       	out	0x3f, r0	; 63
 9e8:	0f 90       	pop	r0
 9ea:	1f 90       	pop	r1
 9ec:	18 95       	reti

000009ee <__vector_6>:


ISR(TIMER1_CAPT_vect){
 9ee:	1f 92       	push	r1
 9f0:	0f 92       	push	r0
 9f2:	0f b6       	in	r0, 0x3f	; 63
 9f4:	0f 92       	push	r0
 9f6:	11 24       	eor	r1, r1
 9f8:	2f 93       	push	r18
 9fa:	3f 93       	push	r19
 9fc:	4f 93       	push	r20
 9fe:	5f 93       	push	r21
 a00:	6f 93       	push	r22
 a02:	7f 93       	push	r23
 a04:	8f 93       	push	r24
 a06:	9f 93       	push	r25
 a08:	af 93       	push	r26
 a0a:	bf 93       	push	r27
 a0c:	ef 93       	push	r30
 a0e:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 a10:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <Action_Timer+0x6>
 a14:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <Action_Timer+0x7>
 a18:	30 97       	sbiw	r30, 0x00	; 0
 a1a:	09 f0       	breq	.+2      	; 0xa1e <__vector_6+0x30>
			Action_Timer[3]();
 a1c:	09 95       	icall
			
			
		}
 a1e:	ff 91       	pop	r31
 a20:	ef 91       	pop	r30
 a22:	bf 91       	pop	r27
 a24:	af 91       	pop	r26
 a26:	9f 91       	pop	r25
 a28:	8f 91       	pop	r24
 a2a:	7f 91       	pop	r23
 a2c:	6f 91       	pop	r22
 a2e:	5f 91       	pop	r21
 a30:	4f 91       	pop	r20
 a32:	3f 91       	pop	r19
 a34:	2f 91       	pop	r18
 a36:	0f 90       	pop	r0
 a38:	0f be       	out	0x3f, r0	; 63
 a3a:	0f 90       	pop	r0
 a3c:	1f 90       	pop	r1
 a3e:	18 95       	reti

00000a40 <USART_Init>:
		Str[i] = MUART_voidRecieveByteSynch();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
}
 a40:	82 e0       	ldi	r24, 0x02	; 2
 a42:	8b b9       	out	0x0b, r24	; 11
 a44:	88 e1       	ldi	r24, 0x18	; 24
 a46:	8a b9       	out	0x0a, r24	; 10
 a48:	86 e8       	ldi	r24, 0x86	; 134
 a4a:	80 bd       	out	0x20, r24	; 32
 a4c:	10 bc       	out	0x20, r1	; 32
 a4e:	81 e2       	ldi	r24, 0x21	; 33
 a50:	89 b9       	out	0x09, r24	; 9
 a52:	08 95       	ret

00000a54 <UART_sendByte>:
 a54:	5d 9b       	sbis	0x0b, 5	; 11
 a56:	fe cf       	rjmp	.-4      	; 0xa54 <UART_sendByte>
 a58:	8c b9       	out	0x0c, r24	; 12
 a5a:	08 95       	ret

00000a5c <UART_receiveByteAsynchCallBack>:

void UART_receiveByteAsynchCallBack(void (*ptrfn)(u8)) {
	// Enable UART receiver interrupt
	UCSRB |= (1 << RXCIE);
 a5c:	2a b1       	in	r18, 0x0a	; 10
 a5e:	20 68       	ori	r18, 0x80	; 128
 a60:	2a b9       	out	0x0a, r18	; 10
	//set callback
	Action_Uart[0] = ptrfn;
 a62:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <Action_Uart+0x1>
 a66:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <Action_Uart>
 a6a:	08 95       	ret

00000a6c <__vector_13>:
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 a6c:	1f 92       	push	r1
 a6e:	0f 92       	push	r0
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	0f 92       	push	r0
 a74:	11 24       	eor	r1, r1
 a76:	2f 93       	push	r18
 a78:	3f 93       	push	r19
 a7a:	4f 93       	push	r20
 a7c:	5f 93       	push	r21
 a7e:	6f 93       	push	r22
 a80:	7f 93       	push	r23
 a82:	8f 93       	push	r24
 a84:	9f 93       	push	r25
 a86:	af 93       	push	r26
 a88:	bf 93       	push	r27
 a8a:	ef 93       	push	r30
 a8c:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 a8e:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 a90:	e0 91 cf 00 	lds	r30, 0x00CF	; 0x8000cf <Action_Uart>
 a94:	f0 91 d0 00 	lds	r31, 0x00D0	; 0x8000d0 <Action_Uart+0x1>
 a98:	30 97       	sbiw	r30, 0x00	; 0
 a9a:	09 f0       	breq	.+2      	; 0xa9e <__vector_13+0x32>
		Action_Uart[0](receivedData);
 a9c:	09 95       	icall
	}
 a9e:	ff 91       	pop	r31
 aa0:	ef 91       	pop	r30
 aa2:	bf 91       	pop	r27
 aa4:	af 91       	pop	r26
 aa6:	9f 91       	pop	r25
 aa8:	8f 91       	pop	r24
 aaa:	7f 91       	pop	r23
 aac:	6f 91       	pop	r22
 aae:	5f 91       	pop	r21
 ab0:	4f 91       	pop	r20
 ab2:	3f 91       	pop	r19
 ab4:	2f 91       	pop	r18
 ab6:	0f 90       	pop	r0
 ab8:	0f be       	out	0x3f, r0	; 63
 aba:	0f 90       	pop	r0
 abc:	1f 90       	pop	r1
 abe:	18 95       	reti

00000ac0 <__itoa_ncheck>:
 ac0:	bb 27       	eor	r27, r27
 ac2:	4a 30       	cpi	r20, 0x0A	; 10
 ac4:	31 f4       	brne	.+12     	; 0xad2 <__itoa_ncheck+0x12>
 ac6:	99 23       	and	r25, r25
 ac8:	22 f4       	brpl	.+8      	; 0xad2 <__itoa_ncheck+0x12>
 aca:	bd e2       	ldi	r27, 0x2D	; 45
 acc:	90 95       	com	r25
 ace:	81 95       	neg	r24
 ad0:	9f 4f       	sbci	r25, 0xFF	; 255
 ad2:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__utoa_common>

00000ad6 <__utoa_ncheck>:
 ad6:	bb 27       	eor	r27, r27

00000ad8 <__utoa_common>:
 ad8:	fb 01       	movw	r30, r22
 ada:	55 27       	eor	r21, r21
 adc:	aa 27       	eor	r26, r26
 ade:	88 0f       	add	r24, r24
 ae0:	99 1f       	adc	r25, r25
 ae2:	aa 1f       	adc	r26, r26
 ae4:	a4 17       	cp	r26, r20
 ae6:	10 f0       	brcs	.+4      	; 0xaec <__utoa_common+0x14>
 ae8:	a4 1b       	sub	r26, r20
 aea:	83 95       	inc	r24
 aec:	50 51       	subi	r21, 0x10	; 16
 aee:	b9 f7       	brne	.-18     	; 0xade <__utoa_common+0x6>
 af0:	a0 5d       	subi	r26, 0xD0	; 208
 af2:	aa 33       	cpi	r26, 0x3A	; 58
 af4:	08 f0       	brcs	.+2      	; 0xaf8 <__utoa_common+0x20>
 af6:	a9 5d       	subi	r26, 0xD9	; 217
 af8:	a1 93       	st	Z+, r26
 afa:	00 97       	sbiw	r24, 0x00	; 0
 afc:	79 f7       	brne	.-34     	; 0xadc <__utoa_common+0x4>
 afe:	b1 11       	cpse	r27, r1
 b00:	b1 93       	st	Z+, r27
 b02:	11 92       	st	Z+, r1
 b04:	cb 01       	movw	r24, r22
 b06:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <strrev>

00000b0a <strrev>:
 b0a:	dc 01       	movw	r26, r24
 b0c:	fc 01       	movw	r30, r24
 b0e:	67 2f       	mov	r22, r23
 b10:	71 91       	ld	r23, Z+
 b12:	77 23       	and	r23, r23
 b14:	e1 f7       	brne	.-8      	; 0xb0e <strrev+0x4>
 b16:	32 97       	sbiw	r30, 0x02	; 2
 b18:	04 c0       	rjmp	.+8      	; 0xb22 <strrev+0x18>
 b1a:	7c 91       	ld	r23, X
 b1c:	6d 93       	st	X+, r22
 b1e:	70 83       	st	Z, r23
 b20:	62 91       	ld	r22, -Z
 b22:	ae 17       	cp	r26, r30
 b24:	bf 07       	cpc	r27, r31
 b26:	c8 f3       	brcs	.-14     	; 0xb1a <strrev+0x10>
 b28:	08 95       	ret

00000b2a <_exit>:
 b2a:	f8 94       	cli

00000b2c <__stop_program>:
 b2c:	ff cf       	rjmp	.-2      	; 0xb2c <__stop_program>
