
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000055a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800060  00800060  0000055a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b30  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d14  00000000  00000000  00002318  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1a  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006d0  00000000  00000000  00003d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001007  00000000  00000000  00004418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000100a  00000000  00000000  0000541f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00006429  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_1>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_2>
   c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_6>
  1c:	0c 94 f5 01 	jmp	0x3ea	; 0x3ea <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_9>
  28:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_10>
  2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_11>
  30:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <__vector_12>
  34:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 39       	cpi	r26, 0x94	; 148
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "../HAL/EEPROM/EEPROM_interface.h"
#include <util/delay.h>



int main(void) {
  92:	ff cf       	rjmp	.-2      	; 0x92 <main>

00000094 <__vector_16>:
  94:	24 b1       	in	r18, 0x04	; 4
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	00 24       	eor	r0, r0
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	00 1c       	adc	r0, r0
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	00 1c       	adc	r0, r0
  a6:	23 2f       	mov	r18, r19
  a8:	30 2d       	mov	r19, r0
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  be:	82 2b       	or	r24, r18
  c0:	93 2b       	or	r25, r19
  c2:	09 95       	icall
  c4:	08 95       	ret

000000c6 <__vector_1>:
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
  e8:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <Action>
  ec:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <Action+0x1>
  f0:	30 97       	sbiw	r30, 0x00	; 0
  f2:	09 f0       	breq	.+2      	; 0xf6 <__vector_1+0x30>
  f4:	09 95       	icall
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_2>:
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	4f 93       	push	r20
 128:	5f 93       	push	r21
 12a:	6f 93       	push	r22
 12c:	7f 93       	push	r23
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
 13a:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <Action+0x2>
 13e:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <Action+0x3>
 142:	30 97       	sbiw	r30, 0x00	; 0
 144:	09 f0       	breq	.+2      	; 0x148 <__vector_2+0x30>
 146:	09 95       	icall
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_3>:
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
 18c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <Action+0x4>
 190:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <Action+0x5>
 194:	30 97       	sbiw	r30, 0x00	; 0
 196:	09 f0       	breq	.+2      	; 0x19a <__vector_3+0x30>
 198:	09 95       	icall
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	7f 91       	pop	r23
 1a8:	6f 91       	pop	r22
 1aa:	5f 91       	pop	r21
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
 1c6:	2f 93       	push	r18
 1c8:	3f 93       	push	r19
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
 1da:	ef 93       	push	r30
 1dc:	ff 93       	push	r31
	if(Action_Spi != NULL){
 1de:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <Action_Spi>
 1e2:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <Action_Spi+0x1>
 1e6:	30 97       	sbiw	r30, 0x00	; 0
 1e8:	11 f0       	breq	.+4      	; 0x1ee <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 1ea:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 1ec:	09 95       	icall
	}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_11>:
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
 232:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <Action_Timer>
 236:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <Action_Timer+0x1>
 23a:	89 2b       	or	r24, r25
 23c:	89 f1       	breq	.+98     	; 0x2a0 <__vector_11+0x90>
 23e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <counter.1685>
 242:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <counter.1685+0x1>
 246:	a0 91 6c 00 	lds	r26, 0x006C	; 0x80006c <counter.1685+0x2>
 24a:	b0 91 6d 00 	lds	r27, 0x006D	; 0x80006d <counter.1685+0x3>
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	a1 1d       	adc	r26, r1
 252:	b1 1d       	adc	r27, r1
 254:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <counter.1685>
 258:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <counter.1685+0x1>
 25c:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <counter.1685+0x2>
 260:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <counter.1685+0x3>
 264:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <numOverflows>
 268:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <numOverflows+0x1>
 26c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <numOverflows+0x2>
 270:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <numOverflows+0x3>
 274:	84 17       	cp	r24, r20
 276:	95 07       	cpc	r25, r21
 278:	a6 07       	cpc	r26, r22
 27a:	b7 07       	cpc	r27, r23
 27c:	89 f4       	brne	.+34     	; 0x2a0 <__vector_11+0x90>
 27e:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <remainingCounts>
 282:	81 95       	neg	r24
 284:	82 bf       	out	0x32, r24	; 50
 286:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <counter.1685>
 28a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <counter.1685+0x1>
 28e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <counter.1685+0x2>
 292:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <counter.1685+0x3>
 296:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <Action_Timer>
 29a:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <Action_Timer+0x1>
 29e:	09 95       	icall
 2a0:	ff 91       	pop	r31
 2a2:	ef 91       	pop	r30
 2a4:	bf 91       	pop	r27
 2a6:	af 91       	pop	r26
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	7f 91       	pop	r23
 2ae:	6f 91       	pop	r22
 2b0:	5f 91       	pop	r21
 2b2:	4f 91       	pop	r20
 2b4:	3f 91       	pop	r19
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <__vector_10>:
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
 2e4:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <Action_Timer+0x2>
 2e8:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <Action_Timer+0x3>
 2ec:	30 97       	sbiw	r30, 0x00	; 0
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <__vector_10+0x30>
 2f0:	09 95       	icall
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	7f 91       	pop	r23
 300:	6f 91       	pop	r22
 302:	5f 91       	pop	r21
 304:	4f 91       	pop	r20
 306:	3f 91       	pop	r19
 308:	2f 91       	pop	r18
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	4f 93       	push	r20
 324:	5f 93       	push	r21
 326:	6f 93       	push	r22
 328:	7f 93       	push	r23
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	af 93       	push	r26
 330:	bf 93       	push	r27
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	ef 93       	push	r30
 338:	ff 93       	push	r31
	Action_Timer[0]();
 33a:	ce e7       	ldi	r28, 0x7E	; 126
 33c:	d0 e0       	ldi	r29, 0x00	; 0
 33e:	e8 81       	ld	r30, Y
 340:	f9 81       	ldd	r31, Y+1	; 0x01
 342:	09 95       	icall
	numOverflows++;
 344:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <numOverflows>
 348:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <numOverflows+0x1>
 34c:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <numOverflows+0x2>
 350:	b0 91 89 00 	lds	r27, 0x0089	; 0x800089 <numOverflows+0x3>
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	a1 1d       	adc	r26, r1
 358:	b1 1d       	adc	r27, r1
 35a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <numOverflows>
 35e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <numOverflows+0x1>
 362:	a0 93 88 00 	sts	0x0088, r26	; 0x800088 <numOverflows+0x2>
 366:	b0 93 89 00 	sts	0x0089, r27	; 0x800089 <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 36a:	e8 81       	ld	r30, Y
 36c:	f9 81       	ldd	r31, Y+1	; 0x01
 36e:	30 97       	sbiw	r30, 0x00	; 0
 370:	49 f1       	breq	.+82     	; 0x3c4 <__vector_9+0xb0>
		counter++;
 372:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <counter.1744>
 376:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <counter.1744+0x1>
 37a:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <counter.1744+0x2>
 37e:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <counter.1744+0x3>
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	a1 1d       	adc	r26, r1
 386:	b1 1d       	adc	r27, r1
 388:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <counter.1744>
 38c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <counter.1744+0x1>
 390:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <counter.1744+0x2>
 394:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <counter.1744+0x3>
		if(counter == req_numOverflows){
 398:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <req_numOverflows>
 39c:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <req_numOverflows+0x1>
 3a0:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <req_numOverflows+0x2>
 3a4:	70 91 8d 00 	lds	r23, 0x008D	; 0x80008d <req_numOverflows+0x3>
 3a8:	84 17       	cp	r24, r20
 3aa:	95 07       	cpc	r25, r21
 3ac:	a6 07       	cpc	r26, r22
 3ae:	b7 07       	cpc	r27, r23
 3b0:	49 f4       	brne	.+18     	; 0x3c4 <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 3b2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <counter.1744>
 3b6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <counter.1744+0x1>
 3ba:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <counter.1744+0x2>
 3be:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <counter.1744+0x3>
			Action_Timer[0]();
 3c2:	09 95       	icall
		}
		
	}
}
 3c4:	ff 91       	pop	r31
 3c6:	ef 91       	pop	r30
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__vector_7>:

ISR(TIMER1_COMPA_vect){
 3ea:	1f 92       	push	r1
 3ec:	0f 92       	push	r0
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	0f 92       	push	r0
 3f2:	11 24       	eor	r1, r1
 3f4:	2f 93       	push	r18
 3f6:	3f 93       	push	r19
 3f8:	4f 93       	push	r20
 3fa:	5f 93       	push	r21
 3fc:	6f 93       	push	r22
 3fe:	7f 93       	push	r23
 400:	8f 93       	push	r24
 402:	9f 93       	push	r25
 404:	af 93       	push	r26
 406:	bf 93       	push	r27
 408:	ef 93       	push	r30
 40a:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 40c:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <Action_Timer+0x2>
 410:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <Action_Timer+0x3>
 414:	30 97       	sbiw	r30, 0x00	; 0
 416:	09 f0       	breq	.+2      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		Action_Timer[1]();
 418:	09 95       	icall
	}
}
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <__vector_6>:


ISR(TIMER1_CAPT_vect){
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	2f 93       	push	r18
 448:	3f 93       	push	r19
 44a:	4f 93       	push	r20
 44c:	5f 93       	push	r21
 44e:	6f 93       	push	r22
 450:	7f 93       	push	r23
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	af 93       	push	r26
 458:	bf 93       	push	r27
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 45e:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <Action_Timer+0x6>
 462:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <Action_Timer+0x7>
 466:	30 97       	sbiw	r30, 0x00	; 0
 468:	09 f0       	breq	.+2      	; 0x46c <__vector_6+0x30>
			Action_Timer[3]();
 46a:	09 95       	icall
			
			
		}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <__vector_13>:
	//set callback
	Action_Uart[0] = ptrfn;
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	2f 93       	push	r18
 49a:	3f 93       	push	r19
 49c:	4f 93       	push	r20
 49e:	5f 93       	push	r21
 4a0:	6f 93       	push	r22
 4a2:	7f 93       	push	r23
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
 4a8:	af 93       	push	r26
 4aa:	bf 93       	push	r27
 4ac:	ef 93       	push	r30
 4ae:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 4b0:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 4b2:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <Action_Uart>
 4b6:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <Action_Uart+0x1>
 4ba:	30 97       	sbiw	r30, 0x00	; 0
 4bc:	09 f0       	breq	.+2      	; 0x4c0 <__vector_13+0x32>
		Action_Uart[0](receivedData);
 4be:	09 95       	icall
	}
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <_exit>:
 4e2:	f8 94       	cli

000004e4 <__stop_program>:
 4e4:	ff cf       	rjmp	.-2      	; 0x4e4 <__stop_program>
