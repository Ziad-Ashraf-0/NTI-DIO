
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000af6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00000af6  00000b8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  008000aa  008000aa  00000bd4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c04  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025fd  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff6  00000000  00000000  00003525  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012de  00000000  00000000  0000451b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000864  00000000  00000000  000057fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012ec  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015b3  00000000  00000000  0000734c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  000088ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_1>
   8:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_2>
   c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_6>
  1c:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_9>
  28:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__vector_10>
  2c:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_11>
  30:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_12>
  34:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3e       	cpi	r26, 0xE7	; 231
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 79 05 	jmp	0xaf2	; 0xaf2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>



int main() {
	GIE_enable();
  92:	0e 94 af 01 	call	0x35e	; 0x35e <GIE_enable>
	startOS();
  96:	0e 94 45 04 	call	0x88a	; 0x88a <startOS>
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0x8>

0000009c <__vector_16>:
  9c:	24 b1       	in	r18, 0x04	; 4
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	00 24       	eor	r0, r0
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	00 1c       	adc	r0, r0
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	00 1c       	adc	r0, r0
  ae:	23 2f       	mov	r18, r19
  b0:	30 2d       	mov	r19, r0
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <__data_end>
  c2:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <__data_end+0x1>
  c6:	82 2b       	or	r24, r18
  c8:	93 2b       	or	r25, r19
  ca:	09 95       	icall
  cc:	08 95       	ret

000000ce <DIO_U8SetPinDirection>:
  ce:	dc 01       	movw	r26, r24
  d0:	ec 91       	ld	r30, X
  d2:	e4 30       	cpi	r30, 0x04	; 4
  d4:	a0 f5       	brcc	.+104    	; 0x13e <DIO_U8SetPinDirection+0x70>
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	2c 91       	ld	r18, X
  da:	11 97       	sbiw	r26, 0x01	; 1
  dc:	28 30       	cpi	r18, 0x08	; 8
  de:	88 f5       	brcc	.+98     	; 0x142 <DIO_U8SetPinDirection+0x74>
  e0:	12 96       	adiw	r26, 0x02	; 2
  e2:	8c 91       	ld	r24, X
  e4:	81 11       	cpse	r24, r1
  e6:	15 c0       	rjmp	.+42     	; 0x112 <DIO_U8SetPinDirection+0x44>
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	ef 55       	subi	r30, 0x5F	; 95
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	01 90       	ld	r0, Z+
  f4:	f0 81       	ld	r31, Z
  f6:	e0 2d       	mov	r30, r0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_U8SetPinDirection+0x34>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	2a 95       	dec	r18
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_U8SetPinDirection+0x30>
 106:	80 95       	com	r24
 108:	90 81       	ld	r25, Z
 10a:	89 23       	and	r24, r25
 10c:	80 83       	st	Z, r24
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	08 95       	ret
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	c1 f4       	brne	.+48     	; 0x146 <DIO_U8SetPinDirection+0x78>
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	ef 55       	subi	r30, 0x5F	; 95
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	01 90       	ld	r0, Z+
 122:	f0 81       	ld	r31, Z
 124:	e0 2d       	mov	r30, r0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_U8SetPinDirection+0x62>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	2a 95       	dec	r18
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_U8SetPinDirection+0x5e>
 134:	90 81       	ld	r25, Z
 136:	89 2b       	or	r24, r25
 138:	80 83       	st	Z, r24
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	08 95       	ret
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	08 95       	ret
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	08 95       	ret

0000014a <DIO_U8SetPinValue>:
 14a:	00 97       	sbiw	r24, 0x00	; 0
 14c:	c1 f1       	breq	.+112    	; 0x1be <DIO_U8SetPinValue+0x74>
 14e:	dc 01       	movw	r26, r24
 150:	ec 91       	ld	r30, X
 152:	e4 30       	cpi	r30, 0x04	; 4
 154:	b0 f5       	brcc	.+108    	; 0x1c2 <DIO_U8SetPinValue+0x78>
 156:	11 96       	adiw	r26, 0x01	; 1
 158:	2c 91       	ld	r18, X
 15a:	11 97       	sbiw	r26, 0x01	; 1
 15c:	28 30       	cpi	r18, 0x08	; 8
 15e:	98 f5       	brcc	.+102    	; 0x1c6 <DIO_U8SetPinValue+0x7c>
 160:	13 96       	adiw	r26, 0x03	; 3
 162:	8c 91       	ld	r24, X
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	a1 f4       	brne	.+40     	; 0x190 <DIO_U8SetPinValue+0x46>
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	e7 56       	subi	r30, 0x67	; 103
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	01 90       	ld	r0, Z+
 174:	f0 81       	ld	r31, Z
 176:	e0 2d       	mov	r30, r0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_U8SetPinValue+0x38>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	2a 95       	dec	r18
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_U8SetPinValue+0x34>
 186:	90 81       	ld	r25, Z
 188:	89 2b       	or	r24, r25
 18a:	80 83       	st	Z, r24
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	08 95       	ret
 190:	81 11       	cpse	r24, r1
 192:	1b c0       	rjmp	.+54     	; 0x1ca <DIO_U8SetPinValue+0x80>
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	ee 0f       	add	r30, r30
 198:	ff 1f       	adc	r31, r31
 19a:	e7 56       	subi	r30, 0x67	; 103
 19c:	ff 4f       	sbci	r31, 0xFF	; 255
 19e:	01 90       	ld	r0, Z+
 1a0:	f0 81       	ld	r31, Z
 1a2:	e0 2d       	mov	r30, r0
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_U8SetPinValue+0x64>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	2a 95       	dec	r18
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_U8SetPinValue+0x60>
 1b2:	80 95       	com	r24
 1b4:	90 81       	ld	r25, Z
 1b6:	89 23       	and	r24, r25
 1b8:	80 83       	st	Z, r24
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	08 95       	ret
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	08 95       	ret
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret

000001ce <DIO_U8TogglePin>:
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	e1 f0       	breq	.+56     	; 0x20a <DIO_U8TogglePin+0x3c>
 1d2:	dc 01       	movw	r26, r24
 1d4:	ec 91       	ld	r30, X
 1d6:	e4 30       	cpi	r30, 0x04	; 4
 1d8:	d0 f4       	brcc	.+52     	; 0x20e <DIO_U8TogglePin+0x40>
 1da:	11 96       	adiw	r26, 0x01	; 1
 1dc:	2c 91       	ld	r18, X
 1de:	28 30       	cpi	r18, 0x08	; 8
 1e0:	c0 f4       	brcc	.+48     	; 0x212 <DIO_U8TogglePin+0x44>
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	e7 56       	subi	r30, 0x67	; 103
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	01 90       	ld	r0, Z+
 1ee:	f0 81       	ld	r31, Z
 1f0:	e0 2d       	mov	r30, r0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_U8TogglePin+0x2e>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	2a 95       	dec	r18
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_U8TogglePin+0x2a>
 200:	90 81       	ld	r25, Z
 202:	89 27       	eor	r24, r25
 204:	80 83       	st	Z, r24
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	08 95       	ret
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	08 95       	ret
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	08 95       	ret

00000216 <DIO_U8GetPinValue>:
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	f9 f0       	breq	.+62     	; 0x258 <DIO_U8GetPinValue+0x42>
 21a:	61 15       	cp	r22, r1
 21c:	71 05       	cpc	r23, r1
 21e:	f1 f0       	breq	.+60     	; 0x25c <DIO_U8GetPinValue+0x46>
 220:	dc 01       	movw	r26, r24
 222:	ec 91       	ld	r30, X
 224:	e4 30       	cpi	r30, 0x04	; 4
 226:	e0 f4       	brcc	.+56     	; 0x260 <DIO_U8GetPinValue+0x4a>
 228:	11 96       	adiw	r26, 0x01	; 1
 22a:	2c 91       	ld	r18, X
 22c:	28 30       	cpi	r18, 0x08	; 8
 22e:	d0 f4       	brcc	.+52     	; 0x264 <DIO_U8GetPinValue+0x4e>
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	ef 56       	subi	r30, 0x6F	; 111
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	01 90       	ld	r0, Z+
 23c:	f0 81       	ld	r31, Z
 23e:	e0 2d       	mov	r30, r0
 240:	80 81       	ld	r24, Z
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_U8GetPinValue+0x34>
 246:	95 95       	asr	r25
 248:	87 95       	ror	r24
 24a:	2a 95       	dec	r18
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_U8GetPinValue+0x30>
 24e:	81 70       	andi	r24, 0x01	; 1
 250:	fb 01       	movw	r30, r22
 252:	80 83       	st	Z, r24
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	08 95       	ret
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	08 95       	ret
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	08 95       	ret
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	08 95       	ret
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret

00000268 <__vector_1>:
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	5f 93       	push	r21
 27a:	6f 93       	push	r22
 27c:	7f 93       	push	r23
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	af 93       	push	r26
 284:	bf 93       	push	r27
 286:	ef 93       	push	r30
 288:	ff 93       	push	r31
 28a:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <Action>
 28e:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <Action+0x1>
 292:	30 97       	sbiw	r30, 0x00	; 0
 294:	09 f0       	breq	.+2      	; 0x298 <__vector_1+0x30>
 296:	09 95       	icall
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	7f 91       	pop	r23
 2a6:	6f 91       	pop	r22
 2a8:	5f 91       	pop	r21
 2aa:	4f 91       	pop	r20
 2ac:	3f 91       	pop	r19
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <__vector_2>:
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	5f 93       	push	r21
 2cc:	6f 93       	push	r22
 2ce:	7f 93       	push	r23
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	af 93       	push	r26
 2d6:	bf 93       	push	r27
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
 2dc:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <Action+0x2>
 2e0:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <Action+0x3>
 2e4:	30 97       	sbiw	r30, 0x00	; 0
 2e6:	09 f0       	breq	.+2      	; 0x2ea <__vector_2+0x30>
 2e8:	09 95       	icall
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <__vector_3>:
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	2f 93       	push	r18
 318:	3f 93       	push	r19
 31a:	4f 93       	push	r20
 31c:	5f 93       	push	r21
 31e:	6f 93       	push	r22
 320:	7f 93       	push	r23
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	af 93       	push	r26
 328:	bf 93       	push	r27
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
 32e:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <Action+0x4>
 332:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <Action+0x5>
 336:	30 97       	sbiw	r30, 0x00	; 0
 338:	09 f0       	breq	.+2      	; 0x33c <__vector_3+0x30>
 33a:	09 95       	icall
 33c:	ff 91       	pop	r31
 33e:	ef 91       	pop	r30
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

0000035e <GIE_enable>:
 35e:	78 94       	sei
 360:	08 95       	ret

00000362 <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
	if(Action_Spi != NULL){
 384:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <Action_Spi>
 388:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <Action_Spi+0x1>
 38c:	30 97       	sbiw	r30, 0x00	; 0
 38e:	11 f0       	breq	.+4      	; 0x394 <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 390:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 392:	09 95       	icall
	}
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <M_TIMER0_void_Init>:
void M_TIMER0_void_setPhaseCorrectPWM(Valid_Freq freq, u8 duty){
	u8 ocr0_value = ((duty/2) * 255) / 100 ;
	OCR0_REG = ocr0_value;
	TCCR0_REG &= TIMER0_PRESCALER_MASK;
	//are they constants??
	TCCR0_REG |= freq;
 3b6:	fc 01       	movw	r30, r24
 3b8:	81 81       	ldd	r24, Z+1	; 0x01
 3ba:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <prescaler>
 3be:	90 81       	ld	r25, Z
 3c0:	91 11       	cpse	r25, r1
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <M_TIMER0_void_Init+0x14>
 3c4:	80 e8       	ldi	r24, 0x80	; 128
 3c6:	83 bf       	out	0x33, r24	; 51
 3c8:	08 95       	ret
 3ca:	92 30       	cpi	r25, 0x02	; 2
 3cc:	51 f4       	brne	.+20     	; 0x3e2 <M_TIMER0_void_Init+0x2c>
 3ce:	83 81       	ldd	r24, Z+3	; 0x03
 3d0:	8c bf       	out	0x3c, r24	; 60
 3d2:	82 81       	ldd	r24, Z+2	; 0x02
 3d4:	20 e1       	ldi	r18, 0x10	; 16
 3d6:	82 9f       	mul	r24, r18
 3d8:	c0 01       	movw	r24, r0
 3da:	11 24       	eor	r1, r1
 3dc:	88 68       	ori	r24, 0x88	; 136
 3de:	83 bf       	out	0x33, r24	; 51
 3e0:	08 95       	ret
 3e2:	93 30       	cpi	r25, 0x03	; 3
 3e4:	51 f4       	brne	.+20     	; 0x3fa <M_TIMER0_void_Init+0x44>
 3e6:	82 81       	ldd	r24, Z+2	; 0x02
 3e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <fast_oc0_mode>
 3ec:	20 e1       	ldi	r18, 0x10	; 16
 3ee:	82 9f       	mul	r24, r18
 3f0:	c0 01       	movw	r24, r0
 3f2:	11 24       	eor	r1, r1
 3f4:	88 64       	ori	r24, 0x48	; 72
 3f6:	83 bf       	out	0x33, r24	; 51
 3f8:	08 95       	ret
 3fa:	91 30       	cpi	r25, 0x01	; 1
 3fc:	39 f4       	brne	.+14     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3fe:	82 81       	ldd	r24, Z+2	; 0x02
 400:	20 e1       	ldi	r18, 0x10	; 16
 402:	82 9f       	mul	r24, r18
 404:	c0 01       	movw	r24, r0
 406:	11 24       	eor	r1, r1
 408:	80 64       	ori	r24, 0x40	; 64
 40a:	83 bf       	out	0x33, r24	; 51
 40c:	08 95       	ret

0000040e <M_TIMER0_void_start>:
 40e:	83 b7       	in	r24, 0x33	; 51
 410:	88 7f       	andi	r24, 0xF8	; 248
 412:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <prescaler>
 416:	89 2b       	or	r24, r25
 418:	83 bf       	out	0x33, r24	; 51
 41a:	08 95       	ret

0000041c <M_TIMER0_void_setDelayTimeMilliSec>:
 41c:	cf 92       	push	r12
 41e:	df 92       	push	r13
 420:	ef 92       	push	r14
 422:	ff 92       	push	r15
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	cd b7       	in	r28, 0x3d	; 61
 42a:	de b7       	in	r29, 0x3e	; 62
 42c:	2c 97       	sbiw	r28, 0x0c	; 12
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	9b 01       	movw	r18, r22
 43a:	ac 01       	movw	r20, r24
 43c:	8c e0       	ldi	r24, 0x0C	; 12
 43e:	e5 e7       	ldi	r30, 0x75	; 117
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	de 01       	movw	r26, r28
 444:	11 96       	adiw	r26, 0x01	; 1
 446:	01 90       	ld	r0, Z+
 448:	0d 92       	st	X+, r0
 44a:	8a 95       	dec	r24
 44c:	e1 f7       	brne	.-8      	; 0x446 <M_TIMER0_void_setDelayTimeMilliSec+0x2a>
 44e:	e0 91 bd 00 	lds	r30, 0x00BD	; 0x8000bd <prescaler>
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	ee 0f       	add	r30, r30
 456:	ff 1f       	adc	r31, r31
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	8c 0f       	add	r24, r28
 45e:	9d 1f       	adc	r25, r29
 460:	e8 0f       	add	r30, r24
 462:	f9 1f       	adc	r31, r25
 464:	c0 80       	ld	r12, Z
 466:	d1 80       	ldd	r13, Z+1	; 0x01
 468:	d6 94       	lsr	r13
 46a:	c7 94       	ror	r12
 46c:	d6 94       	lsr	r13
 46e:	c7 94       	ror	r12
 470:	d6 94       	lsr	r13
 472:	c7 94       	ror	r12
 474:	e1 2c       	mov	r14, r1
 476:	f1 2c       	mov	r15, r1
 478:	a8 ee       	ldi	r26, 0xE8	; 232
 47a:	b3 e0       	ldi	r27, 0x03	; 3
 47c:	0e 94 5f 05 	call	0xabe	; 0xabe <__muluhisi3>
 480:	a7 01       	movw	r20, r14
 482:	96 01       	movw	r18, r12
 484:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__udivmodsi4>
 488:	bb 27       	eor	r27, r27
 48a:	a5 2f       	mov	r26, r21
 48c:	94 2f       	mov	r25, r20
 48e:	83 2f       	mov	r24, r19
 490:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <numOverflows>
 494:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <numOverflows+0x1>
 498:	a0 93 c4 00 	sts	0x00C4, r26	; 0x8000c4 <numOverflows+0x2>
 49c:	b0 93 c5 00 	sts	0x00C5, r27	; 0x8000c5 <numOverflows+0x3>
 4a0:	da 01       	movw	r26, r20
 4a2:	c9 01       	movw	r24, r18
 4a4:	99 27       	eor	r25, r25
 4a6:	aa 27       	eor	r26, r26
 4a8:	bb 27       	eor	r27, r27
 4aa:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <remainingCounts>
 4ae:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <remainingCounts+0x1>
 4b2:	a0 93 c0 00 	sts	0x00C0, r26	; 0x8000c0 <remainingCounts+0x2>
 4b6:	b0 93 c1 00 	sts	0x00C1, r27	; 0x8000c1 <remainingCounts+0x3>
 4ba:	2c 96       	adiw	r28, 0x0c	; 12
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	f8 94       	cli
 4c0:	de bf       	out	0x3e, r29	; 62
 4c2:	0f be       	out	0x3f, r0	; 63
 4c4:	cd bf       	out	0x3d, r28	; 61
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	ff 90       	pop	r15
 4cc:	ef 90       	pop	r14
 4ce:	df 90       	pop	r13
 4d0:	cf 90       	pop	r12
 4d2:	08 95       	ret

000004d4 <M_TIMER0_void_IntEnable>:
 4d4:	81 11       	cpse	r24, r1
 4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <M_TIMER0_void_IntEnable+0xc>
 4d8:	89 b7       	in	r24, 0x39	; 57
 4da:	81 60       	ori	r24, 0x01	; 1
 4dc:	89 bf       	out	0x39, r24	; 57
 4de:	08 95       	ret
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	19 f4       	brne	.+6      	; 0x4ea <M_TIMER0_void_IntEnable+0x16>
 4e4:	89 b7       	in	r24, 0x39	; 57
 4e6:	82 60       	ori	r24, 0x02	; 2
 4e8:	89 bf       	out	0x39, r24	; 57
 4ea:	08 95       	ret

000004ec <M_TIMER0_void_setCallBack>:
}


void M_TIMER0_void_setCallBack(void (*ptrfn)(void),u8 copy_u8IntID){
	if(copy_u8IntID == OVERFLOW){
 4ec:	61 11       	cpse	r22, r1
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <M_TIMER0_void_setCallBack+0xe>
		Action_Timer[0] = ptrfn;
 4f0:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <Action_Timer+0x1>
 4f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <Action_Timer>
 4f8:	08 95       	ret
		}else if(copy_u8IntID == COMPARE){
 4fa:	61 30       	cpi	r22, 0x01	; 1
 4fc:	21 f4       	brne	.+8      	; 0x506 <M_TIMER0_void_setCallBack+0x1a>
		Action_Timer[1] = ptrfn;
 4fe:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <Action_Timer+0x3>
 502:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <Action_Timer+0x2>
 506:	08 95       	ret

00000508 <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 508:	1f 92       	push	r1
 50a:	0f 92       	push	r0
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	0f 92       	push	r0
 510:	11 24       	eor	r1, r1
 512:	2f 93       	push	r18
 514:	3f 93       	push	r19
 516:	4f 93       	push	r20
 518:	5f 93       	push	r21
 51a:	6f 93       	push	r22
 51c:	7f 93       	push	r23
 51e:	8f 93       	push	r24
 520:	9f 93       	push	r25
 522:	af 93       	push	r26
 524:	bf 93       	push	r27
 526:	ef 93       	push	r30
 528:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 52a:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <Action_Timer>
 52e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <Action_Timer+0x1>
 532:	89 2b       	or	r24, r25
 534:	89 f1       	breq	.+98     	; 0x598 <__vector_11+0x90>
		counter++;
 536:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <counter.1685>
 53a:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <counter.1685+0x1>
 53e:	a0 91 b6 00 	lds	r26, 0x00B6	; 0x8000b6 <counter.1685+0x2>
 542:	b0 91 b7 00 	lds	r27, 0x00B7	; 0x8000b7 <counter.1685+0x3>
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	a1 1d       	adc	r26, r1
 54a:	b1 1d       	adc	r27, r1
 54c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <counter.1685>
 550:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <counter.1685+0x1>
 554:	a0 93 b6 00 	sts	0x00B6, r26	; 0x8000b6 <counter.1685+0x2>
 558:	b0 93 b7 00 	sts	0x00B7, r27	; 0x8000b7 <counter.1685+0x3>
		if(counter == numOverflows){
 55c:	40 91 c2 00 	lds	r20, 0x00C2	; 0x8000c2 <numOverflows>
 560:	50 91 c3 00 	lds	r21, 0x00C3	; 0x8000c3 <numOverflows+0x1>
 564:	60 91 c4 00 	lds	r22, 0x00C4	; 0x8000c4 <numOverflows+0x2>
 568:	70 91 c5 00 	lds	r23, 0x00C5	; 0x8000c5 <numOverflows+0x3>
 56c:	84 17       	cp	r24, r20
 56e:	95 07       	cpc	r25, r21
 570:	a6 07       	cpc	r26, r22
 572:	b7 07       	cpc	r27, r23
 574:	89 f4       	brne	.+34     	; 0x598 <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 576:	80 91 be 00 	lds	r24, 0x00BE	; 0x8000be <remainingCounts>
 57a:	81 95       	neg	r24
 57c:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 57e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <counter.1685>
 582:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <counter.1685+0x1>
 586:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <counter.1685+0x2>
 58a:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <counter.1685+0x3>
			Action_Timer[0]();
 58e:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <Action_Timer>
 592:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <Action_Timer+0x1>
 596:	09 95       	icall
		}
		
	}
}
 598:	ff 91       	pop	r31
 59a:	ef 91       	pop	r30
 59c:	bf 91       	pop	r27
 59e:	af 91       	pop	r26
 5a0:	9f 91       	pop	r25
 5a2:	8f 91       	pop	r24
 5a4:	7f 91       	pop	r23
 5a6:	6f 91       	pop	r22
 5a8:	5f 91       	pop	r21
 5aa:	4f 91       	pop	r20
 5ac:	3f 91       	pop	r19
 5ae:	2f 91       	pop	r18
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <__vector_10>:

ISR(TIMER0_COMP_vect){
 5ba:	1f 92       	push	r1
 5bc:	0f 92       	push	r0
 5be:	0f b6       	in	r0, 0x3f	; 63
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	2f 93       	push	r18
 5c6:	3f 93       	push	r19
 5c8:	4f 93       	push	r20
 5ca:	5f 93       	push	r21
 5cc:	6f 93       	push	r22
 5ce:	7f 93       	push	r23
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	af 93       	push	r26
 5d6:	bf 93       	push	r27
 5d8:	ef 93       	push	r30
 5da:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 5dc:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <Action_Timer+0x2>
 5e0:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <Action_Timer+0x3>
 5e4:	30 97       	sbiw	r30, 0x00	; 0
 5e6:	09 f0       	breq	.+2      	; 0x5ea <__vector_10+0x30>
		Action_Timer[1]();
 5e8:	09 95       	icall
		
	}
}
 5ea:	ff 91       	pop	r31
 5ec:	ef 91       	pop	r30
 5ee:	bf 91       	pop	r27
 5f0:	af 91       	pop	r26
 5f2:	9f 91       	pop	r25
 5f4:	8f 91       	pop	r24
 5f6:	7f 91       	pop	r23
 5f8:	6f 91       	pop	r22
 5fa:	5f 91       	pop	r21
 5fc:	4f 91       	pop	r20
 5fe:	3f 91       	pop	r19
 600:	2f 91       	pop	r18
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 60c:	1f 92       	push	r1
 60e:	0f 92       	push	r0
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	0f 92       	push	r0
 614:	11 24       	eor	r1, r1
 616:	2f 93       	push	r18
 618:	3f 93       	push	r19
 61a:	4f 93       	push	r20
 61c:	5f 93       	push	r21
 61e:	6f 93       	push	r22
 620:	7f 93       	push	r23
 622:	8f 93       	push	r24
 624:	9f 93       	push	r25
 626:	af 93       	push	r26
 628:	bf 93       	push	r27
 62a:	cf 93       	push	r28
 62c:	df 93       	push	r29
 62e:	ef 93       	push	r30
 630:	ff 93       	push	r31
	Action_Timer[0]();
 632:	ca ec       	ldi	r28, 0xCA	; 202
 634:	d0 e0       	ldi	r29, 0x00	; 0
 636:	e8 81       	ld	r30, Y
 638:	f9 81       	ldd	r31, Y+1	; 0x01
 63a:	09 95       	icall
	numOverflows++;
 63c:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <numOverflows>
 640:	90 91 d3 00 	lds	r25, 0x00D3	; 0x8000d3 <numOverflows+0x1>
 644:	a0 91 d4 00 	lds	r26, 0x00D4	; 0x8000d4 <numOverflows+0x2>
 648:	b0 91 d5 00 	lds	r27, 0x00D5	; 0x8000d5 <numOverflows+0x3>
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	a1 1d       	adc	r26, r1
 650:	b1 1d       	adc	r27, r1
 652:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <numOverflows>
 656:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <numOverflows+0x1>
 65a:	a0 93 d4 00 	sts	0x00D4, r26	; 0x8000d4 <numOverflows+0x2>
 65e:	b0 93 d5 00 	sts	0x00D5, r27	; 0x8000d5 <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 662:	e8 81       	ld	r30, Y
 664:	f9 81       	ldd	r31, Y+1	; 0x01
 666:	30 97       	sbiw	r30, 0x00	; 0
 668:	49 f1       	breq	.+82     	; 0x6bc <__vector_9+0xb0>
		counter++;
 66a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <counter.1744>
 66e:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <counter.1744+0x1>
 672:	a0 91 c8 00 	lds	r26, 0x00C8	; 0x8000c8 <counter.1744+0x2>
 676:	b0 91 c9 00 	lds	r27, 0x00C9	; 0x8000c9 <counter.1744+0x3>
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	a1 1d       	adc	r26, r1
 67e:	b1 1d       	adc	r27, r1
 680:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <counter.1744>
 684:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <counter.1744+0x1>
 688:	a0 93 c8 00 	sts	0x00C8, r26	; 0x8000c8 <counter.1744+0x2>
 68c:	b0 93 c9 00 	sts	0x00C9, r27	; 0x8000c9 <counter.1744+0x3>
		if(counter == req_numOverflows){
 690:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <req_numOverflows>
 694:	50 91 d7 00 	lds	r21, 0x00D7	; 0x8000d7 <req_numOverflows+0x1>
 698:	60 91 d8 00 	lds	r22, 0x00D8	; 0x8000d8 <req_numOverflows+0x2>
 69c:	70 91 d9 00 	lds	r23, 0x00D9	; 0x8000d9 <req_numOverflows+0x3>
 6a0:	84 17       	cp	r24, r20
 6a2:	95 07       	cpc	r25, r21
 6a4:	a6 07       	cpc	r26, r22
 6a6:	b7 07       	cpc	r27, r23
 6a8:	49 f4       	brne	.+18     	; 0x6bc <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 6aa:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <counter.1744>
 6ae:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <counter.1744+0x1>
 6b2:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <counter.1744+0x2>
 6b6:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <counter.1744+0x3>
			Action_Timer[0]();
 6ba:	09 95       	icall
		}
		
	}
}
 6bc:	ff 91       	pop	r31
 6be:	ef 91       	pop	r30
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	bf 91       	pop	r27
 6c6:	af 91       	pop	r26
 6c8:	9f 91       	pop	r25
 6ca:	8f 91       	pop	r24
 6cc:	7f 91       	pop	r23
 6ce:	6f 91       	pop	r22
 6d0:	5f 91       	pop	r21
 6d2:	4f 91       	pop	r20
 6d4:	3f 91       	pop	r19
 6d6:	2f 91       	pop	r18
 6d8:	0f 90       	pop	r0
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	0f 90       	pop	r0
 6de:	1f 90       	pop	r1
 6e0:	18 95       	reti

000006e2 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 6e2:	1f 92       	push	r1
 6e4:	0f 92       	push	r0
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	0f 92       	push	r0
 6ea:	11 24       	eor	r1, r1
 6ec:	2f 93       	push	r18
 6ee:	3f 93       	push	r19
 6f0:	4f 93       	push	r20
 6f2:	5f 93       	push	r21
 6f4:	6f 93       	push	r22
 6f6:	7f 93       	push	r23
 6f8:	8f 93       	push	r24
 6fa:	9f 93       	push	r25
 6fc:	af 93       	push	r26
 6fe:	bf 93       	push	r27
 700:	ef 93       	push	r30
 702:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 704:	e0 91 cc 00 	lds	r30, 0x00CC	; 0x8000cc <Action_Timer+0x2>
 708:	f0 91 cd 00 	lds	r31, 0x00CD	; 0x8000cd <Action_Timer+0x3>
 70c:	30 97       	sbiw	r30, 0x00	; 0
 70e:	09 f0       	breq	.+2      	; 0x712 <__vector_7+0x30>
		Action_Timer[1]();
 710:	09 95       	icall
	}
}
 712:	ff 91       	pop	r31
 714:	ef 91       	pop	r30
 716:	bf 91       	pop	r27
 718:	af 91       	pop	r26
 71a:	9f 91       	pop	r25
 71c:	8f 91       	pop	r24
 71e:	7f 91       	pop	r23
 720:	6f 91       	pop	r22
 722:	5f 91       	pop	r21
 724:	4f 91       	pop	r20
 726:	3f 91       	pop	r19
 728:	2f 91       	pop	r18
 72a:	0f 90       	pop	r0
 72c:	0f be       	out	0x3f, r0	; 63
 72e:	0f 90       	pop	r0
 730:	1f 90       	pop	r1
 732:	18 95       	reti

00000734 <__vector_6>:


ISR(TIMER1_CAPT_vect){
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	0f 92       	push	r0
 73c:	11 24       	eor	r1, r1
 73e:	2f 93       	push	r18
 740:	3f 93       	push	r19
 742:	4f 93       	push	r20
 744:	5f 93       	push	r21
 746:	6f 93       	push	r22
 748:	7f 93       	push	r23
 74a:	8f 93       	push	r24
 74c:	9f 93       	push	r25
 74e:	af 93       	push	r26
 750:	bf 93       	push	r27
 752:	ef 93       	push	r30
 754:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 756:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <Action_Timer+0x6>
 75a:	f0 91 d1 00 	lds	r31, 0x00D1	; 0x8000d1 <Action_Timer+0x7>
 75e:	30 97       	sbiw	r30, 0x00	; 0
 760:	09 f0       	breq	.+2      	; 0x764 <__vector_6+0x30>
			Action_Timer[3]();
 762:	09 95       	icall
			
			
		}
 764:	ff 91       	pop	r31
 766:	ef 91       	pop	r30
 768:	bf 91       	pop	r27
 76a:	af 91       	pop	r26
 76c:	9f 91       	pop	r25
 76e:	8f 91       	pop	r24
 770:	7f 91       	pop	r23
 772:	6f 91       	pop	r22
 774:	5f 91       	pop	r21
 776:	4f 91       	pop	r20
 778:	3f 91       	pop	r19
 77a:	2f 91       	pop	r18
 77c:	0f 90       	pop	r0
 77e:	0f be       	out	0x3f, r0	; 63
 780:	0f 90       	pop	r0
 782:	1f 90       	pop	r1
 784:	18 95       	reti

00000786 <__vector_13>:
	//set callback
	Action_Uart[0] = ptrfn;
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1
 790:	2f 93       	push	r18
 792:	3f 93       	push	r19
 794:	4f 93       	push	r20
 796:	5f 93       	push	r21
 798:	6f 93       	push	r22
 79a:	7f 93       	push	r23
 79c:	8f 93       	push	r24
 79e:	9f 93       	push	r25
 7a0:	af 93       	push	r26
 7a2:	bf 93       	push	r27
 7a4:	ef 93       	push	r30
 7a6:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 7a8:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 7aa:	e0 91 da 00 	lds	r30, 0x00DA	; 0x8000da <Action_Uart>
 7ae:	f0 91 db 00 	lds	r31, 0x00DB	; 0x8000db <Action_Uart+0x1>
 7b2:	30 97       	sbiw	r30, 0x00	; 0
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <__vector_13+0x32>
		Action_Uart[0](receivedData);
 7b6:	09 95       	icall
	}
 7b8:	ff 91       	pop	r31
 7ba:	ef 91       	pop	r30
 7bc:	bf 91       	pop	r27
 7be:	af 91       	pop	r26
 7c0:	9f 91       	pop	r25
 7c2:	8f 91       	pop	r24
 7c4:	7f 91       	pop	r23
 7c6:	6f 91       	pop	r22
 7c8:	5f 91       	pop	r21
 7ca:	4f 91       	pop	r20
 7cc:	3f 91       	pop	r19
 7ce:	2f 91       	pop	r18
 7d0:	0f 90       	pop	r0
 7d2:	0f be       	out	0x3f, r0	; 63
 7d4:	0f 90       	pop	r0
 7d6:	1f 90       	pop	r1
 7d8:	18 95       	reti

000007da <Task1Callback>:


void runHighestPriorityTask() ;
void pendSV(void);
// Define the task functions
void Task1Callback(void) {
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	00 d0       	rcall	.+0      	; 0x7e0 <Task1Callback+0x6>
 7e0:	00 d0       	rcall	.+0      	; 0x7e2 <Task1Callback+0x8>
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
	// Toggle PB0 LED
	DIO_Config led = {DIO_PORTB, DIO_PIN0, DIO_PIN_OUTPUT};
 7e6:	19 82       	std	Y+1, r1	; 0x01
 7e8:	1a 82       	std	Y+2, r1	; 0x02
 7ea:	1b 82       	std	Y+3, r1	; 0x03
 7ec:	1c 82       	std	Y+4, r1	; 0x04
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	89 83       	std	Y+1, r24	; 0x01
 7f2:	8b 83       	std	Y+3, r24	; 0x03
	DIO_U8TogglePin(&led);
 7f4:	ce 01       	movw	r24, r28
 7f6:	01 96       	adiw	r24, 0x01	; 1
 7f8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_U8TogglePin>
}
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	0f 90       	pop	r0
 802:	0f 90       	pop	r0
 804:	df 91       	pop	r29
 806:	cf 91       	pop	r28
 808:	08 95       	ret

0000080a <Task3Callback>:
		led.pin = DIO_PIN2;
		DIO_U8TogglePin(&led);
	}
}

void Task3Callback(void) {
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	00 d0       	rcall	.+0      	; 0x810 <Task3Callback+0x6>
 810:	00 d0       	rcall	.+0      	; 0x812 <Task3Callback+0x8>
 812:	cd b7       	in	r28, 0x3d	; 61
 814:	de b7       	in	r29, 0x3e	; 62
	// Toggle the Green LED
	DIO_Config led = {DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT};
 816:	19 82       	std	Y+1, r1	; 0x01
 818:	1a 82       	std	Y+2, r1	; 0x02
 81a:	1b 82       	std	Y+3, r1	; 0x03
 81c:	1c 82       	std	Y+4, r1	; 0x04
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	89 83       	std	Y+1, r24	; 0x01
 822:	93 e0       	ldi	r25, 0x03	; 3
 824:	9a 83       	std	Y+2, r25	; 0x02
 826:	8b 83       	std	Y+3, r24	; 0x03
	DIO_U8TogglePin(&led);
 828:	ce 01       	movw	r24, r28
 82a:	01 96       	adiw	r24, 0x01	; 1
 82c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_U8TogglePin>
}
 830:	0f 90       	pop	r0
 832:	0f 90       	pop	r0
 834:	0f 90       	pop	r0
 836:	0f 90       	pop	r0
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	08 95       	ret

0000083e <Task2Callback>:
	// Toggle PB0 LED
	DIO_Config led = {DIO_PORTB, DIO_PIN0, DIO_PIN_OUTPUT};
	DIO_U8TogglePin(&led);
}

void Task2Callback(void) {
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	00 d0       	rcall	.+0      	; 0x844 <Task2Callback+0x6>
 844:	00 d0       	rcall	.+0      	; 0x846 <Task2Callback+0x8>
 846:	1f 92       	push	r1
 848:	cd b7       	in	r28, 0x3d	; 61
 84a:	de b7       	in	r29, 0x3e	; 62
	// Check the state of PB1 and toggle the BLUE LED if pressed
	u8 value;
	DIO_Config led = {DIO_PORTB, DIO_PIN1};
 84c:	1a 82       	std	Y+2, r1	; 0x02
 84e:	1b 82       	std	Y+3, r1	; 0x03
 850:	1c 82       	std	Y+4, r1	; 0x04
 852:	1d 82       	std	Y+5, r1	; 0x05
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	8a 83       	std	Y+2, r24	; 0x02
 858:	8b 83       	std	Y+3, r24	; 0x03
	DIO_U8GetPinValue(&led, &value);
 85a:	be 01       	movw	r22, r28
 85c:	6f 5f       	subi	r22, 0xFF	; 255
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	ce 01       	movw	r24, r28
 862:	02 96       	adiw	r24, 0x02	; 2
 864:	0e 94 0b 01 	call	0x216	; 0x216 <DIO_U8GetPinValue>
	if (value == 0) {
 868:	89 81       	ldd	r24, Y+1	; 0x01
 86a:	81 11       	cpse	r24, r1
 86c:	06 c0       	rjmp	.+12     	; 0x87a <__stack+0x1b>
		led.pin = DIO_PIN2;
 86e:	82 e0       	ldi	r24, 0x02	; 2
 870:	8b 83       	std	Y+3, r24	; 0x03
		DIO_U8TogglePin(&led);
 872:	ce 01       	movw	r24, r28
 874:	02 96       	adiw	r24, 0x02	; 2
 876:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_U8TogglePin>
	}
}
 87a:	0f 90       	pop	r0
 87c:	0f 90       	pop	r0
 87e:	0f 90       	pop	r0
 880:	0f 90       	pop	r0
 882:	0f 90       	pop	r0
 884:	df 91       	pop	r29
 886:	cf 91       	pop	r28
 888:	08 95       	ret

0000088a <startOS>:
// Define a simple task queue using priority
TaskControlBlock* taskQueue[NUM_TASKS];
u8 queueSize = 0;

// Initialize the hardware
void startOS() {
 88a:	ff 92       	push	r15
 88c:	0f 93       	push	r16
 88e:	1f 93       	push	r17
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
 898:	64 97       	sbiw	r28, 0x14	; 20
 89a:	0f b6       	in	r0, 0x3f	; 63
 89c:	f8 94       	cli
 89e:	de bf       	out	0x3e, r29	; 62
 8a0:	0f be       	out	0x3f, r0	; 63
 8a2:	cd bf       	out	0x3d, r28	; 61
	DIO_Config pins[] = {
 8a4:	80 e1       	ldi	r24, 0x10	; 16
 8a6:	e1 e8       	ldi	r30, 0x81	; 129
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	de 01       	movw	r26, r28
 8ac:	11 96       	adiw	r26, 0x01	; 1
 8ae:	01 90       	ld	r0, Z+
 8b0:	0d 92       	st	X+, r0
 8b2:	8a 95       	dec	r24
 8b4:	e1 f7       	brne	.-8      	; 0x8ae <startOS+0x24>
		{DIO_PORTB, DIO_PIN2, DIO_PIN_OUTPUT,DIO_PIN_LOW},
		{DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT,DIO_PIN_LOW},
	};

	// Initialize pins
	for (u8 i = 0; i < 4; i++) {
 8b6:	f1 2c       	mov	r15, r1
 8b8:	13 c0       	rjmp	.+38     	; 0x8e0 <startOS+0x56>
		DIO_U8SetPinDirection(&pins[i]);
 8ba:	0f 2d       	mov	r16, r15
 8bc:	10 e0       	ldi	r17, 0x00	; 0
 8be:	00 0f       	add	r16, r16
 8c0:	11 1f       	adc	r17, r17
 8c2:	00 0f       	add	r16, r16
 8c4:	11 1f       	adc	r17, r17
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	8c 0f       	add	r24, r28
 8cc:	9d 1f       	adc	r25, r29
 8ce:	08 0f       	add	r16, r24
 8d0:	19 1f       	adc	r17, r25
 8d2:	c8 01       	movw	r24, r16
 8d4:	0e 94 67 00 	call	0xce	; 0xce <DIO_U8SetPinDirection>
		DIO_U8SetPinValue(&pins[i]);
 8d8:	c8 01       	movw	r24, r16
 8da:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_U8SetPinValue>
		{DIO_PORTB, DIO_PIN2, DIO_PIN_OUTPUT,DIO_PIN_LOW},
		{DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT,DIO_PIN_LOW},
	};

	// Initialize pins
	for (u8 i = 0; i < 4; i++) {
 8de:	f3 94       	inc	r15
 8e0:	93 e0       	ldi	r25, 0x03	; 3
 8e2:	9f 15       	cp	r25, r15
 8e4:	50 f7       	brcc	.-44     	; 0x8ba <startOS+0x30>
		DIO_U8SetPinDirection(&pins[i]);
		DIO_U8SetPinValue(&pins[i]);
	}

	Timer0_Config timer = {NORMAL, PRESCALER_1024};
 8e6:	19 8a       	std	Y+17, r1	; 0x11
 8e8:	1a 8a       	std	Y+18, r1	; 0x12
 8ea:	1b 8a       	std	Y+19, r1	; 0x13
 8ec:	1c 8a       	std	Y+20, r1	; 0x14
 8ee:	85 e0       	ldi	r24, 0x05	; 5
 8f0:	8a 8b       	std	Y+18, r24	; 0x12
	M_TIMER0_void_Init(&timer);
 8f2:	ce 01       	movw	r24, r28
 8f4:	41 96       	adiw	r24, 0x11	; 17
 8f6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <M_TIMER0_void_Init>
	M_TIMER0_void_setCallBack(pendSV, OVERFLOW);
 8fa:	60 e0       	ldi	r22, 0x00	; 0
 8fc:	86 ec       	ldi	r24, 0xC6	; 198
 8fe:	94 e0       	ldi	r25, 0x04	; 4
 900:	0e 94 76 02 	call	0x4ec	; 0x4ec <M_TIMER0_void_setCallBack>
	M_TIMER0_void_IntEnable(OVERFLOW);
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <M_TIMER0_void_IntEnable>
	M_TIMER0_void_setDelayTimeMilliSec(500);
 90a:	64 ef       	ldi	r22, 0xF4	; 244
 90c:	71 e0       	ldi	r23, 0x01	; 1
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 0e 02 	call	0x41c	; 0x41c <M_TIMER0_void_setDelayTimeMilliSec>
	M_TIMER0_void_start();
 916:	0e 94 07 02 	call	0x40e	; 0x40e <M_TIMER0_void_start>
}
 91a:	64 96       	adiw	r28, 0x14	; 20
 91c:	0f b6       	in	r0, 0x3f	; 63
 91e:	f8 94       	cli
 920:	de bf       	out	0x3e, r29	; 62
 922:	0f be       	out	0x3f, r0	; 63
 924:	cd bf       	out	0x3d, r28	; 61
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	1f 91       	pop	r17
 92c:	0f 91       	pop	r16
 92e:	ff 90       	pop	r15
 930:	08 95       	ret

00000932 <runHighestPriorityTask>:
		  }
	  }
	  runHighestPriorityTask(); // Execute the highest-priority task
}

void runHighestPriorityTask() {
 932:	cf 93       	push	r28
	for (u8 i = 0; i < NUM_TASKS; i++) {
 934:	c0 e0       	ldi	r28, 0x00	; 0
 936:	26 c0       	rjmp	.+76     	; 0x984 <runHighestPriorityTask+0x52>
		if (tasks[i].counter >= tasks[i].period) {
 938:	8c 2f       	mov	r24, r28
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	fc 01       	movw	r30, r24
 93e:	ee 0f       	add	r30, r30
 940:	ff 1f       	adc	r31, r31
 942:	ee 0f       	add	r30, r30
 944:	ff 1f       	adc	r31, r31
 946:	ee 0f       	add	r30, r30
 948:	ff 1f       	adc	r31, r31
 94a:	e8 1b       	sub	r30, r24
 94c:	f9 0b       	sbc	r31, r25
 94e:	e0 5a       	subi	r30, 0xA0	; 160
 950:	ff 4f       	sbci	r31, 0xFF	; 255
 952:	44 81       	ldd	r20, Z+4	; 0x04
 954:	55 81       	ldd	r21, Z+5	; 0x05
 956:	22 81       	ldd	r18, Z+2	; 0x02
 958:	33 81       	ldd	r19, Z+3	; 0x03
 95a:	42 17       	cp	r20, r18
 95c:	53 07       	cpc	r21, r19
 95e:	88 f0       	brcs	.+34     	; 0x982 <runHighestPriorityTask+0x50>
			tasks[i].counter = 0;
 960:	fc 01       	movw	r30, r24
 962:	ee 0f       	add	r30, r30
 964:	ff 1f       	adc	r31, r31
 966:	ee 0f       	add	r30, r30
 968:	ff 1f       	adc	r31, r31
 96a:	ee 0f       	add	r30, r30
 96c:	ff 1f       	adc	r31, r31
 96e:	e8 1b       	sub	r30, r24
 970:	f9 0b       	sbc	r31, r25
 972:	e0 5a       	subi	r30, 0xA0	; 160
 974:	ff 4f       	sbci	r31, 0xFF	; 255
 976:	15 82       	std	Z+5, r1	; 0x05
 978:	14 82       	std	Z+4, r1	; 0x04
			tasks[i].taskFunc();
 97a:	01 90       	ld	r0, Z+
 97c:	f0 81       	ld	r31, Z
 97e:	e0 2d       	mov	r30, r0
 980:	09 95       	icall
	  }
	  runHighestPriorityTask(); // Execute the highest-priority task
}

void runHighestPriorityTask() {
	for (u8 i = 0; i < NUM_TASKS; i++) {
 982:	cf 5f       	subi	r28, 0xFF	; 255
 984:	c3 30       	cpi	r28, 0x03	; 3
 986:	c0 f2       	brcs	.-80     	; 0x938 <runHighestPriorityTask+0x6>
		if (tasks[i].counter >= tasks[i].period) {
			tasks[i].counter = 0;
			tasks[i].taskFunc();
		}
	}
 988:	cf 91       	pop	r28
 98a:	08 95       	ret

0000098c <pendSV>:
}

void pendSV(void) {


	  for (u8 i = 0; i < NUM_TASKS; i++) {
 98c:	60 e0       	ldi	r22, 0x00	; 0
 98e:	6f c0       	rjmp	.+222    	; 0xa6e <pendSV+0xe2>
		  tasks[i].counter += 500; // Increment the counter for all tasks
 990:	26 2f       	mov	r18, r22
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	f9 01       	movw	r30, r18
 996:	ee 0f       	add	r30, r30
 998:	ff 1f       	adc	r31, r31
 99a:	ee 0f       	add	r30, r30
 99c:	ff 1f       	adc	r31, r31
 99e:	ee 0f       	add	r30, r30
 9a0:	ff 1f       	adc	r31, r31
 9a2:	e2 1b       	sub	r30, r18
 9a4:	f3 0b       	sbc	r31, r19
 9a6:	e0 5a       	subi	r30, 0xA0	; 160
 9a8:	ff 4f       	sbci	r31, 0xFF	; 255
 9aa:	84 81       	ldd	r24, Z+4	; 0x04
 9ac:	95 81       	ldd	r25, Z+5	; 0x05
 9ae:	8c 50       	subi	r24, 0x0C	; 12
 9b0:	9e 4f       	sbci	r25, 0xFE	; 254
 9b2:	95 83       	std	Z+5, r25	; 0x05
 9b4:	84 83       	std	Z+4, r24	; 0x04

		  if (tasks[i].counter >= tasks[i].period) {
 9b6:	42 81       	ldd	r20, Z+2	; 0x02
 9b8:	53 81       	ldd	r21, Z+3	; 0x03
 9ba:	84 17       	cp	r24, r20
 9bc:	95 07       	cpc	r25, r21
 9be:	08 f4       	brcc	.+2      	; 0x9c2 <pendSV+0x36>
 9c0:	55 c0       	rjmp	.+170    	; 0xa6c <pendSV+0xe0>
			  // Task is ready to run, add it to the queue based on priority
			  if (queueSize < NUM_TASKS) {
 9c2:	50 91 e0 00 	lds	r21, 0x00E0	; 0x8000e0 <queueSize>
 9c6:	53 30       	cpi	r21, 0x03	; 3
 9c8:	e0 f0       	brcs	.+56     	; 0xa02 <pendSV+0x76>
 9ca:	4e c0       	rjmp	.+156    	; 0xa68 <pendSV+0xdc>
				  u8 insertIndex = 0;
				  for (u8 j = 0; j < queueSize; j++) {
					  if (tasks[i].priority > taskQueue[j]->priority) {
 9cc:	f9 01       	movw	r30, r18
 9ce:	ee 0f       	add	r30, r30
 9d0:	ff 1f       	adc	r31, r31
 9d2:	ee 0f       	add	r30, r30
 9d4:	ff 1f       	adc	r31, r31
 9d6:	ee 0f       	add	r30, r30
 9d8:	ff 1f       	adc	r31, r31
 9da:	e2 1b       	sub	r30, r18
 9dc:	f3 0b       	sbc	r31, r19
 9de:	e0 5a       	subi	r30, 0xA0	; 160
 9e0:	ff 4f       	sbci	r31, 0xFF	; 255
 9e2:	76 81       	ldd	r23, Z+6	; 0x06
 9e4:	e8 2f       	mov	r30, r24
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	ee 0f       	add	r30, r30
 9ea:	ff 1f       	adc	r31, r31
 9ec:	ef 51       	subi	r30, 0x1F	; 31
 9ee:	ff 4f       	sbci	r31, 0xFF	; 255
 9f0:	01 90       	ld	r0, Z+
 9f2:	f0 81       	ld	r31, Z
 9f4:	e0 2d       	mov	r30, r0
 9f6:	96 81       	ldd	r25, Z+6	; 0x06
 9f8:	97 17       	cp	r25, r23
 9fa:	e0 f0       	brcs	.+56     	; 0xa34 <pendSV+0xa8>
						  break;
					  }
					  insertIndex++;
 9fc:	4f 5f       	subi	r20, 0xFF	; 255

		  if (tasks[i].counter >= tasks[i].period) {
			  // Task is ready to run, add it to the queue based on priority
			  if (queueSize < NUM_TASKS) {
				  u8 insertIndex = 0;
				  for (u8 j = 0; j < queueSize; j++) {
 9fe:	8f 5f       	subi	r24, 0xFF	; 255
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <pendSV+0x7a>
 a02:	80 e0       	ldi	r24, 0x00	; 0
 a04:	40 e0       	ldi	r20, 0x00	; 0
 a06:	85 17       	cp	r24, r21
 a08:	08 f3       	brcs	.-62     	; 0x9cc <pendSV+0x40>
 a0a:	75 2f       	mov	r23, r21
 a0c:	14 c0       	rjmp	.+40     	; 0xa36 <pendSV+0xaa>
					  }
					  insertIndex++;
				  }
				  // Shift existing tasks to make space for the new task
				  for (u8 j = queueSize; j > insertIndex; j--) {
					  taskQueue[j] = taskQueue[j - 1];
 a0e:	87 2f       	mov	r24, r23
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	fc 01       	movw	r30, r24
 a14:	31 97       	sbiw	r30, 0x01	; 1
 a16:	ee 0f       	add	r30, r30
 a18:	ff 1f       	adc	r31, r31
 a1a:	ef 51       	subi	r30, 0x1F	; 31
 a1c:	ff 4f       	sbci	r31, 0xFF	; 255
 a1e:	a0 81       	ld	r26, Z
 a20:	b1 81       	ldd	r27, Z+1	; 0x01
 a22:	88 0f       	add	r24, r24
 a24:	99 1f       	adc	r25, r25
 a26:	fc 01       	movw	r30, r24
 a28:	ef 51       	subi	r30, 0x1F	; 31
 a2a:	ff 4f       	sbci	r31, 0xFF	; 255
 a2c:	b1 83       	std	Z+1, r27	; 0x01
 a2e:	a0 83       	st	Z, r26
						  break;
					  }
					  insertIndex++;
				  }
				  // Shift existing tasks to make space for the new task
				  for (u8 j = queueSize; j > insertIndex; j--) {
 a30:	71 50       	subi	r23, 0x01	; 1
 a32:	01 c0       	rjmp	.+2      	; 0xa36 <pendSV+0xaa>
 a34:	75 2f       	mov	r23, r21
 a36:	47 17       	cp	r20, r23
 a38:	50 f3       	brcs	.-44     	; 0xa0e <pendSV+0x82>
					  taskQueue[j] = taskQueue[j - 1];
				  }
				  taskQueue[insertIndex] = &tasks[i];
 a3a:	e4 2f       	mov	r30, r20
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	c9 01       	movw	r24, r18
 a40:	88 0f       	add	r24, r24
 a42:	99 1f       	adc	r25, r25
 a44:	88 0f       	add	r24, r24
 a46:	99 1f       	adc	r25, r25
 a48:	88 0f       	add	r24, r24
 a4a:	99 1f       	adc	r25, r25
 a4c:	82 1b       	sub	r24, r18
 a4e:	93 0b       	sbc	r25, r19
 a50:	80 5a       	subi	r24, 0xA0	; 160
 a52:	9f 4f       	sbci	r25, 0xFF	; 255
 a54:	ee 0f       	add	r30, r30
 a56:	ff 1f       	adc	r31, r31
 a58:	ef 51       	subi	r30, 0x1F	; 31
 a5a:	ff 4f       	sbci	r31, 0xFF	; 255
 a5c:	91 83       	std	Z+1, r25	; 0x01
 a5e:	80 83       	st	Z, r24
				  queueSize++;
 a60:	5f 5f       	subi	r21, 0xFF	; 255
 a62:	50 93 e0 00 	sts	0x00E0, r21	; 0x8000e0 <queueSize>
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <pendSV+0xe0>
			  }else{
				  	  // Clear the task queue before adding tasks
				  	  queueSize = 0;
 a68:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <queueSize>
}

void pendSV(void) {


	  for (u8 i = 0; i < NUM_TASKS; i++) {
 a6c:	6f 5f       	subi	r22, 0xFF	; 255
 a6e:	63 30       	cpi	r22, 0x03	; 3
 a70:	08 f4       	brcc	.+2      	; 0xa74 <pendSV+0xe8>
 a72:	8e cf       	rjmp	.-228    	; 0x990 <pendSV+0x4>
				  	  queueSize = 0;
			  }
			 
		  }
	  }
	  runHighestPriorityTask(); // Execute the highest-priority task
 a74:	0e 94 99 04 	call	0x932	; 0x932 <runHighestPriorityTask>
 a78:	08 95       	ret

00000a7a <__udivmodsi4>:
 a7a:	a1 e2       	ldi	r26, 0x21	; 33
 a7c:	1a 2e       	mov	r1, r26
 a7e:	aa 1b       	sub	r26, r26
 a80:	bb 1b       	sub	r27, r27
 a82:	fd 01       	movw	r30, r26
 a84:	0d c0       	rjmp	.+26     	; 0xaa0 <__udivmodsi4_ep>

00000a86 <__udivmodsi4_loop>:
 a86:	aa 1f       	adc	r26, r26
 a88:	bb 1f       	adc	r27, r27
 a8a:	ee 1f       	adc	r30, r30
 a8c:	ff 1f       	adc	r31, r31
 a8e:	a2 17       	cp	r26, r18
 a90:	b3 07       	cpc	r27, r19
 a92:	e4 07       	cpc	r30, r20
 a94:	f5 07       	cpc	r31, r21
 a96:	20 f0       	brcs	.+8      	; 0xaa0 <__udivmodsi4_ep>
 a98:	a2 1b       	sub	r26, r18
 a9a:	b3 0b       	sbc	r27, r19
 a9c:	e4 0b       	sbc	r30, r20
 a9e:	f5 0b       	sbc	r31, r21

00000aa0 <__udivmodsi4_ep>:
 aa0:	66 1f       	adc	r22, r22
 aa2:	77 1f       	adc	r23, r23
 aa4:	88 1f       	adc	r24, r24
 aa6:	99 1f       	adc	r25, r25
 aa8:	1a 94       	dec	r1
 aaa:	69 f7       	brne	.-38     	; 0xa86 <__udivmodsi4_loop>
 aac:	60 95       	com	r22
 aae:	70 95       	com	r23
 ab0:	80 95       	com	r24
 ab2:	90 95       	com	r25
 ab4:	9b 01       	movw	r18, r22
 ab6:	ac 01       	movw	r20, r24
 ab8:	bd 01       	movw	r22, r26
 aba:	cf 01       	movw	r24, r30
 abc:	08 95       	ret

00000abe <__muluhisi3>:
 abe:	0e 94 6a 05 	call	0xad4	; 0xad4 <__umulhisi3>
 ac2:	a5 9f       	mul	r26, r21
 ac4:	90 0d       	add	r25, r0
 ac6:	b4 9f       	mul	r27, r20
 ac8:	90 0d       	add	r25, r0
 aca:	a4 9f       	mul	r26, r20
 acc:	80 0d       	add	r24, r0
 ace:	91 1d       	adc	r25, r1
 ad0:	11 24       	eor	r1, r1
 ad2:	08 95       	ret

00000ad4 <__umulhisi3>:
 ad4:	a2 9f       	mul	r26, r18
 ad6:	b0 01       	movw	r22, r0
 ad8:	b3 9f       	mul	r27, r19
 ada:	c0 01       	movw	r24, r0
 adc:	a3 9f       	mul	r26, r19
 ade:	70 0d       	add	r23, r0
 ae0:	81 1d       	adc	r24, r1
 ae2:	11 24       	eor	r1, r1
 ae4:	91 1d       	adc	r25, r1
 ae6:	b2 9f       	mul	r27, r18
 ae8:	70 0d       	add	r23, r0
 aea:	81 1d       	adc	r24, r1
 aec:	11 24       	eor	r1, r1
 aee:	91 1d       	adc	r25, r1
 af0:	08 95       	ret

00000af2 <_exit>:
 af2:	f8 94       	cli

00000af4 <__stop_program>:
 af4:	ff cf       	rjmp	.-2      	; 0xaf4 <__stop_program>
