
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000009fc  00000a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d9  00800086  00800086  00000ab6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000391c  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013c0  00000000  00000000  00004818  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c43  00000000  00000000  00005bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c4c  00000000  00000000  0000781c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018d9  00000000  00000000  00008468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a69  00000000  00000000  00009d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000c7aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c3 02 	jmp	0x586	; 0x586 <__vector_1>
   8:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_2>
   c:	0c 94 15 03 	jmp	0x62a	; 0x62a <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 80 04 	jmp	0x900	; 0x900 <__vector_6>
  1c:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__vector_9>
  28:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_10>
  2c:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <__vector_11>
  30:	0c 94 40 03 	jmp	0x680	; 0x680 <__vector_12>
  34:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 35       	cpi	r26, 0x5F	; 95
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


// Main function
int main(void) {
    // Enable global interrupts
    GIE_enable();
  92:	0e 94 3e 03 	call	0x67c	; 0x67c <GIE_enable>
    // Initialize USART communication
    USART_Init();
  96:	0e 94 a9 04 	call	0x952	; 0x952 <USART_Init>
    // Initialize LCD
    H_LCD_void_Init();
  9a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <H_LCD_void_Init>
	
	ESP8266_Init();
  9e:	0e 94 80 00 	call	0x100	; 0x100 <ESP8266_Init>
	
	H_LCD_void_sendData('g');
  a2:	87 e6       	ldi	r24, 0x67	; 103
  a4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <H_LCD_void_sendData>

	//H_LCD_void_sendData(ESP8266_Begin());
		UART_sendString("AT");		/* Send AT command to ESP8266 */
  a8:	80 e7       	ldi	r24, 0x70	; 112
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 b7 04 	call	0x96e	; 0x96e <UART_sendString>
		UART_sendString("\r\n");
  b0:	83 e7       	ldi	r24, 0x73	; 115
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 b7 04 	call	0x96e	; 0x96e <UART_sendString>

	
	H_LCD_void_sendData('a');
  b8:	81 e6       	ldi	r24, 0x61	; 97
  ba:	0e 94 e7 01 	call	0x3ce	; 0x3ce <H_LCD_void_sendData>
  be:	ff cf       	rjmp	.-2      	; 0xbe <main+0x2c>

000000c0 <receiveCallback>:
	return len;
}

static void receiveCallback(u8 data)
{
	RESPONSE_BUFFER[Counter] = data;
  c0:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <Counter>
  c4:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <Counter+0x1>
  c8:	e2 54       	subi	r30, 0x42	; 66
  ca:	ff 4f       	sbci	r31, 0xFF	; 255
  cc:	80 83       	st	Z, r24
	Counter++;
  ce:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Counter>
  d2:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <Counter+0x1>
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <Counter+0x1>
  dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <Counter>
	if(Counter == DEFAULT_BUFFER_SIZE){
  e0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Counter>
  e4:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <Counter+0x1>
  e8:	80 3a       	cpi	r24, 0xA0	; 160
  ea:	91 05       	cpc	r25, r1
  ec:	41 f4       	brne	.+16     	; 0xfe <receiveCallback+0x3e>
		Counter = 0; pointer = 0;
  ee:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <Counter+0x1>
  f2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <Counter>
  f6:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__data_end+0x1>
  fa:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__data_end>
  fe:	08 95       	ret

00000100 <ESP8266_Init>:
u32 TimeOut = 0;
char RESPONSE_BUFFER[DEFAULT_BUFFER_SIZE];

void ESP8266_Init(void)
{
	UART_receiveByteAsynchCallBack(receiveCallback);
 100:	80 e6       	ldi	r24, 0x60	; 96
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 ca 04 	call	0x994	; 0x994 <UART_receiveByteAsynchCallBack>
 108:	08 95       	ret

0000010a <H_LCD_void_latchByte>:
	H_LCD_void_sendString(buff); // Display the binary string
}



static void H_LCD_void_latchByte(u8 copy_u8Byte){
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	64 97       	sbiw	r28, 0x14	; 20
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
 122:	08 2f       	mov	r16, r24
	DIO_Config dataPins[] = {
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	89 83       	std	Y+1, r24	; 0x01
 128:	1a 82       	std	Y+2, r1	; 0x02
 12a:	8b 83       	std	Y+3, r24	; 0x03
 12c:	04 fb       	bst	r16, 4
 12e:	99 27       	eor	r25, r25
 130:	90 f9       	bld	r25, 0
 132:	9c 83       	std	Y+4, r25	; 0x04
 134:	8d 83       	std	Y+5, r24	; 0x05
 136:	8e 83       	std	Y+6, r24	; 0x06
 138:	8f 83       	std	Y+7, r24	; 0x07
 13a:	05 fb       	bst	r16, 5
 13c:	99 27       	eor	r25, r25
 13e:	90 f9       	bld	r25, 0
 140:	98 87       	std	Y+8, r25	; 0x08
 142:	89 87       	std	Y+9, r24	; 0x09
 144:	92 e0       	ldi	r25, 0x02	; 2
 146:	9a 87       	std	Y+10, r25	; 0x0a
 148:	8b 87       	std	Y+11, r24	; 0x0b
 14a:	06 fb       	bst	r16, 6
 14c:	99 27       	eor	r25, r25
 14e:	90 f9       	bld	r25, 0
 150:	9c 87       	std	Y+12, r25	; 0x0c
 152:	8d 87       	std	Y+13, r24	; 0x0d
 154:	94 e0       	ldi	r25, 0x04	; 4
 156:	9e 87       	std	Y+14, r25	; 0x0e
 158:	8f 87       	std	Y+15, r24	; 0x0f
 15a:	80 2f       	mov	r24, r16
 15c:	88 1f       	adc	r24, r24
 15e:	88 27       	eor	r24, r24
 160:	88 1f       	adc	r24, r24
 162:	88 8b       	std	Y+16, r24	; 0x10
		{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 4)},//PD4 data bin
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 5)},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 6)},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 7)},//PD7 data bin
	};
	for (u8 i = 0; i < 4; i++) {
 164:	10 e0       	ldi	r17, 0x00	; 0
 166:	0f c0       	rjmp	.+30     	; 0x186 <H_LCD_void_latchByte+0x7c>
		DIO_U8SetPinValue(&dataPins[i]);
 168:	81 2f       	mov	r24, r17
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	2c 0f       	add	r18, r28
 17a:	3d 1f       	adc	r19, r29
 17c:	82 0f       	add	r24, r18
 17e:	93 1f       	adc	r25, r19
 180:	0e 94 81 02 	call	0x502	; 0x502 <DIO_U8SetPinValue>
		{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 4)},//PD4 data bin
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 5)},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 6)},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 7)},//PD7 data bin
	};
	for (u8 i = 0; i < 4; i++) {
 184:	1f 5f       	subi	r17, 0xFF	; 255
 186:	14 30       	cpi	r17, 0x04	; 4
 188:	78 f3       	brcs	.-34     	; 0x168 <H_LCD_void_latchByte+0x5e>
		DIO_U8SetPinValue(&dataPins[i]);
	}

	DIO_Config enable;
	enable.port = LCD_EN_PORT;
 18a:	19 8a       	std	Y+17, r1	; 0x11
	enable.pin = LCD_EN_PIN;
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	8a 8b       	std	Y+18, r24	; 0x12
	enable.value = DIO_PIN_LOW;
 190:	1c 8a       	std	Y+20, r1	; 0x14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8f e9       	ldi	r24, 0x9F	; 159
 194:	9f e0       	ldi	r25, 0x0F	; 15
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <H_LCD_void_latchByte+0x8c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <H_LCD_void_latchByte+0x92>
 19c:	00 00       	nop
	_delay_ms(1); /* delay for processing */
	DIO_U8SetPinValue(&enable);
 19e:	ce 01       	movw	r24, r28
 1a0:	41 96       	adiw	r24, 0x11	; 17
 1a2:	0e 94 81 02 	call	0x502	; 0x502 <DIO_U8SetPinValue>
 1a6:	ef e9       	ldi	r30, 0x9F	; 159
 1a8:	ff e0       	ldi	r31, 0x0F	; 15
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <H_LCD_void_latchByte+0xa0>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <H_LCD_void_latchByte+0xa6>
 1b0:	00 00       	nop
	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_HIGH;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	8c 8b       	std	Y+20, r24	; 0x14
	DIO_U8SetPinValue(&enable);
 1b6:	ce 01       	movw	r24, r28
 1b8:	41 96       	adiw	r24, 0x11	; 17
 1ba:	0e 94 81 02 	call	0x502	; 0x502 <DIO_U8SetPinValue>
 1be:	8f e9       	ldi	r24, 0x9F	; 159
 1c0:	9f e0       	ldi	r25, 0x0F	; 15
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <H_LCD_void_latchByte+0xb8>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <H_LCD_void_latchByte+0xbe>
 1c8:	00 00       	nop
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	1a c0       	rjmp	.+52     	; 0x202 <H_LCD_void_latchByte+0xf8>
		dataPins[i].value = GET_BIT(copy_u8Byte, i);
 1ce:	81 2f       	mov	r24, r17
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	20 2f       	mov	r18, r16
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	01 2e       	mov	r0, r17
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <H_LCD_void_latchByte+0xd4>
 1da:	35 95       	asr	r19
 1dc:	27 95       	ror	r18
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <H_LCD_void_latchByte+0xd0>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	e1 e0       	ldi	r30, 0x01	; 1
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ec 0f       	add	r30, r28
 1f0:	fd 1f       	adc	r31, r29
 1f2:	8e 0f       	add	r24, r30
 1f4:	9f 1f       	adc	r25, r31
 1f6:	21 70       	andi	r18, 0x01	; 1
 1f8:	fc 01       	movw	r30, r24
 1fa:	23 83       	std	Z+3, r18	; 0x03
		DIO_U8SetPinValue(&dataPins[i]);
 1fc:	0e 94 81 02 	call	0x502	; 0x502 <DIO_U8SetPinValue>
	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_HIGH;
	DIO_U8SetPinValue(&enable);
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
 200:	1f 5f       	subi	r17, 0xFF	; 255
 202:	14 30       	cpi	r17, 0x04	; 4
 204:	20 f3       	brcs	.-56     	; 0x1ce <H_LCD_void_latchByte+0xc4>
 206:	8f e9       	ldi	r24, 0x9F	; 159
 208:	9f e0       	ldi	r25, 0x0F	; 15
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <H_LCD_void_latchByte+0x100>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <H_LCD_void_latchByte+0x106>
 210:	00 00       	nop
		dataPins[i].value = GET_BIT(copy_u8Byte, i);
		DIO_U8SetPinValue(&dataPins[i]);
	}

	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_LOW;
 212:	1c 8a       	std	Y+20, r1	; 0x14
	DIO_U8SetPinValue(&enable);
 214:	ce 01       	movw	r24, r28
 216:	41 96       	adiw	r24, 0x11	; 17
 218:	0e 94 81 02 	call	0x502	; 0x502 <DIO_U8SetPinValue>
 21c:	ef e9       	ldi	r30, 0x9F	; 159
 21e:	ff e0       	ldi	r31, 0x0F	; 15
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <H_LCD_void_latchByte+0x116>
 224:	00 c0       	rjmp	.+0      	; 0x226 <H_LCD_void_latchByte+0x11c>
 226:	00 00       	nop
	_delay_ms(1); /* delay for processing*/


}
 228:	64 96       	adiw	r28, 0x14	; 20
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	f8 94       	cli
 22e:	de bf       	out	0x3e, r29	; 62
 230:	0f be       	out	0x3f, r0	; 63
 232:	cd bf       	out	0x3d, r28	; 61
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	08 95       	ret

0000023e <H_LCD_void_sendCommand>:
}



void H_LCD_void_sendCommand(u8 copy_u8command)
{
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
 24a:	28 97       	sbiw	r28, 0x08	; 8
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	f8 94       	cli
 250:	de bf       	out	0x3e, r29	; 62
 252:	0f be       	out	0x3f, r0	; 63
 254:	cd bf       	out	0x3d, r28	; 61
 256:	08 2f       	mov	r16, r24
	//set mode to command
	DIO_Config mode[] = {
 258:	88 e0       	ldi	r24, 0x08	; 8
 25a:	e0 e6       	ldi	r30, 0x60	; 96
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	de 01       	movw	r26, r28
 260:	11 96       	adiw	r26, 0x01	; 1
 262:	01 90       	ld	r0, Z+
 264:	0d 92       	st	X+, r0
 266:	8a 95       	dec	r24
 268:	e1 f7       	brne	.-8      	; 0x262 <H_LCD_void_sendCommand+0x24>
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_LOW},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 26a:	10 e0       	ldi	r17, 0x00	; 0
 26c:	15 c0       	rjmp	.+42     	; 0x298 <H_LCD_void_sendCommand+0x5a>
		DIO_U8SetPinValue(&mode[i]);
 26e:	81 2f       	mov	r24, r17
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	2c 0f       	add	r18, r28
 280:	3d 1f       	adc	r19, r29
 282:	82 0f       	add	r24, r18
 284:	93 1f       	adc	r25, r19
 286:	0e 94 81 02 	call	0x502	; 0x502 <DIO_U8SetPinValue>
 28a:	8f e9       	ldi	r24, 0x9F	; 159
 28c:	9f e0       	ldi	r25, 0x0F	; 15
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <H_LCD_void_sendCommand+0x50>
 292:	00 c0       	rjmp	.+0      	; 0x294 <H_LCD_void_sendCommand+0x56>
 294:	00 00       	nop
	DIO_Config mode[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_LOW},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 296:	1f 5f       	subi	r17, 0xFF	; 255
 298:	12 30       	cpi	r17, 0x02	; 2
 29a:	48 f3       	brcs	.-46     	; 0x26e <H_LCD_void_sendCommand+0x30>
 29c:	8f e9       	ldi	r24, 0x9F	; 159
 29e:	9f e0       	ldi	r25, 0x0F	; 15
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <H_LCD_void_sendCommand+0x62>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <H_LCD_void_sendCommand+0x68>
 2a6:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */


	#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	H_LCD_void_latchByte(copy_u8command);
 2a8:	80 2f       	mov	r24, r16
 2aa:	0e 94 85 00 	call	0x10a	; 0x10a <H_LCD_void_latchByte>
	#else

	#endif

}
 2ae:	28 96       	adiw	r28, 0x08	; 8
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	f8 94       	cli
 2b4:	de bf       	out	0x3e, r29	; 62
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	cd bf       	out	0x3d, r28	; 61
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	08 95       	ret

000002c4 <H_LCD_void_Init>:
#include "LCD_config.h"


void functionSet();

void H_LCD_void_Init(void){
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
 2ce:	68 97       	sbiw	r28, 0x18	; 24
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
	DIO_Config lcdInit[] = {
 2da:	fe 01       	movw	r30, r28
 2dc:	31 96       	adiw	r30, 0x01	; 1
 2de:	88 e0       	ldi	r24, 0x08	; 8
 2e0:	df 01       	movw	r26, r30
 2e2:	1d 92       	st	X+, r1
 2e4:	8a 95       	dec	r24
 2e6:	e9 f7       	brne	.-6      	; 0x2e2 <H_LCD_void_Init+0x1e>
 2e8:	83 e0       	ldi	r24, 0x03	; 3
 2ea:	8a 83       	std	Y+2, r24	; 0x02
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	8b 83       	std	Y+3, r24	; 0x03
 2f0:	92 e0       	ldi	r25, 0x02	; 2
 2f2:	9e 83       	std	Y+6, r25	; 0x06
 2f4:	8f 83       	std	Y+7, r24	; 0x07
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 2f6:	10 e0       	ldi	r17, 0x00	; 0
 2f8:	0f c0       	rjmp	.+30     	; 0x318 <H_LCD_void_Init+0x54>
		DIO_U8SetPinDirection(&lcdInit[i]);
 2fa:	81 2f       	mov	r24, r17
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	2c 0f       	add	r18, r28
 30c:	3d 1f       	adc	r19, r29
 30e:	82 0f       	add	r24, r18
 310:	93 1f       	adc	r25, r19
 312:	0e 94 43 02 	call	0x486	; 0x486 <DIO_U8SetPinDirection>
	DIO_Config lcdInit[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 316:	1f 5f       	subi	r17, 0xFF	; 255
 318:	12 30       	cpi	r17, 0x02	; 2
 31a:	78 f3       	brcs	.-34     	; 0x2fa <H_LCD_void_Init+0x36>
		DIO_U8SetPinDirection(&lcdInit[i]);
	}

	#if (LCD_DATA_BITS_MODE == 4)
	DIO_Config dataPins[] = {
 31c:	fe 01       	movw	r30, r28
 31e:	39 96       	adiw	r30, 0x09	; 9
 320:	80 e1       	ldi	r24, 0x10	; 16
 322:	df 01       	movw	r26, r30
 324:	1d 92       	st	X+, r1
 326:	8a 95       	dec	r24
 328:	e9 f7       	brne	.-6      	; 0x324 <H_LCD_void_Init+0x60>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	89 87       	std	Y+9, r24	; 0x09
 32e:	8b 87       	std	Y+11, r24	; 0x0b
 330:	8d 87       	std	Y+13, r24	; 0x0d
 332:	8e 87       	std	Y+14, r24	; 0x0e
 334:	8f 87       	std	Y+15, r24	; 0x0f
 336:	89 8b       	std	Y+17, r24	; 0x11
 338:	92 e0       	ldi	r25, 0x02	; 2
 33a:	9a 8b       	std	Y+18, r25	; 0x12
 33c:	8b 8b       	std	Y+19, r24	; 0x13
 33e:	8d 8b       	std	Y+21, r24	; 0x15
 340:	94 e0       	ldi	r25, 0x04	; 4
 342:	9e 8b       	std	Y+22, r25	; 0x16
 344:	8f 8b       	std	Y+23, r24	; 0x17
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT},//PD7 data bin
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 4; i++) {
 346:	10 e0       	ldi	r17, 0x00	; 0
 348:	0f c0       	rjmp	.+30     	; 0x368 <H_LCD_void_Init+0xa4>
		DIO_U8SetPinDirection(&dataPins[i]);
 34a:	81 2f       	mov	r24, r17
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	29 e0       	ldi	r18, 0x09	; 9
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	2c 0f       	add	r18, r28
 35c:	3d 1f       	adc	r19, r29
 35e:	82 0f       	add	r24, r18
 360:	93 1f       	adc	r25, r19
 362:	0e 94 43 02 	call	0x486	; 0x486 <DIO_U8SetPinDirection>
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT},//PD7 data bin
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 4; i++) {
 366:	1f 5f       	subi	r17, 0xFF	; 255
 368:	14 30       	cpi	r17, 0x04	; 4
 36a:	78 f3       	brcs	.-34     	; 0x34a <H_LCD_void_Init+0x86>
		DIO_U8SetPinDirection(&dataPins[i]);
	}

	//Function Set Corner Case
	//functionSet();
	H_LCD_void_sendCommand(LCD_GO_TO_HOME);
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	0e 94 1f 01 	call	0x23e	; 0x23e <H_LCD_void_sendCommand>
 372:	8f e9       	ldi	r24, 0x9F	; 159
 374:	9f e0       	ldi	r25, 0x0F	; 15
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <H_LCD_void_Init+0xb2>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <H_LCD_void_Init+0xb8>
 37c:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 37e:	88 e2       	ldi	r24, 0x28	; 40
 380:	0e 94 1f 01 	call	0x23e	; 0x23e <H_LCD_void_sendCommand>
 384:	af e9       	ldi	r26, 0x9F	; 159
 386:	bf e0       	ldi	r27, 0x0F	; 15
 388:	11 97       	sbiw	r26, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <H_LCD_void_Init+0xc4>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <H_LCD_void_Init+0xca>
 38e:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x0F);
 390:	8f e0       	ldi	r24, 0x0F	; 15
 392:	0e 94 1f 01 	call	0x23e	; 0x23e <H_LCD_void_sendCommand>
 396:	8f e9       	ldi	r24, 0x9F	; 159
 398:	9f e0       	ldi	r25, 0x0F	; 15
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <H_LCD_void_Init+0xd6>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <H_LCD_void_Init+0xdc>
 3a0:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x01);
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	0e 94 1f 01 	call	0x23e	; 0x23e <H_LCD_void_sendCommand>
 3a8:	af e3       	ldi	r26, 0x3F	; 63
 3aa:	bf e1       	ldi	r27, 0x1F	; 31
 3ac:	11 97       	sbiw	r26, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <H_LCD_void_Init+0xe8>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <H_LCD_void_Init+0xee>
 3b2:	00 00       	nop
	_delay_ms(2);
	H_LCD_void_sendCommand(0x06);
 3b4:	86 e0       	ldi	r24, 0x06	; 6
 3b6:	0e 94 1f 01 	call	0x23e	; 0x23e <H_LCD_void_sendCommand>

	#elif (LCD_DATA_BITS_MODE == 8)

	#endif
}
 3ba:	68 96       	adiw	r28, 0x18	; 24
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	08 95       	ret

000003ce <H_LCD_void_sendData>:
	#endif

}

void H_LCD_void_sendData(u8 copy_u8data )
{
 3ce:	0f 93       	push	r16
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	28 97       	sbiw	r28, 0x08	; 8
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	08 2f       	mov	r16, r24
	DIO_Config mode[] = {
 3e8:	88 e0       	ldi	r24, 0x08	; 8
 3ea:	e8 e6       	ldi	r30, 0x68	; 104
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	de 01       	movw	r26, r28
 3f0:	11 96       	adiw	r26, 0x01	; 1
 3f2:	01 90       	ld	r0, Z+
 3f4:	0d 92       	st	X+, r0
 3f6:	8a 95       	dec	r24
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <H_LCD_void_sendData+0x24>
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_HIGH},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 3fa:	10 e0       	ldi	r17, 0x00	; 0
 3fc:	15 c0       	rjmp	.+42     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		DIO_U8SetPinValue(&mode[i]);
 3fe:	81 2f       	mov	r24, r17
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	21 e0       	ldi	r18, 0x01	; 1
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	2c 0f       	add	r18, r28
 410:	3d 1f       	adc	r19, r29
 412:	82 0f       	add	r24, r18
 414:	93 1f       	adc	r25, r19
 416:	0e 94 81 02 	call	0x502	; 0x502 <DIO_U8SetPinValue>
 41a:	8f e9       	ldi	r24, 0x9F	; 159
 41c:	9f e0       	ldi	r25, 0x0F	; 15
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 424:	00 00       	nop
	DIO_Config mode[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_HIGH},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 426:	1f 5f       	subi	r17, 0xFF	; 255
 428:	12 30       	cpi	r17, 0x02	; 2
 42a:	48 f3       	brcs	.-46     	; 0x3fe <H_LCD_void_sendData+0x30>
 42c:	8f e9       	ldi	r24, 0x9F	; 159
 42e:	9f e0       	ldi	r25, 0x0F	; 15
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 436:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */


	#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	H_LCD_void_latchByte(copy_u8data);
 438:	80 2f       	mov	r24, r16
 43a:	0e 94 85 00 	call	0x10a	; 0x10a <H_LCD_void_latchByte>
	#else

	#endif
}
 43e:	28 96       	adiw	r28, 0x08	; 8
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	08 95       	ret

00000454 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 454:	24 b1       	in	r18, 0x04	; 4
 456:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 458:	00 24       	eor	r0, r0
 45a:	22 0f       	add	r18, r18
 45c:	33 1f       	adc	r19, r19
 45e:	00 1c       	adc	r0, r0
 460:	22 0f       	add	r18, r18
 462:	33 1f       	adc	r19, r19
 464:	00 1c       	adc	r0, r0
 466:	23 2f       	mov	r18, r19
 468:	30 2d       	mov	r19, r0
 46a:	85 b1       	in	r24, 0x05	; 5
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 476:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <ADC_callBack>
 47a:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <ADC_callBack+0x1>
 47e:	82 2b       	or	r24, r18
 480:	93 2b       	or	r25, r19
 482:	09 95       	icall
 484:	08 95       	ret

00000486 <DIO_U8SetPinDirection>:
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 486:	dc 01       	movw	r26, r24
 488:	ec 91       	ld	r30, X
 48a:	e4 30       	cpi	r30, 0x04	; 4
 48c:	a0 f5       	brcc	.+104    	; 0x4f6 <DIO_U8SetPinDirection+0x70>
 48e:	11 96       	adiw	r26, 0x01	; 1
 490:	2c 91       	ld	r18, X
 492:	11 97       	sbiw	r26, 0x01	; 1
 494:	28 30       	cpi	r18, 0x08	; 8
 496:	88 f5       	brcc	.+98     	; 0x4fa <DIO_U8SetPinDirection+0x74>
 498:	12 96       	adiw	r26, 0x02	; 2
 49a:	8c 91       	ld	r24, X
 49c:	81 11       	cpse	r24, r1
 49e:	15 c0       	rjmp	.+42     	; 0x4ca <DIO_U8SetPinDirection+0x44>
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	e2 58       	subi	r30, 0x82	; 130
 4a8:	ff 4f       	sbci	r31, 0xFF	; 255
 4aa:	01 90       	ld	r0, Z+
 4ac:	f0 81       	ld	r31, Z
 4ae:	e0 2d       	mov	r30, r0
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_U8SetPinDirection+0x34>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	2a 95       	dec	r18
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_U8SetPinDirection+0x30>
 4be:	80 95       	com	r24
 4c0:	90 81       	ld	r25, Z
 4c2:	89 23       	and	r24, r25
 4c4:	80 83       	st	Z, r24
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	08 95       	ret
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	c1 f4       	brne	.+48     	; 0x4fe <DIO_U8SetPinDirection+0x78>
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	e2 58       	subi	r30, 0x82	; 130
 4d6:	ff 4f       	sbci	r31, 0xFF	; 255
 4d8:	01 90       	ld	r0, Z+
 4da:	f0 81       	ld	r31, Z
 4dc:	e0 2d       	mov	r30, r0
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_U8SetPinDirection+0x62>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	2a 95       	dec	r18
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_U8SetPinDirection+0x5e>
 4ec:	90 81       	ld	r25, Z
 4ee:	89 2b       	or	r24, r25
 4f0:	80 83       	st	Z, r24
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	08 95       	ret
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	08 95       	ret
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	08 95       	ret

00000502 <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(const DIO_Config* config) {
    if (config != NULL) {
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	c1 f1       	breq	.+112    	; 0x576 <DIO_U8SetPinValue+0x74>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 506:	dc 01       	movw	r26, r24
 508:	ec 91       	ld	r30, X
 50a:	e4 30       	cpi	r30, 0x04	; 4
 50c:	b0 f5       	brcc	.+108    	; 0x57a <DIO_U8SetPinValue+0x78>
 50e:	11 96       	adiw	r26, 0x01	; 1
 510:	2c 91       	ld	r18, X
 512:	11 97       	sbiw	r26, 0x01	; 1
 514:	28 30       	cpi	r18, 0x08	; 8
 516:	98 f5       	brcc	.+102    	; 0x57e <DIO_U8SetPinValue+0x7c>
            if (config->value == DIO_PIN_HIGH) {
 518:	13 96       	adiw	r26, 0x03	; 3
 51a:	8c 91       	ld	r24, X
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	a1 f4       	brne	.+40     	; 0x548 <DIO_U8SetPinValue+0x46>
                SET_BIT(*writeRegisters[config->port], config->pin);
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	ee 0f       	add	r30, r30
 524:	ff 1f       	adc	r31, r31
 526:	ea 58       	subi	r30, 0x8A	; 138
 528:	ff 4f       	sbci	r31, 0xFF	; 255
 52a:	01 90       	ld	r0, Z+
 52c:	f0 81       	ld	r31, Z
 52e:	e0 2d       	mov	r30, r0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_U8SetPinValue+0x38>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	2a 95       	dec	r18
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_U8SetPinValue+0x34>
 53e:	90 81       	ld	r25, Z
 540:	89 2b       	or	r24, r25
 542:	80 83       	st	Z, r24
                return NO_ERROR;
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	08 95       	ret
            } else if (config->value == DIO_PIN_LOW) {
 548:	81 11       	cpse	r24, r1
 54a:	1b c0       	rjmp	.+54     	; 0x582 <DIO_U8SetPinValue+0x80>
                CLR_BIT(*writeRegisters[config->port], config->pin);
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	ee 0f       	add	r30, r30
 550:	ff 1f       	adc	r31, r31
 552:	ea 58       	subi	r30, 0x8A	; 138
 554:	ff 4f       	sbci	r31, 0xFF	; 255
 556:	01 90       	ld	r0, Z+
 558:	f0 81       	ld	r31, Z
 55a:	e0 2d       	mov	r30, r0
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_U8SetPinValue+0x64>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	2a 95       	dec	r18
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_U8SetPinValue+0x60>
 56a:	80 95       	com	r24
 56c:	90 81       	ld	r25, Z
 56e:	89 23       	and	r24, r25
 570:	80 83       	st	Z, r24
                return NO_ERROR;
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	08 95       	ret
            }
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	08 95       	ret
                return NO_ERROR;
            } else {
                return ERROR;
            }
        } else {
            return ERROR;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	08 95       	ret
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	08 95       	ret
                return NO_ERROR;
            } else if (config->value == DIO_PIN_LOW) {
                CLR_BIT(*writeRegisters[config->port], config->pin);
                return NO_ERROR;
            } else {
                return ERROR;
 582:	81 e0       	ldi	r24, 0x01	; 1
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 584:	08 95       	ret

00000586 <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 586:	1f 92       	push	r1
 588:	0f 92       	push	r0
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	0f 92       	push	r0
 58e:	11 24       	eor	r1, r1
 590:	2f 93       	push	r18
 592:	3f 93       	push	r19
 594:	4f 93       	push	r20
 596:	5f 93       	push	r21
 598:	6f 93       	push	r22
 59a:	7f 93       	push	r23
 59c:	8f 93       	push	r24
 59e:	9f 93       	push	r25
 5a0:	af 93       	push	r26
 5a2:	bf 93       	push	r27
 5a4:	ef 93       	push	r30
 5a6:	ff 93       	push	r31
	if(Action[0]!= NULL){
 5a8:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <Action>
 5ac:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <Action+0x1>
 5b0:	30 97       	sbiw	r30, 0x00	; 0
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <__vector_1+0x30>
		Action[0]();
 5b4:	09 95       	icall
	}
}
 5b6:	ff 91       	pop	r31
 5b8:	ef 91       	pop	r30
 5ba:	bf 91       	pop	r27
 5bc:	af 91       	pop	r26
 5be:	9f 91       	pop	r25
 5c0:	8f 91       	pop	r24
 5c2:	7f 91       	pop	r23
 5c4:	6f 91       	pop	r22
 5c6:	5f 91       	pop	r21
 5c8:	4f 91       	pop	r20
 5ca:	3f 91       	pop	r19
 5cc:	2f 91       	pop	r18
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	2f 93       	push	r18
 5e4:	3f 93       	push	r19
 5e6:	4f 93       	push	r20
 5e8:	5f 93       	push	r21
 5ea:	6f 93       	push	r22
 5ec:	7f 93       	push	r23
 5ee:	8f 93       	push	r24
 5f0:	9f 93       	push	r25
 5f2:	af 93       	push	r26
 5f4:	bf 93       	push	r27
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
	if(Action[1]!= NULL){
 5fa:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <Action+0x2>
 5fe:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <Action+0x3>
 602:	30 97       	sbiw	r30, 0x00	; 0
 604:	09 f0       	breq	.+2      	; 0x608 <__vector_2+0x30>
		Action[1]();
 606:	09 95       	icall
	}
}
 608:	ff 91       	pop	r31
 60a:	ef 91       	pop	r30
 60c:	bf 91       	pop	r27
 60e:	af 91       	pop	r26
 610:	9f 91       	pop	r25
 612:	8f 91       	pop	r24
 614:	7f 91       	pop	r23
 616:	6f 91       	pop	r22
 618:	5f 91       	pop	r21
 61a:	4f 91       	pop	r20
 61c:	3f 91       	pop	r19
 61e:	2f 91       	pop	r18
 620:	0f 90       	pop	r0
 622:	0f be       	out	0x3f, r0	; 63
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 62a:	1f 92       	push	r1
 62c:	0f 92       	push	r0
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	0f 92       	push	r0
 632:	11 24       	eor	r1, r1
 634:	2f 93       	push	r18
 636:	3f 93       	push	r19
 638:	4f 93       	push	r20
 63a:	5f 93       	push	r21
 63c:	6f 93       	push	r22
 63e:	7f 93       	push	r23
 640:	8f 93       	push	r24
 642:	9f 93       	push	r25
 644:	af 93       	push	r26
 646:	bf 93       	push	r27
 648:	ef 93       	push	r30
 64a:	ff 93       	push	r31
	if(Action[2]!= NULL){
 64c:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <Action+0x4>
 650:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <Action+0x5>
 654:	30 97       	sbiw	r30, 0x00	; 0
 656:	09 f0       	breq	.+2      	; 0x65a <__vector_3+0x30>
		Action[2]();
 658:	09 95       	icall
	}
}
 65a:	ff 91       	pop	r31
 65c:	ef 91       	pop	r30
 65e:	bf 91       	pop	r27
 660:	af 91       	pop	r26
 662:	9f 91       	pop	r25
 664:	8f 91       	pop	r24
 666:	7f 91       	pop	r23
 668:	6f 91       	pop	r22
 66a:	5f 91       	pop	r21
 66c:	4f 91       	pop	r20
 66e:	3f 91       	pop	r19
 670:	2f 91       	pop	r18
 672:	0f 90       	pop	r0
 674:	0f be       	out	0x3f, r0	; 63
 676:	0f 90       	pop	r0
 678:	1f 90       	pop	r1
 67a:	18 95       	reti

0000067c <GIE_enable>:
#include "GIE_interface.h"


// Enable Global Interrupts
void GIE_enable(){
    __asm__ __volatile__ ("sei" ::);
 67c:	78 94       	sei
 67e:	08 95       	ret

00000680 <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 680:	1f 92       	push	r1
 682:	0f 92       	push	r0
 684:	0f b6       	in	r0, 0x3f	; 63
 686:	0f 92       	push	r0
 688:	11 24       	eor	r1, r1
 68a:	2f 93       	push	r18
 68c:	3f 93       	push	r19
 68e:	4f 93       	push	r20
 690:	5f 93       	push	r21
 692:	6f 93       	push	r22
 694:	7f 93       	push	r23
 696:	8f 93       	push	r24
 698:	9f 93       	push	r25
 69a:	af 93       	push	r26
 69c:	bf 93       	push	r27
 69e:	ef 93       	push	r30
 6a0:	ff 93       	push	r31
	if(Action_Spi != NULL){
 6a2:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <Action_Spi>
 6a6:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <Action_Spi+0x1>
 6aa:	30 97       	sbiw	r30, 0x00	; 0
 6ac:	11 f0       	breq	.+4      	; 0x6b2 <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 6ae:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 6b0:	09 95       	icall
	}
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	bf 91       	pop	r27
 6b8:	af 91       	pop	r26
 6ba:	9f 91       	pop	r25
 6bc:	8f 91       	pop	r24
 6be:	7f 91       	pop	r23
 6c0:	6f 91       	pop	r22
 6c2:	5f 91       	pop	r21
 6c4:	4f 91       	pop	r20
 6c6:	3f 91       	pop	r19
 6c8:	2f 91       	pop	r18
 6ca:	0f 90       	pop	r0
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	0f 90       	pop	r0
 6d0:	1f 90       	pop	r1
 6d2:	18 95       	reti

000006d4 <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 6d4:	1f 92       	push	r1
 6d6:	0f 92       	push	r0
 6d8:	0f b6       	in	r0, 0x3f	; 63
 6da:	0f 92       	push	r0
 6dc:	11 24       	eor	r1, r1
 6de:	2f 93       	push	r18
 6e0:	3f 93       	push	r19
 6e2:	4f 93       	push	r20
 6e4:	5f 93       	push	r21
 6e6:	6f 93       	push	r22
 6e8:	7f 93       	push	r23
 6ea:	8f 93       	push	r24
 6ec:	9f 93       	push	r25
 6ee:	af 93       	push	r26
 6f0:	bf 93       	push	r27
 6f2:	ef 93       	push	r30
 6f4:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 6f6:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <Action_Timer>
 6fa:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <Action_Timer+0x1>
 6fe:	89 2b       	or	r24, r25
 700:	89 f1       	breq	.+98     	; 0x764 <__vector_11+0x90>
		counter++;
 702:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <counter.1685>
 706:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <counter.1685+0x1>
 70a:	a0 91 96 00 	lds	r26, 0x0096	; 0x800096 <counter.1685+0x2>
 70e:	b0 91 97 00 	lds	r27, 0x0097	; 0x800097 <counter.1685+0x3>
 712:	01 96       	adiw	r24, 0x01	; 1
 714:	a1 1d       	adc	r26, r1
 716:	b1 1d       	adc	r27, r1
 718:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <counter.1685>
 71c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <counter.1685+0x1>
 720:	a0 93 96 00 	sts	0x0096, r26	; 0x800096 <counter.1685+0x2>
 724:	b0 93 97 00 	sts	0x0097, r27	; 0x800097 <counter.1685+0x3>
		if(counter == numOverflows){
 728:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <numOverflows>
 72c:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <numOverflows+0x1>
 730:	60 91 a2 00 	lds	r22, 0x00A2	; 0x8000a2 <numOverflows+0x2>
 734:	70 91 a3 00 	lds	r23, 0x00A3	; 0x8000a3 <numOverflows+0x3>
 738:	84 17       	cp	r24, r20
 73a:	95 07       	cpc	r25, r21
 73c:	a6 07       	cpc	r26, r22
 73e:	b7 07       	cpc	r27, r23
 740:	89 f4       	brne	.+34     	; 0x764 <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 742:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <remainingCounts>
 746:	81 95       	neg	r24
 748:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 74a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <counter.1685>
 74e:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <counter.1685+0x1>
 752:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <counter.1685+0x2>
 756:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <counter.1685+0x3>
			Action_Timer[0]();
 75a:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <Action_Timer>
 75e:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <Action_Timer+0x1>
 762:	09 95       	icall
		}
		
	}
}
 764:	ff 91       	pop	r31
 766:	ef 91       	pop	r30
 768:	bf 91       	pop	r27
 76a:	af 91       	pop	r26
 76c:	9f 91       	pop	r25
 76e:	8f 91       	pop	r24
 770:	7f 91       	pop	r23
 772:	6f 91       	pop	r22
 774:	5f 91       	pop	r21
 776:	4f 91       	pop	r20
 778:	3f 91       	pop	r19
 77a:	2f 91       	pop	r18
 77c:	0f 90       	pop	r0
 77e:	0f be       	out	0x3f, r0	; 63
 780:	0f 90       	pop	r0
 782:	1f 90       	pop	r1
 784:	18 95       	reti

00000786 <__vector_10>:

ISR(TIMER0_COMP_vect){
 786:	1f 92       	push	r1
 788:	0f 92       	push	r0
 78a:	0f b6       	in	r0, 0x3f	; 63
 78c:	0f 92       	push	r0
 78e:	11 24       	eor	r1, r1
 790:	2f 93       	push	r18
 792:	3f 93       	push	r19
 794:	4f 93       	push	r20
 796:	5f 93       	push	r21
 798:	6f 93       	push	r22
 79a:	7f 93       	push	r23
 79c:	8f 93       	push	r24
 79e:	9f 93       	push	r25
 7a0:	af 93       	push	r26
 7a2:	bf 93       	push	r27
 7a4:	ef 93       	push	r30
 7a6:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 7a8:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <Action_Timer+0x2>
 7ac:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <Action_Timer+0x3>
 7b0:	30 97       	sbiw	r30, 0x00	; 0
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <__vector_10+0x30>
		Action_Timer[1]();
 7b4:	09 95       	icall
		
	}
}
 7b6:	ff 91       	pop	r31
 7b8:	ef 91       	pop	r30
 7ba:	bf 91       	pop	r27
 7bc:	af 91       	pop	r26
 7be:	9f 91       	pop	r25
 7c0:	8f 91       	pop	r24
 7c2:	7f 91       	pop	r23
 7c4:	6f 91       	pop	r22
 7c6:	5f 91       	pop	r21
 7c8:	4f 91       	pop	r20
 7ca:	3f 91       	pop	r19
 7cc:	2f 91       	pop	r18
 7ce:	0f 90       	pop	r0
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	0f 90       	pop	r0
 7d4:	1f 90       	pop	r1
 7d6:	18 95       	reti

000007d8 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 7d8:	1f 92       	push	r1
 7da:	0f 92       	push	r0
 7dc:	0f b6       	in	r0, 0x3f	; 63
 7de:	0f 92       	push	r0
 7e0:	11 24       	eor	r1, r1
 7e2:	2f 93       	push	r18
 7e4:	3f 93       	push	r19
 7e6:	4f 93       	push	r20
 7e8:	5f 93       	push	r21
 7ea:	6f 93       	push	r22
 7ec:	7f 93       	push	r23
 7ee:	8f 93       	push	r24
 7f0:	9f 93       	push	r25
 7f2:	af 93       	push	r26
 7f4:	bf 93       	push	r27
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
 7fa:	ef 93       	push	r30
 7fc:	ff 93       	push	r31
	Action_Timer[0]();
 7fe:	c8 ea       	ldi	r28, 0xA8	; 168
 800:	d0 e0       	ldi	r29, 0x00	; 0
 802:	e8 81       	ld	r30, Y
 804:	f9 81       	ldd	r31, Y+1	; 0x01
 806:	09 95       	icall
	numOverflows++;
 808:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <numOverflows>
 80c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <numOverflows+0x1>
 810:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <numOverflows+0x2>
 814:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <numOverflows+0x3>
 818:	01 96       	adiw	r24, 0x01	; 1
 81a:	a1 1d       	adc	r26, r1
 81c:	b1 1d       	adc	r27, r1
 81e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <numOverflows>
 822:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <numOverflows+0x1>
 826:	a0 93 b2 00 	sts	0x00B2, r26	; 0x8000b2 <numOverflows+0x2>
 82a:	b0 93 b3 00 	sts	0x00B3, r27	; 0x8000b3 <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 82e:	e8 81       	ld	r30, Y
 830:	f9 81       	ldd	r31, Y+1	; 0x01
 832:	30 97       	sbiw	r30, 0x00	; 0
 834:	49 f1       	breq	.+82     	; 0x888 <__stack+0x29>
		counter++;
 836:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <counter.1744>
 83a:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <counter.1744+0x1>
 83e:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <counter.1744+0x2>
 842:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <counter.1744+0x3>
 846:	01 96       	adiw	r24, 0x01	; 1
 848:	a1 1d       	adc	r26, r1
 84a:	b1 1d       	adc	r27, r1
 84c:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <counter.1744>
 850:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <counter.1744+0x1>
 854:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <counter.1744+0x2>
 858:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <counter.1744+0x3>
		if(counter == req_numOverflows){
 85c:	40 91 b4 00 	lds	r20, 0x00B4	; 0x8000b4 <req_numOverflows>
 860:	50 91 b5 00 	lds	r21, 0x00B5	; 0x8000b5 <req_numOverflows+0x1>
 864:	60 91 b6 00 	lds	r22, 0x00B6	; 0x8000b6 <req_numOverflows+0x2>
 868:	70 91 b7 00 	lds	r23, 0x00B7	; 0x8000b7 <req_numOverflows+0x3>
 86c:	84 17       	cp	r24, r20
 86e:	95 07       	cpc	r25, r21
 870:	a6 07       	cpc	r26, r22
 872:	b7 07       	cpc	r27, r23
 874:	49 f4       	brne	.+18     	; 0x888 <__stack+0x29>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 876:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <counter.1744>
 87a:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <counter.1744+0x1>
 87e:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <counter.1744+0x2>
 882:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <counter.1744+0x3>
			Action_Timer[0]();
 886:	09 95       	icall
		}
		
	}
}
 888:	ff 91       	pop	r31
 88a:	ef 91       	pop	r30
 88c:	df 91       	pop	r29
 88e:	cf 91       	pop	r28
 890:	bf 91       	pop	r27
 892:	af 91       	pop	r26
 894:	9f 91       	pop	r25
 896:	8f 91       	pop	r24
 898:	7f 91       	pop	r23
 89a:	6f 91       	pop	r22
 89c:	5f 91       	pop	r21
 89e:	4f 91       	pop	r20
 8a0:	3f 91       	pop	r19
 8a2:	2f 91       	pop	r18
 8a4:	0f 90       	pop	r0
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	0f 90       	pop	r0
 8aa:	1f 90       	pop	r1
 8ac:	18 95       	reti

000008ae <__vector_7>:

ISR(TIMER1_COMPA_vect){
 8ae:	1f 92       	push	r1
 8b0:	0f 92       	push	r0
 8b2:	0f b6       	in	r0, 0x3f	; 63
 8b4:	0f 92       	push	r0
 8b6:	11 24       	eor	r1, r1
 8b8:	2f 93       	push	r18
 8ba:	3f 93       	push	r19
 8bc:	4f 93       	push	r20
 8be:	5f 93       	push	r21
 8c0:	6f 93       	push	r22
 8c2:	7f 93       	push	r23
 8c4:	8f 93       	push	r24
 8c6:	9f 93       	push	r25
 8c8:	af 93       	push	r26
 8ca:	bf 93       	push	r27
 8cc:	ef 93       	push	r30
 8ce:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 8d0:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <Action_Timer+0x2>
 8d4:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <Action_Timer+0x3>
 8d8:	30 97       	sbiw	r30, 0x00	; 0
 8da:	09 f0       	breq	.+2      	; 0x8de <__vector_7+0x30>
		Action_Timer[1]();
 8dc:	09 95       	icall
	}
}
 8de:	ff 91       	pop	r31
 8e0:	ef 91       	pop	r30
 8e2:	bf 91       	pop	r27
 8e4:	af 91       	pop	r26
 8e6:	9f 91       	pop	r25
 8e8:	8f 91       	pop	r24
 8ea:	7f 91       	pop	r23
 8ec:	6f 91       	pop	r22
 8ee:	5f 91       	pop	r21
 8f0:	4f 91       	pop	r20
 8f2:	3f 91       	pop	r19
 8f4:	2f 91       	pop	r18
 8f6:	0f 90       	pop	r0
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	0f 90       	pop	r0
 8fc:	1f 90       	pop	r1
 8fe:	18 95       	reti

00000900 <__vector_6>:


ISR(TIMER1_CAPT_vect){
 900:	1f 92       	push	r1
 902:	0f 92       	push	r0
 904:	0f b6       	in	r0, 0x3f	; 63
 906:	0f 92       	push	r0
 908:	11 24       	eor	r1, r1
 90a:	2f 93       	push	r18
 90c:	3f 93       	push	r19
 90e:	4f 93       	push	r20
 910:	5f 93       	push	r21
 912:	6f 93       	push	r22
 914:	7f 93       	push	r23
 916:	8f 93       	push	r24
 918:	9f 93       	push	r25
 91a:	af 93       	push	r26
 91c:	bf 93       	push	r27
 91e:	ef 93       	push	r30
 920:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 922:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <Action_Timer+0x6>
 926:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <Action_Timer+0x7>
 92a:	30 97       	sbiw	r30, 0x00	; 0
 92c:	09 f0       	breq	.+2      	; 0x930 <__vector_6+0x30>
			Action_Timer[3]();
 92e:	09 95       	icall
			
			
		}
 930:	ff 91       	pop	r31
 932:	ef 91       	pop	r30
 934:	bf 91       	pop	r27
 936:	af 91       	pop	r26
 938:	9f 91       	pop	r25
 93a:	8f 91       	pop	r24
 93c:	7f 91       	pop	r23
 93e:	6f 91       	pop	r22
 940:	5f 91       	pop	r21
 942:	4f 91       	pop	r20
 944:	3f 91       	pop	r19
 946:	2f 91       	pop	r18
 948:	0f 90       	pop	r0
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	0f 90       	pop	r0
 94e:	1f 90       	pop	r1
 950:	18 95       	reti

00000952 <USART_Init>:
		Str[i] = MUART_voidRecieveByteSynch();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
}
 952:	82 e0       	ldi	r24, 0x02	; 2
 954:	8b b9       	out	0x0b, r24	; 11
 956:	88 e1       	ldi	r24, 0x18	; 24
 958:	8a b9       	out	0x0a, r24	; 10
 95a:	86 e8       	ldi	r24, 0x86	; 134
 95c:	80 bd       	out	0x20, r24	; 32
 95e:	10 bc       	out	0x20, r1	; 32
 960:	80 e1       	ldi	r24, 0x10	; 16
 962:	89 b9       	out	0x09, r24	; 9
 964:	08 95       	ret

00000966 <UART_sendByte>:
 966:	5d 9b       	sbis	0x0b, 5	; 11
 968:	fe cf       	rjmp	.-4      	; 0x966 <UART_sendByte>
 96a:	8c b9       	out	0x0c, r24	; 12
 96c:	08 95       	ret

0000096e <UART_sendString>:
 96e:	0f 93       	push	r16
 970:	1f 93       	push	r17
 972:	cf 93       	push	r28
 974:	8c 01       	movw	r16, r24
 976:	c0 e0       	ldi	r28, 0x00	; 0
 978:	03 c0       	rjmp	.+6      	; 0x980 <UART_sendString+0x12>
 97a:	0e 94 b3 04 	call	0x966	; 0x966 <UART_sendByte>
 97e:	cf 5f       	subi	r28, 0xFF	; 255
 980:	f8 01       	movw	r30, r16
 982:	ec 0f       	add	r30, r28
 984:	f1 1d       	adc	r31, r1
 986:	80 81       	ld	r24, Z
 988:	81 11       	cpse	r24, r1
 98a:	f7 cf       	rjmp	.-18     	; 0x97a <UART_sendString+0xc>
 98c:	cf 91       	pop	r28
 98e:	1f 91       	pop	r17
 990:	0f 91       	pop	r16
 992:	08 95       	ret

00000994 <UART_receiveByteAsynchCallBack>:

void UART_receiveByteAsynchCallBack(void (*ptrfn)(u8)) {
	// Enable UART receiver interrupt
	UCSRB |= (1 << RXCIE);
 994:	2a b1       	in	r18, 0x0a	; 10
 996:	20 68       	ori	r18, 0x80	; 128
 998:	2a b9       	out	0x0a, r18	; 10
	//set callback
	Action_Uart[0] = ptrfn;
 99a:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <Action_Uart+0x1>
 99e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <Action_Uart>
 9a2:	08 95       	ret

000009a4 <__vector_13>:
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 9a4:	1f 92       	push	r1
 9a6:	0f 92       	push	r0
 9a8:	0f b6       	in	r0, 0x3f	; 63
 9aa:	0f 92       	push	r0
 9ac:	11 24       	eor	r1, r1
 9ae:	2f 93       	push	r18
 9b0:	3f 93       	push	r19
 9b2:	4f 93       	push	r20
 9b4:	5f 93       	push	r21
 9b6:	6f 93       	push	r22
 9b8:	7f 93       	push	r23
 9ba:	8f 93       	push	r24
 9bc:	9f 93       	push	r25
 9be:	af 93       	push	r26
 9c0:	bf 93       	push	r27
 9c2:	ef 93       	push	r30
 9c4:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 9c6:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 9c8:	e0 91 b8 00 	lds	r30, 0x00B8	; 0x8000b8 <Action_Uart>
 9cc:	f0 91 b9 00 	lds	r31, 0x00B9	; 0x8000b9 <Action_Uart+0x1>
 9d0:	30 97       	sbiw	r30, 0x00	; 0
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <__vector_13+0x32>
		Action_Uart[0](receivedData);
 9d4:	09 95       	icall
	}
 9d6:	ff 91       	pop	r31
 9d8:	ef 91       	pop	r30
 9da:	bf 91       	pop	r27
 9dc:	af 91       	pop	r26
 9de:	9f 91       	pop	r25
 9e0:	8f 91       	pop	r24
 9e2:	7f 91       	pop	r23
 9e4:	6f 91       	pop	r22
 9e6:	5f 91       	pop	r21
 9e8:	4f 91       	pop	r20
 9ea:	3f 91       	pop	r19
 9ec:	2f 91       	pop	r18
 9ee:	0f 90       	pop	r0
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	0f 90       	pop	r0
 9f4:	1f 90       	pop	r1
 9f6:	18 95       	reti

000009f8 <_exit>:
 9f8:	f8 94       	cli

000009fa <__stop_program>:
 9fa:	ff cf       	rjmp	.-2      	; 0x9fa <__stop_program>
