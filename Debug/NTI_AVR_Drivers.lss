
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000428  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800070  00800070  000004cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001349  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d0  00000000  00000000  000019c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009be  00000000  00000000  00002391  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00002d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000094b  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ba  00000000  00000000  0000399f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004259  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_1>
   8:	0c 94 be 01 	jmp	0x37c	; 0x37c <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_18>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 82 00 	call	0x104	; 0x104 <main>
  8a:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <testCallback>:
	DIO_U8TogglePin(&pinTest);
}

u16 adcValue = 0;
void getADCValue(u16 value){
	adcValue = value;
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <testCallback+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <testCallback+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	19 82       	std	Y+1, r1	; 0x01
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	8a 83       	std	Y+2, r24	; 0x02
  a4:	ce 01       	movw	r24, r28
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	0e 94 29 01 	call	0x252	; 0x252 <DIO_U8TogglePin>
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
  b0:	0f 90       	pop	r0
  b2:	0f 90       	pop	r0
  b4:	df 91       	pop	r29
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <init>:
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <init+0x8>
  c2:	00 d0       	rcall	.+0      	; 0xc4 <init+0xa>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	1b 82       	std	Y+3, r1	; 0x03
  ce:	8a 83       	std	Y+2, r24	; 0x02
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	1c 83       	std	Y+4, r17	; 0x04
  d4:	ce 01       	movw	r24, r28
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_U8SetPinDirection>
  dc:	ce 01       	movw	r24, r28
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_U8SetPinValue>
  e4:	19 82       	std	Y+1, r1	; 0x01
  e6:	1b 83       	std	Y+3, r17	; 0x03
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	8a 83       	std	Y+2, r24	; 0x02
  ec:	ce 01       	movw	r24, r28
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_U8SetPinDirection>
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	08 95       	ret

00000104 <main>:
}

int main(void) {
	init();
 104:	0e 94 5d 00 	call	0xba	; 0xba <init>
	// Enable global interrupts
	GIE_enable();
 108:	0e 94 10 02 	call	0x420	; 0x420 <GIE_enable>
	EXTI_enable(EXTI_INT1_ID,FALLING_EDGE);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	87 e0       	ldi	r24, 0x07	; 7
 110:	0e 94 4d 01 	call	0x29a	; 0x29a <EXTI_enable>
	EXTI_setCallBack(EXTI_INT1_ID,testCallback);
 114:	69 e4       	ldi	r22, 0x49	; 73
 116:	70 e0       	ldi	r23, 0x00	; 0
 118:	87 e0       	ldi	r24, 0x07	; 7
 11a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <EXTI_setCallBack>
 11e:	ff cf       	rjmp	.-2      	; 0x11e <main+0x1a>

00000120 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 120:	24 b1       	in	r18, 0x04	; 4
 122:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 124:	00 24       	eor	r0, r0
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	00 1c       	adc	r0, r0
 12c:	22 0f       	add	r18, r18
 12e:	33 1f       	adc	r19, r19
 130:	00 1c       	adc	r0, r0
 132:	23 2f       	mov	r18, r19
 134:	30 2d       	mov	r19, r0
 136:	85 b1       	in	r24, 0x05	; 5
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 142:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 146:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 14a:	82 2b       	or	r24, r18
 14c:	93 2b       	or	r25, r19
 14e:	09 95       	icall
 150:	08 95       	ret

00000152 <DIO_U8SetPinDirection>:
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 152:	dc 01       	movw	r26, r24
 154:	ec 91       	ld	r30, X
 156:	e4 30       	cpi	r30, 0x04	; 4
 158:	a0 f5       	brcc	.+104    	; 0x1c2 <DIO_U8SetPinDirection+0x70>
 15a:	11 96       	adiw	r26, 0x01	; 1
 15c:	2c 91       	ld	r18, X
 15e:	11 97       	sbiw	r26, 0x01	; 1
 160:	28 30       	cpi	r18, 0x08	; 8
 162:	88 f5       	brcc	.+98     	; 0x1c6 <DIO_U8SetPinDirection+0x74>
 164:	12 96       	adiw	r26, 0x02	; 2
 166:	8c 91       	ld	r24, X
 168:	81 11       	cpse	r24, r1
 16a:	15 c0       	rjmp	.+42     	; 0x196 <DIO_U8SetPinDirection+0x44>
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e8 59       	subi	r30, 0x98	; 152
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	01 90       	ld	r0, Z+
 178:	f0 81       	ld	r31, Z
 17a:	e0 2d       	mov	r30, r0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_U8SetPinDirection+0x34>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	2a 95       	dec	r18
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_U8SetPinDirection+0x30>
 18a:	80 95       	com	r24
 18c:	90 81       	ld	r25, Z
 18e:	89 23       	and	r24, r25
 190:	80 83       	st	Z, r24
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	c1 f4       	brne	.+48     	; 0x1ca <DIO_U8SetPinDirection+0x78>
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	e8 59       	subi	r30, 0x98	; 152
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	01 90       	ld	r0, Z+
 1a6:	f0 81       	ld	r31, Z
 1a8:	e0 2d       	mov	r30, r0
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_U8SetPinDirection+0x62>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	2a 95       	dec	r18
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_U8SetPinDirection+0x5e>
 1b8:	90 81       	ld	r25, Z
 1ba:	89 2b       	or	r24, r25
 1bc:	80 83       	st	Z, r24
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	08 95       	ret
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret

000001ce <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(const DIO_Config* config) {
    if (config != NULL) {
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	c1 f1       	breq	.+112    	; 0x242 <DIO_U8SetPinValue+0x74>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 1d2:	dc 01       	movw	r26, r24
 1d4:	ec 91       	ld	r30, X
 1d6:	e4 30       	cpi	r30, 0x04	; 4
 1d8:	b0 f5       	brcc	.+108    	; 0x246 <DIO_U8SetPinValue+0x78>
 1da:	11 96       	adiw	r26, 0x01	; 1
 1dc:	2c 91       	ld	r18, X
 1de:	11 97       	sbiw	r26, 0x01	; 1
 1e0:	28 30       	cpi	r18, 0x08	; 8
 1e2:	98 f5       	brcc	.+102    	; 0x24a <DIO_U8SetPinValue+0x7c>
            if (config->value == DIO_PIN_HIGH) {
 1e4:	13 96       	adiw	r26, 0x03	; 3
 1e6:	8c 91       	ld	r24, X
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	a1 f4       	brne	.+40     	; 0x214 <DIO_U8SetPinValue+0x46>
                SET_BIT(*writeRegisters[config->port], config->pin);
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	e0 5a       	subi	r30, 0xA0	; 160
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	01 90       	ld	r0, Z+
 1f8:	f0 81       	ld	r31, Z
 1fa:	e0 2d       	mov	r30, r0
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_U8SetPinValue+0x38>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	2a 95       	dec	r18
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_U8SetPinValue+0x34>
 20a:	90 81       	ld	r25, Z
 20c:	89 2b       	or	r24, r25
 20e:	80 83       	st	Z, r24
                return NO_ERROR;
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 95       	ret
            } else if (config->value == DIO_PIN_LOW) {
 214:	81 11       	cpse	r24, r1
 216:	1b c0       	rjmp	.+54     	; 0x24e <DIO_U8SetPinValue+0x80>
                CLR_BIT(*writeRegisters[config->port], config->pin);
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	e0 5a       	subi	r30, 0xA0	; 160
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	01 90       	ld	r0, Z+
 224:	f0 81       	ld	r31, Z
 226:	e0 2d       	mov	r30, r0
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_U8SetPinValue+0x64>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	2a 95       	dec	r18
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_U8SetPinValue+0x60>
 236:	80 95       	com	r24
 238:	90 81       	ld	r25, Z
 23a:	89 23       	and	r24, r25
 23c:	80 83       	st	Z, r24
                return NO_ERROR;
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	08 95       	ret
            }
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	08 95       	ret
                return NO_ERROR;
            } else {
                return ERROR;
            }
        } else {
            return ERROR;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	08 95       	ret
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	08 95       	ret
                return NO_ERROR;
            } else if (config->value == DIO_PIN_LOW) {
                CLR_BIT(*writeRegisters[config->port], config->pin);
                return NO_ERROR;
            } else {
                return ERROR;
 24e:	81 e0       	ldi	r24, 0x01	; 1
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 250:	08 95       	ret

00000252 <DIO_U8TogglePin>:

u8 DIO_U8TogglePin(const DIO_Config* config) {
    if (config != NULL) {
 252:	00 97       	sbiw	r24, 0x00	; 0
 254:	e1 f0       	breq	.+56     	; 0x28e <DIO_U8TogglePin+0x3c>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 256:	dc 01       	movw	r26, r24
 258:	ec 91       	ld	r30, X
 25a:	e4 30       	cpi	r30, 0x04	; 4
 25c:	d0 f4       	brcc	.+52     	; 0x292 <DIO_U8TogglePin+0x40>
 25e:	11 96       	adiw	r26, 0x01	; 1
 260:	2c 91       	ld	r18, X
 262:	28 30       	cpi	r18, 0x08	; 8
 264:	c0 f4       	brcc	.+48     	; 0x296 <DIO_U8TogglePin+0x44>
            TOG_BIT(*writeRegisters[config->port], config->pin);
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ee 0f       	add	r30, r30
 26a:	ff 1f       	adc	r31, r31
 26c:	e0 5a       	subi	r30, 0xA0	; 160
 26e:	ff 4f       	sbci	r31, 0xFF	; 255
 270:	01 90       	ld	r0, Z+
 272:	f0 81       	ld	r31, Z
 274:	e0 2d       	mov	r30, r0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_U8TogglePin+0x2e>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	2a 95       	dec	r18
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_U8TogglePin+0x2a>
 284:	90 81       	ld	r25, Z
 286:	89 27       	eor	r24, r25
 288:	80 83       	st	Z, r24
            return NO_ERROR;
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	08 95       	ret
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	08 95       	ret
    if (config != NULL) {
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
            TOG_BIT(*writeRegisters[config->port], config->pin);
            return NO_ERROR;
        } else {
            return ERROR;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	08 95       	ret
 296:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        return ERROR;
    }
}
 298:	08 95       	ret

0000029a <EXTI_enable>:
}

void EXTI_disable(u8 Int_ID)
{
	if(Int_ID <= EXTI_INT1_ID){
		CLR_BIT(EXTI_BASE->GICR, Int_ID);
 29a:	88 30       	cpi	r24, 0x08	; 8
 29c:	58 f4       	brcc	.+22     	; 0x2b4 <EXTI_enable+0x1a>
 29e:	9b b7       	in	r25, 0x3b	; 59
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	08 2e       	mov	r0, r24
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <EXTI_enable+0x12>
 2a8:	22 0f       	add	r18, r18
 2aa:	33 1f       	adc	r19, r19
 2ac:	0a 94       	dec	r0
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <EXTI_enable+0xe>
 2b0:	29 2b       	or	r18, r25
 2b2:	2b bf       	out	0x3b, r18	; 59
 2b4:	86 30       	cpi	r24, 0x06	; 6
 2b6:	29 f0       	breq	.+10     	; 0x2c2 <EXTI_enable+0x28>
 2b8:	87 30       	cpi	r24, 0x07	; 7
 2ba:	51 f0       	breq	.+20     	; 0x2d0 <EXTI_enable+0x36>
 2bc:	85 30       	cpi	r24, 0x05	; 5
 2be:	f1 f4       	brne	.+60     	; 0x2fc <EXTI_enable+0x62>
 2c0:	13 c0       	rjmp	.+38     	; 0x2e8 <EXTI_enable+0x4e>
 2c2:	85 b7       	in	r24, 0x35	; 53
 2c4:	8c 7f       	andi	r24, 0xFC	; 252
 2c6:	85 bf       	out	0x35, r24	; 53
 2c8:	85 b7       	in	r24, 0x35	; 53
 2ca:	68 2b       	or	r22, r24
 2cc:	65 bf       	out	0x35, r22	; 53
 2ce:	08 95       	ret
 2d0:	85 b7       	in	r24, 0x35	; 53
 2d2:	83 7f       	andi	r24, 0xF3	; 243
 2d4:	85 bf       	out	0x35, r24	; 53
 2d6:	85 b7       	in	r24, 0x35	; 53
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	68 2b       	or	r22, r24
 2e4:	65 bf       	out	0x35, r22	; 53
 2e6:	08 95       	ret
 2e8:	84 b7       	in	r24, 0x34	; 52
 2ea:	8f 7b       	andi	r24, 0xBF	; 191
 2ec:	84 bf       	out	0x34, r24	; 52
 2ee:	84 b7       	in	r24, 0x34	; 52
 2f0:	90 e4       	ldi	r25, 0x40	; 64
 2f2:	69 9f       	mul	r22, r25
 2f4:	b0 01       	movw	r22, r0
 2f6:	11 24       	eor	r1, r1
 2f8:	68 2b       	or	r22, r24
 2fa:	64 bf       	out	0x34, r22	; 52
 2fc:	08 95       	ret

000002fe <EXTI_setCallBack>:
	}
}

void EXTI_setCallBack(u8 Int_ID, void (*localPtr)(void))
{
	switch (Int_ID)
 2fe:	86 30       	cpi	r24, 0x06	; 6
 300:	29 f0       	breq	.+10     	; 0x30c <EXTI_setCallBack+0xe>
 302:	87 30       	cpi	r24, 0x07	; 7
 304:	41 f0       	breq	.+16     	; 0x316 <EXTI_setCallBack+0x18>
 306:	85 30       	cpi	r24, 0x05	; 5
 308:	79 f4       	brne	.+30     	; 0x328 <EXTI_setCallBack+0x2a>
 30a:	0a c0       	rjmp	.+20     	; 0x320 <EXTI_setCallBack+0x22>
	{
	case EXTI_INT0_ID:
		Action[0] = localPtr;
 30c:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <Action+0x1>
 310:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <Action>
		break;
 314:	08 95       	ret
	case EXTI_INT1_ID:
		Action[1] = localPtr;
 316:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <Action+0x3>
 31a:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <Action+0x2>
		break;
 31e:	08 95       	ret
	case EXTI_INT2_ID:
		Action[2] = localPtr;
 320:	70 93 77 00 	sts	0x0077, r23	; 0x800077 <Action+0x5>
 324:	60 93 76 00 	sts	0x0076, r22	; 0x800076 <Action+0x4>
 328:	08 95       	ret

0000032a <__vector_1>:
		break;
	}
}

//EXIT0 ISR
void __vector_1 (void){
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	2f 93       	push	r18
 336:	3f 93       	push	r19
 338:	4f 93       	push	r20
 33a:	5f 93       	push	r21
 33c:	6f 93       	push	r22
 33e:	7f 93       	push	r23
 340:	8f 93       	push	r24
 342:	9f 93       	push	r25
 344:	af 93       	push	r26
 346:	bf 93       	push	r27
 348:	ef 93       	push	r30
 34a:	ff 93       	push	r31
	if(Action[0]!= NULL){
 34c:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <Action>
 350:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <Action+0x1>
 354:	30 97       	sbiw	r30, 0x00	; 0
 356:	09 f0       	breq	.+2      	; 0x35a <__vector_1+0x30>
		Action[0]();
 358:	09 95       	icall
	}
}
 35a:	ff 91       	pop	r31
 35c:	ef 91       	pop	r30
 35e:	bf 91       	pop	r27
 360:	af 91       	pop	r26
 362:	9f 91       	pop	r25
 364:	8f 91       	pop	r24
 366:	7f 91       	pop	r23
 368:	6f 91       	pop	r22
 36a:	5f 91       	pop	r21
 36c:	4f 91       	pop	r20
 36e:	3f 91       	pop	r19
 370:	2f 91       	pop	r18
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <__vector_2>:

//EXIT1 ISR
void __vector_2 (void){
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	2f 93       	push	r18
 388:	3f 93       	push	r19
 38a:	4f 93       	push	r20
 38c:	5f 93       	push	r21
 38e:	6f 93       	push	r22
 390:	7f 93       	push	r23
 392:	8f 93       	push	r24
 394:	9f 93       	push	r25
 396:	af 93       	push	r26
 398:	bf 93       	push	r27
 39a:	ef 93       	push	r30
 39c:	ff 93       	push	r31
	if(Action[1]!= NULL){
 39e:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <Action+0x2>
 3a2:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <Action+0x3>
 3a6:	30 97       	sbiw	r30, 0x00	; 0
 3a8:	09 f0       	breq	.+2      	; 0x3ac <__vector_2+0x30>
		Action[1]();
 3aa:	09 95       	icall
	}
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <__vector_18>:

//EXIT2 ISR
void __vector_18 (void){
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	5f 93       	push	r21
 3e0:	6f 93       	push	r22
 3e2:	7f 93       	push	r23
 3e4:	8f 93       	push	r24
 3e6:	9f 93       	push	r25
 3e8:	af 93       	push	r26
 3ea:	bf 93       	push	r27
 3ec:	ef 93       	push	r30
 3ee:	ff 93       	push	r31
	if(Action[2]!= NULL){
 3f0:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <Action+0x4>
 3f4:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <Action+0x5>
 3f8:	30 97       	sbiw	r30, 0x00	; 0
 3fa:	09 f0       	breq	.+2      	; 0x3fe <__vector_18+0x30>
		Action[2]();
 3fc:	09 95       	icall
	}
}
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	bf 91       	pop	r27
 404:	af 91       	pop	r26
 406:	9f 91       	pop	r25
 408:	8f 91       	pop	r24
 40a:	7f 91       	pop	r23
 40c:	6f 91       	pop	r22
 40e:	5f 91       	pop	r21
 410:	4f 91       	pop	r20
 412:	3f 91       	pop	r19
 414:	2f 91       	pop	r18
 416:	0f 90       	pop	r0
 418:	0f be       	out	0x3f, r0	; 63
 41a:	0f 90       	pop	r0
 41c:	1f 90       	pop	r1
 41e:	18 95       	reti

00000420 <GIE_enable>:
#include "GIE_interface.h"


// Enable Global Interrupts
void GIE_enable(){
    __asm__ __volatile__ ("sei" ::);
 420:	78 94       	sei
 422:	08 95       	ret

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
