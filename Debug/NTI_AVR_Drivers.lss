
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000045c  000004f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800068  00800068  000004f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001799  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b20  00000000  00000000  00001e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b89  00000000  00000000  000029b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000434  00000000  00000000  00003540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b93  00000000  00000000  00003974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c16  00000000  00000000  00004507  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  0000511d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_1>
   8:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_2>
   c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_10>
  2c:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 38       	cpi	r26, 0x82	; 130
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 2c 02 	jmp	0x458	; 0x458 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	DIO_Config led = {DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT,DIO_PIN_HIGH};
	DIO_U8SetPinDirection(&led);
	DIO_U8SetPinValue(&led);
}

int main(void) {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	28 97       	sbiw	r28, 0x08	; 8
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	DIO_Config led = {DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT};
  a6:	19 82       	std	Y+1, r1	; 0x01
  a8:	1a 82       	std	Y+2, r1	; 0x02
  aa:	1b 82       	std	Y+3, r1	; 0x03
  ac:	1c 82       	std	Y+4, r1	; 0x04
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	19 83       	std	Y+1, r17	; 0x01
  b2:	03 e0       	ldi	r16, 0x03	; 3
  b4:	0a 83       	std	Y+2, r16	; 0x02
  b6:	1b 83       	std	Y+3, r17	; 0x03
	DIO_U8SetPinDirection(&led);
  b8:	ce 01       	movw	r24, r28
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_U8SetPinDirection>
		
	GIE_enable();
  c0:	0e 94 43 01 	call	0x286	; 0x286 <GIE_enable>
	
	Timer0_Config timerConfig = {PHASE_CORRECT_PWM, PRESCALER_1024, OC0_SET, 250};
  c4:	1d 83       	std	Y+5, r17	; 0x05
  c6:	85 e0       	ldi	r24, 0x05	; 5
  c8:	8e 83       	std	Y+6, r24	; 0x06
  ca:	0f 83       	std	Y+7, r16	; 0x07
  cc:	8a ef       	ldi	r24, 0xFA	; 250
  ce:	88 87       	std	Y+8, r24	; 0x08
    //M_TIMER0_void_setCallBack(timerCallback,COMPARE);
	M_TIMER0_void_Init(&timerConfig);
  d0:	ce 01       	movw	r24, r28
  d2:	05 96       	adiw	r24, 0x05	; 5
  d4:	0e 94 45 01 	call	0x28a	; 0x28a <M_TIMER0_void_Init>
	//M_TIMER0_void_IntEnable(COMPARE);
	//M_TIMER0_void_setDelayTimeMilliSec(3000);
	//M_TIMER0_void_start();
	//M_TIMER0_void_setFastPWM(1,80);
	M_TIMER0_void_setPhaseCorrectPWM(1,80);
  d8:	60 e5       	ldi	r22, 0x50	; 80
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <M_TIMER0_void_setPhaseCorrectPWM>
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x4e>

000000e2 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
  e2:	24 b1       	in	r18, 0x04	; 4
  e4:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
  e6:	00 24       	eor	r0, r0
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	00 1c       	adc	r0, r0
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	00 1c       	adc	r0, r0
  f4:	23 2f       	mov	r18, r19
  f6:	30 2d       	mov	r19, r0
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 104:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 108:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 10c:	82 2b       	or	r24, r18
 10e:	93 2b       	or	r25, r19
 110:	09 95       	icall
 112:	08 95       	ret

00000114 <DIO_U8SetPinDirection>:
	}
}

u8 DIO_U8SetPinDirection (const DIO_Config* config)
{
	if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7)
 114:	dc 01       	movw	r26, r24
 116:	ec 91       	ld	r30, X
 118:	e4 30       	cpi	r30, 0x04	; 4
 11a:	a0 f5       	brcc	.+104    	; 0x184 <DIO_U8SetPinDirection+0x70>
 11c:	11 96       	adiw	r26, 0x01	; 1
 11e:	2c 91       	ld	r18, X
 120:	11 97       	sbiw	r26, 0x01	; 1
 122:	28 30       	cpi	r18, 0x08	; 8
 124:	88 f5       	brcc	.+98     	; 0x188 <DIO_U8SetPinDirection+0x74>
	{
		if (config->direction == DIO_PIN_INPUT)
 126:	12 96       	adiw	r26, 0x02	; 2
 128:	8c 91       	ld	r24, X
 12a:	81 11       	cpse	r24, r1
 12c:	15 c0       	rjmp	.+42     	; 0x158 <DIO_U8SetPinDirection+0x44>
		{
			CLR_BIT( *directionRegisters[config->port], config->pin );
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e0 5a       	subi	r30, 0xA0	; 160
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	01 90       	ld	r0, Z+
 13a:	f0 81       	ld	r31, Z
 13c:	e0 2d       	mov	r30, r0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_U8SetPinDirection+0x34>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	2a 95       	dec	r18
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_U8SetPinDirection+0x30>
 14c:	80 95       	com	r24
 14e:	90 81       	ld	r25, Z
 150:	89 23       	and	r24, r25
 152:	80 83       	st	Z, r24
			return NO_ERROR;
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	08 95       	ret
		}
		else if (config->direction == DIO_PIN_OUTPUT)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	c1 f4       	brne	.+48     	; 0x18c <DIO_U8SetPinDirection+0x78>
		{
			SET_BIT( *directionRegisters[config->port], config->pin );
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	e0 5a       	subi	r30, 0xA0	; 160
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	01 90       	ld	r0, Z+
 168:	f0 81       	ld	r31, Z
 16a:	e0 2d       	mov	r30, r0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_U8SetPinDirection+0x62>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	2a 95       	dec	r18
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_U8SetPinDirection+0x5e>
 17a:	90 81       	ld	r25, Z
 17c:	89 2b       	or	r24, r25
 17e:	80 83       	st	Z, r24
			return NO_ERROR;
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	08 95       	ret
			return ERROR;
		}
	}
	else
	{
		return ERROR;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	08 95       	ret
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	08 95       	ret
			SET_BIT( *directionRegisters[config->port], config->pin );
			return NO_ERROR;
		}
		else
		{
			return ERROR;
 18c:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return ERROR;
	}
}
 18e:	08 95       	ret

00000190 <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	if(Action[0]!= NULL){
 1b2:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <Action>
 1b6:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <Action+0x1>
 1ba:	30 97       	sbiw	r30, 0x00	; 0
 1bc:	09 f0       	breq	.+2      	; 0x1c0 <__vector_1+0x30>
		Action[0]();
 1be:	09 95       	icall
	}
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
	if(Action[1]!= NULL){
 204:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Action+0x2>
 208:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Action+0x3>
 20c:	30 97       	sbiw	r30, 0x00	; 0
 20e:	09 f0       	breq	.+2      	; 0x212 <__vector_2+0x30>
		Action[1]();
 210:	09 95       	icall
	}
}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	if(Action[2]!= NULL){
 256:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <Action+0x4>
 25a:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <Action+0x5>
 25e:	30 97       	sbiw	r30, 0x00	; 0
 260:	09 f0       	breq	.+2      	; 0x264 <__vector_3+0x30>
		Action[2]();
 262:	09 95       	icall
	}
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	bf 91       	pop	r27
 26a:	af 91       	pop	r26
 26c:	9f 91       	pop	r25
 26e:	8f 91       	pop	r24
 270:	7f 91       	pop	r23
 272:	6f 91       	pop	r22
 274:	5f 91       	pop	r21
 276:	4f 91       	pop	r20
 278:	3f 91       	pop	r19
 27a:	2f 91       	pop	r18
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <GIE_enable>:
#include "GIE_interface.h"


// Enable Global Interrupts
void GIE_enable(){
    __asm__ __volatile__ ("sei" ::);
 286:	78 94       	sei
 288:	08 95       	ret

0000028a <M_TIMER0_void_Init>:

void M_TIMER0_void_setCallBack(void (*ptrfn)(void),u8 copy_u8IntID){
	if(copy_u8IntID == OVERFLOW){
		Action_Timer[0] = ptrfn;
		}else if(copy_u8IntID == COMPARE){
		Action_Timer[1] = ptrfn;
 28a:	fc 01       	movw	r30, r24
 28c:	81 81       	ldd	r24, Z+1	; 0x01
 28e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <prescaler>
 292:	90 81       	ld	r25, Z
 294:	91 11       	cpse	r25, r1
 296:	03 c0       	rjmp	.+6      	; 0x29e <M_TIMER0_void_Init+0x14>
 298:	80 e8       	ldi	r24, 0x80	; 128
 29a:	83 bf       	out	0x33, r24	; 51
 29c:	08 95       	ret
 29e:	92 30       	cpi	r25, 0x02	; 2
 2a0:	51 f4       	brne	.+20     	; 0x2b6 <M_TIMER0_void_Init+0x2c>
 2a2:	83 81       	ldd	r24, Z+3	; 0x03
 2a4:	8c bf       	out	0x3c, r24	; 60
 2a6:	82 81       	ldd	r24, Z+2	; 0x02
 2a8:	20 e1       	ldi	r18, 0x10	; 16
 2aa:	82 9f       	mul	r24, r18
 2ac:	c0 01       	movw	r24, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	88 68       	ori	r24, 0x88	; 136
 2b2:	83 bf       	out	0x33, r24	; 51
 2b4:	08 95       	ret
 2b6:	93 30       	cpi	r25, 0x03	; 3
 2b8:	51 f4       	brne	.+20     	; 0x2ce <M_TIMER0_void_Init+0x44>
 2ba:	82 81       	ldd	r24, Z+2	; 0x02
 2bc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <fast_oc0_mode>
 2c0:	20 e1       	ldi	r18, 0x10	; 16
 2c2:	82 9f       	mul	r24, r18
 2c4:	c0 01       	movw	r24, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	88 64       	ori	r24, 0x48	; 72
 2ca:	83 bf       	out	0x33, r24	; 51
 2cc:	08 95       	ret
 2ce:	91 30       	cpi	r25, 0x01	; 1
 2d0:	39 f4       	brne	.+14     	; 0x2e0 <M_TIMER0_void_Init+0x56>
 2d2:	82 81       	ldd	r24, Z+2	; 0x02
 2d4:	20 e1       	ldi	r18, 0x10	; 16
 2d6:	82 9f       	mul	r24, r18
 2d8:	c0 01       	movw	r24, r0
 2da:	11 24       	eor	r1, r1
 2dc:	80 64       	ori	r24, 0x40	; 64
 2de:	83 bf       	out	0x33, r24	; 51
 2e0:	08 95       	ret

000002e2 <M_TIMER0_void_setPhaseCorrectPWM>:
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	62 9f       	mul	r22, r18
 2e6:	c0 01       	movw	r24, r0
 2e8:	11 24       	eor	r1, r1
 2ea:	64 e6       	ldi	r22, 0x64	; 100
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	0e 94 04 02 	call	0x408	; 0x408 <__divmodhi4>
 2f2:	60 95       	com	r22
 2f4:	6c bf       	out	0x3c, r22	; 60
 2f6:	83 b7       	in	r24, 0x33	; 51
 2f8:	88 7f       	andi	r24, 0xF8	; 248
 2fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <prescaler>
 2fe:	89 2b       	or	r24, r25
 300:	83 bf       	out	0x33, r24	; 51
 302:	08 95       	ret

00000304 <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	3f 93       	push	r19
 312:	4f 93       	push	r20
 314:	5f 93       	push	r21
 316:	6f 93       	push	r22
 318:	7f 93       	push	r23
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	af 93       	push	r26
 320:	bf 93       	push	r27
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 326:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Action_Timer>
 32a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Action_Timer+0x1>
 32e:	89 2b       	or	r24, r25
 330:	89 f1       	breq	.+98     	; 0x394 <__vector_11+0x90>
		counter++;
 332:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <counter.1678>
 336:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <counter.1678+0x1>
 33a:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <counter.1678+0x2>
 33e:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <counter.1678+0x3>
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	a1 1d       	adc	r26, r1
 346:	b1 1d       	adc	r27, r1
 348:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <counter.1678>
 34c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <counter.1678+0x1>
 350:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <counter.1678+0x2>
 354:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <counter.1678+0x3>
		if(counter == numOverflows){
 358:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <numOverflows>
 35c:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <numOverflows+0x1>
 360:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <numOverflows+0x2>
 364:	70 91 81 00 	lds	r23, 0x0081	; 0x800081 <numOverflows+0x3>
 368:	84 17       	cp	r24, r20
 36a:	95 07       	cpc	r25, r21
 36c:	a6 07       	cpc	r26, r22
 36e:	b7 07       	cpc	r27, r23
 370:	89 f4       	brne	.+34     	; 0x394 <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 372:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <remainingCounts>
 376:	81 95       	neg	r24
 378:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 37a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <counter.1678>
 37e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <counter.1678+0x1>
 382:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <counter.1678+0x2>
 386:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <counter.1678+0x3>
			Action_Timer[0]();
 38a:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <Action_Timer>
 38e:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <Action_Timer+0x1>
 392:	09 95       	icall
		}
		
	}
}
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	bf 91       	pop	r27
 39a:	af 91       	pop	r26
 39c:	9f 91       	pop	r25
 39e:	8f 91       	pop	r24
 3a0:	7f 91       	pop	r23
 3a2:	6f 91       	pop	r22
 3a4:	5f 91       	pop	r21
 3a6:	4f 91       	pop	r20
 3a8:	3f 91       	pop	r19
 3aa:	2f 91       	pop	r18
 3ac:	0f 90       	pop	r0
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	0f 90       	pop	r0
 3b2:	1f 90       	pop	r1
 3b4:	18 95       	reti

000003b6 <__vector_10>:

ISR(TIMER0_COMP_vect){
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	2f 93       	push	r18
 3c2:	3f 93       	push	r19
 3c4:	4f 93       	push	r20
 3c6:	5f 93       	push	r21
 3c8:	6f 93       	push	r22
 3ca:	7f 93       	push	r23
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
 3d0:	af 93       	push	r26
 3d2:	bf 93       	push	r27
 3d4:	ef 93       	push	r30
 3d6:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 3d8:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <Action_Timer+0x2>
 3dc:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <Action_Timer+0x3>
 3e0:	30 97       	sbiw	r30, 0x00	; 0
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <__vector_10+0x30>
		Action_Timer[1]();
 3e4:	09 95       	icall
		
	}
}
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	bf 91       	pop	r27
 3ec:	af 91       	pop	r26
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	7f 91       	pop	r23
 3f4:	6f 91       	pop	r22
 3f6:	5f 91       	pop	r21
 3f8:	4f 91       	pop	r20
 3fa:	3f 91       	pop	r19
 3fc:	2f 91       	pop	r18
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <__divmodhi4>:
 408:	97 fb       	bst	r25, 7
 40a:	07 2e       	mov	r0, r23
 40c:	16 f4       	brtc	.+4      	; 0x412 <__divmodhi4+0xa>
 40e:	00 94       	com	r0
 410:	07 d0       	rcall	.+14     	; 0x420 <__divmodhi4_neg1>
 412:	77 fd       	sbrc	r23, 7
 414:	09 d0       	rcall	.+18     	; 0x428 <__divmodhi4_neg2>
 416:	0e 94 18 02 	call	0x430	; 0x430 <__udivmodhi4>
 41a:	07 fc       	sbrc	r0, 7
 41c:	05 d0       	rcall	.+10     	; 0x428 <__divmodhi4_neg2>
 41e:	3e f4       	brtc	.+14     	; 0x42e <__divmodhi4_exit>

00000420 <__divmodhi4_neg1>:
 420:	90 95       	com	r25
 422:	81 95       	neg	r24
 424:	9f 4f       	sbci	r25, 0xFF	; 255
 426:	08 95       	ret

00000428 <__divmodhi4_neg2>:
 428:	70 95       	com	r23
 42a:	61 95       	neg	r22
 42c:	7f 4f       	sbci	r23, 0xFF	; 255

0000042e <__divmodhi4_exit>:
 42e:	08 95       	ret

00000430 <__udivmodhi4>:
 430:	aa 1b       	sub	r26, r26
 432:	bb 1b       	sub	r27, r27
 434:	51 e1       	ldi	r21, 0x11	; 17
 436:	07 c0       	rjmp	.+14     	; 0x446 <__udivmodhi4_ep>

00000438 <__udivmodhi4_loop>:
 438:	aa 1f       	adc	r26, r26
 43a:	bb 1f       	adc	r27, r27
 43c:	a6 17       	cp	r26, r22
 43e:	b7 07       	cpc	r27, r23
 440:	10 f0       	brcs	.+4      	; 0x446 <__udivmodhi4_ep>
 442:	a6 1b       	sub	r26, r22
 444:	b7 0b       	sbc	r27, r23

00000446 <__udivmodhi4_ep>:
 446:	88 1f       	adc	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	5a 95       	dec	r21
 44c:	a9 f7       	brne	.-22     	; 0x438 <__udivmodhi4_loop>
 44e:	80 95       	com	r24
 450:	90 95       	com	r25
 452:	bc 01       	movw	r22, r24
 454:	cd 01       	movw	r24, r26
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
