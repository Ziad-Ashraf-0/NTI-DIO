
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000a5c  00000af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000043  0080009a  0080009a  00000b2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025b2  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe6  00000000  00000000  00003432  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000127e  00000000  00000000  00004418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000854  00000000  00000000  00005698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012fe  00000000  00000000  00005eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014f5  00000000  00000000  000071ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  000086df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_1>
   8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_2>
   c:	0c 94 44 01 	jmp	0x288	; 0x288 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_6>
  1c:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_9>
  28:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_10>
  2c:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_11>
  30:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_12>
  34:	0c 94 81 03 	jmp	0x702	; 0x702 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e9       	ldi	r26, 0x9A	; 154
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3d       	cpi	r26, 0xDD	; 221
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>



int main() {
	GIE_enable();
  92:	0e 94 6d 01 	call	0x2da	; 0x2da <GIE_enable>
	startOS();
  96:	0e 94 03 04 	call	0x806	; 0x806 <startOS>
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0x8>

0000009c <__vector_16>:
  9c:	24 b1       	in	r18, 0x04	; 4
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	00 24       	eor	r0, r0
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	00 1c       	adc	r0, r0
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	00 1c       	adc	r0, r0
  ae:	23 2f       	mov	r18, r19
  b0:	30 2d       	mov	r19, r0
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <__data_end>
  c2:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <__data_end+0x1>
  c6:	82 2b       	or	r24, r18
  c8:	93 2b       	or	r25, r19
  ca:	09 95       	icall
  cc:	08 95       	ret

000000ce <DIO_U8SetPinDirection>:
  ce:	dc 01       	movw	r26, r24
  d0:	ec 91       	ld	r30, X
  d2:	e4 30       	cpi	r30, 0x04	; 4
  d4:	a0 f5       	brcc	.+104    	; 0x13e <DIO_U8SetPinDirection+0x70>
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	2c 91       	ld	r18, X
  da:	11 97       	sbiw	r26, 0x01	; 1
  dc:	28 30       	cpi	r18, 0x08	; 8
  de:	88 f5       	brcc	.+98     	; 0x142 <DIO_U8SetPinDirection+0x74>
  e0:	12 96       	adiw	r26, 0x02	; 2
  e2:	8c 91       	ld	r24, X
  e4:	81 11       	cpse	r24, r1
  e6:	15 c0       	rjmp	.+42     	; 0x112 <DIO_U8SetPinDirection+0x44>
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	ef 56       	subi	r30, 0x6F	; 111
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	01 90       	ld	r0, Z+
  f4:	f0 81       	ld	r31, Z
  f6:	e0 2d       	mov	r30, r0
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_U8SetPinDirection+0x34>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	2a 95       	dec	r18
 104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_U8SetPinDirection+0x30>
 106:	80 95       	com	r24
 108:	90 81       	ld	r25, Z
 10a:	89 23       	and	r24, r25
 10c:	80 83       	st	Z, r24
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	08 95       	ret
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	c1 f4       	brne	.+48     	; 0x146 <DIO_U8SetPinDirection+0x78>
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	ee 0f       	add	r30, r30
 11a:	ff 1f       	adc	r31, r31
 11c:	ef 56       	subi	r30, 0x6F	; 111
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	01 90       	ld	r0, Z+
 122:	f0 81       	ld	r31, Z
 124:	e0 2d       	mov	r30, r0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_U8SetPinDirection+0x62>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	2a 95       	dec	r18
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_U8SetPinDirection+0x5e>
 134:	90 81       	ld	r25, Z
 136:	89 2b       	or	r24, r25
 138:	80 83       	st	Z, r24
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	08 95       	ret
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	08 95       	ret
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	08 95       	ret

0000014a <DIO_U8TogglePin>:
 14a:	00 97       	sbiw	r24, 0x00	; 0
 14c:	e1 f0       	breq	.+56     	; 0x186 <DIO_U8TogglePin+0x3c>
 14e:	dc 01       	movw	r26, r24
 150:	ec 91       	ld	r30, X
 152:	e4 30       	cpi	r30, 0x04	; 4
 154:	d0 f4       	brcc	.+52     	; 0x18a <DIO_U8TogglePin+0x40>
 156:	11 96       	adiw	r26, 0x01	; 1
 158:	2c 91       	ld	r18, X
 15a:	28 30       	cpi	r18, 0x08	; 8
 15c:	c0 f4       	brcc	.+48     	; 0x18e <DIO_U8TogglePin+0x44>
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	e7 57       	subi	r30, 0x77	; 119
 166:	ff 4f       	sbci	r31, 0xFF	; 255
 168:	01 90       	ld	r0, Z+
 16a:	f0 81       	ld	r31, Z
 16c:	e0 2d       	mov	r30, r0
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_U8TogglePin+0x2e>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	2a 95       	dec	r18
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_U8TogglePin+0x2a>
 17c:	90 81       	ld	r25, Z
 17e:	89 27       	eor	r24, r25
 180:	80 83       	st	Z, r24
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	08 95       	ret
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	08 95       	ret
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	08 95       	ret
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	08 95       	ret

00000192 <DIO_U8GetPinValue>:
 192:	00 97       	sbiw	r24, 0x00	; 0
 194:	f9 f0       	breq	.+62     	; 0x1d4 <DIO_U8GetPinValue+0x42>
 196:	61 15       	cp	r22, r1
 198:	71 05       	cpc	r23, r1
 19a:	f1 f0       	breq	.+60     	; 0x1d8 <DIO_U8GetPinValue+0x46>
 19c:	dc 01       	movw	r26, r24
 19e:	ec 91       	ld	r30, X
 1a0:	e4 30       	cpi	r30, 0x04	; 4
 1a2:	e0 f4       	brcc	.+56     	; 0x1dc <DIO_U8GetPinValue+0x4a>
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	2c 91       	ld	r18, X
 1a8:	28 30       	cpi	r18, 0x08	; 8
 1aa:	d0 f4       	brcc	.+52     	; 0x1e0 <DIO_U8GetPinValue+0x4e>
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	ee 0f       	add	r30, r30
 1b0:	ff 1f       	adc	r31, r31
 1b2:	ef 57       	subi	r30, 0x7F	; 127
 1b4:	ff 4f       	sbci	r31, 0xFF	; 255
 1b6:	01 90       	ld	r0, Z+
 1b8:	f0 81       	ld	r31, Z
 1ba:	e0 2d       	mov	r30, r0
 1bc:	80 81       	ld	r24, Z
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_U8GetPinValue+0x34>
 1c2:	95 95       	asr	r25
 1c4:	87 95       	ror	r24
 1c6:	2a 95       	dec	r18
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_U8GetPinValue+0x30>
 1ca:	81 70       	andi	r24, 0x01	; 1
 1cc:	fb 01       	movw	r30, r22
 1ce:	80 83       	st	Z, r24
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	08 95       	ret
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	08 95       	ret
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	08 95       	ret
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	08 95       	ret

000001e4 <__vector_1>:
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
 206:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <Action>
 20a:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <Action+0x1>
 20e:	30 97       	sbiw	r30, 0x00	; 0
 210:	09 f0       	breq	.+2      	; 0x214 <__vector_1+0x30>
 212:	09 95       	icall
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	bf 91       	pop	r27
 21a:	af 91       	pop	r26
 21c:	9f 91       	pop	r25
 21e:	8f 91       	pop	r24
 220:	7f 91       	pop	r23
 222:	6f 91       	pop	r22
 224:	5f 91       	pop	r21
 226:	4f 91       	pop	r20
 228:	3f 91       	pop	r19
 22a:	2f 91       	pop	r18
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_2>:
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	4f 93       	push	r20
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
 258:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <Action+0x2>
 25c:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <Action+0x3>
 260:	30 97       	sbiw	r30, 0x00	; 0
 262:	09 f0       	breq	.+2      	; 0x266 <__vector_2+0x30>
 264:	09 95       	icall
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	bf 91       	pop	r27
 26c:	af 91       	pop	r26
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	7f 91       	pop	r23
 274:	6f 91       	pop	r22
 276:	5f 91       	pop	r21
 278:	4f 91       	pop	r20
 27a:	3f 91       	pop	r19
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <__vector_3>:
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	0f 92       	push	r0
 290:	11 24       	eor	r1, r1
 292:	2f 93       	push	r18
 294:	3f 93       	push	r19
 296:	4f 93       	push	r20
 298:	5f 93       	push	r21
 29a:	6f 93       	push	r22
 29c:	7f 93       	push	r23
 29e:	8f 93       	push	r24
 2a0:	9f 93       	push	r25
 2a2:	af 93       	push	r26
 2a4:	bf 93       	push	r27
 2a6:	ef 93       	push	r30
 2a8:	ff 93       	push	r31
 2aa:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <Action+0x4>
 2ae:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <Action+0x5>
 2b2:	30 97       	sbiw	r30, 0x00	; 0
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <__vector_3+0x30>
 2b6:	09 95       	icall
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <GIE_enable>:
 2da:	78 94       	sei
 2dc:	08 95       	ret

000002de <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
	if(Action_Spi != NULL){
 300:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <Action_Spi>
 304:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <Action_Spi+0x1>
 308:	30 97       	sbiw	r30, 0x00	; 0
 30a:	11 f0       	breq	.+4      	; 0x310 <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 30c:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 30e:	09 95       	icall
	}
 310:	ff 91       	pop	r31
 312:	ef 91       	pop	r30
 314:	bf 91       	pop	r27
 316:	af 91       	pop	r26
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	7f 91       	pop	r23
 31e:	6f 91       	pop	r22
 320:	5f 91       	pop	r21
 322:	4f 91       	pop	r20
 324:	3f 91       	pop	r19
 326:	2f 91       	pop	r18
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <M_TIMER0_void_Init>:
void M_TIMER0_void_setPhaseCorrectPWM(Valid_Freq freq, u8 duty){
	u8 ocr0_value = ((duty/2) * 255) / 100 ;
	OCR0_REG = ocr0_value;
	TCCR0_REG &= TIMER0_PRESCALER_MASK;
	//are they constants??
	TCCR0_REG |= freq;
 332:	fc 01       	movw	r30, r24
 334:	81 81       	ldd	r24, Z+1	; 0x01
 336:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <prescaler>
 33a:	90 81       	ld	r25, Z
 33c:	91 11       	cpse	r25, r1
 33e:	03 c0       	rjmp	.+6      	; 0x346 <M_TIMER0_void_Init+0x14>
 340:	80 e8       	ldi	r24, 0x80	; 128
 342:	83 bf       	out	0x33, r24	; 51
 344:	08 95       	ret
 346:	92 30       	cpi	r25, 0x02	; 2
 348:	51 f4       	brne	.+20     	; 0x35e <M_TIMER0_void_Init+0x2c>
 34a:	83 81       	ldd	r24, Z+3	; 0x03
 34c:	8c bf       	out	0x3c, r24	; 60
 34e:	82 81       	ldd	r24, Z+2	; 0x02
 350:	20 e1       	ldi	r18, 0x10	; 16
 352:	82 9f       	mul	r24, r18
 354:	c0 01       	movw	r24, r0
 356:	11 24       	eor	r1, r1
 358:	88 68       	ori	r24, 0x88	; 136
 35a:	83 bf       	out	0x33, r24	; 51
 35c:	08 95       	ret
 35e:	93 30       	cpi	r25, 0x03	; 3
 360:	51 f4       	brne	.+20     	; 0x376 <M_TIMER0_void_Init+0x44>
 362:	82 81       	ldd	r24, Z+2	; 0x02
 364:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <fast_oc0_mode>
 368:	20 e1       	ldi	r18, 0x10	; 16
 36a:	82 9f       	mul	r24, r18
 36c:	c0 01       	movw	r24, r0
 36e:	11 24       	eor	r1, r1
 370:	88 64       	ori	r24, 0x48	; 72
 372:	83 bf       	out	0x33, r24	; 51
 374:	08 95       	ret
 376:	91 30       	cpi	r25, 0x01	; 1
 378:	39 f4       	brne	.+14     	; 0x388 <M_TIMER0_void_Init+0x56>
 37a:	82 81       	ldd	r24, Z+2	; 0x02
 37c:	20 e1       	ldi	r18, 0x10	; 16
 37e:	82 9f       	mul	r24, r18
 380:	c0 01       	movw	r24, r0
 382:	11 24       	eor	r1, r1
 384:	80 64       	ori	r24, 0x40	; 64
 386:	83 bf       	out	0x33, r24	; 51
 388:	08 95       	ret

0000038a <M_TIMER0_void_start>:
 38a:	83 b7       	in	r24, 0x33	; 51
 38c:	88 7f       	andi	r24, 0xF8	; 248
 38e:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <prescaler>
 392:	89 2b       	or	r24, r25
 394:	83 bf       	out	0x33, r24	; 51
 396:	08 95       	ret

00000398 <M_TIMER0_void_setDelayTimeMilliSec>:
 398:	cf 92       	push	r12
 39a:	df 92       	push	r13
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	2c 97       	sbiw	r28, 0x0c	; 12
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	9b 01       	movw	r18, r22
 3b6:	ac 01       	movw	r20, r24
 3b8:	8c e0       	ldi	r24, 0x0C	; 12
 3ba:	e5 e7       	ldi	r30, 0x75	; 117
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	de 01       	movw	r26, r28
 3c0:	11 96       	adiw	r26, 0x01	; 1
 3c2:	01 90       	ld	r0, Z+
 3c4:	0d 92       	st	X+, r0
 3c6:	8a 95       	dec	r24
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <M_TIMER0_void_setDelayTimeMilliSec+0x2a>
 3ca:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <prescaler>
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	8c 0f       	add	r24, r28
 3da:	9d 1f       	adc	r25, r29
 3dc:	e8 0f       	add	r30, r24
 3de:	f9 1f       	adc	r31, r25
 3e0:	c0 80       	ld	r12, Z
 3e2:	d1 80       	ldd	r13, Z+1	; 0x01
 3e4:	d6 94       	lsr	r13
 3e6:	c7 94       	ror	r12
 3e8:	d6 94       	lsr	r13
 3ea:	c7 94       	ror	r12
 3ec:	d6 94       	lsr	r13
 3ee:	c7 94       	ror	r12
 3f0:	e1 2c       	mov	r14, r1
 3f2:	f1 2c       	mov	r15, r1
 3f4:	a8 ee       	ldi	r26, 0xE8	; 232
 3f6:	b3 e0       	ldi	r27, 0x03	; 3
 3f8:	0e 94 fe 04 	call	0x9fc	; 0x9fc <__muluhisi3>
 3fc:	a7 01       	movw	r20, r14
 3fe:	96 01       	movw	r18, r12
 400:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <__udivmodsi4>
 404:	bb 27       	eor	r27, r27
 406:	a5 2f       	mov	r26, r21
 408:	94 2f       	mov	r25, r20
 40a:	83 2f       	mov	r24, r19
 40c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <numOverflows>
 410:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <numOverflows+0x1>
 414:	a0 93 b4 00 	sts	0x00B4, r26	; 0x8000b4 <numOverflows+0x2>
 418:	b0 93 b5 00 	sts	0x00B5, r27	; 0x8000b5 <numOverflows+0x3>
 41c:	da 01       	movw	r26, r20
 41e:	c9 01       	movw	r24, r18
 420:	99 27       	eor	r25, r25
 422:	aa 27       	eor	r26, r26
 424:	bb 27       	eor	r27, r27
 426:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <remainingCounts>
 42a:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <remainingCounts+0x1>
 42e:	a0 93 b0 00 	sts	0x00B0, r26	; 0x8000b0 <remainingCounts+0x2>
 432:	b0 93 b1 00 	sts	0x00B1, r27	; 0x8000b1 <remainingCounts+0x3>
 436:	2c 96       	adiw	r28, 0x0c	; 12
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	ff 90       	pop	r15
 448:	ef 90       	pop	r14
 44a:	df 90       	pop	r13
 44c:	cf 90       	pop	r12
 44e:	08 95       	ret

00000450 <M_TIMER0_void_IntEnable>:
 450:	81 11       	cpse	r24, r1
 452:	04 c0       	rjmp	.+8      	; 0x45c <M_TIMER0_void_IntEnable+0xc>
 454:	89 b7       	in	r24, 0x39	; 57
 456:	81 60       	ori	r24, 0x01	; 1
 458:	89 bf       	out	0x39, r24	; 57
 45a:	08 95       	ret
 45c:	81 30       	cpi	r24, 0x01	; 1
 45e:	19 f4       	brne	.+6      	; 0x466 <M_TIMER0_void_IntEnable+0x16>
 460:	89 b7       	in	r24, 0x39	; 57
 462:	82 60       	ori	r24, 0x02	; 2
 464:	89 bf       	out	0x39, r24	; 57
 466:	08 95       	ret

00000468 <M_TIMER0_void_setCallBack>:
}


void M_TIMER0_void_setCallBack(void (*ptrfn)(void),u8 copy_u8IntID){
	if(copy_u8IntID == OVERFLOW){
 468:	61 11       	cpse	r22, r1
 46a:	05 c0       	rjmp	.+10     	; 0x476 <M_TIMER0_void_setCallBack+0xe>
		Action_Timer[0] = ptrfn;
 46c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <Action_Timer+0x1>
 470:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <Action_Timer>
 474:	08 95       	ret
		}else if(copy_u8IntID == COMPARE){
 476:	61 30       	cpi	r22, 0x01	; 1
 478:	21 f4       	brne	.+8      	; 0x482 <M_TIMER0_void_setCallBack+0x1a>
		Action_Timer[1] = ptrfn;
 47a:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <Action_Timer+0x3>
 47e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Action_Timer+0x2>
 482:	08 95       	ret

00000484 <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	2f 93       	push	r18
 490:	3f 93       	push	r19
 492:	4f 93       	push	r20
 494:	5f 93       	push	r21
 496:	6f 93       	push	r22
 498:	7f 93       	push	r23
 49a:	8f 93       	push	r24
 49c:	9f 93       	push	r25
 49e:	af 93       	push	r26
 4a0:	bf 93       	push	r27
 4a2:	ef 93       	push	r30
 4a4:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 4a6:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Action_Timer>
 4aa:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <Action_Timer+0x1>
 4ae:	89 2b       	or	r24, r25
 4b0:	89 f1       	breq	.+98     	; 0x514 <__vector_11+0x90>
		counter++;
 4b2:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <counter.1685>
 4b6:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <counter.1685+0x1>
 4ba:	a0 91 a6 00 	lds	r26, 0x00A6	; 0x8000a6 <counter.1685+0x2>
 4be:	b0 91 a7 00 	lds	r27, 0x00A7	; 0x8000a7 <counter.1685+0x3>
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	a1 1d       	adc	r26, r1
 4c6:	b1 1d       	adc	r27, r1
 4c8:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <counter.1685>
 4cc:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <counter.1685+0x1>
 4d0:	a0 93 a6 00 	sts	0x00A6, r26	; 0x8000a6 <counter.1685+0x2>
 4d4:	b0 93 a7 00 	sts	0x00A7, r27	; 0x8000a7 <counter.1685+0x3>
		if(counter == numOverflows){
 4d8:	40 91 b2 00 	lds	r20, 0x00B2	; 0x8000b2 <numOverflows>
 4dc:	50 91 b3 00 	lds	r21, 0x00B3	; 0x8000b3 <numOverflows+0x1>
 4e0:	60 91 b4 00 	lds	r22, 0x00B4	; 0x8000b4 <numOverflows+0x2>
 4e4:	70 91 b5 00 	lds	r23, 0x00B5	; 0x8000b5 <numOverflows+0x3>
 4e8:	84 17       	cp	r24, r20
 4ea:	95 07       	cpc	r25, r21
 4ec:	a6 07       	cpc	r26, r22
 4ee:	b7 07       	cpc	r27, r23
 4f0:	89 f4       	brne	.+34     	; 0x514 <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 4f2:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <remainingCounts>
 4f6:	81 95       	neg	r24
 4f8:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 4fa:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <counter.1685>
 4fe:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <counter.1685+0x1>
 502:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <counter.1685+0x2>
 506:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <counter.1685+0x3>
			Action_Timer[0]();
 50a:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <Action_Timer>
 50e:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <Action_Timer+0x1>
 512:	09 95       	icall
		}
		
	}
}
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <__vector_10>:

ISR(TIMER0_COMP_vect){
 536:	1f 92       	push	r1
 538:	0f 92       	push	r0
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	0f 92       	push	r0
 53e:	11 24       	eor	r1, r1
 540:	2f 93       	push	r18
 542:	3f 93       	push	r19
 544:	4f 93       	push	r20
 546:	5f 93       	push	r21
 548:	6f 93       	push	r22
 54a:	7f 93       	push	r23
 54c:	8f 93       	push	r24
 54e:	9f 93       	push	r25
 550:	af 93       	push	r26
 552:	bf 93       	push	r27
 554:	ef 93       	push	r30
 556:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 558:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <Action_Timer+0x2>
 55c:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <Action_Timer+0x3>
 560:	30 97       	sbiw	r30, 0x00	; 0
 562:	09 f0       	breq	.+2      	; 0x566 <__vector_10+0x30>
		Action_Timer[1]();
 564:	09 95       	icall
		
	}
}
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	bf 91       	pop	r27
 56c:	af 91       	pop	r26
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	7f 91       	pop	r23
 574:	6f 91       	pop	r22
 576:	5f 91       	pop	r21
 578:	4f 91       	pop	r20
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	2f 93       	push	r18
 594:	3f 93       	push	r19
 596:	4f 93       	push	r20
 598:	5f 93       	push	r21
 59a:	6f 93       	push	r22
 59c:	7f 93       	push	r23
 59e:	8f 93       	push	r24
 5a0:	9f 93       	push	r25
 5a2:	af 93       	push	r26
 5a4:	bf 93       	push	r27
 5a6:	cf 93       	push	r28
 5a8:	df 93       	push	r29
 5aa:	ef 93       	push	r30
 5ac:	ff 93       	push	r31
	Action_Timer[0]();
 5ae:	ca eb       	ldi	r28, 0xBA	; 186
 5b0:	d0 e0       	ldi	r29, 0x00	; 0
 5b2:	e8 81       	ld	r30, Y
 5b4:	f9 81       	ldd	r31, Y+1	; 0x01
 5b6:	09 95       	icall
	numOverflows++;
 5b8:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <numOverflows>
 5bc:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <numOverflows+0x1>
 5c0:	a0 91 c4 00 	lds	r26, 0x00C4	; 0x8000c4 <numOverflows+0x2>
 5c4:	b0 91 c5 00 	lds	r27, 0x00C5	; 0x8000c5 <numOverflows+0x3>
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	a1 1d       	adc	r26, r1
 5cc:	b1 1d       	adc	r27, r1
 5ce:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <numOverflows>
 5d2:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <numOverflows+0x1>
 5d6:	a0 93 c4 00 	sts	0x00C4, r26	; 0x8000c4 <numOverflows+0x2>
 5da:	b0 93 c5 00 	sts	0x00C5, r27	; 0x8000c5 <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 5de:	e8 81       	ld	r30, Y
 5e0:	f9 81       	ldd	r31, Y+1	; 0x01
 5e2:	30 97       	sbiw	r30, 0x00	; 0
 5e4:	49 f1       	breq	.+82     	; 0x638 <__vector_9+0xb0>
		counter++;
 5e6:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <counter.1744>
 5ea:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <counter.1744+0x1>
 5ee:	a0 91 b8 00 	lds	r26, 0x00B8	; 0x8000b8 <counter.1744+0x2>
 5f2:	b0 91 b9 00 	lds	r27, 0x00B9	; 0x8000b9 <counter.1744+0x3>
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	a1 1d       	adc	r26, r1
 5fa:	b1 1d       	adc	r27, r1
 5fc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <counter.1744>
 600:	90 93 b7 00 	sts	0x00B7, r25	; 0x8000b7 <counter.1744+0x1>
 604:	a0 93 b8 00 	sts	0x00B8, r26	; 0x8000b8 <counter.1744+0x2>
 608:	b0 93 b9 00 	sts	0x00B9, r27	; 0x8000b9 <counter.1744+0x3>
		if(counter == req_numOverflows){
 60c:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <req_numOverflows>
 610:	50 91 c7 00 	lds	r21, 0x00C7	; 0x8000c7 <req_numOverflows+0x1>
 614:	60 91 c8 00 	lds	r22, 0x00C8	; 0x8000c8 <req_numOverflows+0x2>
 618:	70 91 c9 00 	lds	r23, 0x00C9	; 0x8000c9 <req_numOverflows+0x3>
 61c:	84 17       	cp	r24, r20
 61e:	95 07       	cpc	r25, r21
 620:	a6 07       	cpc	r26, r22
 622:	b7 07       	cpc	r27, r23
 624:	49 f4       	brne	.+18     	; 0x638 <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 626:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <counter.1744>
 62a:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <counter.1744+0x1>
 62e:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <counter.1744+0x2>
 632:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <counter.1744+0x3>
			Action_Timer[0]();
 636:	09 95       	icall
		}
		
	}
}
 638:	ff 91       	pop	r31
 63a:	ef 91       	pop	r30
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	bf 91       	pop	r27
 642:	af 91       	pop	r26
 644:	9f 91       	pop	r25
 646:	8f 91       	pop	r24
 648:	7f 91       	pop	r23
 64a:	6f 91       	pop	r22
 64c:	5f 91       	pop	r21
 64e:	4f 91       	pop	r20
 650:	3f 91       	pop	r19
 652:	2f 91       	pop	r18
 654:	0f 90       	pop	r0
 656:	0f be       	out	0x3f, r0	; 63
 658:	0f 90       	pop	r0
 65a:	1f 90       	pop	r1
 65c:	18 95       	reti

0000065e <__vector_7>:

ISR(TIMER1_COMPA_vect){
 65e:	1f 92       	push	r1
 660:	0f 92       	push	r0
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	0f 92       	push	r0
 666:	11 24       	eor	r1, r1
 668:	2f 93       	push	r18
 66a:	3f 93       	push	r19
 66c:	4f 93       	push	r20
 66e:	5f 93       	push	r21
 670:	6f 93       	push	r22
 672:	7f 93       	push	r23
 674:	8f 93       	push	r24
 676:	9f 93       	push	r25
 678:	af 93       	push	r26
 67a:	bf 93       	push	r27
 67c:	ef 93       	push	r30
 67e:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 680:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <Action_Timer+0x2>
 684:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <Action_Timer+0x3>
 688:	30 97       	sbiw	r30, 0x00	; 0
 68a:	09 f0       	breq	.+2      	; 0x68e <__vector_7+0x30>
		Action_Timer[1]();
 68c:	09 95       	icall
	}
}
 68e:	ff 91       	pop	r31
 690:	ef 91       	pop	r30
 692:	bf 91       	pop	r27
 694:	af 91       	pop	r26
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	7f 91       	pop	r23
 69c:	6f 91       	pop	r22
 69e:	5f 91       	pop	r21
 6a0:	4f 91       	pop	r20
 6a2:	3f 91       	pop	r19
 6a4:	2f 91       	pop	r18
 6a6:	0f 90       	pop	r0
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	0f 90       	pop	r0
 6ac:	1f 90       	pop	r1
 6ae:	18 95       	reti

000006b0 <__vector_6>:


ISR(TIMER1_CAPT_vect){
 6b0:	1f 92       	push	r1
 6b2:	0f 92       	push	r0
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	0f 92       	push	r0
 6b8:	11 24       	eor	r1, r1
 6ba:	2f 93       	push	r18
 6bc:	3f 93       	push	r19
 6be:	4f 93       	push	r20
 6c0:	5f 93       	push	r21
 6c2:	6f 93       	push	r22
 6c4:	7f 93       	push	r23
 6c6:	8f 93       	push	r24
 6c8:	9f 93       	push	r25
 6ca:	af 93       	push	r26
 6cc:	bf 93       	push	r27
 6ce:	ef 93       	push	r30
 6d0:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 6d2:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <Action_Timer+0x6>
 6d6:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <Action_Timer+0x7>
 6da:	30 97       	sbiw	r30, 0x00	; 0
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <__vector_6+0x30>
			Action_Timer[3]();
 6de:	09 95       	icall
			
			
		}
 6e0:	ff 91       	pop	r31
 6e2:	ef 91       	pop	r30
 6e4:	bf 91       	pop	r27
 6e6:	af 91       	pop	r26
 6e8:	9f 91       	pop	r25
 6ea:	8f 91       	pop	r24
 6ec:	7f 91       	pop	r23
 6ee:	6f 91       	pop	r22
 6f0:	5f 91       	pop	r21
 6f2:	4f 91       	pop	r20
 6f4:	3f 91       	pop	r19
 6f6:	2f 91       	pop	r18
 6f8:	0f 90       	pop	r0
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	0f 90       	pop	r0
 6fe:	1f 90       	pop	r1
 700:	18 95       	reti

00000702 <__vector_13>:
	//set callback
	Action_Uart[0] = ptrfn;
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 702:	1f 92       	push	r1
 704:	0f 92       	push	r0
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	0f 92       	push	r0
 70a:	11 24       	eor	r1, r1
 70c:	2f 93       	push	r18
 70e:	3f 93       	push	r19
 710:	4f 93       	push	r20
 712:	5f 93       	push	r21
 714:	6f 93       	push	r22
 716:	7f 93       	push	r23
 718:	8f 93       	push	r24
 71a:	9f 93       	push	r25
 71c:	af 93       	push	r26
 71e:	bf 93       	push	r27
 720:	ef 93       	push	r30
 722:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 724:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 726:	e0 91 ca 00 	lds	r30, 0x00CA	; 0x8000ca <Action_Uart>
 72a:	f0 91 cb 00 	lds	r31, 0x00CB	; 0x8000cb <Action_Uart+0x1>
 72e:	30 97       	sbiw	r30, 0x00	; 0
 730:	09 f0       	breq	.+2      	; 0x734 <__vector_13+0x32>
		Action_Uart[0](receivedData);
 732:	09 95       	icall
	}
 734:	ff 91       	pop	r31
 736:	ef 91       	pop	r30
 738:	bf 91       	pop	r27
 73a:	af 91       	pop	r26
 73c:	9f 91       	pop	r25
 73e:	8f 91       	pop	r24
 740:	7f 91       	pop	r23
 742:	6f 91       	pop	r22
 744:	5f 91       	pop	r21
 746:	4f 91       	pop	r20
 748:	3f 91       	pop	r19
 74a:	2f 91       	pop	r18
 74c:	0f 90       	pop	r0
 74e:	0f be       	out	0x3f, r0	; 63
 750:	0f 90       	pop	r0
 752:	1f 90       	pop	r1
 754:	18 95       	reti

00000756 <Task1Callback>:

void pendSV(void);
void runHighestPriorityTask();

// Define the task functions
void Task1Callback(void) {
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	00 d0       	rcall	.+0      	; 0x75c <Task1Callback+0x6>
 75c:	00 d0       	rcall	.+0      	; 0x75e <Task1Callback+0x8>
 75e:	cd b7       	in	r28, 0x3d	; 61
 760:	de b7       	in	r29, 0x3e	; 62
	// Toggle PB0 LED
	DIO_Config led = {DIO_PORTB, DIO_PIN0, DIO_PIN_OUTPUT};
 762:	19 82       	std	Y+1, r1	; 0x01
 764:	1a 82       	std	Y+2, r1	; 0x02
 766:	1b 82       	std	Y+3, r1	; 0x03
 768:	1c 82       	std	Y+4, r1	; 0x04
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	89 83       	std	Y+1, r24	; 0x01
 76e:	8b 83       	std	Y+3, r24	; 0x03
	DIO_U8TogglePin(&led);
 770:	ce 01       	movw	r24, r28
 772:	01 96       	adiw	r24, 0x01	; 1
 774:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_U8TogglePin>
}
 778:	0f 90       	pop	r0
 77a:	0f 90       	pop	r0
 77c:	0f 90       	pop	r0
 77e:	0f 90       	pop	r0
 780:	df 91       	pop	r29
 782:	cf 91       	pop	r28
 784:	08 95       	ret

00000786 <Task3Callback>:
		led.pin= DIO_PIN2;
		DIO_U8TogglePin(&led);
	}
}

void Task3Callback(void) {
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	00 d0       	rcall	.+0      	; 0x78c <Task3Callback+0x6>
 78c:	00 d0       	rcall	.+0      	; 0x78e <Task3Callback+0x8>
 78e:	cd b7       	in	r28, 0x3d	; 61
 790:	de b7       	in	r29, 0x3e	; 62
	// Toggle the Green LED
	DIO_Config led = {DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT};
 792:	19 82       	std	Y+1, r1	; 0x01
 794:	1a 82       	std	Y+2, r1	; 0x02
 796:	1b 82       	std	Y+3, r1	; 0x03
 798:	1c 82       	std	Y+4, r1	; 0x04
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	89 83       	std	Y+1, r24	; 0x01
 79e:	93 e0       	ldi	r25, 0x03	; 3
 7a0:	9a 83       	std	Y+2, r25	; 0x02
 7a2:	8b 83       	std	Y+3, r24	; 0x03
	DIO_U8TogglePin(&led);
 7a4:	ce 01       	movw	r24, r28
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_U8TogglePin>
}
 7ac:	0f 90       	pop	r0
 7ae:	0f 90       	pop	r0
 7b0:	0f 90       	pop	r0
 7b2:	0f 90       	pop	r0
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	08 95       	ret

000007ba <Task2Callback>:
	// Toggle PB0 LED
	DIO_Config led = {DIO_PORTB, DIO_PIN0, DIO_PIN_OUTPUT};
	DIO_U8TogglePin(&led);
}

void Task2Callback(void) {
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	00 d0       	rcall	.+0      	; 0x7c0 <Task2Callback+0x6>
 7c0:	00 d0       	rcall	.+0      	; 0x7c2 <Task2Callback+0x8>
 7c2:	1f 92       	push	r1
 7c4:	cd b7       	in	r28, 0x3d	; 61
 7c6:	de b7       	in	r29, 0x3e	; 62
	// Check the state of PB1 and toggle the BLUE LED if pressed
	u8 value;
	DIO_Config led = {DIO_PORTB, DIO_PIN1};
 7c8:	1a 82       	std	Y+2, r1	; 0x02
 7ca:	1b 82       	std	Y+3, r1	; 0x03
 7cc:	1c 82       	std	Y+4, r1	; 0x04
 7ce:	1d 82       	std	Y+5, r1	; 0x05
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	8a 83       	std	Y+2, r24	; 0x02
 7d4:	8b 83       	std	Y+3, r24	; 0x03
	DIO_U8GetPinValue(&led, &value);
 7d6:	be 01       	movw	r22, r28
 7d8:	6f 5f       	subi	r22, 0xFF	; 255
 7da:	7f 4f       	sbci	r23, 0xFF	; 255
 7dc:	ce 01       	movw	r24, r28
 7de:	02 96       	adiw	r24, 0x02	; 2
 7e0:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_U8GetPinValue>
	if (value == 0) {
 7e4:	89 81       	ldd	r24, Y+1	; 0x01
 7e6:	81 11       	cpse	r24, r1
 7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <Task2Callback+0x3c>
		led.pin= DIO_PIN2;
 7ea:	82 e0       	ldi	r24, 0x02	; 2
 7ec:	8b 83       	std	Y+3, r24	; 0x03
		DIO_U8TogglePin(&led);
 7ee:	ce 01       	movw	r24, r28
 7f0:	02 96       	adiw	r24, 0x02	; 2
 7f2:	0e 94 a5 00 	call	0x14a	; 0x14a <DIO_U8TogglePin>
	}
}
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	df 91       	pop	r29
 802:	cf 91       	pop	r28
 804:	08 95       	ret

00000806 <startOS>:
u8 queueSize = 0;
u8 queueFront = 0; // Front of the queue
u8 queueRear = 0;  // Rear of the queue

// Initialize the hardware
void startOS() {
 806:	1f 93       	push	r17
 808:	cf 93       	push	r28
 80a:	df 93       	push	r29
 80c:	cd b7       	in	r28, 0x3d	; 61
 80e:	de b7       	in	r29, 0x3e	; 62
 810:	64 97       	sbiw	r28, 0x14	; 20
 812:	0f b6       	in	r0, 0x3f	; 63
 814:	f8 94       	cli
 816:	de bf       	out	0x3e, r29	; 62
 818:	0f be       	out	0x3f, r0	; 63
 81a:	cd bf       	out	0x3d, r28	; 61
	DIO_Config pins[] = {
 81c:	fe 01       	movw	r30, r28
 81e:	31 96       	adiw	r30, 0x01	; 1
 820:	80 e1       	ldi	r24, 0x10	; 16
 822:	df 01       	movw	r26, r30
 824:	1d 92       	st	X+, r1
 826:	8a 95       	dec	r24
 828:	e9 f7       	brne	.-6      	; 0x824 <startOS+0x1e>
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	89 83       	std	Y+1, r24	; 0x01
 82e:	8b 83       	std	Y+3, r24	; 0x03
 830:	8d 83       	std	Y+5, r24	; 0x05
 832:	8e 83       	std	Y+6, r24	; 0x06
 834:	89 87       	std	Y+9, r24	; 0x09
 836:	92 e0       	ldi	r25, 0x02	; 2
 838:	9a 87       	std	Y+10, r25	; 0x0a
 83a:	8b 87       	std	Y+11, r24	; 0x0b
 83c:	8d 87       	std	Y+13, r24	; 0x0d
 83e:	93 e0       	ldi	r25, 0x03	; 3
 840:	9e 87       	std	Y+14, r25	; 0x0e
 842:	8f 87       	std	Y+15, r24	; 0x0f
		{DIO_PORTB, DIO_PIN1, DIO_PIN_INPUT},
		{DIO_PORTB, DIO_PIN2, DIO_PIN_OUTPUT},
		{DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT},
	};
	// Initialize pins
	for (u8 i = 0; i < 4; i++) {
 844:	10 e0       	ldi	r17, 0x00	; 0
 846:	0f c0       	rjmp	.+30     	; 0x866 <__stack+0x7>
		DIO_U8SetPinDirection(&pins[i]);
 848:	81 2f       	mov	r24, r17
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	88 0f       	add	r24, r24
 852:	99 1f       	adc	r25, r25
 854:	21 e0       	ldi	r18, 0x01	; 1
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	2c 0f       	add	r18, r28
 85a:	3d 1f       	adc	r19, r29
 85c:	82 0f       	add	r24, r18
 85e:	93 1f       	adc	r25, r19
 860:	0e 94 67 00 	call	0xce	; 0xce <DIO_U8SetPinDirection>
		{DIO_PORTB, DIO_PIN1, DIO_PIN_INPUT},
		{DIO_PORTB, DIO_PIN2, DIO_PIN_OUTPUT},
		{DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT},
	};
	// Initialize pins
	for (u8 i = 0; i < 4; i++) {
 864:	1f 5f       	subi	r17, 0xFF	; 255
 866:	14 30       	cpi	r17, 0x04	; 4
 868:	78 f3       	brcs	.-34     	; 0x848 <startOS+0x42>
		DIO_U8SetPinDirection(&pins[i]);
	}

	Timer0_Config timer = {NORMAL, PRESCALER_1024};
 86a:	19 8a       	std	Y+17, r1	; 0x11
 86c:	1a 8a       	std	Y+18, r1	; 0x12
 86e:	1b 8a       	std	Y+19, r1	; 0x13
 870:	1c 8a       	std	Y+20, r1	; 0x14
 872:	85 e0       	ldi	r24, 0x05	; 5
 874:	8a 8b       	std	Y+18, r24	; 0x12
	M_TIMER0_void_Init(&timer);
 876:	ce 01       	movw	r24, r28
 878:	41 96       	adiw	r24, 0x11	; 17
 87a:	0e 94 99 01 	call	0x332	; 0x332 <M_TIMER0_void_Init>
	M_TIMER0_void_setCallBack(pendSV, OVERFLOW);
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	87 e7       	ldi	r24, 0x77	; 119
 882:	94 e0       	ldi	r25, 0x04	; 4
 884:	0e 94 34 02 	call	0x468	; 0x468 <M_TIMER0_void_setCallBack>
	M_TIMER0_void_IntEnable(OVERFLOW);
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	0e 94 28 02 	call	0x450	; 0x450 <M_TIMER0_void_IntEnable>
	M_TIMER0_void_setDelayTimeMilliSec(500);
 88e:	64 ef       	ldi	r22, 0xF4	; 244
 890:	71 e0       	ldi	r23, 0x01	; 1
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 cc 01 	call	0x398	; 0x398 <M_TIMER0_void_setDelayTimeMilliSec>
	M_TIMER0_void_start();
 89a:	0e 94 c5 01 	call	0x38a	; 0x38a <M_TIMER0_void_start>
}
 89e:	64 96       	adiw	r28, 0x14	; 20
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	de bf       	out	0x3e, r29	; 62
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	cd bf       	out	0x3d, r28	; 61
 8aa:	df 91       	pop	r29
 8ac:	cf 91       	pop	r28
 8ae:	1f 91       	pop	r17
 8b0:	08 95       	ret

000008b2 <runHighestPriorityTask>:
	runHighestPriorityTask(); // Execute the highest-priority task
}

// Execute the next task from the FIFO queue
void runHighestPriorityTask() {
	if (queueSize > 0) {
 8b2:	20 91 d2 00 	lds	r18, 0x00D2	; 0x8000d2 <queueSize>
 8b6:	22 23       	and	r18, r18
 8b8:	c9 f0       	breq	.+50     	; 0x8ec <runHighestPriorityTask+0x3a>
		TaskControlBlock* nextTask = taskQueue[queueFront];
 8ba:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <queueFront>
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	fc 01       	movw	r30, r24
 8c2:	ee 0f       	add	r30, r30
 8c4:	ff 1f       	adc	r31, r31
 8c6:	ed 52       	subi	r30, 0x2D	; 45
 8c8:	ff 4f       	sbci	r31, 0xFF	; 255
 8ca:	01 90       	ld	r0, Z+
 8cc:	f0 81       	ld	r31, Z
 8ce:	e0 2d       	mov	r30, r0
		queueFront = (queueFront + 1) % NUM_TASKS; // Circular queue
 8d0:	01 96       	adiw	r24, 0x01	; 1
 8d2:	65 e0       	ldi	r22, 0x05	; 5
 8d4:	70 e0       	ldi	r23, 0x00	; 0
 8d6:	0e 94 c8 04 	call	0x990	; 0x990 <__divmodhi4>
 8da:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <queueFront>
		queueSize--;
 8de:	21 50       	subi	r18, 0x01	; 1
 8e0:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <queueSize>

		// Execute the next task in the queue
		nextTask->taskFunc();
 8e4:	01 90       	ld	r0, Z+
 8e6:	f0 81       	ld	r31, Z
 8e8:	e0 2d       	mov	r30, r0
 8ea:	09 95       	icall
 8ec:	08 95       	ret

000008ee <pendSV>:
	M_TIMER0_void_setDelayTimeMilliSec(500);
	M_TIMER0_void_start();
}

void pendSV(void) {
	for (u8 i = 0; i < NUM_TASKS; i++) {
 8ee:	40 e0       	ldi	r20, 0x00	; 0
 8f0:	49 c0       	rjmp	.+146    	; 0x984 <pendSV+0x96>
		tasks[i].counter += 500; // Increment the counter for all tasks
 8f2:	24 2f       	mov	r18, r20
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	f9 01       	movw	r30, r18
 8f8:	ee 0f       	add	r30, r30
 8fa:	ff 1f       	adc	r31, r31
 8fc:	ee 0f       	add	r30, r30
 8fe:	ff 1f       	adc	r31, r31
 900:	ee 0f       	add	r30, r30
 902:	ff 1f       	adc	r31, r31
 904:	e2 1b       	sub	r30, r18
 906:	f3 0b       	sbc	r31, r19
 908:	e0 5a       	subi	r30, 0xA0	; 160
 90a:	ff 4f       	sbci	r31, 0xFF	; 255
 90c:	84 81       	ldd	r24, Z+4	; 0x04
 90e:	95 81       	ldd	r25, Z+5	; 0x05
 910:	8c 50       	subi	r24, 0x0C	; 12
 912:	9e 4f       	sbci	r25, 0xFE	; 254
 914:	95 83       	std	Z+5, r25	; 0x05
 916:	84 83       	std	Z+4, r24	; 0x04

		if (tasks[i].counter >= tasks[i].period) {
 918:	62 81       	ldd	r22, Z+2	; 0x02
 91a:	73 81       	ldd	r23, Z+3	; 0x03
 91c:	86 17       	cp	r24, r22
 91e:	97 07       	cpc	r25, r23
 920:	80 f1       	brcs	.+96     	; 0x982 <pendSV+0x94>
			// Add the task to the task queue (FIFO)
			if (queueSize < NUM_TASKS) {
 922:	e0 91 d2 00 	lds	r30, 0x00D2	; 0x8000d2 <queueSize>
 926:	e5 30       	cpi	r30, 0x05	; 5
 928:	f8 f4       	brcc	.+62     	; 0x968 <pendSV+0x7a>
				taskQueue[queueRear] = &tasks[i];
 92a:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <queueRear>
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	b9 01       	movw	r22, r18
 932:	66 0f       	add	r22, r22
 934:	77 1f       	adc	r23, r23
 936:	66 0f       	add	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	66 0f       	add	r22, r22
 93c:	77 1f       	adc	r23, r23
 93e:	62 1b       	sub	r22, r18
 940:	73 0b       	sbc	r23, r19
 942:	60 5a       	subi	r22, 0xA0	; 160
 944:	7f 4f       	sbci	r23, 0xFF	; 255
 946:	dc 01       	movw	r26, r24
 948:	aa 0f       	add	r26, r26
 94a:	bb 1f       	adc	r27, r27
 94c:	ad 52       	subi	r26, 0x2D	; 45
 94e:	bf 4f       	sbci	r27, 0xFF	; 255
 950:	6d 93       	st	X+, r22
 952:	7c 93       	st	X, r23
				queueRear = (queueRear + 1) % NUM_TASKS; // Circular queue
 954:	01 96       	adiw	r24, 0x01	; 1
 956:	65 e0       	ldi	r22, 0x05	; 5
 958:	70 e0       	ldi	r23, 0x00	; 0
 95a:	0e 94 c8 04 	call	0x990	; 0x990 <__divmodhi4>
 95e:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <queueRear>
				queueSize++;
 962:	ef 5f       	subi	r30, 0xFF	; 255
 964:	e0 93 d2 00 	sts	0x00D2, r30	; 0x8000d2 <queueSize>
			}
			tasks[i].counter = 0; // Reset the counter
 968:	f9 01       	movw	r30, r18
 96a:	ee 0f       	add	r30, r30
 96c:	ff 1f       	adc	r31, r31
 96e:	ee 0f       	add	r30, r30
 970:	ff 1f       	adc	r31, r31
 972:	ee 0f       	add	r30, r30
 974:	ff 1f       	adc	r31, r31
 976:	e2 1b       	sub	r30, r18
 978:	f3 0b       	sbc	r31, r19
 97a:	e0 5a       	subi	r30, 0xA0	; 160
 97c:	ff 4f       	sbci	r31, 0xFF	; 255
 97e:	15 82       	std	Z+5, r1	; 0x05
 980:	14 82       	std	Z+4, r1	; 0x04
	M_TIMER0_void_setDelayTimeMilliSec(500);
	M_TIMER0_void_start();
}

void pendSV(void) {
	for (u8 i = 0; i < NUM_TASKS; i++) {
 982:	4f 5f       	subi	r20, 0xFF	; 255
 984:	45 30       	cpi	r20, 0x05	; 5
 986:	08 f4       	brcc	.+2      	; 0x98a <pendSV+0x9c>
 988:	b4 cf       	rjmp	.-152    	; 0x8f2 <pendSV+0x4>
				queueSize++;
			}
			tasks[i].counter = 0; // Reset the counter
		}
	}
	runHighestPriorityTask(); // Execute the highest-priority task
 98a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <runHighestPriorityTask>
 98e:	08 95       	ret

00000990 <__divmodhi4>:
 990:	97 fb       	bst	r25, 7
 992:	07 2e       	mov	r0, r23
 994:	16 f4       	brtc	.+4      	; 0x99a <__divmodhi4+0xa>
 996:	00 94       	com	r0
 998:	07 d0       	rcall	.+14     	; 0x9a8 <__divmodhi4_neg1>
 99a:	77 fd       	sbrc	r23, 7
 99c:	09 d0       	rcall	.+18     	; 0x9b0 <__divmodhi4_neg2>
 99e:	0e 94 09 05 	call	0xa12	; 0xa12 <__udivmodhi4>
 9a2:	07 fc       	sbrc	r0, 7
 9a4:	05 d0       	rcall	.+10     	; 0x9b0 <__divmodhi4_neg2>
 9a6:	3e f4       	brtc	.+14     	; 0x9b6 <__divmodhi4_exit>

000009a8 <__divmodhi4_neg1>:
 9a8:	90 95       	com	r25
 9aa:	81 95       	neg	r24
 9ac:	9f 4f       	sbci	r25, 0xFF	; 255
 9ae:	08 95       	ret

000009b0 <__divmodhi4_neg2>:
 9b0:	70 95       	com	r23
 9b2:	61 95       	neg	r22
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255

000009b6 <__divmodhi4_exit>:
 9b6:	08 95       	ret

000009b8 <__udivmodsi4>:
 9b8:	a1 e2       	ldi	r26, 0x21	; 33
 9ba:	1a 2e       	mov	r1, r26
 9bc:	aa 1b       	sub	r26, r26
 9be:	bb 1b       	sub	r27, r27
 9c0:	fd 01       	movw	r30, r26
 9c2:	0d c0       	rjmp	.+26     	; 0x9de <__udivmodsi4_ep>

000009c4 <__udivmodsi4_loop>:
 9c4:	aa 1f       	adc	r26, r26
 9c6:	bb 1f       	adc	r27, r27
 9c8:	ee 1f       	adc	r30, r30
 9ca:	ff 1f       	adc	r31, r31
 9cc:	a2 17       	cp	r26, r18
 9ce:	b3 07       	cpc	r27, r19
 9d0:	e4 07       	cpc	r30, r20
 9d2:	f5 07       	cpc	r31, r21
 9d4:	20 f0       	brcs	.+8      	; 0x9de <__udivmodsi4_ep>
 9d6:	a2 1b       	sub	r26, r18
 9d8:	b3 0b       	sbc	r27, r19
 9da:	e4 0b       	sbc	r30, r20
 9dc:	f5 0b       	sbc	r31, r21

000009de <__udivmodsi4_ep>:
 9de:	66 1f       	adc	r22, r22
 9e0:	77 1f       	adc	r23, r23
 9e2:	88 1f       	adc	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	1a 94       	dec	r1
 9e8:	69 f7       	brne	.-38     	; 0x9c4 <__udivmodsi4_loop>
 9ea:	60 95       	com	r22
 9ec:	70 95       	com	r23
 9ee:	80 95       	com	r24
 9f0:	90 95       	com	r25
 9f2:	9b 01       	movw	r18, r22
 9f4:	ac 01       	movw	r20, r24
 9f6:	bd 01       	movw	r22, r26
 9f8:	cf 01       	movw	r24, r30
 9fa:	08 95       	ret

000009fc <__muluhisi3>:
 9fc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <__umulhisi3>
 a00:	a5 9f       	mul	r26, r21
 a02:	90 0d       	add	r25, r0
 a04:	b4 9f       	mul	r27, r20
 a06:	90 0d       	add	r25, r0
 a08:	a4 9f       	mul	r26, r20
 a0a:	80 0d       	add	r24, r0
 a0c:	91 1d       	adc	r25, r1
 a0e:	11 24       	eor	r1, r1
 a10:	08 95       	ret

00000a12 <__udivmodhi4>:
 a12:	aa 1b       	sub	r26, r26
 a14:	bb 1b       	sub	r27, r27
 a16:	51 e1       	ldi	r21, 0x11	; 17
 a18:	07 c0       	rjmp	.+14     	; 0xa28 <__udivmodhi4_ep>

00000a1a <__udivmodhi4_loop>:
 a1a:	aa 1f       	adc	r26, r26
 a1c:	bb 1f       	adc	r27, r27
 a1e:	a6 17       	cp	r26, r22
 a20:	b7 07       	cpc	r27, r23
 a22:	10 f0       	brcs	.+4      	; 0xa28 <__udivmodhi4_ep>
 a24:	a6 1b       	sub	r26, r22
 a26:	b7 0b       	sbc	r27, r23

00000a28 <__udivmodhi4_ep>:
 a28:	88 1f       	adc	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	5a 95       	dec	r21
 a2e:	a9 f7       	brne	.-22     	; 0xa1a <__udivmodhi4_loop>
 a30:	80 95       	com	r24
 a32:	90 95       	com	r25
 a34:	bc 01       	movw	r22, r24
 a36:	cd 01       	movw	r24, r26
 a38:	08 95       	ret

00000a3a <__umulhisi3>:
 a3a:	a2 9f       	mul	r26, r18
 a3c:	b0 01       	movw	r22, r0
 a3e:	b3 9f       	mul	r27, r19
 a40:	c0 01       	movw	r24, r0
 a42:	a3 9f       	mul	r26, r19
 a44:	70 0d       	add	r23, r0
 a46:	81 1d       	adc	r24, r1
 a48:	11 24       	eor	r1, r1
 a4a:	91 1d       	adc	r25, r1
 a4c:	b2 9f       	mul	r27, r18
 a4e:	70 0d       	add	r23, r0
 a50:	81 1d       	adc	r24, r1
 a52:	11 24       	eor	r1, r1
 a54:	91 1d       	adc	r25, r1
 a56:	08 95       	ret

00000a58 <_exit>:
 a58:	f8 94       	cli

00000a5a <__stop_program>:
 a5a:	ff cf       	rjmp	.-2      	; 0xa5a <__stop_program>
