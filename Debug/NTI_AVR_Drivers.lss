
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  00000e80  00000f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  00800104  00800104  00000fb8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fe8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003461  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012c8  00000000  00000000  000047d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a42  00000000  00000000  00005a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a04  00000000  00000000  000074e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014c1  00000000  00000000  00007ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022b6  00000000  00000000  000093a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000b65b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_1>
   8:	0c 94 b1 04 	jmp	0x962	; 0x962 <__vector_2>
   c:	0c 94 da 04 	jmp	0x9b4	; 0x9b4 <__vector_3>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_6>
  1c:	0c 94 5f 06 	jmp	0xcbe	; 0xcbe <__vector_7>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__vector_9>
  28:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__vector_10>
  2c:	0c 94 72 05 	jmp	0xae4	; 0xae4 <__vector_11>
  30:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__vector_12>
  34:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__vector_13>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	f3 00       	.word	0x00f3	; ????
  56:	0f 01       	movw	r0, r30
  58:	f5 00       	.word	0x00f5	; ????
  5a:	f7 00       	.word	0x00f7	; ????
  5c:	f9 00       	.word	0x00f9	; ????
  5e:	fb 00       	.word	0x00fb	; ????
  60:	fd 00       	.word	0x00fd	; ????
  62:	ff 00       	.word	0x00ff	; ????
  64:	01 01       	movw	r0, r2
  66:	03 01       	movw	r0, r6
  68:	05 01       	movw	r0, r10
  6a:	07 01       	movw	r0, r14
  6c:	10 01       	movw	r2, r0
  6e:	09 01       	movw	r0, r18
  70:	0b 01       	movw	r0, r22
  72:	0d 01       	movw	r0, r26

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e0 e8       	ldi	r30, 0x80	; 128
  88:	fe e0       	ldi	r31, 0x0E	; 14
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a4 30       	cpi	r26, 0x04	; 4
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a4 e0       	ldi	r26, 0x04	; 4
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	ac 33       	cpi	r26, 0x3C	; 60
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  aa:	0c 94 3e 07 	jmp	0xe7c	; 0xe7c <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <takeUserInput>:
// Global variables for duty cycle and frequency
u8 duty = 0;
u8 freq = 0;

// Function to take user input for duty cycle and frequency
void takeUserInput(void) {
  b2:	cf 93       	push	r28
    duty = 0;
  b4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <duty>
    u8 key;
    H_LCD_void_clearScreen();
  b8:	0e 94 c2 03 	call	0x784	; 0x784 <H_LCD_void_clearScreen>
    H_LCD_void_sendString("Enter Duty Cycle: ");
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <H_LCD_void_sendString>
    H_LCD_void_gotoXY(1, 0);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 af 03 	call	0x75e	; 0x75e <H_LCD_void_gotoXY>
    for (u8 i = 0; i < 3; i++) {
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	15 c0       	rjmp	.+42     	; 0xfa <takeUserInput+0x48>
        key = KEYPAD_getPressedKey();
  d0:	0e 94 11 01 	call	0x222	; 0x222 <KEYPAD_getPressedKey>
        if (key == 13) {
  d4:	8d 30       	cpi	r24, 0x0D	; 13
  d6:	99 f0       	breq	.+38     	; 0xfe <takeUserInput+0x4c>
            break;
        }
        duty = duty * 10 + key;
  d8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <duty>
  dc:	99 0f       	add	r25, r25
  de:	29 2f       	mov	r18, r25
  e0:	22 0f       	add	r18, r18
  e2:	22 0f       	add	r18, r18
  e4:	92 0f       	add	r25, r18
  e6:	98 0f       	add	r25, r24
  e8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <duty>
        H_LCD_void_sendIntNum(key);
  ec:	68 2f       	mov	r22, r24
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 90 03 	call	0x720	; 0x720 <H_LCD_void_sendIntNum>
    duty = 0;
    u8 key;
    H_LCD_void_clearScreen();
    H_LCD_void_sendString("Enter Duty Cycle: ");
    H_LCD_void_gotoXY(1, 0);
    for (u8 i = 0; i < 3; i++) {
  f8:	cf 5f       	subi	r28, 0xFF	; 255
  fa:	c3 30       	cpi	r28, 0x03	; 3
  fc:	48 f3       	brcs	.-46     	; 0xd0 <takeUserInput+0x1e>
            break;
        }
        duty = duty * 10 + key;
        H_LCD_void_sendIntNum(key);
    }
    H_LCD_void_clearScreen();
  fe:	0e 94 c2 03 	call	0x784	; 0x784 <H_LCD_void_clearScreen>
    H_LCD_void_sendString("Choose Freq : ");
 102:	83 e9       	ldi	r24, 0x93	; 147
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 7d 03 	call	0x6fa	; 0x6fa <H_LCD_void_sendString>
    H_LCD_void_gotoXY(1, 0);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 af 03 	call	0x75e	; 0x75e <H_LCD_void_gotoXY>
    H_LCD_void_sendString("1-62.5khz   2-7.8khz");
 112:	82 ea       	ldi	r24, 0xA2	; 162
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 7d 03 	call	0x6fa	; 0x6fa <H_LCD_void_sendString>
    H_LCD_void_gotoXY(2, 4);
 11a:	64 e0       	ldi	r22, 0x04	; 4
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 af 03 	call	0x75e	; 0x75e <H_LCD_void_gotoXY>
    H_LCD_void_sendString("3-976hz     4-244khz");
 122:	87 eb       	ldi	r24, 0xB7	; 183
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 7d 03 	call	0x6fa	; 0x6fa <H_LCD_void_sendString>
    H_LCD_void_gotoXY(3, 4);
 12a:	64 e0       	ldi	r22, 0x04	; 4
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	0e 94 af 03 	call	0x75e	; 0x75e <H_LCD_void_gotoXY>
    H_LCD_void_sendString("5-61hz");
 132:	8c ec       	ldi	r24, 0xCC	; 204
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 7d 03 	call	0x6fa	; 0x6fa <H_LCD_void_sendString>
    freq = KEYPAD_getPressedKey();
 13a:	0e 94 11 01 	call	0x222	; 0x222 <KEYPAD_getPressedKey>
 13e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <main>:

int main(void) {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	28 97       	sbiw	r28, 0x08	; 8
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
    // Configure the output pin for PWM signal
    DIO_Config oc0_pin = {DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT};
 15a:	19 82       	std	Y+1, r1	; 0x01
 15c:	1a 82       	std	Y+2, r1	; 0x02
 15e:	1b 82       	std	Y+3, r1	; 0x03
 160:	1c 82       	std	Y+4, r1	; 0x04
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	93 e0       	ldi	r25, 0x03	; 3
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	8b 83       	std	Y+3, r24	; 0x03
    DIO_U8SetPinDirection(&oc0_pin);
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	0e 94 df 03 	call	0x7be	; 0x7be <DIO_U8SetPinDirection>

    // Enable global interrupt
    GIE_enable();
 174:	0e 94 03 05 	call	0xa06	; 0xa06 <GIE_enable>

    // Initialize the LCD
    H_LCD_void_Init();
 178:	0e 94 b5 02 	call	0x56a	; 0x56a <H_LCD_void_Init>

    while (1) {
        // Take user input for duty cycle and frequency
        takeUserInput();
 17c:	0e 94 59 00 	call	0xb2	; 0xb2 <takeUserInput>

        while (1) {
            // Configure and start Timer0 for PWM generation
            Timer0_Config config = {FAST_PWM, NO_CLK, OC0_CLR};
 180:	1d 82       	std	Y+5, r1	; 0x05
 182:	1e 82       	std	Y+6, r1	; 0x06
 184:	1f 82       	std	Y+7, r1	; 0x07
 186:	18 86       	std	Y+8, r1	; 0x08
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	8d 83       	std	Y+5, r24	; 0x05
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	8f 83       	std	Y+7, r24	; 0x07
            M_TIMER0_void_Init(&config);
 190:	ce 01       	movw	r24, r28
 192:	05 96       	adiw	r24, 0x05	; 5
 194:	0e 94 2f 05 	call	0xa5e	; 0xa5e <M_TIMER0_void_Init>
            M_TIMER0_void_setFastPWM(freq, duty);
 198:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <duty>
 19c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1a0:	0e 94 5b 05 	call	0xab6	; 0xab6 <M_TIMER0_void_setFastPWM>

            // Display a message on the LCD
            H_LCD_void_clearScreen();
 1a4:	0e 94 c2 03 	call	0x784	; 0x784 <H_LCD_void_clearScreen>
            H_LCD_void_sendString("Motor Running ");
 1a8:	83 ed       	ldi	r24, 0xD3	; 211
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 7d 03 	call	0x6fa	; 0x6fa <H_LCD_void_sendString>
            H_LCD_void_gotoXY(3, 4);
 1b0:	64 e0       	ldi	r22, 0x04	; 4
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 af 03 	call	0x75e	; 0x75e <H_LCD_void_gotoXY>
            H_LCD_void_sendString("Go BACK ?");
 1b8:	82 ee       	ldi	r24, 0xE2	; 226
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 7d 03 	call	0x6fa	; 0x6fa <H_LCD_void_sendString>
            
            // Wait for the user to press a key (Enter key) to exit the loop
            u8 key = KEYPAD_getPressedKey();
 1c0:	0e 94 11 01 	call	0x222	; 0x222 <KEYPAD_getPressedKey>
            while (key != 13) {
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <main+0x84>
                key = KEYPAD_getPressedKey();
 1c6:	0e 94 11 01 	call	0x222	; 0x222 <KEYPAD_getPressedKey>
            H_LCD_void_gotoXY(3, 4);
            H_LCD_void_sendString("Go BACK ?");
            
            // Wait for the user to press a key (Enter key) to exit the loop
            u8 key = KEYPAD_getPressedKey();
            while (key != 13) {
 1ca:	8d 30       	cpi	r24, 0x0D	; 13
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x80>
 1ce:	d6 cf       	rjmp	.-84     	; 0x17c <main+0x36>

000001d0 <KEYPAD_4x4_adjustKeyNumber>:
* Update the keypad pressed button value with the correct one in keypad 4x4 shape
*/
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number)
{
	u8 keypad_button = 0;
	switch(button_number)
 1d0:	48 2f       	mov	r20, r24
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	fa 01       	movw	r30, r20
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	e0 31       	cpi	r30, 0x10	; 16
 1da:	f1 05       	cpc	r31, r1
 1dc:	08 f5       	brcc	.+66     	; 0x220 <KEYPAD_4x4_adjustKeyNumber+0x50>
 1de:	e6 5d       	subi	r30, 0xD6	; 214
 1e0:	ff 4f       	sbci	r31, 0xFF	; 255
 1e2:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__tablejump2__>
	{
		case 1: keypad_button = 7;
 1e6:	87 e0       	ldi	r24, 0x07	; 7
 1e8:	08 95       	ret
		break;
		case 2: keypad_button = 8;
		break;
		case 3: keypad_button = 9;
 1ea:	89 e0       	ldi	r24, 0x09	; 9
		break;
 1ec:	08 95       	ret
		case 4: keypad_button = '%'; // ASCII Code of %
 1ee:	85 e2       	ldi	r24, 0x25	; 37
		break;
 1f0:	08 95       	ret
		case 5: keypad_button = 4;
 1f2:	84 e0       	ldi	r24, 0x04	; 4
		break;
 1f4:	08 95       	ret
		case 6: keypad_button = 5;
 1f6:	85 e0       	ldi	r24, 0x05	; 5
		break;
 1f8:	08 95       	ret
		case 7: keypad_button = 6;
 1fa:	86 e0       	ldi	r24, 0x06	; 6
		break;
 1fc:	08 95       	ret
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
 1fe:	8a e2       	ldi	r24, 0x2A	; 42
		break;
 200:	08 95       	ret
		case 9: keypad_button = 1;
 202:	81 e0       	ldi	r24, 0x01	; 1
		break;
 204:	08 95       	ret
		case 10: keypad_button = 2;
 206:	82 e0       	ldi	r24, 0x02	; 2
		break;
 208:	08 95       	ret
		case 11: keypad_button = 3;
 20a:	83 e0       	ldi	r24, 0x03	; 3
		break;
 20c:	08 95       	ret
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
 20e:	8d e2       	ldi	r24, 0x2D	; 45
		break;
 210:	08 95       	ret
		case 13: keypad_button = 13;  /* ASCII of Enter */
		break;
		case 14: keypad_button = 0;
 212:	80 e0       	ldi	r24, 0x00	; 0
		break;
 214:	08 95       	ret
		case 15: keypad_button = '='; /* ASCII Code of '=' */
 216:	8d e3       	ldi	r24, 0x3D	; 61
		break;
 218:	08 95       	ret
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
 21a:	8b e2       	ldi	r24, 0x2B	; 43
		break;
 21c:	08 95       	ret
	u8 keypad_button = 0;
	switch(button_number)
	{
		case 1: keypad_button = 7;
		break;
		case 2: keypad_button = 8;
 21e:	88 e0       	ldi	r24, 0x08	; 8
		break;
		default: keypad_button = button_number;
		break;
	}
	return keypad_button;
}
 220:	08 95       	ret

00000222 <KEYPAD_getPressedKey>:
#include "Keypad_config.h"
#include "Keypad_private.h"



u8 KEYPAD_getPressedKey(){
 222:	9f 92       	push	r9
 224:	af 92       	push	r10
 226:	bf 92       	push	r11
 228:	cf 92       	push	r12
 22a:	df 92       	push	r13
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	a1 97       	sbiw	r28, 0x21	; 33
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
	u8 col,row;
	u8 prevKey = 0; // Previous key state
	u8 currentKey = 0; // Current key state
 248:	19 82       	std	Y+1, r1	; 0x01
	// Configuration for the columns
	DIO_Config colPins[] = {
 24a:	80 e1       	ldi	r24, 0x10	; 16
 24c:	e0 e6       	ldi	r30, 0x60	; 96
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	de 01       	movw	r26, r28
 252:	12 96       	adiw	r26, 0x02	; 2
 254:	01 90       	ld	r0, Z+
 256:	0d 92       	st	X+, r0
 258:	8a 95       	dec	r24
 25a:	e1 f7       	brne	.-8      	; 0x254 <KEYPAD_getPressedKey+0x32>
		{COL2_PORT, COL2_PIN, DIO_PIN_INPUT, DIO_PIN_HIGH},
		{COL3_PORT, COL3_PIN, DIO_PIN_INPUT, DIO_PIN_HIGH},
		{COL4_PORT, COL4_PIN, DIO_PIN_INPUT, DIO_PIN_HIGH},
	};
	// Configuration for the rows
	DIO_Config rowPins[] = {
 25c:	fe 01       	movw	r30, r28
 25e:	72 96       	adiw	r30, 0x12	; 18
 260:	80 e1       	ldi	r24, 0x10	; 16
 262:	df 01       	movw	r26, r30
 264:	1d 92       	st	X+, r1
 266:	8a 95       	dec	r24
 268:	e9 f7       	brne	.-6      	; 0x264 <KEYPAD_getPressedKey+0x42>
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	8a 8b       	std	Y+18, r24	; 0x12
 26e:	95 e0       	ldi	r25, 0x05	; 5
 270:	9b 8b       	std	Y+19, r25	; 0x13
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	9c 8b       	std	Y+20, r25	; 0x14
 276:	8e 8b       	std	Y+22, r24	; 0x16
 278:	24 e0       	ldi	r18, 0x04	; 4
 27a:	2f 8b       	std	Y+23, r18	; 0x17
 27c:	98 8f       	std	Y+24, r25	; 0x18
 27e:	8a 8f       	std	Y+26, r24	; 0x1a
 280:	23 e0       	ldi	r18, 0x03	; 3
 282:	2b 8f       	std	Y+27, r18	; 0x1b
 284:	9c 8f       	std	Y+28, r25	; 0x1c
 286:	8e 8f       	std	Y+30, r24	; 0x1e
 288:	8f 8f       	std	Y+31, r24	; 0x1f
 28a:	98 a3       	std	Y+32, r25	; 0x20
		{ROW3_PORT, ROW3_PIN, DIO_PIN_OUTPUT},
		{ROW4_PORT, ROW4_PIN, DIO_PIN_OUTPUT},
	};

	// Initialize the keypad pins
	for (u8 i = 0; i < 4; i++) {
 28c:	d1 2c       	mov	r13, r1
 28e:	1b c0       	rjmp	.+54     	; 0x2c6 <KEYPAD_getPressedKey+0xa4>
		DIO_U8SetPinDirection(&colPins[i]);
 290:	ed 2c       	mov	r14, r13
 292:	f1 2c       	mov	r15, r1
 294:	ee 0c       	add	r14, r14
 296:	ff 1c       	adc	r15, r15
 298:	ee 0c       	add	r14, r14
 29a:	ff 1c       	adc	r15, r15
 29c:	02 e0       	ldi	r16, 0x02	; 2
 29e:	10 e0       	ldi	r17, 0x00	; 0
 2a0:	0c 0f       	add	r16, r28
 2a2:	1d 1f       	adc	r17, r29
 2a4:	0e 0d       	add	r16, r14
 2a6:	1f 1d       	adc	r17, r15
 2a8:	c8 01       	movw	r24, r16
 2aa:	0e 94 df 03 	call	0x7be	; 0x7be <DIO_U8SetPinDirection>
		DIO_U8SetPinDirection(&rowPins[i]);
 2ae:	82 e1       	ldi	r24, 0x12	; 18
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	8c 0f       	add	r24, r28
 2b4:	9d 1f       	adc	r25, r29
 2b6:	8e 0d       	add	r24, r14
 2b8:	9f 1d       	adc	r25, r15
 2ba:	0e 94 df 03 	call	0x7be	; 0x7be <DIO_U8SetPinDirection>
		DIO_U8SetPinValue(&colPins[i]);
 2be:	c8 01       	movw	r24, r16
 2c0:	0e 94 1d 04 	call	0x83a	; 0x83a <DIO_U8SetPinValue>
		{ROW3_PORT, ROW3_PIN, DIO_PIN_OUTPUT},
		{ROW4_PORT, ROW4_PIN, DIO_PIN_OUTPUT},
	};

	// Initialize the keypad pins
	for (u8 i = 0; i < 4; i++) {
 2c4:	d3 94       	inc	r13
 2c6:	b3 e0       	ldi	r27, 0x03	; 3
 2c8:	bd 15       	cp	r27, r13
 2ca:	10 f7       	brcc	.-60     	; 0x290 <KEYPAD_getPressedKey+0x6e>
 2cc:	91 2c       	mov	r9, r1
	}

	while(1)
	{
		/*for loop to scan all keypad columns*/
		for (row = 0 ; row < 4 ; row++)
 2ce:	a1 2c       	mov	r10, r1
 2d0:	58 c0       	rjmp	.+176    	; 0x382 <KEYPAD_getPressedKey+0x160>
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
 2d2:	ea 2c       	mov	r14, r10
 2d4:	f1 2c       	mov	r15, r1
 2d6:	67 01       	movw	r12, r14
 2d8:	cc 0c       	add	r12, r12
 2da:	dd 1c       	adc	r13, r13
 2dc:	cc 0c       	add	r12, r12
 2de:	dd 1c       	adc	r13, r13
 2e0:	e1 e0       	ldi	r30, 0x01	; 1
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	ec 0f       	add	r30, r28
 2e6:	fd 1f       	adc	r31, r29
 2e8:	ec 0d       	add	r30, r12
 2ea:	fd 1d       	adc	r31, r13
 2ec:	14 8a       	std	Z+20, r1	; 0x14
			DIO_U8SetPinValue(&rowPins[row]);
 2ee:	82 e1       	ldi	r24, 0x12	; 18
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	8c 0f       	add	r24, r28
 2f4:	9d 1f       	adc	r25, r29
 2f6:	c8 0e       	add	r12, r24
 2f8:	d9 1e       	adc	r13, r25
 2fa:	c6 01       	movw	r24, r12
 2fc:	0e 94 1d 04 	call	0x83a	; 0x83a <DIO_U8SetPinValue>
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 300:	b1 2c       	mov	r11, r1
 302:	2c c0       	rjmp	.+88     	; 0x35c <KEYPAD_getPressedKey+0x13a>
			{
				DIO_U8GetPinValue(&colPins[col], &currentKey);
 304:	0b 2d       	mov	r16, r11
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	00 0f       	add	r16, r16
 30a:	11 1f       	adc	r17, r17
 30c:	00 0f       	add	r16, r16
 30e:	11 1f       	adc	r17, r17
 310:	a2 e0       	ldi	r26, 0x02	; 2
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	ac 0f       	add	r26, r28
 316:	bd 1f       	adc	r27, r29
 318:	0a 0f       	add	r16, r26
 31a:	1b 1f       	adc	r17, r27
 31c:	be 01       	movw	r22, r28
 31e:	6f 5f       	subi	r22, 0xFF	; 255
 320:	7f 4f       	sbci	r23, 0xFF	; 255
 322:	c8 01       	movw	r24, r16
 324:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_U8GetPinValue>

				/* Check current row pin value */
				if (DIO_PIN_LOW == currentKey && DIO_PIN_HIGH == prevKey) {
 328:	99 81       	ldd	r25, Y+1	; 0x01
 32a:	91 11       	cpse	r25, r1
 32c:	15 c0       	rjmp	.+42     	; 0x358 <KEYPAD_getPressedKey+0x136>
 32e:	b1 e0       	ldi	r27, 0x01	; 1
 330:	9b 12       	cpse	r9, r27
 332:	12 c0       	rjmp	.+36     	; 0x358 <KEYPAD_getPressedKey+0x136>
 334:	06 c0       	rjmp	.+12     	; 0x342 <KEYPAD_getPressedKey+0x120>
					/* Key is pressed, return the pressed button value */
					while (currentKey != DIO_PIN_HIGH) {
						DIO_U8GetPinValue(&colPins[col], &currentKey);
 336:	be 01       	movw	r22, r28
 338:	6f 5f       	subi	r22, 0xFF	; 255
 33a:	7f 4f       	sbci	r23, 0xFF	; 255
 33c:	c8 01       	movw	r24, r16
 33e:	0e 94 5f 04 	call	0x8be	; 0x8be <DIO_U8GetPinValue>
				DIO_U8GetPinValue(&colPins[col], &currentKey);

				/* Check current row pin value */
				if (DIO_PIN_LOW == currentKey && DIO_PIN_HIGH == prevKey) {
					/* Key is pressed, return the pressed button value */
					while (currentKey != DIO_PIN_HIGH) {
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	b9 f7       	brne	.-18     	; 0x336 <KEYPAD_getPressedKey+0x114>
						DIO_U8GetPinValue(&colPins[col], &currentKey);
					}
					return KEYPAD_4x4_adjustKeyNumber((col * KEYPAD_NUM_COLS) + row + 1);
 348:	bb 0c       	add	r11, r11
 34a:	bb 0c       	add	r11, r11
 34c:	8b 2d       	mov	r24, r11
 34e:	8a 0d       	add	r24, r10
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <KEYPAD_4x4_adjustKeyNumber>
 356:	1a c0       	rjmp	.+52     	; 0x38c <KEYPAD_getPressedKey+0x16a>
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
			DIO_U8SetPinValue(&rowPins[row]);
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 358:	b3 94       	inc	r11
						DIO_U8GetPinValue(&colPins[col], &currentKey);
					}
					return KEYPAD_4x4_adjustKeyNumber((col * KEYPAD_NUM_COLS) + row + 1);
				}

				prevKey = currentKey; // Update the previous key state
 35a:	99 2e       	mov	r9, r25
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
			DIO_U8SetPinValue(&rowPins[row]);
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	8b 15       	cp	r24, r11
 360:	88 f6       	brcc	.-94     	; 0x304 <KEYPAD_getPressedKey+0xe2>

				prevKey = currentKey; // Update the previous key state
				/*end of for loop*/
			}
			/*set current column pin HIGH again*/
			rowPins[row].value = DIO_PIN_HIGH;
 362:	ee 0c       	add	r14, r14
 364:	ff 1c       	adc	r15, r15
 366:	ee 0c       	add	r14, r14
 368:	ff 1c       	adc	r15, r15
 36a:	e1 e0       	ldi	r30, 0x01	; 1
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	ec 0f       	add	r30, r28
 370:	fd 1f       	adc	r31, r29
 372:	ee 0d       	add	r30, r14
 374:	ff 1d       	adc	r31, r15
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	84 8b       	std	Z+20, r24	; 0x14
			DIO_U8SetPinValue(&rowPins[row]);
 37a:	c6 01       	movw	r24, r12
 37c:	0e 94 1d 04 	call	0x83a	; 0x83a <DIO_U8SetPinValue>
	}

	while(1)
	{
		/*for loop to scan all keypad columns*/
		for (row = 0 ; row < 4 ; row++)
 380:	a3 94       	inc	r10
 382:	93 e0       	ldi	r25, 0x03	; 3
 384:	9a 15       	cp	r25, r10
 386:	08 f0       	brcs	.+2      	; 0x38a <KEYPAD_getPressedKey+0x168>
 388:	a4 cf       	rjmp	.-184    	; 0x2d2 <KEYPAD_getPressedKey+0xb0>
 38a:	a1 cf       	rjmp	.-190    	; 0x2ce <KEYPAD_getPressedKey+0xac>
			DIO_U8SetPinValue(&rowPins[row]);

		}
		/*end of for loop*/
	}
}
 38c:	a1 96       	adiw	r28, 0x21	; 33
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	de bf       	out	0x3e, r29	; 62
 394:	0f be       	out	0x3f, r0	; 63
 396:	cd bf       	out	0x3d, r28	; 61
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	df 90       	pop	r13
 3a6:	cf 90       	pop	r12
 3a8:	bf 90       	pop	r11
 3aa:	af 90       	pop	r10
 3ac:	9f 90       	pop	r9
 3ae:	08 95       	ret

000003b0 <H_LCD_void_latchByte>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode){

	H_LCD_void_sendCommand(0xc0);
	H_LCD_void_sendData(copy_u8charCode);

}
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
 3bc:	64 97       	sbiw	r28, 0x14	; 20
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	f8 94       	cli
 3c2:	de bf       	out	0x3e, r29	; 62
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	cd bf       	out	0x3d, r28	; 61
 3c8:	08 2f       	mov	r16, r24
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	89 83       	std	Y+1, r24	; 0x01
 3ce:	1a 82       	std	Y+2, r1	; 0x02
 3d0:	8b 83       	std	Y+3, r24	; 0x03
 3d2:	04 fb       	bst	r16, 4
 3d4:	99 27       	eor	r25, r25
 3d6:	90 f9       	bld	r25, 0
 3d8:	9c 83       	std	Y+4, r25	; 0x04
 3da:	8d 83       	std	Y+5, r24	; 0x05
 3dc:	8e 83       	std	Y+6, r24	; 0x06
 3de:	8f 83       	std	Y+7, r24	; 0x07
 3e0:	05 fb       	bst	r16, 5
 3e2:	99 27       	eor	r25, r25
 3e4:	90 f9       	bld	r25, 0
 3e6:	98 87       	std	Y+8, r25	; 0x08
 3e8:	89 87       	std	Y+9, r24	; 0x09
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	9a 87       	std	Y+10, r25	; 0x0a
 3ee:	8b 87       	std	Y+11, r24	; 0x0b
 3f0:	06 fb       	bst	r16, 6
 3f2:	99 27       	eor	r25, r25
 3f4:	90 f9       	bld	r25, 0
 3f6:	9c 87       	std	Y+12, r25	; 0x0c
 3f8:	8d 87       	std	Y+13, r24	; 0x0d
 3fa:	94 e0       	ldi	r25, 0x04	; 4
 3fc:	9e 87       	std	Y+14, r25	; 0x0e
 3fe:	8f 87       	std	Y+15, r24	; 0x0f
 400:	80 2f       	mov	r24, r16
 402:	88 1f       	adc	r24, r24
 404:	88 27       	eor	r24, r24
 406:	88 1f       	adc	r24, r24
 408:	88 8b       	std	Y+16, r24	; 0x10
 40a:	10 e0       	ldi	r17, 0x00	; 0
 40c:	0f c0       	rjmp	.+30     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 40e:	81 2f       	mov	r24, r17
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	21 e0       	ldi	r18, 0x01	; 1
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	2c 0f       	add	r18, r28
 420:	3d 1f       	adc	r19, r29
 422:	82 0f       	add	r24, r18
 424:	93 1f       	adc	r25, r19
 426:	0e 94 1d 04 	call	0x83a	; 0x83a <DIO_U8SetPinValue>
 42a:	1f 5f       	subi	r17, 0xFF	; 255
 42c:	14 30       	cpi	r17, 0x04	; 4
 42e:	78 f3       	brcs	.-34     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 430:	19 8a       	std	Y+17, r1	; 0x11
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	8a 8b       	std	Y+18, r24	; 0x12
 436:	1c 8a       	std	Y+20, r1	; 0x14
 438:	8f ec       	ldi	r24, 0xCF	; 207
 43a:	97 e0       	ldi	r25, 0x07	; 7
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 442:	00 00       	nop
 444:	ce 01       	movw	r24, r28
 446:	41 96       	adiw	r24, 0x11	; 17
 448:	0e 94 1d 04 	call	0x83a	; 0x83a <DIO_U8SetPinValue>
 44c:	ef ec       	ldi	r30, 0xCF	; 207
 44e:	f7 e0       	ldi	r31, 0x07	; 7
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 454:	00 c0       	rjmp	.+0      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 456:	00 00       	nop
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	8c 8b       	std	Y+20, r24	; 0x14
 45c:	ce 01       	movw	r24, r28
 45e:	41 96       	adiw	r24, 0x11	; 17
 460:	0e 94 1d 04 	call	0x83a	; 0x83a <DIO_U8SetPinValue>
 464:	8f ec       	ldi	r24, 0xCF	; 207
 466:	97 e0       	ldi	r25, 0x07	; 7
 468:	01 97       	sbiw	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 46e:	00 00       	nop
 470:	10 e0       	ldi	r17, 0x00	; 0
 472:	1a c0       	rjmp	.+52     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 474:	81 2f       	mov	r24, r17
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	20 2f       	mov	r18, r16
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	01 2e       	mov	r0, r17
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	35 95       	asr	r19
 482:	27 95       	ror	r18
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	e1 e0       	ldi	r30, 0x01	; 1
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	ec 0f       	add	r30, r28
 496:	fd 1f       	adc	r31, r29
 498:	8e 0f       	add	r24, r30
 49a:	9f 1f       	adc	r25, r31
 49c:	21 70       	andi	r18, 0x01	; 1
 49e:	fc 01       	movw	r30, r24
 4a0:	23 83       	std	Z+3, r18	; 0x03
 4a2:	0e 94 1d 04 	call	0x83a	; 0x83a <DIO_U8SetPinValue>
 4a6:	1f 5f       	subi	r17, 0xFF	; 255
 4a8:	14 30       	cpi	r17, 0x04	; 4
 4aa:	20 f3       	brcs	.-56     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 4ac:	8f ec       	ldi	r24, 0xCF	; 207
 4ae:	97 e0       	ldi	r25, 0x07	; 7
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b6:	00 00       	nop
 4b8:	1c 8a       	std	Y+20, r1	; 0x14
 4ba:	ce 01       	movw	r24, r28
 4bc:	41 96       	adiw	r24, 0x11	; 17
 4be:	0e 94 1d 04 	call	0x83a	; 0x83a <DIO_U8SetPinValue>
 4c2:	ef ec       	ldi	r30, 0xCF	; 207
 4c4:	f7 e0       	ldi	r31, 0x07	; 7
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
 4ce:	64 96       	adiw	r28, 0x14	; 20
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	de bf       	out	0x3e, r29	; 62
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	cd bf       	out	0x3d, r28	; 61
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	08 95       	ret

000004e4 <H_LCD_void_sendCommand>:
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
 4f0:	28 97       	sbiw	r28, 0x08	; 8
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	08 2f       	mov	r16, r24
 4fe:	88 e0       	ldi	r24, 0x08	; 8
 500:	e0 e7       	ldi	r30, 0x70	; 112
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	de 01       	movw	r26, r28
 506:	11 96       	adiw	r26, 0x01	; 1
 508:	01 90       	ld	r0, Z+
 50a:	0d 92       	st	X+, r0
 50c:	8a 95       	dec	r24
 50e:	e1 f7       	brne	.-8      	; 0x508 <H_LCD_void_sendCommand+0x24>
 510:	10 e0       	ldi	r17, 0x00	; 0
 512:	15 c0       	rjmp	.+42     	; 0x53e <H_LCD_void_sendCommand+0x5a>
 514:	81 2f       	mov	r24, r17
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	21 e0       	ldi	r18, 0x01	; 1
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	2c 0f       	add	r18, r28
 526:	3d 1f       	adc	r19, r29
 528:	82 0f       	add	r24, r18
 52a:	93 1f       	adc	r25, r19
 52c:	0e 94 1d 04 	call	0x83a	; 0x83a <DIO_U8SetPinValue>
 530:	8f ec       	ldi	r24, 0xCF	; 207
 532:	97 e0       	ldi	r25, 0x07	; 7
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <H_LCD_void_sendCommand+0x50>
 538:	00 c0       	rjmp	.+0      	; 0x53a <H_LCD_void_sendCommand+0x56>
 53a:	00 00       	nop
 53c:	1f 5f       	subi	r17, 0xFF	; 255
 53e:	12 30       	cpi	r17, 0x02	; 2
 540:	48 f3       	brcs	.-46     	; 0x514 <H_LCD_void_sendCommand+0x30>
 542:	8f ec       	ldi	r24, 0xCF	; 207
 544:	97 e0       	ldi	r25, 0x07	; 7
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <H_LCD_void_sendCommand+0x62>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <H_LCD_void_sendCommand+0x68>
 54c:	00 00       	nop
 54e:	80 2f       	mov	r24, r16
 550:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <H_LCD_void_latchByte>
 554:	28 96       	adiw	r28, 0x08	; 8
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	08 95       	ret

0000056a <H_LCD_void_Init>:
 56a:	1f 93       	push	r17
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
 574:	68 97       	sbiw	r28, 0x18	; 24
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
 580:	fe 01       	movw	r30, r28
 582:	31 96       	adiw	r30, 0x01	; 1
 584:	88 e0       	ldi	r24, 0x08	; 8
 586:	df 01       	movw	r26, r30
 588:	1d 92       	st	X+, r1
 58a:	8a 95       	dec	r24
 58c:	e9 f7       	brne	.-6      	; 0x588 <H_LCD_void_Init+0x1e>
 58e:	83 e0       	ldi	r24, 0x03	; 3
 590:	8a 83       	std	Y+2, r24	; 0x02
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	8b 83       	std	Y+3, r24	; 0x03
 596:	92 e0       	ldi	r25, 0x02	; 2
 598:	9e 83       	std	Y+6, r25	; 0x06
 59a:	8f 83       	std	Y+7, r24	; 0x07
 59c:	10 e0       	ldi	r17, 0x00	; 0
 59e:	0f c0       	rjmp	.+30     	; 0x5be <H_LCD_void_Init+0x54>
 5a0:	81 2f       	mov	r24, r17
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	2c 0f       	add	r18, r28
 5b2:	3d 1f       	adc	r19, r29
 5b4:	82 0f       	add	r24, r18
 5b6:	93 1f       	adc	r25, r19
 5b8:	0e 94 df 03 	call	0x7be	; 0x7be <DIO_U8SetPinDirection>
 5bc:	1f 5f       	subi	r17, 0xFF	; 255
 5be:	12 30       	cpi	r17, 0x02	; 2
 5c0:	78 f3       	brcs	.-34     	; 0x5a0 <H_LCD_void_Init+0x36>
 5c2:	fe 01       	movw	r30, r28
 5c4:	39 96       	adiw	r30, 0x09	; 9
 5c6:	80 e1       	ldi	r24, 0x10	; 16
 5c8:	df 01       	movw	r26, r30
 5ca:	1d 92       	st	X+, r1
 5cc:	8a 95       	dec	r24
 5ce:	e9 f7       	brne	.-6      	; 0x5ca <H_LCD_void_Init+0x60>
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	89 87       	std	Y+9, r24	; 0x09
 5d4:	8b 87       	std	Y+11, r24	; 0x0b
 5d6:	8d 87       	std	Y+13, r24	; 0x0d
 5d8:	8e 87       	std	Y+14, r24	; 0x0e
 5da:	8f 87       	std	Y+15, r24	; 0x0f
 5dc:	89 8b       	std	Y+17, r24	; 0x11
 5de:	92 e0       	ldi	r25, 0x02	; 2
 5e0:	9a 8b       	std	Y+18, r25	; 0x12
 5e2:	8b 8b       	std	Y+19, r24	; 0x13
 5e4:	8d 8b       	std	Y+21, r24	; 0x15
 5e6:	94 e0       	ldi	r25, 0x04	; 4
 5e8:	9e 8b       	std	Y+22, r25	; 0x16
 5ea:	8f 8b       	std	Y+23, r24	; 0x17
 5ec:	10 e0       	ldi	r17, 0x00	; 0
 5ee:	0f c0       	rjmp	.+30     	; 0x60e <H_LCD_void_Init+0xa4>
 5f0:	81 2f       	mov	r24, r17
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	29 e0       	ldi	r18, 0x09	; 9
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	2c 0f       	add	r18, r28
 602:	3d 1f       	adc	r19, r29
 604:	82 0f       	add	r24, r18
 606:	93 1f       	adc	r25, r19
 608:	0e 94 df 03 	call	0x7be	; 0x7be <DIO_U8SetPinDirection>
 60c:	1f 5f       	subi	r17, 0xFF	; 255
 60e:	14 30       	cpi	r17, 0x04	; 4
 610:	78 f3       	brcs	.-34     	; 0x5f0 <H_LCD_void_Init+0x86>
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_LCD_void_sendCommand>
 618:	8f ec       	ldi	r24, 0xCF	; 207
 61a:	97 e0       	ldi	r25, 0x07	; 7
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	f1 f7       	brne	.-4      	; 0x61c <H_LCD_void_Init+0xb2>
 620:	00 c0       	rjmp	.+0      	; 0x622 <H_LCD_void_Init+0xb8>
 622:	00 00       	nop
 624:	88 e2       	ldi	r24, 0x28	; 40
 626:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_LCD_void_sendCommand>
 62a:	af ec       	ldi	r26, 0xCF	; 207
 62c:	b7 e0       	ldi	r27, 0x07	; 7
 62e:	11 97       	sbiw	r26, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <H_LCD_void_Init+0xc4>
 632:	00 c0       	rjmp	.+0      	; 0x634 <H_LCD_void_Init+0xca>
 634:	00 00       	nop
 636:	8f e0       	ldi	r24, 0x0F	; 15
 638:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_LCD_void_sendCommand>
 63c:	8f ec       	ldi	r24, 0xCF	; 207
 63e:	97 e0       	ldi	r25, 0x07	; 7
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	f1 f7       	brne	.-4      	; 0x640 <H_LCD_void_Init+0xd6>
 644:	00 c0       	rjmp	.+0      	; 0x646 <H_LCD_void_Init+0xdc>
 646:	00 00       	nop
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_LCD_void_sendCommand>
 64e:	af e9       	ldi	r26, 0x9F	; 159
 650:	bf e0       	ldi	r27, 0x0F	; 15
 652:	11 97       	sbiw	r26, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <H_LCD_void_Init+0xe8>
 656:	00 c0       	rjmp	.+0      	; 0x658 <H_LCD_void_Init+0xee>
 658:	00 00       	nop
 65a:	86 e0       	ldi	r24, 0x06	; 6
 65c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_LCD_void_sendCommand>
 660:	68 96       	adiw	r28, 0x18	; 24
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	f8 94       	cli
 666:	de bf       	out	0x3e, r29	; 62
 668:	0f be       	out	0x3f, r0	; 63
 66a:	cd bf       	out	0x3d, r28	; 61
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	1f 91       	pop	r17
 672:	08 95       	ret

00000674 <H_LCD_void_sendData>:
 674:	0f 93       	push	r16
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	cd b7       	in	r28, 0x3d	; 61
 67e:	de b7       	in	r29, 0x3e	; 62
 680:	28 97       	sbiw	r28, 0x08	; 8
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	f8 94       	cli
 686:	de bf       	out	0x3e, r29	; 62
 688:	0f be       	out	0x3f, r0	; 63
 68a:	cd bf       	out	0x3d, r28	; 61
 68c:	08 2f       	mov	r16, r24
 68e:	88 e0       	ldi	r24, 0x08	; 8
 690:	e8 e7       	ldi	r30, 0x78	; 120
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	de 01       	movw	r26, r28
 696:	11 96       	adiw	r26, 0x01	; 1
 698:	01 90       	ld	r0, Z+
 69a:	0d 92       	st	X+, r0
 69c:	8a 95       	dec	r24
 69e:	e1 f7       	brne	.-8      	; 0x698 <H_LCD_void_sendData+0x24>
 6a0:	10 e0       	ldi	r17, 0x00	; 0
 6a2:	15 c0       	rjmp	.+42     	; 0x6ce <H_LCD_void_sendData+0x5a>
 6a4:	81 2f       	mov	r24, r17
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	21 e0       	ldi	r18, 0x01	; 1
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	2c 0f       	add	r18, r28
 6b6:	3d 1f       	adc	r19, r29
 6b8:	82 0f       	add	r24, r18
 6ba:	93 1f       	adc	r25, r19
 6bc:	0e 94 1d 04 	call	0x83a	; 0x83a <DIO_U8SetPinValue>
 6c0:	8f ec       	ldi	r24, 0xCF	; 207
 6c2:	97 e0       	ldi	r25, 0x07	; 7
 6c4:	01 97       	sbiw	r24, 0x01	; 1
 6c6:	f1 f7       	brne	.-4      	; 0x6c4 <H_LCD_void_sendData+0x50>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <H_LCD_void_sendData+0x56>
 6ca:	00 00       	nop
 6cc:	1f 5f       	subi	r17, 0xFF	; 255
 6ce:	12 30       	cpi	r17, 0x02	; 2
 6d0:	48 f3       	brcs	.-46     	; 0x6a4 <H_LCD_void_sendData+0x30>
 6d2:	8f ec       	ldi	r24, 0xCF	; 207
 6d4:	97 e0       	ldi	r25, 0x07	; 7
 6d6:	01 97       	sbiw	r24, 0x01	; 1
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <H_LCD_void_sendData+0x62>
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <H_LCD_void_sendData+0x68>
 6dc:	00 00       	nop
 6de:	80 2f       	mov	r24, r16
 6e0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <H_LCD_void_latchByte>
 6e4:	28 96       	adiw	r28, 0x08	; 8
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	f8 94       	cli
 6ea:	de bf       	out	0x3e, r29	; 62
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	cd bf       	out	0x3d, r28	; 61
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	0f 91       	pop	r16
 6f8:	08 95       	ret

000006fa <H_LCD_void_sendString>:
 6fa:	0f 93       	push	r16
 6fc:	1f 93       	push	r17
 6fe:	cf 93       	push	r28
 700:	8c 01       	movw	r16, r24
 702:	c0 e0       	ldi	r28, 0x00	; 0
 704:	03 c0       	rjmp	.+6      	; 0x70c <H_LCD_void_sendString+0x12>
 706:	0e 94 3a 03 	call	0x674	; 0x674 <H_LCD_void_sendData>
 70a:	cf 5f       	subi	r28, 0xFF	; 255
 70c:	f8 01       	movw	r30, r16
 70e:	ec 0f       	add	r30, r28
 710:	f1 1d       	adc	r31, r1
 712:	80 81       	ld	r24, Z
 714:	81 11       	cpse	r24, r1
 716:	f7 cf       	rjmp	.-18     	; 0x706 <H_LCD_void_sendString+0xc>
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	08 95       	ret

00000720 <H_LCD_void_sendIntNum>:
 720:	cf 93       	push	r28
 722:	df 93       	push	r29
 724:	cd b7       	in	r28, 0x3d	; 61
 726:	de b7       	in	r29, 0x3e	; 62
 728:	60 97       	sbiw	r28, 0x10	; 16
 72a:	0f b6       	in	r0, 0x3f	; 63
 72c:	f8 94       	cli
 72e:	de bf       	out	0x3e, r29	; 62
 730:	0f be       	out	0x3f, r0	; 63
 732:	cd bf       	out	0x3d, r28	; 61
 734:	dc 01       	movw	r26, r24
 736:	cb 01       	movw	r24, r22
 738:	4a e0       	ldi	r20, 0x0A	; 10
 73a:	be 01       	movw	r22, r28
 73c:	6f 5f       	subi	r22, 0xFF	; 255
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	0e 94 09 07 	call	0xe12	; 0xe12 <__itoa_ncheck>
 744:	ce 01       	movw	r24, r28
 746:	01 96       	adiw	r24, 0x01	; 1
 748:	0e 94 7d 03 	call	0x6fa	; 0x6fa <H_LCD_void_sendString>
 74c:	60 96       	adiw	r28, 0x10	; 16
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	f8 94       	cli
 752:	de bf       	out	0x3e, r29	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	cd bf       	out	0x3d, r28	; 61
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	08 95       	ret

0000075e <H_LCD_void_gotoXY>:
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	39 f0       	breq	.+14     	; 0x770 <H_LCD_void_gotoXY+0x12>
 762:	58 f0       	brcs	.+22     	; 0x77a <H_LCD_void_gotoXY+0x1c>
 764:	82 30       	cpi	r24, 0x02	; 2
 766:	31 f0       	breq	.+12     	; 0x774 <H_LCD_void_gotoXY+0x16>
 768:	83 30       	cpi	r24, 0x03	; 3
 76a:	31 f0       	breq	.+12     	; 0x778 <H_LCD_void_gotoXY+0x1a>
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	05 c0       	rjmp	.+10     	; 0x77a <H_LCD_void_gotoXY+0x1c>
 770:	60 5c       	subi	r22, 0xC0	; 192
 772:	03 c0       	rjmp	.+6      	; 0x77a <H_LCD_void_gotoXY+0x1c>
 774:	60 5f       	subi	r22, 0xF0	; 240
 776:	01 c0       	rjmp	.+2      	; 0x77a <H_LCD_void_gotoXY+0x1c>
 778:	60 5b       	subi	r22, 0xB0	; 176
 77a:	86 2f       	mov	r24, r22
 77c:	80 68       	ori	r24, 0x80	; 128
 77e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_LCD_void_sendCommand>
 782:	08 95       	ret

00000784 <H_LCD_void_clearScreen>:

void H_LCD_void_clearScreen(void){
	H_LCD_void_sendCommand(LCD_CLEAR_COMMAND);
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_LCD_void_sendCommand>
 78a:	08 95       	ret

0000078c <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 78c:	24 b1       	in	r18, 0x04	; 4
 78e:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 790:	00 24       	eor	r0, r0
 792:	22 0f       	add	r18, r18
 794:	33 1f       	adc	r19, r19
 796:	00 1c       	adc	r0, r0
 798:	22 0f       	add	r18, r18
 79a:	33 1f       	adc	r19, r19
 79c:	00 1c       	adc	r0, r0
 79e:	23 2f       	mov	r18, r19
 7a0:	30 2d       	mov	r19, r0
 7a2:	85 b1       	in	r24, 0x05	; 5
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 7ae:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ADC_callBack>
 7b2:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ADC_callBack+0x1>
 7b6:	82 2b       	or	r24, r18
 7b8:	93 2b       	or	r25, r19
 7ba:	09 95       	icall
 7bc:	08 95       	ret

000007be <DIO_U8SetPinDirection>:
        *writeRegisters[port] = ~(*writeRegisters[port]);
        return NO_ERROR;
    } else {
        return ERROR;
    }
}
 7be:	dc 01       	movw	r26, r24
 7c0:	ec 91       	ld	r30, X
 7c2:	e4 30       	cpi	r30, 0x04	; 4
 7c4:	a0 f5       	brcc	.+104    	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 7c6:	11 96       	adiw	r26, 0x01	; 1
 7c8:	2c 91       	ld	r18, X
 7ca:	11 97       	sbiw	r26, 0x01	; 1
 7cc:	28 30       	cpi	r18, 0x08	; 8
 7ce:	88 f5       	brcc	.+98     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 7d0:	12 96       	adiw	r26, 0x02	; 2
 7d2:	8c 91       	ld	r24, X
 7d4:	81 11       	cpse	r24, r1
 7d6:	15 c0       	rjmp	.+42     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	ee 0f       	add	r30, r30
 7dc:	ff 1f       	adc	r31, r31
 7de:	e4 50       	subi	r30, 0x04	; 4
 7e0:	ff 4f       	sbci	r31, 0xFF	; 255
 7e2:	01 90       	ld	r0, Z+
 7e4:	f0 81       	ld	r31, Z
 7e6:	e0 2d       	mov	r30, r0
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <DIO_U8SetPinDirection+0x34>
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	2a 95       	dec	r18
 7f4:	e2 f7       	brpl	.-8      	; 0x7ee <DIO_U8SetPinDirection+0x30>
 7f6:	80 95       	com	r24
 7f8:	90 81       	ld	r25, Z
 7fa:	89 23       	and	r24, r25
 7fc:	80 83       	st	Z, r24
 7fe:	80 e0       	ldi	r24, 0x00	; 0
 800:	08 95       	ret
 802:	81 30       	cpi	r24, 0x01	; 1
 804:	c1 f4       	brne	.+48     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 806:	f0 e0       	ldi	r31, 0x00	; 0
 808:	ee 0f       	add	r30, r30
 80a:	ff 1f       	adc	r31, r31
 80c:	e4 50       	subi	r30, 0x04	; 4
 80e:	ff 4f       	sbci	r31, 0xFF	; 255
 810:	01 90       	ld	r0, Z+
 812:	f0 81       	ld	r31, Z
 814:	e0 2d       	mov	r30, r0
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	2a 95       	dec	r18
 822:	e2 f7       	brpl	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 824:	90 81       	ld	r25, Z
 826:	89 2b       	or	r24, r25
 828:	80 83       	st	Z, r24
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	08 95       	ret
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	08 95       	ret
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	08 95       	ret
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	08 95       	ret

0000083a <DIO_U8SetPinValue>:
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	c1 f1       	breq	.+112    	; 0x8ae <__stack+0x4f>
 83e:	dc 01       	movw	r26, r24
 840:	ec 91       	ld	r30, X
 842:	e4 30       	cpi	r30, 0x04	; 4
 844:	b0 f5       	brcc	.+108    	; 0x8b2 <__stack+0x53>
 846:	11 96       	adiw	r26, 0x01	; 1
 848:	2c 91       	ld	r18, X
 84a:	11 97       	sbiw	r26, 0x01	; 1
 84c:	28 30       	cpi	r18, 0x08	; 8
 84e:	98 f5       	brcc	.+102    	; 0x8b6 <__stack+0x57>
 850:	13 96       	adiw	r26, 0x03	; 3
 852:	8c 91       	ld	r24, X
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	a1 f4       	brne	.+40     	; 0x880 <__stack+0x21>
 858:	f0 e0       	ldi	r31, 0x00	; 0
 85a:	ee 0f       	add	r30, r30
 85c:	ff 1f       	adc	r31, r31
 85e:	ec 50       	subi	r30, 0x0C	; 12
 860:	ff 4f       	sbci	r31, 0xFF	; 255
 862:	01 90       	ld	r0, Z+
 864:	f0 81       	ld	r31, Z
 866:	e0 2d       	mov	r30, r0
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
 86e:	88 0f       	add	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	2a 95       	dec	r18
 874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
 876:	90 81       	ld	r25, Z
 878:	89 2b       	or	r24, r25
 87a:	80 83       	st	Z, r24
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	08 95       	ret
 880:	81 11       	cpse	r24, r1
 882:	1b c0       	rjmp	.+54     	; 0x8ba <__stack+0x5b>
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	ee 0f       	add	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	ec 50       	subi	r30, 0x0C	; 12
 88c:	ff 4f       	sbci	r31, 0xFF	; 255
 88e:	01 90       	ld	r0, Z+
 890:	f0 81       	ld	r31, Z
 892:	e0 2d       	mov	r30, r0
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
 89a:	88 0f       	add	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	2a 95       	dec	r18
 8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
 8a2:	80 95       	com	r24
 8a4:	90 81       	ld	r25, Z
 8a6:	89 23       	and	r24, r25
 8a8:	80 83       	st	Z, r24
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	08 95       	ret
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	08 95       	ret
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	08 95       	ret
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	08 95       	ret
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	08 95       	ret

000008be <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(const DIO_Config* config, u8* value) {
    if (config != NULL && value != NULL) {
 8be:	00 97       	sbiw	r24, 0x00	; 0
 8c0:	f9 f0       	breq	.+62     	; 0x900 <DIO_U8GetPinValue+0x42>
 8c2:	61 15       	cp	r22, r1
 8c4:	71 05       	cpc	r23, r1
 8c6:	f1 f0       	breq	.+60     	; 0x904 <DIO_U8GetPinValue+0x46>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 8c8:	dc 01       	movw	r26, r24
 8ca:	ec 91       	ld	r30, X
 8cc:	e4 30       	cpi	r30, 0x04	; 4
 8ce:	e0 f4       	brcc	.+56     	; 0x908 <DIO_U8GetPinValue+0x4a>
 8d0:	11 96       	adiw	r26, 0x01	; 1
 8d2:	2c 91       	ld	r18, X
 8d4:	28 30       	cpi	r18, 0x08	; 8
 8d6:	d0 f4       	brcc	.+52     	; 0x90c <DIO_U8GetPinValue+0x4e>
            *value = GET_BIT(*readRegisters[config->port], config->pin);
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	ee 0f       	add	r30, r30
 8dc:	ff 1f       	adc	r31, r31
 8de:	e4 51       	subi	r30, 0x14	; 20
 8e0:	ff 4f       	sbci	r31, 0xFF	; 255
 8e2:	01 90       	ld	r0, Z+
 8e4:	f0 81       	ld	r31, Z
 8e6:	e0 2d       	mov	r30, r0
 8e8:	80 81       	ld	r24, Z
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <DIO_U8GetPinValue+0x34>
 8ee:	95 95       	asr	r25
 8f0:	87 95       	ror	r24
 8f2:	2a 95       	dec	r18
 8f4:	e2 f7       	brpl	.-8      	; 0x8ee <DIO_U8GetPinValue+0x30>
 8f6:	81 70       	andi	r24, 0x01	; 1
 8f8:	fb 01       	movw	r30, r22
 8fa:	80 83       	st	Z, r24
            return NO_ERROR;
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	08 95       	ret
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	08 95       	ret
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	08 95       	ret
    if (config != NULL && value != NULL) {
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
            *value = GET_BIT(*readRegisters[config->port], config->pin);
            return NO_ERROR;
        } else {
            return ERROR;
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	08 95       	ret
 90c:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        return ERROR;
    }
}
 90e:	08 95       	ret

00000910 <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 910:	1f 92       	push	r1
 912:	0f 92       	push	r0
 914:	0f b6       	in	r0, 0x3f	; 63
 916:	0f 92       	push	r0
 918:	11 24       	eor	r1, r1
 91a:	2f 93       	push	r18
 91c:	3f 93       	push	r19
 91e:	4f 93       	push	r20
 920:	5f 93       	push	r21
 922:	6f 93       	push	r22
 924:	7f 93       	push	r23
 926:	8f 93       	push	r24
 928:	9f 93       	push	r25
 92a:	af 93       	push	r26
 92c:	bf 93       	push	r27
 92e:	ef 93       	push	r30
 930:	ff 93       	push	r31
	if(Action[0]!= NULL){
 932:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <Action>
 936:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <Action+0x1>
 93a:	30 97       	sbiw	r30, 0x00	; 0
 93c:	09 f0       	breq	.+2      	; 0x940 <__vector_1+0x30>
		Action[0]();
 93e:	09 95       	icall
	}
}
 940:	ff 91       	pop	r31
 942:	ef 91       	pop	r30
 944:	bf 91       	pop	r27
 946:	af 91       	pop	r26
 948:	9f 91       	pop	r25
 94a:	8f 91       	pop	r24
 94c:	7f 91       	pop	r23
 94e:	6f 91       	pop	r22
 950:	5f 91       	pop	r21
 952:	4f 91       	pop	r20
 954:	3f 91       	pop	r19
 956:	2f 91       	pop	r18
 958:	0f 90       	pop	r0
 95a:	0f be       	out	0x3f, r0	; 63
 95c:	0f 90       	pop	r0
 95e:	1f 90       	pop	r1
 960:	18 95       	reti

00000962 <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 962:	1f 92       	push	r1
 964:	0f 92       	push	r0
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	0f 92       	push	r0
 96a:	11 24       	eor	r1, r1
 96c:	2f 93       	push	r18
 96e:	3f 93       	push	r19
 970:	4f 93       	push	r20
 972:	5f 93       	push	r21
 974:	6f 93       	push	r22
 976:	7f 93       	push	r23
 978:	8f 93       	push	r24
 97a:	9f 93       	push	r25
 97c:	af 93       	push	r26
 97e:	bf 93       	push	r27
 980:	ef 93       	push	r30
 982:	ff 93       	push	r31
	if(Action[1]!= NULL){
 984:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <Action+0x2>
 988:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <Action+0x3>
 98c:	30 97       	sbiw	r30, 0x00	; 0
 98e:	09 f0       	breq	.+2      	; 0x992 <__vector_2+0x30>
		Action[1]();
 990:	09 95       	icall
	}
}
 992:	ff 91       	pop	r31
 994:	ef 91       	pop	r30
 996:	bf 91       	pop	r27
 998:	af 91       	pop	r26
 99a:	9f 91       	pop	r25
 99c:	8f 91       	pop	r24
 99e:	7f 91       	pop	r23
 9a0:	6f 91       	pop	r22
 9a2:	5f 91       	pop	r21
 9a4:	4f 91       	pop	r20
 9a6:	3f 91       	pop	r19
 9a8:	2f 91       	pop	r18
 9aa:	0f 90       	pop	r0
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	0f 90       	pop	r0
 9b0:	1f 90       	pop	r1
 9b2:	18 95       	reti

000009b4 <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 9b4:	1f 92       	push	r1
 9b6:	0f 92       	push	r0
 9b8:	0f b6       	in	r0, 0x3f	; 63
 9ba:	0f 92       	push	r0
 9bc:	11 24       	eor	r1, r1
 9be:	2f 93       	push	r18
 9c0:	3f 93       	push	r19
 9c2:	4f 93       	push	r20
 9c4:	5f 93       	push	r21
 9c6:	6f 93       	push	r22
 9c8:	7f 93       	push	r23
 9ca:	8f 93       	push	r24
 9cc:	9f 93       	push	r25
 9ce:	af 93       	push	r26
 9d0:	bf 93       	push	r27
 9d2:	ef 93       	push	r30
 9d4:	ff 93       	push	r31
	if(Action[2]!= NULL){
 9d6:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <Action+0x4>
 9da:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <Action+0x5>
 9de:	30 97       	sbiw	r30, 0x00	; 0
 9e0:	09 f0       	breq	.+2      	; 0x9e4 <__vector_3+0x30>
		Action[2]();
 9e2:	09 95       	icall
	}
}
 9e4:	ff 91       	pop	r31
 9e6:	ef 91       	pop	r30
 9e8:	bf 91       	pop	r27
 9ea:	af 91       	pop	r26
 9ec:	9f 91       	pop	r25
 9ee:	8f 91       	pop	r24
 9f0:	7f 91       	pop	r23
 9f2:	6f 91       	pop	r22
 9f4:	5f 91       	pop	r21
 9f6:	4f 91       	pop	r20
 9f8:	3f 91       	pop	r19
 9fa:	2f 91       	pop	r18
 9fc:	0f 90       	pop	r0
 9fe:	0f be       	out	0x3f, r0	; 63
 a00:	0f 90       	pop	r0
 a02:	1f 90       	pop	r1
 a04:	18 95       	reti

00000a06 <GIE_enable>:
#include "GIE_interface.h"


// Enable Global Interrupts
void GIE_enable(){
    __asm__ __volatile__ ("sei" ::);
 a06:	78 94       	sei
 a08:	08 95       	ret

00000a0a <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 a0a:	1f 92       	push	r1
 a0c:	0f 92       	push	r0
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	0f 92       	push	r0
 a12:	11 24       	eor	r1, r1
 a14:	2f 93       	push	r18
 a16:	3f 93       	push	r19
 a18:	4f 93       	push	r20
 a1a:	5f 93       	push	r21
 a1c:	6f 93       	push	r22
 a1e:	7f 93       	push	r23
 a20:	8f 93       	push	r24
 a22:	9f 93       	push	r25
 a24:	af 93       	push	r26
 a26:	bf 93       	push	r27
 a28:	ef 93       	push	r30
 a2a:	ff 93       	push	r31
	if(Action_Spi != NULL){
 a2c:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <Action_Spi>
 a30:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <Action_Spi+0x1>
 a34:	30 97       	sbiw	r30, 0x00	; 0
 a36:	11 f0       	breq	.+4      	; 0xa3c <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 a38:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 a3a:	09 95       	icall
	}
 a3c:	ff 91       	pop	r31
 a3e:	ef 91       	pop	r30
 a40:	bf 91       	pop	r27
 a42:	af 91       	pop	r26
 a44:	9f 91       	pop	r25
 a46:	8f 91       	pop	r24
 a48:	7f 91       	pop	r23
 a4a:	6f 91       	pop	r22
 a4c:	5f 91       	pop	r21
 a4e:	4f 91       	pop	r20
 a50:	3f 91       	pop	r19
 a52:	2f 91       	pop	r18
 a54:	0f 90       	pop	r0
 a56:	0f be       	out	0x3f, r0	; 63
 a58:	0f 90       	pop	r0
 a5a:	1f 90       	pop	r1
 a5c:	18 95       	reti

00000a5e <M_TIMER0_void_Init>:

void M_TIMER0_void_setCallBack(void (*ptrfn)(void),u8 copy_u8IntID){
	if(copy_u8IntID == OVERFLOW){
		Action_Timer[0] = ptrfn;
		}else if(copy_u8IntID == COMPARE){
		Action_Timer[1] = ptrfn;
 a5e:	fc 01       	movw	r30, r24
 a60:	81 81       	ldd	r24, Z+1	; 0x01
 a62:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <prescaler>
 a66:	90 81       	ld	r25, Z
 a68:	91 11       	cpse	r25, r1
 a6a:	03 c0       	rjmp	.+6      	; 0xa72 <M_TIMER0_void_Init+0x14>
 a6c:	80 e8       	ldi	r24, 0x80	; 128
 a6e:	83 bf       	out	0x33, r24	; 51
 a70:	08 95       	ret
 a72:	92 30       	cpi	r25, 0x02	; 2
 a74:	51 f4       	brne	.+20     	; 0xa8a <M_TIMER0_void_Init+0x2c>
 a76:	83 81       	ldd	r24, Z+3	; 0x03
 a78:	8c bf       	out	0x3c, r24	; 60
 a7a:	82 81       	ldd	r24, Z+2	; 0x02
 a7c:	20 e1       	ldi	r18, 0x10	; 16
 a7e:	82 9f       	mul	r24, r18
 a80:	c0 01       	movw	r24, r0
 a82:	11 24       	eor	r1, r1
 a84:	88 68       	ori	r24, 0x88	; 136
 a86:	83 bf       	out	0x33, r24	; 51
 a88:	08 95       	ret
 a8a:	93 30       	cpi	r25, 0x03	; 3
 a8c:	51 f4       	brne	.+20     	; 0xaa2 <M_TIMER0_void_Init+0x44>
 a8e:	82 81       	ldd	r24, Z+2	; 0x02
 a90:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <fast_oc0_mode>
 a94:	20 e1       	ldi	r18, 0x10	; 16
 a96:	82 9f       	mul	r24, r18
 a98:	c0 01       	movw	r24, r0
 a9a:	11 24       	eor	r1, r1
 a9c:	88 64       	ori	r24, 0x48	; 72
 a9e:	83 bf       	out	0x33, r24	; 51
 aa0:	08 95       	ret
 aa2:	91 30       	cpi	r25, 0x01	; 1
 aa4:	39 f4       	brne	.+14     	; 0xab4 <M_TIMER0_void_Init+0x56>
 aa6:	82 81       	ldd	r24, Z+2	; 0x02
 aa8:	20 e1       	ldi	r18, 0x10	; 16
 aaa:	82 9f       	mul	r24, r18
 aac:	c0 01       	movw	r24, r0
 aae:	11 24       	eor	r1, r1
 ab0:	80 64       	ori	r24, 0x40	; 64
 ab2:	83 bf       	out	0x33, r24	; 51
 ab4:	08 95       	ret

00000ab6 <M_TIMER0_void_setFastPWM>:
 ab6:	28 2f       	mov	r18, r24
 ab8:	3f ef       	ldi	r19, 0xFF	; 255
 aba:	63 9f       	mul	r22, r19
 abc:	c0 01       	movw	r24, r0
 abe:	11 24       	eor	r1, r1
 ac0:	64 e6       	ldi	r22, 0x64	; 100
 ac2:	70 e0       	ldi	r23, 0x00	; 0
 ac4:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__divmodhi4>
 ac8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <fast_oc0_mode>
 acc:	82 30       	cpi	r24, 0x02	; 2
 ace:	11 f4       	brne	.+4      	; 0xad4 <M_TIMER0_void_setFastPWM+0x1e>
 ad0:	6c bf       	out	0x3c, r22	; 60
 ad2:	03 c0       	rjmp	.+6      	; 0xada <M_TIMER0_void_setFastPWM+0x24>
 ad4:	83 30       	cpi	r24, 0x03	; 3
 ad6:	09 f4       	brne	.+2      	; 0xada <M_TIMER0_void_setFastPWM+0x24>
 ad8:	6c bf       	out	0x3c, r22	; 60
 ada:	83 b7       	in	r24, 0x33	; 51
 adc:	88 7f       	andi	r24, 0xF8	; 248
 ade:	28 2b       	or	r18, r24
 ae0:	23 bf       	out	0x33, r18	; 51
 ae2:	08 95       	ret

00000ae4 <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 ae4:	1f 92       	push	r1
 ae6:	0f 92       	push	r0
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	0f 92       	push	r0
 aec:	11 24       	eor	r1, r1
 aee:	2f 93       	push	r18
 af0:	3f 93       	push	r19
 af2:	4f 93       	push	r20
 af4:	5f 93       	push	r21
 af6:	6f 93       	push	r22
 af8:	7f 93       	push	r23
 afa:	8f 93       	push	r24
 afc:	9f 93       	push	r25
 afe:	af 93       	push	r26
 b00:	bf 93       	push	r27
 b02:	ef 93       	push	r30
 b04:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 b06:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Action_Timer>
 b0a:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <Action_Timer+0x1>
 b0e:	89 2b       	or	r24, r25
 b10:	89 f1       	breq	.+98     	; 0xb74 <__vector_11+0x90>
		counter++;
 b12:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <counter.1685>
 b16:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <counter.1685+0x1>
 b1a:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <counter.1685+0x2>
 b1e:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <counter.1685+0x3>
 b22:	01 96       	adiw	r24, 0x01	; 1
 b24:	a1 1d       	adc	r26, r1
 b26:	b1 1d       	adc	r27, r1
 b28:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <counter.1685>
 b2c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <counter.1685+0x1>
 b30:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <counter.1685+0x2>
 b34:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <counter.1685+0x3>
		if(counter == numOverflows){
 b38:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <numOverflows>
 b3c:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <numOverflows+0x1>
 b40:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <numOverflows+0x2>
 b44:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <numOverflows+0x3>
 b48:	84 17       	cp	r24, r20
 b4a:	95 07       	cpc	r25, r21
 b4c:	a6 07       	cpc	r26, r22
 b4e:	b7 07       	cpc	r27, r23
 b50:	89 f4       	brne	.+34     	; 0xb74 <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 b52:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <remainingCounts>
 b56:	81 95       	neg	r24
 b58:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 b5a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <counter.1685>
 b5e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <counter.1685+0x1>
 b62:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <counter.1685+0x2>
 b66:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <counter.1685+0x3>
			Action_Timer[0]();
 b6a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <Action_Timer>
 b6e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <Action_Timer+0x1>
 b72:	09 95       	icall
		}
		
	}
}
 b74:	ff 91       	pop	r31
 b76:	ef 91       	pop	r30
 b78:	bf 91       	pop	r27
 b7a:	af 91       	pop	r26
 b7c:	9f 91       	pop	r25
 b7e:	8f 91       	pop	r24
 b80:	7f 91       	pop	r23
 b82:	6f 91       	pop	r22
 b84:	5f 91       	pop	r21
 b86:	4f 91       	pop	r20
 b88:	3f 91       	pop	r19
 b8a:	2f 91       	pop	r18
 b8c:	0f 90       	pop	r0
 b8e:	0f be       	out	0x3f, r0	; 63
 b90:	0f 90       	pop	r0
 b92:	1f 90       	pop	r1
 b94:	18 95       	reti

00000b96 <__vector_10>:

ISR(TIMER0_COMP_vect){
 b96:	1f 92       	push	r1
 b98:	0f 92       	push	r0
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	0f 92       	push	r0
 b9e:	11 24       	eor	r1, r1
 ba0:	2f 93       	push	r18
 ba2:	3f 93       	push	r19
 ba4:	4f 93       	push	r20
 ba6:	5f 93       	push	r21
 ba8:	6f 93       	push	r22
 baa:	7f 93       	push	r23
 bac:	8f 93       	push	r24
 bae:	9f 93       	push	r25
 bb0:	af 93       	push	r26
 bb2:	bf 93       	push	r27
 bb4:	ef 93       	push	r30
 bb6:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 bb8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <Action_Timer+0x2>
 bbc:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <Action_Timer+0x3>
 bc0:	30 97       	sbiw	r30, 0x00	; 0
 bc2:	09 f0       	breq	.+2      	; 0xbc6 <__vector_10+0x30>
		Action_Timer[1]();
 bc4:	09 95       	icall
		
	}
}
 bc6:	ff 91       	pop	r31
 bc8:	ef 91       	pop	r30
 bca:	bf 91       	pop	r27
 bcc:	af 91       	pop	r26
 bce:	9f 91       	pop	r25
 bd0:	8f 91       	pop	r24
 bd2:	7f 91       	pop	r23
 bd4:	6f 91       	pop	r22
 bd6:	5f 91       	pop	r21
 bd8:	4f 91       	pop	r20
 bda:	3f 91       	pop	r19
 bdc:	2f 91       	pop	r18
 bde:	0f 90       	pop	r0
 be0:	0f be       	out	0x3f, r0	; 63
 be2:	0f 90       	pop	r0
 be4:	1f 90       	pop	r1
 be6:	18 95       	reti

00000be8 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 be8:	1f 92       	push	r1
 bea:	0f 92       	push	r0
 bec:	0f b6       	in	r0, 0x3f	; 63
 bee:	0f 92       	push	r0
 bf0:	11 24       	eor	r1, r1
 bf2:	2f 93       	push	r18
 bf4:	3f 93       	push	r19
 bf6:	4f 93       	push	r20
 bf8:	5f 93       	push	r21
 bfa:	6f 93       	push	r22
 bfc:	7f 93       	push	r23
 bfe:	8f 93       	push	r24
 c00:	9f 93       	push	r25
 c02:	af 93       	push	r26
 c04:	bf 93       	push	r27
 c06:	cf 93       	push	r28
 c08:	df 93       	push	r29
 c0a:	ef 93       	push	r30
 c0c:	ff 93       	push	r31
	Action_Timer[0]();
 c0e:	c6 e2       	ldi	r28, 0x26	; 38
 c10:	d1 e0       	ldi	r29, 0x01	; 1
 c12:	e8 81       	ld	r30, Y
 c14:	f9 81       	ldd	r31, Y+1	; 0x01
 c16:	09 95       	icall
	numOverflows++;
 c18:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <numOverflows>
 c1c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <numOverflows+0x1>
 c20:	a0 91 30 01 	lds	r26, 0x0130	; 0x800130 <numOverflows+0x2>
 c24:	b0 91 31 01 	lds	r27, 0x0131	; 0x800131 <numOverflows+0x3>
 c28:	01 96       	adiw	r24, 0x01	; 1
 c2a:	a1 1d       	adc	r26, r1
 c2c:	b1 1d       	adc	r27, r1
 c2e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <numOverflows>
 c32:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <numOverflows+0x1>
 c36:	a0 93 30 01 	sts	0x0130, r26	; 0x800130 <numOverflows+0x2>
 c3a:	b0 93 31 01 	sts	0x0131, r27	; 0x800131 <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 c3e:	e8 81       	ld	r30, Y
 c40:	f9 81       	ldd	r31, Y+1	; 0x01
 c42:	30 97       	sbiw	r30, 0x00	; 0
 c44:	49 f1       	breq	.+82     	; 0xc98 <__vector_9+0xb0>
		counter++;
 c46:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <counter.1744>
 c4a:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <counter.1744+0x1>
 c4e:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <counter.1744+0x2>
 c52:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <counter.1744+0x3>
 c56:	01 96       	adiw	r24, 0x01	; 1
 c58:	a1 1d       	adc	r26, r1
 c5a:	b1 1d       	adc	r27, r1
 c5c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <counter.1744>
 c60:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <counter.1744+0x1>
 c64:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <counter.1744+0x2>
 c68:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <counter.1744+0x3>
		if(counter == req_numOverflows){
 c6c:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <req_numOverflows>
 c70:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <req_numOverflows+0x1>
 c74:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <req_numOverflows+0x2>
 c78:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <req_numOverflows+0x3>
 c7c:	84 17       	cp	r24, r20
 c7e:	95 07       	cpc	r25, r21
 c80:	a6 07       	cpc	r26, r22
 c82:	b7 07       	cpc	r27, r23
 c84:	49 f4       	brne	.+18     	; 0xc98 <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 c86:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <counter.1744>
 c8a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <counter.1744+0x1>
 c8e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <counter.1744+0x2>
 c92:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <counter.1744+0x3>
			Action_Timer[0]();
 c96:	09 95       	icall
		}
		
	}
}
 c98:	ff 91       	pop	r31
 c9a:	ef 91       	pop	r30
 c9c:	df 91       	pop	r29
 c9e:	cf 91       	pop	r28
 ca0:	bf 91       	pop	r27
 ca2:	af 91       	pop	r26
 ca4:	9f 91       	pop	r25
 ca6:	8f 91       	pop	r24
 ca8:	7f 91       	pop	r23
 caa:	6f 91       	pop	r22
 cac:	5f 91       	pop	r21
 cae:	4f 91       	pop	r20
 cb0:	3f 91       	pop	r19
 cb2:	2f 91       	pop	r18
 cb4:	0f 90       	pop	r0
 cb6:	0f be       	out	0x3f, r0	; 63
 cb8:	0f 90       	pop	r0
 cba:	1f 90       	pop	r1
 cbc:	18 95       	reti

00000cbe <__vector_7>:

ISR(TIMER1_COMPA_vect){
 cbe:	1f 92       	push	r1
 cc0:	0f 92       	push	r0
 cc2:	0f b6       	in	r0, 0x3f	; 63
 cc4:	0f 92       	push	r0
 cc6:	11 24       	eor	r1, r1
 cc8:	2f 93       	push	r18
 cca:	3f 93       	push	r19
 ccc:	4f 93       	push	r20
 cce:	5f 93       	push	r21
 cd0:	6f 93       	push	r22
 cd2:	7f 93       	push	r23
 cd4:	8f 93       	push	r24
 cd6:	9f 93       	push	r25
 cd8:	af 93       	push	r26
 cda:	bf 93       	push	r27
 cdc:	ef 93       	push	r30
 cde:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 ce0:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Action_Timer+0x2>
 ce4:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Action_Timer+0x3>
 ce8:	30 97       	sbiw	r30, 0x00	; 0
 cea:	09 f0       	breq	.+2      	; 0xcee <__vector_7+0x30>
		Action_Timer[1]();
 cec:	09 95       	icall
	}
}
 cee:	ff 91       	pop	r31
 cf0:	ef 91       	pop	r30
 cf2:	bf 91       	pop	r27
 cf4:	af 91       	pop	r26
 cf6:	9f 91       	pop	r25
 cf8:	8f 91       	pop	r24
 cfa:	7f 91       	pop	r23
 cfc:	6f 91       	pop	r22
 cfe:	5f 91       	pop	r21
 d00:	4f 91       	pop	r20
 d02:	3f 91       	pop	r19
 d04:	2f 91       	pop	r18
 d06:	0f 90       	pop	r0
 d08:	0f be       	out	0x3f, r0	; 63
 d0a:	0f 90       	pop	r0
 d0c:	1f 90       	pop	r1
 d0e:	18 95       	reti

00000d10 <__vector_6>:


ISR(TIMER1_CAPT_vect){
 d10:	1f 92       	push	r1
 d12:	0f 92       	push	r0
 d14:	0f b6       	in	r0, 0x3f	; 63
 d16:	0f 92       	push	r0
 d18:	11 24       	eor	r1, r1
 d1a:	2f 93       	push	r18
 d1c:	3f 93       	push	r19
 d1e:	4f 93       	push	r20
 d20:	5f 93       	push	r21
 d22:	6f 93       	push	r22
 d24:	7f 93       	push	r23
 d26:	8f 93       	push	r24
 d28:	9f 93       	push	r25
 d2a:	af 93       	push	r26
 d2c:	bf 93       	push	r27
 d2e:	ef 93       	push	r30
 d30:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 d32:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <Action_Timer+0x6>
 d36:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <Action_Timer+0x7>
 d3a:	30 97       	sbiw	r30, 0x00	; 0
 d3c:	09 f0       	breq	.+2      	; 0xd40 <__vector_6+0x30>
			Action_Timer[3]();
 d3e:	09 95       	icall
			
			
		}
 d40:	ff 91       	pop	r31
 d42:	ef 91       	pop	r30
 d44:	bf 91       	pop	r27
 d46:	af 91       	pop	r26
 d48:	9f 91       	pop	r25
 d4a:	8f 91       	pop	r24
 d4c:	7f 91       	pop	r23
 d4e:	6f 91       	pop	r22
 d50:	5f 91       	pop	r21
 d52:	4f 91       	pop	r20
 d54:	3f 91       	pop	r19
 d56:	2f 91       	pop	r18
 d58:	0f 90       	pop	r0
 d5a:	0f be       	out	0x3f, r0	; 63
 d5c:	0f 90       	pop	r0
 d5e:	1f 90       	pop	r1
 d60:	18 95       	reti

00000d62 <__vector_13>:
	//set callback
	Action_Uart[0] = ptrfn;
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 d62:	1f 92       	push	r1
 d64:	0f 92       	push	r0
 d66:	0f b6       	in	r0, 0x3f	; 63
 d68:	0f 92       	push	r0
 d6a:	11 24       	eor	r1, r1
 d6c:	2f 93       	push	r18
 d6e:	3f 93       	push	r19
 d70:	4f 93       	push	r20
 d72:	5f 93       	push	r21
 d74:	6f 93       	push	r22
 d76:	7f 93       	push	r23
 d78:	8f 93       	push	r24
 d7a:	9f 93       	push	r25
 d7c:	af 93       	push	r26
 d7e:	bf 93       	push	r27
 d80:	ef 93       	push	r30
 d82:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 d84:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 d86:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <Action_Uart>
 d8a:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <Action_Uart+0x1>
 d8e:	30 97       	sbiw	r30, 0x00	; 0
 d90:	09 f0       	breq	.+2      	; 0xd94 <__vector_13+0x32>
		Action_Uart[0](receivedData);
 d92:	09 95       	icall
	}
 d94:	ff 91       	pop	r31
 d96:	ef 91       	pop	r30
 d98:	bf 91       	pop	r27
 d9a:	af 91       	pop	r26
 d9c:	9f 91       	pop	r25
 d9e:	8f 91       	pop	r24
 da0:	7f 91       	pop	r23
 da2:	6f 91       	pop	r22
 da4:	5f 91       	pop	r21
 da6:	4f 91       	pop	r20
 da8:	3f 91       	pop	r19
 daa:	2f 91       	pop	r18
 dac:	0f 90       	pop	r0
 dae:	0f be       	out	0x3f, r0	; 63
 db0:	0f 90       	pop	r0
 db2:	1f 90       	pop	r1
 db4:	18 95       	reti

00000db6 <__divmodhi4>:
 db6:	97 fb       	bst	r25, 7
 db8:	07 2e       	mov	r0, r23
 dba:	16 f4       	brtc	.+4      	; 0xdc0 <__divmodhi4+0xa>
 dbc:	00 94       	com	r0
 dbe:	07 d0       	rcall	.+14     	; 0xdce <__divmodhi4_neg1>
 dc0:	77 fd       	sbrc	r23, 7
 dc2:	09 d0       	rcall	.+18     	; 0xdd6 <__divmodhi4_neg2>
 dc4:	0e 94 f5 06 	call	0xdea	; 0xdea <__udivmodhi4>
 dc8:	07 fc       	sbrc	r0, 7
 dca:	05 d0       	rcall	.+10     	; 0xdd6 <__divmodhi4_neg2>
 dcc:	3e f4       	brtc	.+14     	; 0xddc <__divmodhi4_exit>

00000dce <__divmodhi4_neg1>:
 dce:	90 95       	com	r25
 dd0:	81 95       	neg	r24
 dd2:	9f 4f       	sbci	r25, 0xFF	; 255
 dd4:	08 95       	ret

00000dd6 <__divmodhi4_neg2>:
 dd6:	70 95       	com	r23
 dd8:	61 95       	neg	r22
 dda:	7f 4f       	sbci	r23, 0xFF	; 255

00000ddc <__divmodhi4_exit>:
 ddc:	08 95       	ret

00000dde <__tablejump2__>:
 dde:	ee 0f       	add	r30, r30
 de0:	ff 1f       	adc	r31, r31
 de2:	05 90       	lpm	r0, Z+
 de4:	f4 91       	lpm	r31, Z
 de6:	e0 2d       	mov	r30, r0
 de8:	09 94       	ijmp

00000dea <__udivmodhi4>:
 dea:	aa 1b       	sub	r26, r26
 dec:	bb 1b       	sub	r27, r27
 dee:	51 e1       	ldi	r21, 0x11	; 17
 df0:	07 c0       	rjmp	.+14     	; 0xe00 <__udivmodhi4_ep>

00000df2 <__udivmodhi4_loop>:
 df2:	aa 1f       	adc	r26, r26
 df4:	bb 1f       	adc	r27, r27
 df6:	a6 17       	cp	r26, r22
 df8:	b7 07       	cpc	r27, r23
 dfa:	10 f0       	brcs	.+4      	; 0xe00 <__udivmodhi4_ep>
 dfc:	a6 1b       	sub	r26, r22
 dfe:	b7 0b       	sbc	r27, r23

00000e00 <__udivmodhi4_ep>:
 e00:	88 1f       	adc	r24, r24
 e02:	99 1f       	adc	r25, r25
 e04:	5a 95       	dec	r21
 e06:	a9 f7       	brne	.-22     	; 0xdf2 <__udivmodhi4_loop>
 e08:	80 95       	com	r24
 e0a:	90 95       	com	r25
 e0c:	bc 01       	movw	r22, r24
 e0e:	cd 01       	movw	r24, r26
 e10:	08 95       	ret

00000e12 <__itoa_ncheck>:
 e12:	bb 27       	eor	r27, r27
 e14:	4a 30       	cpi	r20, 0x0A	; 10
 e16:	31 f4       	brne	.+12     	; 0xe24 <__itoa_ncheck+0x12>
 e18:	99 23       	and	r25, r25
 e1a:	22 f4       	brpl	.+8      	; 0xe24 <__itoa_ncheck+0x12>
 e1c:	bd e2       	ldi	r27, 0x2D	; 45
 e1e:	90 95       	com	r25
 e20:	81 95       	neg	r24
 e22:	9f 4f       	sbci	r25, 0xFF	; 255
 e24:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__utoa_common>

00000e28 <__utoa_ncheck>:
 e28:	bb 27       	eor	r27, r27

00000e2a <__utoa_common>:
 e2a:	fb 01       	movw	r30, r22
 e2c:	55 27       	eor	r21, r21
 e2e:	aa 27       	eor	r26, r26
 e30:	88 0f       	add	r24, r24
 e32:	99 1f       	adc	r25, r25
 e34:	aa 1f       	adc	r26, r26
 e36:	a4 17       	cp	r26, r20
 e38:	10 f0       	brcs	.+4      	; 0xe3e <__utoa_common+0x14>
 e3a:	a4 1b       	sub	r26, r20
 e3c:	83 95       	inc	r24
 e3e:	50 51       	subi	r21, 0x10	; 16
 e40:	b9 f7       	brne	.-18     	; 0xe30 <__utoa_common+0x6>
 e42:	a0 5d       	subi	r26, 0xD0	; 208
 e44:	aa 33       	cpi	r26, 0x3A	; 58
 e46:	08 f0       	brcs	.+2      	; 0xe4a <__utoa_common+0x20>
 e48:	a9 5d       	subi	r26, 0xD9	; 217
 e4a:	a1 93       	st	Z+, r26
 e4c:	00 97       	sbiw	r24, 0x00	; 0
 e4e:	79 f7       	brne	.-34     	; 0xe2e <__utoa_common+0x4>
 e50:	b1 11       	cpse	r27, r1
 e52:	b1 93       	st	Z+, r27
 e54:	11 92       	st	Z+, r1
 e56:	cb 01       	movw	r24, r22
 e58:	0c 94 2e 07 	jmp	0xe5c	; 0xe5c <strrev>

00000e5c <strrev>:
 e5c:	dc 01       	movw	r26, r24
 e5e:	fc 01       	movw	r30, r24
 e60:	67 2f       	mov	r22, r23
 e62:	71 91       	ld	r23, Z+
 e64:	77 23       	and	r23, r23
 e66:	e1 f7       	brne	.-8      	; 0xe60 <strrev+0x4>
 e68:	32 97       	sbiw	r30, 0x02	; 2
 e6a:	04 c0       	rjmp	.+8      	; 0xe74 <strrev+0x18>
 e6c:	7c 91       	ld	r23, X
 e6e:	6d 93       	st	X+, r22
 e70:	70 83       	st	Z, r23
 e72:	62 91       	ld	r22, -Z
 e74:	ae 17       	cp	r26, r30
 e76:	bf 07       	cpc	r27, r31
 e78:	c8 f3       	brcs	.-14     	; 0xe6c <strrev+0x10>
 e7a:	08 95       	ret

00000e7c <_exit>:
 e7c:	f8 94       	cli

00000e7e <__stop_program>:
 e7e:	ff cf       	rjmp	.-2      	; 0xe7e <__stop_program>
