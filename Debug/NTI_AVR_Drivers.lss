
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00000a64  00000af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000a8  008000a8  00000b40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022f0  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd7  00000000  00000000  00003044  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000122f  00000000  00000000  00003e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ac  00000000  00000000  0000504c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b3c  00000000  00000000  000054f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016a9  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000076dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__vector_1>
   8:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_2>
   c:	0c 94 cc 04 	jmp	0x998	; 0x998 <__vector_3>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	75 00       	.word	0x0075	; ????
  56:	91 00       	.word	0x0091	; ????
  58:	77 00       	.word	0x0077	; ????
  5a:	79 00       	.word	0x0079	; ????
  5c:	7b 00       	.word	0x007b	; ????
  5e:	7d 00       	.word	0x007d	; ????
  60:	7f 00       	.word	0x007f	; ????
  62:	81 00       	.word	0x0081	; ????
  64:	83 00       	.word	0x0083	; ????
  66:	85 00       	.word	0x0085	; ????
  68:	87 00       	.word	0x0087	; ????
  6a:	89 00       	.word	0x0089	; ????
  6c:	92 00       	.word	0x0092	; ????
  6e:	8b 00       	.word	0x008b	; ????
  70:	8d 00       	.word	0x008d	; ????
  72:	8f 00       	.word	0x008f	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e4 e6       	ldi	r30, 0x64	; 100
  88:	fa e0       	ldi	r31, 0x0A	; 10
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a8 3a       	cpi	r26, 0xA8	; 168
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	a8 ea       	ldi	r26, 0xA8	; 168
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a0 3b       	cpi	r26, 0xB0	; 176
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  aa:	0c 94 30 05 	jmp	0xa60	; 0xa60 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	83 ed       	ldi	r24, 0xD3	; 211
  b4:	90 e3       	ldi	r25, 0x30	; 48
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0xa>
  bc:	00 00       	nop
	//ADC_Init(&adcConfig);
	
	//yellowLed();
	
	_delay_ms(50);
	H_LCD_void_Init();
  be:	0e 94 3d 03 	call	0x67a	; 0x67a <H_LCD_void_Init>
	//H_LCD_void_displayCustomChar(0);


	while (1) {

		H_LCD_void_sendIntNum(KEYPAD_getPressedKey());
  c2:	0e 94 93 00 	call	0x126	; 0x126 <KEYPAD_getPressedKey>
  c6:	68 2f       	mov	r22, r24
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 85 02 	call	0x50a	; 0x50a <H_LCD_void_sendIntNum>
  d2:	f7 cf       	rjmp	.-18     	; 0xc2 <main+0x10>

000000d4 <KEYPAD_4x4_adjustKeyNumber>:
* Update the keypad pressed button value with the correct one in keypad 4x4 shape
*/
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number)
{
	u8 keypad_button = 0;
	switch(button_number)
  d4:	48 2f       	mov	r20, r24
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	fa 01       	movw	r30, r20
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	e0 31       	cpi	r30, 0x10	; 16
  de:	f1 05       	cpc	r31, r1
  e0:	08 f5       	brcc	.+66     	; 0x124 <KEYPAD_4x4_adjustKeyNumber+0x50>
  e2:	e6 5d       	subi	r30, 0xD6	; 214
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <__tablejump2__>
	{
		case 1: keypad_button = 7;
  ea:	87 e0       	ldi	r24, 0x07	; 7
  ec:	08 95       	ret
		break;
		case 2: keypad_button = 8;
		break;
		case 3: keypad_button = 9;
  ee:	89 e0       	ldi	r24, 0x09	; 9
		break;
  f0:	08 95       	ret
		case 4: keypad_button = '%'; // ASCII Code of %
  f2:	85 e2       	ldi	r24, 0x25	; 37
		break;
  f4:	08 95       	ret
		case 5: keypad_button = 4;
  f6:	84 e0       	ldi	r24, 0x04	; 4
		break;
  f8:	08 95       	ret
		case 6: keypad_button = 5;
  fa:	85 e0       	ldi	r24, 0x05	; 5
		break;
  fc:	08 95       	ret
		case 7: keypad_button = 6;
  fe:	86 e0       	ldi	r24, 0x06	; 6
		break;
 100:	08 95       	ret
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
 102:	8a e2       	ldi	r24, 0x2A	; 42
		break;
 104:	08 95       	ret
		case 9: keypad_button = 1;
 106:	81 e0       	ldi	r24, 0x01	; 1
		break;
 108:	08 95       	ret
		case 10: keypad_button = 2;
 10a:	82 e0       	ldi	r24, 0x02	; 2
		break;
 10c:	08 95       	ret
		case 11: keypad_button = 3;
 10e:	83 e0       	ldi	r24, 0x03	; 3
		break;
 110:	08 95       	ret
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
 112:	8d e2       	ldi	r24, 0x2D	; 45
		break;
 114:	08 95       	ret
		case 13: keypad_button = 13;  /* ASCII of Enter */
		break;
		case 14: keypad_button = 0;
 116:	80 e0       	ldi	r24, 0x00	; 0
		break;
 118:	08 95       	ret
		case 15: keypad_button = '='; /* ASCII Code of '=' */
 11a:	8d e3       	ldi	r24, 0x3D	; 61
		break;
 11c:	08 95       	ret
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
 11e:	8b e2       	ldi	r24, 0x2B	; 43
		break;
 120:	08 95       	ret
	u8 keypad_button = 0;
	switch(button_number)
	{
		case 1: keypad_button = 7;
		break;
		case 2: keypad_button = 8;
 122:	88 e0       	ldi	r24, 0x08	; 8
		break;
		default: keypad_button = button_number;
		break;
	}
	return keypad_button;
}
 124:	08 95       	ret

00000126 <KEYPAD_getPressedKey>:
* its corresponding functional number for 4x4 keypad
*/
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number);


u8 KEYPAD_getPressedKey(){
 126:	af 92       	push	r10
 128:	bf 92       	push	r11
 12a:	cf 92       	push	r12
 12c:	df 92       	push	r13
 12e:	ef 92       	push	r14
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	a1 97       	sbiw	r28, 0x21	; 33
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	de bf       	out	0x3e, r29	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	cd bf       	out	0x3d, r28	; 61
	u8 col,row;
	DIO_Config colPins[] = {
 14a:	80 e1       	ldi	r24, 0x10	; 16
 14c:	e0 e6       	ldi	r30, 0x60	; 96
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	de 01       	movw	r26, r28
 152:	11 96       	adiw	r26, 0x01	; 1
 154:	01 90       	ld	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	8a 95       	dec	r24
 15a:	e1 f7       	brne	.-8      	; 0x154 <KEYPAD_getPressedKey+0x2e>
		{DIO_PORTD, DIO_PIN6, DIO_PIN_INPUT,DIO_PIN_HIGH},
		{DIO_PORTD, DIO_PIN5, DIO_PIN_INPUT,DIO_PIN_HIGH},
		{DIO_PORTD, DIO_PIN3, DIO_PIN_INPUT,DIO_PIN_HIGH},
	};

	DIO_Config rowPins[] = {
 15c:	fe 01       	movw	r30, r28
 15e:	71 96       	adiw	r30, 0x11	; 17
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	df 01       	movw	r26, r30
 164:	1d 92       	st	X+, r1
 166:	8a 95       	dec	r24
 168:	e9 f7       	brne	.-6      	; 0x164 <KEYPAD_getPressedKey+0x3e>
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	89 8b       	std	Y+17, r24	; 0x11
 16e:	95 e0       	ldi	r25, 0x05	; 5
 170:	9a 8b       	std	Y+18, r25	; 0x12
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	9b 8b       	std	Y+19, r25	; 0x13
 176:	8d 8b       	std	Y+21, r24	; 0x15
 178:	24 e0       	ldi	r18, 0x04	; 4
 17a:	2e 8b       	std	Y+22, r18	; 0x16
 17c:	9f 8b       	std	Y+23, r25	; 0x17
 17e:	89 8f       	std	Y+25, r24	; 0x19
 180:	23 e0       	ldi	r18, 0x03	; 3
 182:	2a 8f       	std	Y+26, r18	; 0x1a
 184:	9b 8f       	std	Y+27, r25	; 0x1b
 186:	8d 8f       	std	Y+29, r24	; 0x1d
 188:	8e 8f       	std	Y+30, r24	; 0x1e
 18a:	9f 8f       	std	Y+31, r25	; 0x1f
		{DIO_PORTC, DIO_PIN3, DIO_PIN_OUTPUT},
		{DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT}
	};

	// Initialize the keypad pins
	for (u8 i = 0; i < 4; i++) {
 18c:	d1 2c       	mov	r13, r1
 18e:	1b c0       	rjmp	.+54     	; 0x1c6 <KEYPAD_getPressedKey+0xa0>
		DIO_U8SetPinDirection(&colPins[i]);
 190:	ed 2c       	mov	r14, r13
 192:	f1 2c       	mov	r15, r1
 194:	ee 0c       	add	r14, r14
 196:	ff 1c       	adc	r15, r15
 198:	ee 0c       	add	r14, r14
 19a:	ff 1c       	adc	r15, r15
 19c:	01 e0       	ldi	r16, 0x01	; 1
 19e:	10 e0       	ldi	r17, 0x00	; 0
 1a0:	0c 0f       	add	r16, r28
 1a2:	1d 1f       	adc	r17, r29
 1a4:	0e 0d       	add	r16, r14
 1a6:	1f 1d       	adc	r17, r15
 1a8:	c8 01       	movw	r24, r16
 1aa:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <DIO_U8SetPinDirection>
		DIO_U8SetPinDirection(&rowPins[i]);
 1ae:	81 e1       	ldi	r24, 0x11	; 17
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	8c 0f       	add	r24, r28
 1b4:	9d 1f       	adc	r25, r29
 1b6:	8e 0d       	add	r24, r14
 1b8:	9f 1d       	adc	r25, r15
 1ba:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <DIO_U8SetPinDirection>
		DIO_U8SetPinValue(&colPins[i]);
 1be:	c8 01       	movw	r24, r16
 1c0:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
		{DIO_PORTC, DIO_PIN3, DIO_PIN_OUTPUT},
		{DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT}
	};

	// Initialize the keypad pins
	for (u8 i = 0; i < 4; i++) {
 1c4:	d3 94       	inc	r13
 1c6:	b3 e0       	ldi	r27, 0x03	; 3
 1c8:	bd 15       	cp	r27, r13
 1ca:	10 f7       	brcc	.-60     	; 0x190 <KEYPAD_getPressedKey+0x6a>
	}

	while(1)
	{
		/*for loop to scan all keypad columns*/
		for (row = 0 ; row < 4 ; row++)
 1cc:	e1 2c       	mov	r14, r1
 1ce:	54 c0       	rjmp	.+168    	; 0x278 <KEYPAD_getPressedKey+0x152>
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
 1d0:	ce 2c       	mov	r12, r14
 1d2:	d1 2c       	mov	r13, r1
 1d4:	56 01       	movw	r10, r12
 1d6:	aa 0c       	add	r10, r10
 1d8:	bb 1c       	adc	r11, r11
 1da:	aa 0c       	add	r10, r10
 1dc:	bb 1c       	adc	r11, r11
 1de:	e1 e0       	ldi	r30, 0x01	; 1
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	ec 0f       	add	r30, r28
 1e4:	fd 1f       	adc	r31, r29
 1e6:	ea 0d       	add	r30, r10
 1e8:	fb 1d       	adc	r31, r11
 1ea:	13 8a       	std	Z+19, r1	; 0x13
			DIO_U8SetPinValue(&rowPins[row]);
 1ec:	81 e1       	ldi	r24, 0x11	; 17
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	8c 0f       	add	r24, r28
 1f2:	9d 1f       	adc	r25, r29
 1f4:	a8 0e       	add	r10, r24
 1f6:	b9 1e       	adc	r11, r25
 1f8:	c5 01       	movw	r24, r10
 1fa:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 1fe:	f1 2c       	mov	r15, r1
 200:	28 c0       	rjmp	.+80     	; 0x252 <KEYPAD_getPressedKey+0x12c>
			{
				u8 key;
				DIO_U8GetPinValue(&colPins[col], &key);
 202:	0f 2d       	mov	r16, r15
 204:	10 e0       	ldi	r17, 0x00	; 0
 206:	00 0f       	add	r16, r16
 208:	11 1f       	adc	r17, r17
 20a:	00 0f       	add	r16, r16
 20c:	11 1f       	adc	r17, r17
 20e:	a1 e0       	ldi	r26, 0x01	; 1
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	ac 0f       	add	r26, r28
 214:	bd 1f       	adc	r27, r29
 216:	0a 0f       	add	r16, r26
 218:	1b 1f       	adc	r17, r27
 21a:	be 01       	movw	r22, r28
 21c:	6f 5d       	subi	r22, 0xDF	; 223
 21e:	7f 4f       	sbci	r23, 0xFF	; 255
 220:	c8 01       	movw	r24, r16
 222:	0e 94 51 04 	call	0x8a2	; 0x8a2 <DIO_U8GetPinValue>
				/*check current row pin value*/
				if ( DIO_PIN_LOW == key )
 226:	99 a1       	ldd	r25, Y+33	; 0x21
 228:	91 11       	cpse	r25, r1
 22a:	12 c0       	rjmp	.+36     	; 0x250 <KEYPAD_getPressedKey+0x12a>
 22c:	06 c0       	rjmp	.+12     	; 0x23a <KEYPAD_getPressedKey+0x114>
				{
					/*return pressed button value*/
					while(key != DIO_PIN_HIGH){
						DIO_U8GetPinValue(&colPins[col], &key);
 22e:	be 01       	movw	r22, r28
 230:	6f 5d       	subi	r22, 0xDF	; 223
 232:	7f 4f       	sbci	r23, 0xFF	; 255
 234:	c8 01       	movw	r24, r16
 236:	0e 94 51 04 	call	0x8a2	; 0x8a2 <DIO_U8GetPinValue>
				DIO_U8GetPinValue(&colPins[col], &key);
				/*check current row pin value*/
				if ( DIO_PIN_LOW == key )
				{
					/*return pressed button value*/
					while(key != DIO_PIN_HIGH){
 23a:	89 a1       	ldd	r24, Y+33	; 0x21
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	b9 f7       	brne	.-18     	; 0x22e <KEYPAD_getPressedKey+0x108>
						DIO_U8GetPinValue(&colPins[col], &key);
					}
					return KEYPAD_4x4_adjustKeyNumber((col*KEYPAD_NUM_COLS)+row+1);
 240:	ff 0c       	add	r15, r15
 242:	ff 0c       	add	r15, r15
 244:	8f 2d       	mov	r24, r15
 246:	8e 0d       	add	r24, r14
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	0e 94 6a 00 	call	0xd4	; 0xd4 <KEYPAD_4x4_adjustKeyNumber>
 24e:	19 c0       	rjmp	.+50     	; 0x282 <KEYPAD_getPressedKey+0x15c>
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
			DIO_U8SetPinValue(&rowPins[row]);
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 250:	f3 94       	inc	r15
 252:	b3 e0       	ldi	r27, 0x03	; 3
 254:	bf 15       	cp	r27, r15
 256:	a8 f6       	brcc	.-86     	; 0x202 <KEYPAD_getPressedKey+0xdc>
					return KEYPAD_4x4_adjustKeyNumber((col*KEYPAD_NUM_COLS)+row+1);
				}
				/*end of for loop*/
			}
			/*set current column pin HIGH again*/
			rowPins[row].value = DIO_PIN_HIGH;
 258:	cc 0c       	add	r12, r12
 25a:	dd 1c       	adc	r13, r13
 25c:	cc 0c       	add	r12, r12
 25e:	dd 1c       	adc	r13, r13
 260:	e1 e0       	ldi	r30, 0x01	; 1
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ec 0f       	add	r30, r28
 266:	fd 1f       	adc	r31, r29
 268:	ec 0d       	add	r30, r12
 26a:	fd 1d       	adc	r31, r13
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	83 8b       	std	Z+19, r24	; 0x13
			DIO_U8SetPinValue(&rowPins[row]);
 270:	c5 01       	movw	r24, r10
 272:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
	}

	while(1)
	{
		/*for loop to scan all keypad columns*/
		for (row = 0 ; row < 4 ; row++)
 276:	e3 94       	inc	r14
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	8e 15       	cp	r24, r14
 27c:	08 f0       	brcs	.+2      	; 0x280 <KEYPAD_getPressedKey+0x15a>
 27e:	a8 cf       	rjmp	.-176    	; 0x1d0 <KEYPAD_getPressedKey+0xaa>
 280:	a5 cf       	rjmp	.-182    	; 0x1cc <KEYPAD_getPressedKey+0xa6>

		}
		/*end of for loop*/

	}
}
 282:	a1 96       	adiw	r28, 0x21	; 33
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	df 90       	pop	r13
 29c:	cf 90       	pop	r12
 29e:	bf 90       	pop	r11
 2a0:	af 90       	pop	r10
 2a2:	08 95       	ret

000002a4 <H_LCD_void_latchByte>:
 2a4:	0f 93       	push	r16
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	64 97       	sbiw	r28, 0x14	; 20
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	08 2f       	mov	r16, r24
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	89 83       	std	Y+1, r24	; 0x01
 2c2:	1a 82       	std	Y+2, r1	; 0x02
 2c4:	8b 83       	std	Y+3, r24	; 0x03
 2c6:	04 fb       	bst	r16, 4
 2c8:	99 27       	eor	r25, r25
 2ca:	90 f9       	bld	r25, 0
 2cc:	9c 83       	std	Y+4, r25	; 0x04
 2ce:	8d 83       	std	Y+5, r24	; 0x05
 2d0:	8e 83       	std	Y+6, r24	; 0x06
 2d2:	8f 83       	std	Y+7, r24	; 0x07
 2d4:	05 fb       	bst	r16, 5
 2d6:	99 27       	eor	r25, r25
 2d8:	90 f9       	bld	r25, 0
 2da:	98 87       	std	Y+8, r25	; 0x08
 2dc:	89 87       	std	Y+9, r24	; 0x09
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	9a 87       	std	Y+10, r25	; 0x0a
 2e2:	8b 87       	std	Y+11, r24	; 0x0b
 2e4:	06 fb       	bst	r16, 6
 2e6:	99 27       	eor	r25, r25
 2e8:	90 f9       	bld	r25, 0
 2ea:	9c 87       	std	Y+12, r25	; 0x0c
 2ec:	8d 87       	std	Y+13, r24	; 0x0d
 2ee:	94 e0       	ldi	r25, 0x04	; 4
 2f0:	9e 87       	std	Y+14, r25	; 0x0e
 2f2:	8f 87       	std	Y+15, r24	; 0x0f
 2f4:	80 2f       	mov	r24, r16
 2f6:	88 1f       	adc	r24, r24
 2f8:	88 27       	eor	r24, r24
 2fa:	88 1f       	adc	r24, r24
 2fc:	88 8b       	std	Y+16, r24	; 0x10
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	0f c0       	rjmp	.+30     	; 0x320 <H_LCD_void_latchByte+0x7c>
 302:	81 2f       	mov	r24, r17
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	2c 0f       	add	r18, r28
 314:	3d 1f       	adc	r19, r29
 316:	82 0f       	add	r24, r18
 318:	93 1f       	adc	r25, r19
 31a:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 31e:	1f 5f       	subi	r17, 0xFF	; 255
 320:	14 30       	cpi	r17, 0x04	; 4
 322:	78 f3       	brcs	.-34     	; 0x302 <H_LCD_void_latchByte+0x5e>
 324:	19 8a       	std	Y+17, r1	; 0x11
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	8a 8b       	std	Y+18, r24	; 0x12
 32a:	1c 8a       	std	Y+20, r1	; 0x14
 32c:	89 ef       	ldi	r24, 0xF9	; 249
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <H_LCD_void_latchByte+0x8c>
 334:	00 c0       	rjmp	.+0      	; 0x336 <H_LCD_void_latchByte+0x92>
 336:	00 00       	nop
 338:	ce 01       	movw	r24, r28
 33a:	41 96       	adiw	r24, 0x11	; 17
 33c:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 340:	e9 ef       	ldi	r30, 0xF9	; 249
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	31 97       	sbiw	r30, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <H_LCD_void_latchByte+0xa0>
 348:	00 c0       	rjmp	.+0      	; 0x34a <H_LCD_void_latchByte+0xa6>
 34a:	00 00       	nop
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	8c 8b       	std	Y+20, r24	; 0x14
 350:	ce 01       	movw	r24, r28
 352:	41 96       	adiw	r24, 0x11	; 17
 354:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 358:	89 ef       	ldi	r24, 0xF9	; 249
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <H_LCD_void_latchByte+0xb8>
 360:	00 c0       	rjmp	.+0      	; 0x362 <H_LCD_void_latchByte+0xbe>
 362:	00 00       	nop
 364:	10 e0       	ldi	r17, 0x00	; 0
 366:	1a c0       	rjmp	.+52     	; 0x39c <H_LCD_void_latchByte+0xf8>
 368:	81 2f       	mov	r24, r17
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	20 2f       	mov	r18, r16
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	01 2e       	mov	r0, r17
 372:	02 c0       	rjmp	.+4      	; 0x378 <H_LCD_void_latchByte+0xd4>
 374:	35 95       	asr	r19
 376:	27 95       	ror	r18
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <H_LCD_void_latchByte+0xd0>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	e1 e0       	ldi	r30, 0x01	; 1
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	ec 0f       	add	r30, r28
 38a:	fd 1f       	adc	r31, r29
 38c:	8e 0f       	add	r24, r30
 38e:	9f 1f       	adc	r25, r31
 390:	21 70       	andi	r18, 0x01	; 1
 392:	fc 01       	movw	r30, r24
 394:	23 83       	std	Z+3, r18	; 0x03
 396:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 39a:	1f 5f       	subi	r17, 0xFF	; 255
 39c:	14 30       	cpi	r17, 0x04	; 4
 39e:	20 f3       	brcs	.-56     	; 0x368 <H_LCD_void_latchByte+0xc4>
 3a0:	89 ef       	ldi	r24, 0xF9	; 249
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <H_LCD_void_latchByte+0x100>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <H_LCD_void_latchByte+0x106>
 3aa:	00 00       	nop
 3ac:	1c 8a       	std	Y+20, r1	; 0x14
 3ae:	ce 01       	movw	r24, r28
 3b0:	41 96       	adiw	r24, 0x11	; 17
 3b2:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 3b6:	e9 ef       	ldi	r30, 0xF9	; 249
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	31 97       	sbiw	r30, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <H_LCD_void_latchByte+0x116>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <H_LCD_void_latchByte+0x11c>
 3c0:	00 00       	nop
 3c2:	64 96       	adiw	r28, 0x14	; 20
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	08 95       	ret

000003d8 <H_LCD_void_sendCommand>:
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	28 97       	sbiw	r28, 0x08	; 8
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	f8 94       	cli
 3ea:	de bf       	out	0x3e, r29	; 62
 3ec:	0f be       	out	0x3f, r0	; 63
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	08 2f       	mov	r16, r24
 3f2:	88 e0       	ldi	r24, 0x08	; 8
 3f4:	e0 e7       	ldi	r30, 0x70	; 112
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	de 01       	movw	r26, r28
 3fa:	11 96       	adiw	r26, 0x01	; 1
 3fc:	01 90       	ld	r0, Z+
 3fe:	0d 92       	st	X+, r0
 400:	8a 95       	dec	r24
 402:	e1 f7       	brne	.-8      	; 0x3fc <H_LCD_void_sendCommand+0x24>
 404:	10 e0       	ldi	r17, 0x00	; 0
 406:	15 c0       	rjmp	.+42     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 408:	81 2f       	mov	r24, r17
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	2c 0f       	add	r18, r28
 41a:	3d 1f       	adc	r19, r29
 41c:	82 0f       	add	r24, r18
 41e:	93 1f       	adc	r25, r19
 420:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 424:	89 ef       	ldi	r24, 0xF9	; 249
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
 430:	1f 5f       	subi	r17, 0xFF	; 255
 432:	12 30       	cpi	r17, 0x02	; 2
 434:	48 f3       	brcs	.-46     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 436:	89 ef       	ldi	r24, 0xF9	; 249
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 440:	00 00       	nop
 442:	80 2f       	mov	r24, r16
 444:	0e 94 52 01 	call	0x2a4	; 0x2a4 <H_LCD_void_latchByte>
 448:	28 96       	adiw	r28, 0x08	; 8
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret

0000045e <H_LCD_void_sendData>:
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	28 97       	sbiw	r28, 0x08	; 8
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
 476:	08 2f       	mov	r16, r24
 478:	88 e0       	ldi	r24, 0x08	; 8
 47a:	e8 e7       	ldi	r30, 0x78	; 120
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	de 01       	movw	r26, r28
 480:	11 96       	adiw	r26, 0x01	; 1
 482:	01 90       	ld	r0, Z+
 484:	0d 92       	st	X+, r0
 486:	8a 95       	dec	r24
 488:	e1 f7       	brne	.-8      	; 0x482 <H_LCD_void_sendData+0x24>
 48a:	10 e0       	ldi	r17, 0x00	; 0
 48c:	15 c0       	rjmp	.+42     	; 0x4b8 <H_LCD_void_sendData+0x5a>
 48e:	81 2f       	mov	r24, r17
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	2c 0f       	add	r18, r28
 4a0:	3d 1f       	adc	r19, r29
 4a2:	82 0f       	add	r24, r18
 4a4:	93 1f       	adc	r25, r19
 4a6:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 4aa:	89 ef       	ldi	r24, 0xF9	; 249
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <H_LCD_void_sendData+0x50>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <H_LCD_void_sendData+0x56>
 4b4:	00 00       	nop
 4b6:	1f 5f       	subi	r17, 0xFF	; 255
 4b8:	12 30       	cpi	r17, 0x02	; 2
 4ba:	48 f3       	brcs	.-46     	; 0x48e <H_LCD_void_sendData+0x30>
 4bc:	89 ef       	ldi	r24, 0xF9	; 249
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <H_LCD_void_sendData+0x62>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <H_LCD_void_sendData+0x68>
 4c6:	00 00       	nop
 4c8:	80 2f       	mov	r24, r16
 4ca:	0e 94 52 01 	call	0x2a4	; 0x2a4 <H_LCD_void_latchByte>
 4ce:	28 96       	adiw	r28, 0x08	; 8
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	de bf       	out	0x3e, r29	; 62
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	cd bf       	out	0x3d, r28	; 61
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	08 95       	ret

000004e4 <H_LCD_void_sendString>:
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	8c 01       	movw	r16, r24
 4ec:	c0 e0       	ldi	r28, 0x00	; 0
 4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <H_LCD_void_sendString+0x12>
 4f0:	0e 94 2f 02 	call	0x45e	; 0x45e <H_LCD_void_sendData>
 4f4:	cf 5f       	subi	r28, 0xFF	; 255
 4f6:	f8 01       	movw	r30, r16
 4f8:	ec 0f       	add	r30, r28
 4fa:	f1 1d       	adc	r31, r1
 4fc:	80 81       	ld	r24, Z
 4fe:	81 11       	cpse	r24, r1
 500:	f7 cf       	rjmp	.-18     	; 0x4f0 <H_LCD_void_sendString+0xc>
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	0f 91       	pop	r16
 508:	08 95       	ret

0000050a <H_LCD_void_sendIntNum>:
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
 512:	60 97       	sbiw	r28, 0x10	; 16
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	f8 94       	cli
 518:	de bf       	out	0x3e, r29	; 62
 51a:	0f be       	out	0x3f, r0	; 63
 51c:	cd bf       	out	0x3d, r28	; 61
 51e:	dc 01       	movw	r26, r24
 520:	cb 01       	movw	r24, r22
 522:	4a e0       	ldi	r20, 0x0A	; 10
 524:	be 01       	movw	r22, r28
 526:	6f 5f       	subi	r22, 0xFF	; 255
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <__itoa_ncheck>
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	0e 94 72 02 	call	0x4e4	; 0x4e4 <H_LCD_void_sendString>
 536:	60 96       	adiw	r28, 0x10	; 16
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <functionSet>:
 548:	1f 93       	push	r17
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	64 97       	sbiw	r28, 0x14	; 20
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	f8 94       	cli
 558:	de bf       	out	0x3e, r29	; 62
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	cd bf       	out	0x3d, r28	; 61
 55e:	80 e1       	ldi	r24, 0x10	; 16
 560:	e0 e8       	ldi	r30, 0x80	; 128
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	de 01       	movw	r26, r28
 566:	11 96       	adiw	r26, 0x01	; 1
 568:	01 90       	ld	r0, Z+
 56a:	0d 92       	st	X+, r0
 56c:	8a 95       	dec	r24
 56e:	e1 f7       	brne	.-8      	; 0x568 <functionSet+0x20>
 570:	10 e0       	ldi	r17, 0x00	; 0
 572:	0f c0       	rjmp	.+30     	; 0x592 <functionSet+0x4a>
 574:	81 2f       	mov	r24, r17
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	21 e0       	ldi	r18, 0x01	; 1
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	2c 0f       	add	r18, r28
 586:	3d 1f       	adc	r19, r29
 588:	82 0f       	add	r24, r18
 58a:	93 1f       	adc	r25, r19
 58c:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 590:	1f 5f       	subi	r17, 0xFF	; 255
 592:	14 30       	cpi	r17, 0x04	; 4
 594:	78 f3       	brcs	.-34     	; 0x574 <functionSet+0x2c>
 596:	19 8a       	std	Y+17, r1	; 0x11
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	8a 8b       	std	Y+18, r24	; 0x12
 59c:	1c 8a       	std	Y+20, r1	; 0x14
 59e:	89 ef       	ldi	r24, 0xF9	; 249
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <functionSet+0x5a>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <functionSet+0x60>
 5a8:	00 00       	nop
 5aa:	ce 01       	movw	r24, r28
 5ac:	41 96       	adiw	r24, 0x11	; 17
 5ae:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 5b2:	89 ef       	ldi	r24, 0xF9	; 249
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	01 97       	sbiw	r24, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <functionSet+0x6e>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <functionSet+0x74>
 5bc:	00 00       	nop
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	8c 8b       	std	Y+20, r24	; 0x14
 5c2:	ce 01       	movw	r24, r28
 5c4:	41 96       	adiw	r24, 0x11	; 17
 5c6:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 5ca:	89 ef       	ldi	r24, 0xF9	; 249
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <functionSet+0x86>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <functionSet+0x8c>
 5d4:	00 00       	nop
 5d6:	10 e0       	ldi	r17, 0x00	; 0
 5d8:	0f c0       	rjmp	.+30     	; 0x5f8 <functionSet+0xb0>
 5da:	81 2f       	mov	r24, r17
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	88 0f       	add	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	21 e0       	ldi	r18, 0x01	; 1
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	2c 0f       	add	r18, r28
 5ec:	3d 1f       	adc	r19, r29
 5ee:	82 0f       	add	r24, r18
 5f0:	93 1f       	adc	r25, r19
 5f2:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 5f6:	1f 5f       	subi	r17, 0xFF	; 255
 5f8:	14 30       	cpi	r17, 0x04	; 4
 5fa:	78 f3       	brcs	.-34     	; 0x5da <functionSet+0x92>
 5fc:	89 ef       	ldi	r24, 0xF9	; 249
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <functionSet+0xb8>
 604:	00 c0       	rjmp	.+0      	; 0x606 <functionSet+0xbe>
 606:	00 00       	nop
 608:	1c 8a       	std	Y+20, r1	; 0x14
 60a:	ce 01       	movw	r24, r28
 60c:	41 96       	adiw	r24, 0x11	; 17
 60e:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 612:	89 ef       	ldi	r24, 0xF9	; 249
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <functionSet+0xce>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <functionSet+0xd4>
 61c:	00 00       	nop
 61e:	10 e0       	ldi	r17, 0x00	; 0
 620:	0f c0       	rjmp	.+30     	; 0x640 <functionSet+0xf8>
 622:	81 2f       	mov	r24, r17
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	21 e0       	ldi	r18, 0x01	; 1
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	2c 0f       	add	r18, r28
 634:	3d 1f       	adc	r19, r29
 636:	82 0f       	add	r24, r18
 638:	93 1f       	adc	r25, r19
 63a:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 63e:	1f 5f       	subi	r17, 0xFF	; 255
 640:	14 30       	cpi	r17, 0x04	; 4
 642:	78 f3       	brcs	.-34     	; 0x622 <functionSet+0xda>
 644:	89 ef       	ldi	r24, 0xF9	; 249
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <functionSet+0x100>
 64c:	00 c0       	rjmp	.+0      	; 0x64e <functionSet+0x106>
 64e:	00 00       	nop
 650:	1c 8a       	std	Y+20, r1	; 0x14
 652:	ce 01       	movw	r24, r28
 654:	41 96       	adiw	r24, 0x11	; 17
 656:	0e 94 0f 04 	call	0x81e	; 0x81e <DIO_U8SetPinValue>
 65a:	89 ef       	ldi	r24, 0xF9	; 249
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	01 97       	sbiw	r24, 0x01	; 1
 660:	f1 f7       	brne	.-4      	; 0x65e <functionSet+0x116>
 662:	00 c0       	rjmp	.+0      	; 0x664 <functionSet+0x11c>
 664:	00 00       	nop
 666:	64 96       	adiw	r28, 0x14	; 20
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	f8 94       	cli
 66c:	de bf       	out	0x3e, r29	; 62
 66e:	0f be       	out	0x3f, r0	; 63
 670:	cd bf       	out	0x3d, r28	; 61
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	1f 91       	pop	r17
 678:	08 95       	ret

0000067a <H_LCD_void_Init>:
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
 684:	68 97       	sbiw	r28, 0x18	; 24
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	f8 94       	cli
 68a:	de bf       	out	0x3e, r29	; 62
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	cd bf       	out	0x3d, r28	; 61
 690:	fe 01       	movw	r30, r28
 692:	31 96       	adiw	r30, 0x01	; 1
 694:	88 e0       	ldi	r24, 0x08	; 8
 696:	df 01       	movw	r26, r30
 698:	1d 92       	st	X+, r1
 69a:	8a 95       	dec	r24
 69c:	e9 f7       	brne	.-6      	; 0x698 <H_LCD_void_Init+0x1e>
 69e:	83 e0       	ldi	r24, 0x03	; 3
 6a0:	8a 83       	std	Y+2, r24	; 0x02
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	8b 83       	std	Y+3, r24	; 0x03
 6a6:	92 e0       	ldi	r25, 0x02	; 2
 6a8:	9e 83       	std	Y+6, r25	; 0x06
 6aa:	8f 83       	std	Y+7, r24	; 0x07
 6ac:	10 e0       	ldi	r17, 0x00	; 0
 6ae:	0f c0       	rjmp	.+30     	; 0x6ce <H_LCD_void_Init+0x54>
 6b0:	81 2f       	mov	r24, r17
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	88 0f       	add	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	21 e0       	ldi	r18, 0x01	; 1
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	2c 0f       	add	r18, r28
 6c2:	3d 1f       	adc	r19, r29
 6c4:	82 0f       	add	r24, r18
 6c6:	93 1f       	adc	r25, r19
 6c8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <DIO_U8SetPinDirection>
 6cc:	1f 5f       	subi	r17, 0xFF	; 255
 6ce:	12 30       	cpi	r17, 0x02	; 2
 6d0:	78 f3       	brcs	.-34     	; 0x6b0 <H_LCD_void_Init+0x36>
 6d2:	fe 01       	movw	r30, r28
 6d4:	39 96       	adiw	r30, 0x09	; 9
 6d6:	80 e1       	ldi	r24, 0x10	; 16
 6d8:	df 01       	movw	r26, r30
 6da:	1d 92       	st	X+, r1
 6dc:	8a 95       	dec	r24
 6de:	e9 f7       	brne	.-6      	; 0x6da <H_LCD_void_Init+0x60>
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	89 87       	std	Y+9, r24	; 0x09
 6e4:	8b 87       	std	Y+11, r24	; 0x0b
 6e6:	8d 87       	std	Y+13, r24	; 0x0d
 6e8:	8e 87       	std	Y+14, r24	; 0x0e
 6ea:	8f 87       	std	Y+15, r24	; 0x0f
 6ec:	89 8b       	std	Y+17, r24	; 0x11
 6ee:	92 e0       	ldi	r25, 0x02	; 2
 6f0:	9a 8b       	std	Y+18, r25	; 0x12
 6f2:	8b 8b       	std	Y+19, r24	; 0x13
 6f4:	8d 8b       	std	Y+21, r24	; 0x15
 6f6:	94 e0       	ldi	r25, 0x04	; 4
 6f8:	9e 8b       	std	Y+22, r25	; 0x16
 6fa:	8f 8b       	std	Y+23, r24	; 0x17
 6fc:	10 e0       	ldi	r17, 0x00	; 0
 6fe:	0f c0       	rjmp	.+30     	; 0x71e <H_LCD_void_Init+0xa4>
 700:	81 2f       	mov	r24, r17
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	29 e0       	ldi	r18, 0x09	; 9
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	2c 0f       	add	r18, r28
 712:	3d 1f       	adc	r19, r29
 714:	82 0f       	add	r24, r18
 716:	93 1f       	adc	r25, r19
 718:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <DIO_U8SetPinDirection>
 71c:	1f 5f       	subi	r17, 0xFF	; 255
 71e:	14 30       	cpi	r17, 0x04	; 4
 720:	78 f3       	brcs	.-34     	; 0x700 <H_LCD_void_Init+0x86>
 722:	0e 94 a4 02 	call	0x548	; 0x548 <functionSet>
 726:	89 ef       	ldi	r24, 0xF9	; 249
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	01 97       	sbiw	r24, 0x01	; 1
 72c:	f1 f7       	brne	.-4      	; 0x72a <H_LCD_void_Init+0xb0>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <H_LCD_void_Init+0xb6>
 730:	00 00       	nop
 732:	8f e0       	ldi	r24, 0x0F	; 15
 734:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <H_LCD_void_sendCommand>
 738:	a9 ef       	ldi	r26, 0xF9	; 249
 73a:	b0 e0       	ldi	r27, 0x00	; 0
 73c:	11 97       	sbiw	r26, 0x01	; 1
 73e:	f1 f7       	brne	.-4      	; 0x73c <H_LCD_void_Init+0xc2>
 740:	00 c0       	rjmp	.+0      	; 0x742 <H_LCD_void_Init+0xc8>
 742:	00 00       	nop
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <H_LCD_void_sendCommand>
 74a:	83 ef       	ldi	r24, 0xF3	; 243
 74c:	91 e0       	ldi	r25, 0x01	; 1
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	f1 f7       	brne	.-4      	; 0x74e <H_LCD_void_Init+0xd4>
 752:	00 c0       	rjmp	.+0      	; 0x754 <H_LCD_void_Init+0xda>
 754:	00 00       	nop
 756:	86 e0       	ldi	r24, 0x06	; 6
 758:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <H_LCD_void_sendCommand>
 75c:	68 96       	adiw	r28, 0x18	; 24
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	de bf       	out	0x3e, r29	; 62
 764:	0f be       	out	0x3f, r0	; 63
 766:	cd bf       	out	0x3d, r28	; 61
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	1f 91       	pop	r17
 76e:	08 95       	ret

00000770 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 770:	24 b1       	in	r18, 0x04	; 4
 772:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 774:	00 24       	eor	r0, r0
 776:	22 0f       	add	r18, r18
 778:	33 1f       	adc	r19, r19
 77a:	00 1c       	adc	r0, r0
 77c:	22 0f       	add	r18, r18
 77e:	33 1f       	adc	r19, r19
 780:	00 1c       	adc	r0, r0
 782:	23 2f       	mov	r18, r19
 784:	30 2d       	mov	r19, r0
 786:	85 b1       	in	r24, 0x05	; 5
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 792:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <__data_end>
 796:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <__data_end+0x1>
 79a:	82 2b       	or	r24, r18
 79c:	93 2b       	or	r25, r19
 79e:	09 95       	icall
 7a0:	08 95       	ret

000007a2 <DIO_U8SetPinDirection>:
 7a2:	dc 01       	movw	r26, r24
 7a4:	ec 91       	ld	r30, X
 7a6:	e4 30       	cpi	r30, 0x04	; 4
 7a8:	a0 f5       	brcc	.+104    	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7aa:	11 96       	adiw	r26, 0x01	; 1
 7ac:	2c 91       	ld	r18, X
 7ae:	11 97       	sbiw	r26, 0x01	; 1
 7b0:	28 30       	cpi	r18, 0x08	; 8
 7b2:	88 f5       	brcc	.+98     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7b4:	12 96       	adiw	r26, 0x02	; 2
 7b6:	8c 91       	ld	r24, X
 7b8:	81 11       	cpse	r24, r1
 7ba:	15 c0       	rjmp	.+42     	; 0x7e6 <DIO_U8SetPinDirection+0x44>
 7bc:	f0 e0       	ldi	r31, 0x00	; 0
 7be:	ee 0f       	add	r30, r30
 7c0:	ff 1f       	adc	r31, r31
 7c2:	e0 56       	subi	r30, 0x60	; 96
 7c4:	ff 4f       	sbci	r31, 0xFF	; 255
 7c6:	01 90       	ld	r0, Z+
 7c8:	f0 81       	ld	r31, Z
 7ca:	e0 2d       	mov	r30, r0
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <DIO_U8SetPinDirection+0x34>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	2a 95       	dec	r18
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <DIO_U8SetPinDirection+0x30>
 7da:	80 95       	com	r24
 7dc:	90 81       	ld	r25, Z
 7de:	89 23       	and	r24, r25
 7e0:	80 83       	st	Z, r24
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	08 95       	ret
 7e6:	81 30       	cpi	r24, 0x01	; 1
 7e8:	c1 f4       	brne	.+48     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	ee 0f       	add	r30, r30
 7ee:	ff 1f       	adc	r31, r31
 7f0:	e0 56       	subi	r30, 0x60	; 96
 7f2:	ff 4f       	sbci	r31, 0xFF	; 255
 7f4:	01 90       	ld	r0, Z+
 7f6:	f0 81       	ld	r31, Z
 7f8:	e0 2d       	mov	r30, r0
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 800:	88 0f       	add	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	2a 95       	dec	r18
 806:	e2 f7       	brpl	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
 808:	90 81       	ld	r25, Z
 80a:	89 2b       	or	r24, r25
 80c:	80 83       	st	Z, r24
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	08 95       	ret
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	08 95       	ret
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	08 95       	ret
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	08 95       	ret

0000081e <DIO_U8SetPinValue>:
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	c1 f1       	breq	.+112    	; 0x892 <__stack+0x33>
 822:	dc 01       	movw	r26, r24
 824:	ec 91       	ld	r30, X
 826:	e4 30       	cpi	r30, 0x04	; 4
 828:	b0 f5       	brcc	.+108    	; 0x896 <__stack+0x37>
 82a:	11 96       	adiw	r26, 0x01	; 1
 82c:	2c 91       	ld	r18, X
 82e:	11 97       	sbiw	r26, 0x01	; 1
 830:	28 30       	cpi	r18, 0x08	; 8
 832:	98 f5       	brcc	.+102    	; 0x89a <__stack+0x3b>
 834:	13 96       	adiw	r26, 0x03	; 3
 836:	8c 91       	ld	r24, X
 838:	81 30       	cpi	r24, 0x01	; 1
 83a:	a1 f4       	brne	.+40     	; 0x864 <__stack+0x5>
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	ee 0f       	add	r30, r30
 840:	ff 1f       	adc	r31, r31
 842:	e8 56       	subi	r30, 0x68	; 104
 844:	ff 4f       	sbci	r31, 0xFF	; 255
 846:	01 90       	ld	r0, Z+
 848:	f0 81       	ld	r31, Z
 84a:	e0 2d       	mov	r30, r0
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <DIO_U8SetPinValue+0x38>
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	2a 95       	dec	r18
 858:	e2 f7       	brpl	.-8      	; 0x852 <DIO_U8SetPinValue+0x34>
 85a:	90 81       	ld	r25, Z
 85c:	89 2b       	or	r24, r25
 85e:	80 83       	st	Z, r24
 860:	80 e0       	ldi	r24, 0x00	; 0
 862:	08 95       	ret
 864:	81 11       	cpse	r24, r1
 866:	1b c0       	rjmp	.+54     	; 0x89e <__stack+0x3f>
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	ee 0f       	add	r30, r30
 86c:	ff 1f       	adc	r31, r31
 86e:	e8 56       	subi	r30, 0x68	; 104
 870:	ff 4f       	sbci	r31, 0xFF	; 255
 872:	01 90       	ld	r0, Z+
 874:	f0 81       	ld	r31, Z
 876:	e0 2d       	mov	r30, r0
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	2a 95       	dec	r18
 884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
 886:	80 95       	com	r24
 888:	90 81       	ld	r25, Z
 88a:	89 23       	and	r24, r25
 88c:	80 83       	st	Z, r24
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	08 95       	ret
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	08 95       	ret
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	08 95       	ret
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	08 95       	ret
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	08 95       	ret

000008a2 <DIO_U8GetPinValue>:
 8a2:	00 97       	sbiw	r24, 0x00	; 0
 8a4:	f9 f0       	breq	.+62     	; 0x8e4 <DIO_U8GetPinValue+0x42>
 8a6:	61 15       	cp	r22, r1
 8a8:	71 05       	cpc	r23, r1
 8aa:	f1 f0       	breq	.+60     	; 0x8e8 <DIO_U8GetPinValue+0x46>
 8ac:	dc 01       	movw	r26, r24
 8ae:	ec 91       	ld	r30, X
 8b0:	e4 30       	cpi	r30, 0x04	; 4
 8b2:	e0 f4       	brcc	.+56     	; 0x8ec <DIO_U8GetPinValue+0x4a>
 8b4:	11 96       	adiw	r26, 0x01	; 1
 8b6:	2c 91       	ld	r18, X
 8b8:	28 30       	cpi	r18, 0x08	; 8
 8ba:	d0 f4       	brcc	.+52     	; 0x8f0 <DIO_U8GetPinValue+0x4e>
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	ee 0f       	add	r30, r30
 8c0:	ff 1f       	adc	r31, r31
 8c2:	e0 57       	subi	r30, 0x70	; 112
 8c4:	ff 4f       	sbci	r31, 0xFF	; 255
 8c6:	01 90       	ld	r0, Z+
 8c8:	f0 81       	ld	r31, Z
 8ca:	e0 2d       	mov	r30, r0
 8cc:	80 81       	ld	r24, Z
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <DIO_U8GetPinValue+0x34>
 8d2:	95 95       	asr	r25
 8d4:	87 95       	ror	r24
 8d6:	2a 95       	dec	r18
 8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <DIO_U8GetPinValue+0x30>
 8da:	81 70       	andi	r24, 0x01	; 1
 8dc:	fb 01       	movw	r30, r22
 8de:	80 83       	st	Z, r24
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	08 95       	ret
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	08 95       	ret
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	08 95       	ret
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	08 95       	ret
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	08 95       	ret

000008f4 <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 8f4:	1f 92       	push	r1
 8f6:	0f 92       	push	r0
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	0f 92       	push	r0
 8fc:	11 24       	eor	r1, r1
 8fe:	2f 93       	push	r18
 900:	3f 93       	push	r19
 902:	4f 93       	push	r20
 904:	5f 93       	push	r21
 906:	6f 93       	push	r22
 908:	7f 93       	push	r23
 90a:	8f 93       	push	r24
 90c:	9f 93       	push	r25
 90e:	af 93       	push	r26
 910:	bf 93       	push	r27
 912:	ef 93       	push	r30
 914:	ff 93       	push	r31
	if(Action[0]!= NULL){
 916:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <Action>
 91a:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <Action+0x1>
 91e:	30 97       	sbiw	r30, 0x00	; 0
 920:	09 f0       	breq	.+2      	; 0x924 <__vector_1+0x30>
		Action[0]();
 922:	09 95       	icall
	}
}
 924:	ff 91       	pop	r31
 926:	ef 91       	pop	r30
 928:	bf 91       	pop	r27
 92a:	af 91       	pop	r26
 92c:	9f 91       	pop	r25
 92e:	8f 91       	pop	r24
 930:	7f 91       	pop	r23
 932:	6f 91       	pop	r22
 934:	5f 91       	pop	r21
 936:	4f 91       	pop	r20
 938:	3f 91       	pop	r19
 93a:	2f 91       	pop	r18
 93c:	0f 90       	pop	r0
 93e:	0f be       	out	0x3f, r0	; 63
 940:	0f 90       	pop	r0
 942:	1f 90       	pop	r1
 944:	18 95       	reti

00000946 <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 946:	1f 92       	push	r1
 948:	0f 92       	push	r0
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	0f 92       	push	r0
 94e:	11 24       	eor	r1, r1
 950:	2f 93       	push	r18
 952:	3f 93       	push	r19
 954:	4f 93       	push	r20
 956:	5f 93       	push	r21
 958:	6f 93       	push	r22
 95a:	7f 93       	push	r23
 95c:	8f 93       	push	r24
 95e:	9f 93       	push	r25
 960:	af 93       	push	r26
 962:	bf 93       	push	r27
 964:	ef 93       	push	r30
 966:	ff 93       	push	r31
	if(Action[1]!= NULL){
 968:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <Action+0x2>
 96c:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <Action+0x3>
 970:	30 97       	sbiw	r30, 0x00	; 0
 972:	09 f0       	breq	.+2      	; 0x976 <__vector_2+0x30>
		Action[1]();
 974:	09 95       	icall
	}
}
 976:	ff 91       	pop	r31
 978:	ef 91       	pop	r30
 97a:	bf 91       	pop	r27
 97c:	af 91       	pop	r26
 97e:	9f 91       	pop	r25
 980:	8f 91       	pop	r24
 982:	7f 91       	pop	r23
 984:	6f 91       	pop	r22
 986:	5f 91       	pop	r21
 988:	4f 91       	pop	r20
 98a:	3f 91       	pop	r19
 98c:	2f 91       	pop	r18
 98e:	0f 90       	pop	r0
 990:	0f be       	out	0x3f, r0	; 63
 992:	0f 90       	pop	r0
 994:	1f 90       	pop	r1
 996:	18 95       	reti

00000998 <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 998:	1f 92       	push	r1
 99a:	0f 92       	push	r0
 99c:	0f b6       	in	r0, 0x3f	; 63
 99e:	0f 92       	push	r0
 9a0:	11 24       	eor	r1, r1
 9a2:	2f 93       	push	r18
 9a4:	3f 93       	push	r19
 9a6:	4f 93       	push	r20
 9a8:	5f 93       	push	r21
 9aa:	6f 93       	push	r22
 9ac:	7f 93       	push	r23
 9ae:	8f 93       	push	r24
 9b0:	9f 93       	push	r25
 9b2:	af 93       	push	r26
 9b4:	bf 93       	push	r27
 9b6:	ef 93       	push	r30
 9b8:	ff 93       	push	r31
	if(Action[2]!= NULL){
 9ba:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <Action+0x4>
 9be:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <Action+0x5>
 9c2:	30 97       	sbiw	r30, 0x00	; 0
 9c4:	09 f0       	breq	.+2      	; 0x9c8 <__vector_3+0x30>
		Action[2]();
 9c6:	09 95       	icall
	}
}
 9c8:	ff 91       	pop	r31
 9ca:	ef 91       	pop	r30
 9cc:	bf 91       	pop	r27
 9ce:	af 91       	pop	r26
 9d0:	9f 91       	pop	r25
 9d2:	8f 91       	pop	r24
 9d4:	7f 91       	pop	r23
 9d6:	6f 91       	pop	r22
 9d8:	5f 91       	pop	r21
 9da:	4f 91       	pop	r20
 9dc:	3f 91       	pop	r19
 9de:	2f 91       	pop	r18
 9e0:	0f 90       	pop	r0
 9e2:	0f be       	out	0x3f, r0	; 63
 9e4:	0f 90       	pop	r0
 9e6:	1f 90       	pop	r1
 9e8:	18 95       	reti

000009ea <__tablejump2__>:
 9ea:	ee 0f       	add	r30, r30
 9ec:	ff 1f       	adc	r31, r31
 9ee:	05 90       	lpm	r0, Z+
 9f0:	f4 91       	lpm	r31, Z
 9f2:	e0 2d       	mov	r30, r0
 9f4:	09 94       	ijmp

000009f6 <__itoa_ncheck>:
 9f6:	bb 27       	eor	r27, r27
 9f8:	4a 30       	cpi	r20, 0x0A	; 10
 9fa:	31 f4       	brne	.+12     	; 0xa08 <__itoa_ncheck+0x12>
 9fc:	99 23       	and	r25, r25
 9fe:	22 f4       	brpl	.+8      	; 0xa08 <__itoa_ncheck+0x12>
 a00:	bd e2       	ldi	r27, 0x2D	; 45
 a02:	90 95       	com	r25
 a04:	81 95       	neg	r24
 a06:	9f 4f       	sbci	r25, 0xFF	; 255
 a08:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__utoa_common>

00000a0c <__utoa_ncheck>:
 a0c:	bb 27       	eor	r27, r27

00000a0e <__utoa_common>:
 a0e:	fb 01       	movw	r30, r22
 a10:	55 27       	eor	r21, r21
 a12:	aa 27       	eor	r26, r26
 a14:	88 0f       	add	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	aa 1f       	adc	r26, r26
 a1a:	a4 17       	cp	r26, r20
 a1c:	10 f0       	brcs	.+4      	; 0xa22 <__utoa_common+0x14>
 a1e:	a4 1b       	sub	r26, r20
 a20:	83 95       	inc	r24
 a22:	50 51       	subi	r21, 0x10	; 16
 a24:	b9 f7       	brne	.-18     	; 0xa14 <__utoa_common+0x6>
 a26:	a0 5d       	subi	r26, 0xD0	; 208
 a28:	aa 33       	cpi	r26, 0x3A	; 58
 a2a:	08 f0       	brcs	.+2      	; 0xa2e <__utoa_common+0x20>
 a2c:	a9 5d       	subi	r26, 0xD9	; 217
 a2e:	a1 93       	st	Z+, r26
 a30:	00 97       	sbiw	r24, 0x00	; 0
 a32:	79 f7       	brne	.-34     	; 0xa12 <__utoa_common+0x4>
 a34:	b1 11       	cpse	r27, r1
 a36:	b1 93       	st	Z+, r27
 a38:	11 92       	st	Z+, r1
 a3a:	cb 01       	movw	r24, r22
 a3c:	0c 94 20 05 	jmp	0xa40	; 0xa40 <strrev>

00000a40 <strrev>:
 a40:	dc 01       	movw	r26, r24
 a42:	fc 01       	movw	r30, r24
 a44:	67 2f       	mov	r22, r23
 a46:	71 91       	ld	r23, Z+
 a48:	77 23       	and	r23, r23
 a4a:	e1 f7       	brne	.-8      	; 0xa44 <strrev+0x4>
 a4c:	32 97       	sbiw	r30, 0x02	; 2
 a4e:	04 c0       	rjmp	.+8      	; 0xa58 <strrev+0x18>
 a50:	7c 91       	ld	r23, X
 a52:	6d 93       	st	X+, r22
 a54:	70 83       	st	Z, r23
 a56:	62 91       	ld	r22, -Z
 a58:	ae 17       	cp	r26, r30
 a5a:	bf 07       	cpc	r27, r31
 a5c:	c8 f3       	brcs	.-14     	; 0xa50 <strrev+0x10>
 a5e:	08 95       	ret

00000a60 <_exit>:
 a60:	f8 94       	cli

00000a62 <__stop_program>:
 a62:	ff cf       	rjmp	.-2      	; 0xa62 <__stop_program>
