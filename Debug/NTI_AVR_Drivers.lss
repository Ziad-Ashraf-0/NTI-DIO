
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000076e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000076e  00000802  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800088  00800088  0000082a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000208b  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0f  00000000  00000000  00002afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fc6  00000000  00000000  0000380a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  000047d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c50  00000000  00000000  00004d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000163e  00000000  00000000  00005950  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00006f8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <__vector_1>
   8:	0c 94 0a 03 	jmp	0x614	; 0x614 <__vector_2>
   c:	0c 94 33 03 	jmp	0x666	; 0x666 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 48 02 	jmp	0x490	; 0x490 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3a       	cpi	r26, 0xA0	; 160
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b5 03 	jmp	0x76a	; 0x76a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	//M_TIMER0_void_Init();
	//M_TIMER0_void_IntEnable(OVERFLOW);
	//M_TIMER0_void_setDelayTimeMilliSec(2500);
	//M_TIMER0_void_start();
	//_delay_ms(50);
	H_LCD_void_Init();
  92:	0e 94 2c 01 	call	0x258	; 0x258 <H_LCD_void_Init>
	H_LCD_void_sendBinaryNum(001); // Display the binary value on the LCD
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 07 02 	call	0x40e	; 0x40e <H_LCD_void_sendBinaryNum>
  9c:	ff cf       	rjmp	.-2      	; 0x9c <main+0xa>

0000009e <H_LCD_void_latchByte>:
	 }
 }

 H_LCD_void_sendString("0x"); // Display "0x" as a prefix for hexadecimal numbers
 H_LCD_void_sendString(buff); // Display the uppercase hexadecimal string
}
  9e:	0f 93       	push	r16
  a0:	1f 93       	push	r17
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
  aa:	64 97       	sbiw	r28, 0x14	; 20
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	f8 94       	cli
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	cd bf       	out	0x3d, r28	; 61
  b6:	08 2f       	mov	r16, r24
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	1a 82       	std	Y+2, r1	; 0x02
  be:	8b 83       	std	Y+3, r24	; 0x03
  c0:	04 fb       	bst	r16, 4
  c2:	99 27       	eor	r25, r25
  c4:	90 f9       	bld	r25, 0
  c6:	9c 83       	std	Y+4, r25	; 0x04
  c8:	8d 83       	std	Y+5, r24	; 0x05
  ca:	8e 83       	std	Y+6, r24	; 0x06
  cc:	8f 83       	std	Y+7, r24	; 0x07
  ce:	05 fb       	bst	r16, 5
  d0:	99 27       	eor	r25, r25
  d2:	90 f9       	bld	r25, 0
  d4:	98 87       	std	Y+8, r25	; 0x08
  d6:	89 87       	std	Y+9, r24	; 0x09
  d8:	92 e0       	ldi	r25, 0x02	; 2
  da:	9a 87       	std	Y+10, r25	; 0x0a
  dc:	8b 87       	std	Y+11, r24	; 0x0b
  de:	06 fb       	bst	r16, 6
  e0:	99 27       	eor	r25, r25
  e2:	90 f9       	bld	r25, 0
  e4:	9c 87       	std	Y+12, r25	; 0x0c
  e6:	8d 87       	std	Y+13, r24	; 0x0d
  e8:	94 e0       	ldi	r25, 0x04	; 4
  ea:	9e 87       	std	Y+14, r25	; 0x0e
  ec:	8f 87       	std	Y+15, r24	; 0x0f
  ee:	80 2f       	mov	r24, r16
  f0:	88 1f       	adc	r24, r24
  f2:	88 27       	eor	r24, r24
  f4:	88 1f       	adc	r24, r24
  f6:	88 8b       	std	Y+16, r24	; 0x10
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	0f c0       	rjmp	.+30     	; 0x11a <H_LCD_void_latchByte+0x7c>
  fc:	81 2f       	mov	r24, r17
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	2c 0f       	add	r18, r28
 10e:	3d 1f       	adc	r19, r29
 110:	82 0f       	add	r24, r18
 112:	93 1f       	adc	r25, r19
 114:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_U8SetPinValue>
 118:	1f 5f       	subi	r17, 0xFF	; 255
 11a:	14 30       	cpi	r17, 0x04	; 4
 11c:	78 f3       	brcs	.-34     	; 0xfc <H_LCD_void_latchByte+0x5e>
 11e:	19 8a       	std	Y+17, r1	; 0x11
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	8a 8b       	std	Y+18, r24	; 0x12
 124:	1c 8a       	std	Y+20, r1	; 0x14
 126:	89 ef       	ldi	r24, 0xF9	; 249
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <H_LCD_void_latchByte+0x8c>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <H_LCD_void_latchByte+0x92>
 130:	00 00       	nop
 132:	ce 01       	movw	r24, r28
 134:	41 96       	adiw	r24, 0x11	; 17
 136:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_U8SetPinValue>
 13a:	e9 ef       	ldi	r30, 0xF9	; 249
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <H_LCD_void_latchByte+0xa0>
 142:	00 c0       	rjmp	.+0      	; 0x144 <H_LCD_void_latchByte+0xa6>
 144:	00 00       	nop
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	8c 8b       	std	Y+20, r24	; 0x14
 14a:	ce 01       	movw	r24, r28
 14c:	41 96       	adiw	r24, 0x11	; 17
 14e:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_U8SetPinValue>
 152:	89 ef       	ldi	r24, 0xF9	; 249
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <H_LCD_void_latchByte+0xb8>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <H_LCD_void_latchByte+0xbe>
 15c:	00 00       	nop
 15e:	10 e0       	ldi	r17, 0x00	; 0
 160:	1a c0       	rjmp	.+52     	; 0x196 <H_LCD_void_latchByte+0xf8>
 162:	81 2f       	mov	r24, r17
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	20 2f       	mov	r18, r16
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	01 2e       	mov	r0, r17
 16c:	02 c0       	rjmp	.+4      	; 0x172 <H_LCD_void_latchByte+0xd4>
 16e:	35 95       	asr	r19
 170:	27 95       	ror	r18
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <H_LCD_void_latchByte+0xd0>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	e1 e0       	ldi	r30, 0x01	; 1
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ec 0f       	add	r30, r28
 184:	fd 1f       	adc	r31, r29
 186:	8e 0f       	add	r24, r30
 188:	9f 1f       	adc	r25, r31
 18a:	21 70       	andi	r18, 0x01	; 1
 18c:	fc 01       	movw	r30, r24
 18e:	23 83       	std	Z+3, r18	; 0x03
 190:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_U8SetPinValue>
 194:	1f 5f       	subi	r17, 0xFF	; 255
 196:	14 30       	cpi	r17, 0x04	; 4
 198:	20 f3       	brcs	.-56     	; 0x162 <H_LCD_void_latchByte+0xc4>
 19a:	89 ef       	ldi	r24, 0xF9	; 249
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <H_LCD_void_latchByte+0x100>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <H_LCD_void_latchByte+0x106>
 1a4:	00 00       	nop
 1a6:	1c 8a       	std	Y+20, r1	; 0x14
 1a8:	ce 01       	movw	r24, r28
 1aa:	41 96       	adiw	r24, 0x11	; 17
 1ac:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_U8SetPinValue>
 1b0:	e9 ef       	ldi	r30, 0xF9	; 249
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <H_LCD_void_latchByte+0x116>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <H_LCD_void_latchByte+0x11c>
 1ba:	00 00       	nop
 1bc:	64 96       	adiw	r28, 0x14	; 20
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	f8 94       	cli
 1c2:	de bf       	out	0x3e, r29	; 62
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	cd bf       	out	0x3d, r28	; 61
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <H_LCD_void_sendCommand>:
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
 1de:	28 97       	sbiw	r28, 0x08	; 8
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	de bf       	out	0x3e, r29	; 62
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	cd bf       	out	0x3d, r28	; 61
 1ea:	08 2f       	mov	r16, r24
 1ec:	88 e0       	ldi	r24, 0x08	; 8
 1ee:	e0 e6       	ldi	r30, 0x60	; 96
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	de 01       	movw	r26, r28
 1f4:	11 96       	adiw	r26, 0x01	; 1
 1f6:	01 90       	ld	r0, Z+
 1f8:	0d 92       	st	X+, r0
 1fa:	8a 95       	dec	r24
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <H_LCD_void_sendCommand+0x24>
 1fe:	10 e0       	ldi	r17, 0x00	; 0
 200:	15 c0       	rjmp	.+42     	; 0x22c <H_LCD_void_sendCommand+0x5a>
 202:	81 2f       	mov	r24, r17
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	2c 0f       	add	r18, r28
 214:	3d 1f       	adc	r19, r29
 216:	82 0f       	add	r24, r18
 218:	93 1f       	adc	r25, r19
 21a:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_U8SetPinValue>
 21e:	89 ef       	ldi	r24, 0xF9	; 249
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <H_LCD_void_sendCommand+0x50>
 226:	00 c0       	rjmp	.+0      	; 0x228 <H_LCD_void_sendCommand+0x56>
 228:	00 00       	nop
 22a:	1f 5f       	subi	r17, 0xFF	; 255
 22c:	12 30       	cpi	r17, 0x02	; 2
 22e:	48 f3       	brcs	.-46     	; 0x202 <H_LCD_void_sendCommand+0x30>
 230:	89 ef       	ldi	r24, 0xF9	; 249
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <H_LCD_void_sendCommand+0x62>
 238:	00 c0       	rjmp	.+0      	; 0x23a <H_LCD_void_sendCommand+0x68>
 23a:	00 00       	nop
 23c:	80 2f       	mov	r24, r16
 23e:	0e 94 4f 00 	call	0x9e	; 0x9e <H_LCD_void_latchByte>
 242:	28 96       	adiw	r28, 0x08	; 8
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <H_LCD_void_Init>:
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	cd b7       	in	r28, 0x3d	; 61
 260:	de b7       	in	r29, 0x3e	; 62
 262:	68 97       	sbiw	r28, 0x18	; 24
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	f8 94       	cli
 268:	de bf       	out	0x3e, r29	; 62
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	cd bf       	out	0x3d, r28	; 61
 26e:	fe 01       	movw	r30, r28
 270:	31 96       	adiw	r30, 0x01	; 1
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	df 01       	movw	r26, r30
 276:	1d 92       	st	X+, r1
 278:	8a 95       	dec	r24
 27a:	e9 f7       	brne	.-6      	; 0x276 <H_LCD_void_Init+0x1e>
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	8a 83       	std	Y+2, r24	; 0x02
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	8b 83       	std	Y+3, r24	; 0x03
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	9e 83       	std	Y+6, r25	; 0x06
 288:	8f 83       	std	Y+7, r24	; 0x07
 28a:	10 e0       	ldi	r17, 0x00	; 0
 28c:	0f c0       	rjmp	.+30     	; 0x2ac <H_LCD_void_Init+0x54>
 28e:	81 2f       	mov	r24, r17
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	21 e0       	ldi	r18, 0x01	; 1
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	2c 0f       	add	r18, r28
 2a0:	3d 1f       	adc	r19, r29
 2a2:	82 0f       	add	r24, r18
 2a4:	93 1f       	adc	r25, r19
 2a6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_U8SetPinDirection>
 2aa:	1f 5f       	subi	r17, 0xFF	; 255
 2ac:	12 30       	cpi	r17, 0x02	; 2
 2ae:	78 f3       	brcs	.-34     	; 0x28e <H_LCD_void_Init+0x36>
 2b0:	fe 01       	movw	r30, r28
 2b2:	39 96       	adiw	r30, 0x09	; 9
 2b4:	80 e1       	ldi	r24, 0x10	; 16
 2b6:	df 01       	movw	r26, r30
 2b8:	1d 92       	st	X+, r1
 2ba:	8a 95       	dec	r24
 2bc:	e9 f7       	brne	.-6      	; 0x2b8 <H_LCD_void_Init+0x60>
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	89 87       	std	Y+9, r24	; 0x09
 2c2:	8b 87       	std	Y+11, r24	; 0x0b
 2c4:	8d 87       	std	Y+13, r24	; 0x0d
 2c6:	8e 87       	std	Y+14, r24	; 0x0e
 2c8:	8f 87       	std	Y+15, r24	; 0x0f
 2ca:	89 8b       	std	Y+17, r24	; 0x11
 2cc:	92 e0       	ldi	r25, 0x02	; 2
 2ce:	9a 8b       	std	Y+18, r25	; 0x12
 2d0:	8b 8b       	std	Y+19, r24	; 0x13
 2d2:	8d 8b       	std	Y+21, r24	; 0x15
 2d4:	94 e0       	ldi	r25, 0x04	; 4
 2d6:	9e 8b       	std	Y+22, r25	; 0x16
 2d8:	8f 8b       	std	Y+23, r24	; 0x17
 2da:	10 e0       	ldi	r17, 0x00	; 0
 2dc:	0f c0       	rjmp	.+30     	; 0x2fc <H_LCD_void_Init+0xa4>
 2de:	81 2f       	mov	r24, r17
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	29 e0       	ldi	r18, 0x09	; 9
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	2c 0f       	add	r18, r28
 2f0:	3d 1f       	adc	r19, r29
 2f2:	82 0f       	add	r24, r18
 2f4:	93 1f       	adc	r25, r19
 2f6:	0e 94 61 02 	call	0x4c2	; 0x4c2 <DIO_U8SetPinDirection>
 2fa:	1f 5f       	subi	r17, 0xFF	; 255
 2fc:	14 30       	cpi	r17, 0x04	; 4
 2fe:	78 f3       	brcs	.-34     	; 0x2de <H_LCD_void_Init+0x86>
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <H_LCD_void_sendCommand>
 306:	89 ef       	ldi	r24, 0xF9	; 249
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <H_LCD_void_Init+0xb2>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <H_LCD_void_Init+0xb8>
 310:	00 00       	nop
 312:	88 e2       	ldi	r24, 0x28	; 40
 314:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <H_LCD_void_sendCommand>
 318:	a9 ef       	ldi	r26, 0xF9	; 249
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	11 97       	sbiw	r26, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <H_LCD_void_Init+0xc4>
 320:	00 c0       	rjmp	.+0      	; 0x322 <H_LCD_void_Init+0xca>
 322:	00 00       	nop
 324:	8f e0       	ldi	r24, 0x0F	; 15
 326:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <H_LCD_void_sendCommand>
 32a:	89 ef       	ldi	r24, 0xF9	; 249
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <H_LCD_void_Init+0xd6>
 332:	00 c0       	rjmp	.+0      	; 0x334 <H_LCD_void_Init+0xdc>
 334:	00 00       	nop
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <H_LCD_void_sendCommand>
 33c:	a3 ef       	ldi	r26, 0xF3	; 243
 33e:	b1 e0       	ldi	r27, 0x01	; 1
 340:	11 97       	sbiw	r26, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <H_LCD_void_Init+0xe8>
 344:	00 c0       	rjmp	.+0      	; 0x346 <H_LCD_void_Init+0xee>
 346:	00 00       	nop
 348:	86 e0       	ldi	r24, 0x06	; 6
 34a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <H_LCD_void_sendCommand>
 34e:	68 96       	adiw	r28, 0x18	; 24
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	08 95       	ret

00000362 <H_LCD_void_sendData>:
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	28 97       	sbiw	r28, 0x08	; 8
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	08 2f       	mov	r16, r24
 37c:	88 e0       	ldi	r24, 0x08	; 8
 37e:	e8 e6       	ldi	r30, 0x68	; 104
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	de 01       	movw	r26, r28
 384:	11 96       	adiw	r26, 0x01	; 1
 386:	01 90       	ld	r0, Z+
 388:	0d 92       	st	X+, r0
 38a:	8a 95       	dec	r24
 38c:	e1 f7       	brne	.-8      	; 0x386 <H_LCD_void_sendData+0x24>
 38e:	10 e0       	ldi	r17, 0x00	; 0
 390:	15 c0       	rjmp	.+42     	; 0x3bc <H_LCD_void_sendData+0x5a>
 392:	81 2f       	mov	r24, r17
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	2c 0f       	add	r18, r28
 3a4:	3d 1f       	adc	r19, r29
 3a6:	82 0f       	add	r24, r18
 3a8:	93 1f       	adc	r25, r19
 3aa:	0e 94 9f 02 	call	0x53e	; 0x53e <DIO_U8SetPinValue>
 3ae:	89 ef       	ldi	r24, 0xF9	; 249
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <H_LCD_void_sendData+0x50>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <H_LCD_void_sendData+0x56>
 3b8:	00 00       	nop
 3ba:	1f 5f       	subi	r17, 0xFF	; 255
 3bc:	12 30       	cpi	r17, 0x02	; 2
 3be:	48 f3       	brcs	.-46     	; 0x392 <H_LCD_void_sendData+0x30>
 3c0:	89 ef       	ldi	r24, 0xF9	; 249
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <H_LCD_void_sendData+0x62>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <H_LCD_void_sendData+0x68>
 3ca:	00 00       	nop
 3cc:	80 2f       	mov	r24, r16
 3ce:	0e 94 4f 00 	call	0x9e	; 0x9e <H_LCD_void_latchByte>
 3d2:	28 96       	adiw	r28, 0x08	; 8
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	f8 94       	cli
 3d8:	de bf       	out	0x3e, r29	; 62
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	cd bf       	out	0x3d, r28	; 61
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	08 95       	ret

000003e8 <H_LCD_void_sendString>:
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	8c 01       	movw	r16, r24
 3f0:	c0 e0       	ldi	r28, 0x00	; 0
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <H_LCD_void_sendString+0x12>
 3f4:	0e 94 b1 01 	call	0x362	; 0x362 <H_LCD_void_sendData>
 3f8:	cf 5f       	subi	r28, 0xFF	; 255
 3fa:	f8 01       	movw	r30, r16
 3fc:	ec 0f       	add	r30, r28
 3fe:	f1 1d       	adc	r31, r1
 400:	80 81       	ld	r24, Z
 402:	81 11       	cpse	r24, r1
 404:	f7 cf       	rjmp	.-18     	; 0x3f4 <H_LCD_void_sendString+0xc>
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	08 95       	ret

0000040e <H_LCD_void_sendBinaryNum>:


void H_LCD_void_sendBinaryNum(u8 copy_u8Num) {
 40e:	cf 93       	push	r28
 410:	df 93       	push	r29
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	29 97       	sbiw	r28, 0x09	; 9
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
	s8 buff[9]; // String to hold the binary result (8 bits + '\0')
	
	// Convert the byte to an 8-bit binary string
	for (u8 i = 0; i < 8; i++) {
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	21 c0       	rjmp	.+66     	; 0x468 <H_LCD_void_sendBinaryNum+0x5a>
		if (copy_u8Num & (1 << (7 - i))) {
 426:	29 2f       	mov	r18, r25
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	67 e0       	ldi	r22, 0x07	; 7
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	62 1b       	sub	r22, r18
 430:	73 0b       	sbc	r23, r19
 432:	48 2f       	mov	r20, r24
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <H_LCD_void_sendBinaryNum+0x2e>
 438:	55 95       	asr	r21
 43a:	47 95       	ror	r20
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <H_LCD_void_sendBinaryNum+0x2a>
 440:	40 ff       	sbrs	r20, 0
 442:	09 c0       	rjmp	.+18     	; 0x456 <H_LCD_void_sendBinaryNum+0x48>
			buff[i] = '1';
 444:	e1 e0       	ldi	r30, 0x01	; 1
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	ec 0f       	add	r30, r28
 44a:	fd 1f       	adc	r31, r29
 44c:	e2 0f       	add	r30, r18
 44e:	f3 1f       	adc	r31, r19
 450:	41 e3       	ldi	r20, 0x31	; 49
 452:	40 83       	st	Z, r20
 454:	08 c0       	rjmp	.+16     	; 0x466 <H_LCD_void_sendBinaryNum+0x58>
			} else {
			buff[i] = '0';
 456:	e1 e0       	ldi	r30, 0x01	; 1
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	ec 0f       	add	r30, r28
 45c:	fd 1f       	adc	r31, r29
 45e:	e2 0f       	add	r30, r18
 460:	f3 1f       	adc	r31, r19
 462:	40 e3       	ldi	r20, 0x30	; 48
 464:	40 83       	st	Z, r20

void H_LCD_void_sendBinaryNum(u8 copy_u8Num) {
	s8 buff[9]; // String to hold the binary result (8 bits + '\0')
	
	// Convert the byte to an 8-bit binary string
	for (u8 i = 0; i < 8; i++) {
 466:	9f 5f       	subi	r25, 0xFF	; 255
 468:	98 30       	cpi	r25, 0x08	; 8
 46a:	e8 f2       	brcs	.-70     	; 0x426 <H_LCD_void_sendBinaryNum+0x18>
			buff[i] = '1';
			} else {
			buff[i] = '0';
		}
	}
	buff[8] = '\0'; // Null-terminate the string
 46c:	19 86       	std	Y+9, r1	; 0x09
	
	H_LCD_void_sendString("0b"); // Display "0b" as a prefix for binary numbers
 46e:	85 e7       	ldi	r24, 0x75	; 117
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <H_LCD_void_sendString>
	H_LCD_void_sendString(buff); // Display the binary string
 476:	ce 01       	movw	r24, r28
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <H_LCD_void_sendString>
}
 47e:	29 96       	adiw	r28, 0x09	; 9
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	de bf       	out	0x3e, r29	; 62
 486:	0f be       	out	0x3f, r0	; 63
 488:	cd bf       	out	0x3d, r28	; 61
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 490:	24 b1       	in	r18, 0x04	; 4
 492:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 494:	00 24       	eor	r0, r0
 496:	22 0f       	add	r18, r18
 498:	33 1f       	adc	r19, r19
 49a:	00 1c       	adc	r0, r0
 49c:	22 0f       	add	r18, r18
 49e:	33 1f       	adc	r19, r19
 4a0:	00 1c       	adc	r0, r0
 4a2:	23 2f       	mov	r18, r19
 4a4:	30 2d       	mov	r19, r0
 4a6:	85 b1       	in	r24, 0x05	; 5
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 4b2:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <__data_end>
 4b6:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <__data_end+0x1>
 4ba:	82 2b       	or	r24, r18
 4bc:	93 2b       	or	r25, r19
 4be:	09 95       	icall
 4c0:	08 95       	ret

000004c2 <DIO_U8SetPinDirection>:
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 4c2:	dc 01       	movw	r26, r24
 4c4:	ec 91       	ld	r30, X
 4c6:	e4 30       	cpi	r30, 0x04	; 4
 4c8:	a0 f5       	brcc	.+104    	; 0x532 <DIO_U8SetPinDirection+0x70>
 4ca:	11 96       	adiw	r26, 0x01	; 1
 4cc:	2c 91       	ld	r18, X
 4ce:	11 97       	sbiw	r26, 0x01	; 1
 4d0:	28 30       	cpi	r18, 0x08	; 8
 4d2:	88 f5       	brcc	.+98     	; 0x536 <DIO_U8SetPinDirection+0x74>
 4d4:	12 96       	adiw	r26, 0x02	; 2
 4d6:	8c 91       	ld	r24, X
 4d8:	81 11       	cpse	r24, r1
 4da:	15 c0       	rjmp	.+42     	; 0x506 <DIO_U8SetPinDirection+0x44>
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	ee 0f       	add	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	e0 58       	subi	r30, 0x80	; 128
 4e4:	ff 4f       	sbci	r31, 0xFF	; 255
 4e6:	01 90       	ld	r0, Z+
 4e8:	f0 81       	ld	r31, Z
 4ea:	e0 2d       	mov	r30, r0
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_U8SetPinDirection+0x34>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	2a 95       	dec	r18
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_U8SetPinDirection+0x30>
 4fa:	80 95       	com	r24
 4fc:	90 81       	ld	r25, Z
 4fe:	89 23       	and	r24, r25
 500:	80 83       	st	Z, r24
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	08 95       	ret
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	c1 f4       	brne	.+48     	; 0x53a <DIO_U8SetPinDirection+0x78>
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	ee 0f       	add	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	e0 58       	subi	r30, 0x80	; 128
 512:	ff 4f       	sbci	r31, 0xFF	; 255
 514:	01 90       	ld	r0, Z+
 516:	f0 81       	ld	r31, Z
 518:	e0 2d       	mov	r30, r0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_U8SetPinDirection+0x62>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	2a 95       	dec	r18
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_U8SetPinDirection+0x5e>
 528:	90 81       	ld	r25, Z
 52a:	89 2b       	or	r24, r25
 52c:	80 83       	st	Z, r24
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	08 95       	ret
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	08 95       	ret
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	08 95       	ret
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	08 95       	ret

0000053e <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(const DIO_Config* config) {
    if (config != NULL) {
 53e:	00 97       	sbiw	r24, 0x00	; 0
 540:	c1 f1       	breq	.+112    	; 0x5b2 <DIO_U8SetPinValue+0x74>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 542:	dc 01       	movw	r26, r24
 544:	ec 91       	ld	r30, X
 546:	e4 30       	cpi	r30, 0x04	; 4
 548:	b0 f5       	brcc	.+108    	; 0x5b6 <DIO_U8SetPinValue+0x78>
 54a:	11 96       	adiw	r26, 0x01	; 1
 54c:	2c 91       	ld	r18, X
 54e:	11 97       	sbiw	r26, 0x01	; 1
 550:	28 30       	cpi	r18, 0x08	; 8
 552:	98 f5       	brcc	.+102    	; 0x5ba <DIO_U8SetPinValue+0x7c>
            if (config->value == DIO_PIN_HIGH) {
 554:	13 96       	adiw	r26, 0x03	; 3
 556:	8c 91       	ld	r24, X
 558:	81 30       	cpi	r24, 0x01	; 1
 55a:	a1 f4       	brne	.+40     	; 0x584 <DIO_U8SetPinValue+0x46>
                SET_BIT(*writeRegisters[config->port], config->pin);
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	ee 0f       	add	r30, r30
 560:	ff 1f       	adc	r31, r31
 562:	e8 58       	subi	r30, 0x88	; 136
 564:	ff 4f       	sbci	r31, 0xFF	; 255
 566:	01 90       	ld	r0, Z+
 568:	f0 81       	ld	r31, Z
 56a:	e0 2d       	mov	r30, r0
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_U8SetPinValue+0x38>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	2a 95       	dec	r18
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_U8SetPinValue+0x34>
 57a:	90 81       	ld	r25, Z
 57c:	89 2b       	or	r24, r25
 57e:	80 83       	st	Z, r24
                return NO_ERROR;
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	08 95       	ret
            } else if (config->value == DIO_PIN_LOW) {
 584:	81 11       	cpse	r24, r1
 586:	1b c0       	rjmp	.+54     	; 0x5be <DIO_U8SetPinValue+0x80>
                CLR_BIT(*writeRegisters[config->port], config->pin);
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	ee 0f       	add	r30, r30
 58c:	ff 1f       	adc	r31, r31
 58e:	e8 58       	subi	r30, 0x88	; 136
 590:	ff 4f       	sbci	r31, 0xFF	; 255
 592:	01 90       	ld	r0, Z+
 594:	f0 81       	ld	r31, Z
 596:	e0 2d       	mov	r30, r0
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_U8SetPinValue+0x64>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	2a 95       	dec	r18
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_U8SetPinValue+0x60>
 5a6:	80 95       	com	r24
 5a8:	90 81       	ld	r25, Z
 5aa:	89 23       	and	r24, r25
 5ac:	80 83       	st	Z, r24
                return NO_ERROR;
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	08 95       	ret
            }
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	08 95       	ret
                return NO_ERROR;
            } else {
                return ERROR;
            }
        } else {
            return ERROR;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	08 95       	ret
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	08 95       	ret
                return NO_ERROR;
            } else if (config->value == DIO_PIN_LOW) {
                CLR_BIT(*writeRegisters[config->port], config->pin);
                return NO_ERROR;
            } else {
                return ERROR;
 5be:	81 e0       	ldi	r24, 0x01	; 1
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 5c0:	08 95       	ret

000005c2 <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	2f 93       	push	r18
 5ce:	3f 93       	push	r19
 5d0:	4f 93       	push	r20
 5d2:	5f 93       	push	r21
 5d4:	6f 93       	push	r22
 5d6:	7f 93       	push	r23
 5d8:	8f 93       	push	r24
 5da:	9f 93       	push	r25
 5dc:	af 93       	push	r26
 5de:	bf 93       	push	r27
 5e0:	ef 93       	push	r30
 5e2:	ff 93       	push	r31
	if(Action[0]!= NULL){
 5e4:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <Action>
 5e8:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <Action+0x1>
 5ec:	30 97       	sbiw	r30, 0x00	; 0
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <__vector_1+0x30>
		Action[0]();
 5f0:	09 95       	icall
	}
}
 5f2:	ff 91       	pop	r31
 5f4:	ef 91       	pop	r30
 5f6:	bf 91       	pop	r27
 5f8:	af 91       	pop	r26
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	7f 91       	pop	r23
 600:	6f 91       	pop	r22
 602:	5f 91       	pop	r21
 604:	4f 91       	pop	r20
 606:	3f 91       	pop	r19
 608:	2f 91       	pop	r18
 60a:	0f 90       	pop	r0
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	0f 90       	pop	r0
 610:	1f 90       	pop	r1
 612:	18 95       	reti

00000614 <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 614:	1f 92       	push	r1
 616:	0f 92       	push	r0
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	0f 92       	push	r0
 61c:	11 24       	eor	r1, r1
 61e:	2f 93       	push	r18
 620:	3f 93       	push	r19
 622:	4f 93       	push	r20
 624:	5f 93       	push	r21
 626:	6f 93       	push	r22
 628:	7f 93       	push	r23
 62a:	8f 93       	push	r24
 62c:	9f 93       	push	r25
 62e:	af 93       	push	r26
 630:	bf 93       	push	r27
 632:	ef 93       	push	r30
 634:	ff 93       	push	r31
	if(Action[1]!= NULL){
 636:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <Action+0x2>
 63a:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <Action+0x3>
 63e:	30 97       	sbiw	r30, 0x00	; 0
 640:	09 f0       	breq	.+2      	; 0x644 <__vector_2+0x30>
		Action[1]();
 642:	09 95       	icall
	}
}
 644:	ff 91       	pop	r31
 646:	ef 91       	pop	r30
 648:	bf 91       	pop	r27
 64a:	af 91       	pop	r26
 64c:	9f 91       	pop	r25
 64e:	8f 91       	pop	r24
 650:	7f 91       	pop	r23
 652:	6f 91       	pop	r22
 654:	5f 91       	pop	r21
 656:	4f 91       	pop	r20
 658:	3f 91       	pop	r19
 65a:	2f 91       	pop	r18
 65c:	0f 90       	pop	r0
 65e:	0f be       	out	0x3f, r0	; 63
 660:	0f 90       	pop	r0
 662:	1f 90       	pop	r1
 664:	18 95       	reti

00000666 <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 666:	1f 92       	push	r1
 668:	0f 92       	push	r0
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	2f 93       	push	r18
 672:	3f 93       	push	r19
 674:	4f 93       	push	r20
 676:	5f 93       	push	r21
 678:	6f 93       	push	r22
 67a:	7f 93       	push	r23
 67c:	8f 93       	push	r24
 67e:	9f 93       	push	r25
 680:	af 93       	push	r26
 682:	bf 93       	push	r27
 684:	ef 93       	push	r30
 686:	ff 93       	push	r31
	if(Action[2]!= NULL){
 688:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <Action+0x4>
 68c:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <Action+0x5>
 690:	30 97       	sbiw	r30, 0x00	; 0
 692:	09 f0       	breq	.+2      	; 0x696 <__vector_3+0x30>
		Action[2]();
 694:	09 95       	icall
	}
}
 696:	ff 91       	pop	r31
 698:	ef 91       	pop	r30
 69a:	bf 91       	pop	r27
 69c:	af 91       	pop	r26
 69e:	9f 91       	pop	r25
 6a0:	8f 91       	pop	r24
 6a2:	7f 91       	pop	r23
 6a4:	6f 91       	pop	r22
 6a6:	5f 91       	pop	r21
 6a8:	4f 91       	pop	r20
 6aa:	3f 91       	pop	r19
 6ac:	2f 91       	pop	r18
 6ae:	0f 90       	pop	r0
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	0f 90       	pop	r0
 6b4:	1f 90       	pop	r1
 6b6:	18 95       	reti

000006b8 <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 6b8:	1f 92       	push	r1
 6ba:	0f 92       	push	r0
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	0f 92       	push	r0
 6c0:	11 24       	eor	r1, r1
 6c2:	2f 93       	push	r18
 6c4:	3f 93       	push	r19
 6c6:	4f 93       	push	r20
 6c8:	5f 93       	push	r21
 6ca:	6f 93       	push	r22
 6cc:	7f 93       	push	r23
 6ce:	8f 93       	push	r24
 6d0:	9f 93       	push	r25
 6d2:	af 93       	push	r26
 6d4:	bf 93       	push	r27
 6d6:	ef 93       	push	r30
 6d8:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 6da:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <Action_Timer>
 6de:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <Action_Timer+0x1>
 6e2:	89 2b       	or	r24, r25
 6e4:	89 f1       	breq	.+98     	; 0x748 <__vector_11+0x90>
		counter++;
 6e6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <counter.1632>
 6ea:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <counter.1632+0x1>
 6ee:	a0 91 92 00 	lds	r26, 0x0092	; 0x800092 <counter.1632+0x2>
 6f2:	b0 91 93 00 	lds	r27, 0x0093	; 0x800093 <counter.1632+0x3>
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	a1 1d       	adc	r26, r1
 6fa:	b1 1d       	adc	r27, r1
 6fc:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <counter.1632>
 700:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <counter.1632+0x1>
 704:	a0 93 92 00 	sts	0x0092, r26	; 0x800092 <counter.1632+0x2>
 708:	b0 93 93 00 	sts	0x0093, r27	; 0x800093 <counter.1632+0x3>
		if(counter == numOverflows){
 70c:	40 91 9c 00 	lds	r20, 0x009C	; 0x80009c <numOverflows>
 710:	50 91 9d 00 	lds	r21, 0x009D	; 0x80009d <numOverflows+0x1>
 714:	60 91 9e 00 	lds	r22, 0x009E	; 0x80009e <numOverflows+0x2>
 718:	70 91 9f 00 	lds	r23, 0x009F	; 0x80009f <numOverflows+0x3>
 71c:	84 17       	cp	r24, r20
 71e:	95 07       	cpc	r25, r21
 720:	a6 07       	cpc	r26, r22
 722:	b7 07       	cpc	r27, r23
 724:	89 f4       	brne	.+34     	; 0x748 <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 726:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <remainingCounts>
 72a:	81 95       	neg	r24
 72c:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 72e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <counter.1632>
 732:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <counter.1632+0x1>
 736:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <counter.1632+0x2>
 73a:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <counter.1632+0x3>
			Action_Timer[0]();
 73e:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <Action_Timer>
 742:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <Action_Timer+0x1>
 746:	09 95       	icall
		}
		
	}
}
 748:	ff 91       	pop	r31
 74a:	ef 91       	pop	r30
 74c:	bf 91       	pop	r27
 74e:	af 91       	pop	r26
 750:	9f 91       	pop	r25
 752:	8f 91       	pop	r24
 754:	7f 91       	pop	r23
 756:	6f 91       	pop	r22
 758:	5f 91       	pop	r21
 75a:	4f 91       	pop	r20
 75c:	3f 91       	pop	r19
 75e:	2f 91       	pop	r18
 760:	0f 90       	pop	r0
 762:	0f be       	out	0x3f, r0	; 63
 764:	0f 90       	pop	r0
 766:	1f 90       	pop	r1
 768:	18 95       	reti

0000076a <_exit>:
 76a:	f8 94       	cli

0000076c <__stop_program>:
 76c:	ff cf       	rjmp	.-2      	; 0x76c <__stop_program>
