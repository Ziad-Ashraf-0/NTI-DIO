
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000005a2  00000636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  00800080  00800080  00000656  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000656  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e13  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e71  00000000  00000000  00002757  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fb5  00000000  00000000  000035c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000788  00000000  00000000  00004580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010be  00000000  00000000  00004d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001114  00000000  00000000  00005dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00006eda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_1>
   8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_2>
   c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 66 02 	jmp	0x4cc	; 0x4cc <__vector_6>
  1c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_9>
  28:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_10>
  2c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_11>
  30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_12>
  34:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3c       	cpi	r26, 0xCE	; 206
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 cf 02 	jmp	0x59e	; 0x59e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>



int main(void) {
	GIE_enable();
  92:	0e 94 24 01 	call	0x248	; 0x248 <GIE_enable>
	USART_Init();
  96:	0e 94 8f 02 	call	0x51e	; 0x51e <USART_Init>
	FingerPS_strTemplate();
  9a:	0e 94 5b 00 	call	0xb6	; 0xb6 <FingerPS_strTemplate>
  9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0xc>

000000a0 <receiveCallback>:

void clearBuffer()
{
	for(int i=0; i<25;i++)
	buffer[i]=0xFF;
	byte_no = 0;
  a0:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__data_end>
  a4:	e9 2f       	mov	r30, r25
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	eb 54       	subi	r30, 0x4B	; 75
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	80 83       	st	Z, r24
  ae:	9f 5f       	subi	r25, 0xFF	; 255
  b0:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__data_end>
  b4:	08 95       	ret

000000b6 <FingerPS_strTemplate>:
	buffer[byte_no] = data;
	byte_no++;
}


u8 FingerPS_strTemplate(){
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	2f 97       	sbiw	r28, 0x0f	; 15
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	
	u8 store[15]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x06, 0x06, 0x01, 0x00, 0x00, 0x00, 0x0E};
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	e0 e6       	ldi	r30, 0x60	; 96
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	de 01       	movw	r26, r28
  d4:	11 96       	adiw	r26, 0x01	; 1
  d6:	01 90       	ld	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	8a 95       	dec	r24
  dc:	e1 f7       	brne	.-8      	; 0xd6 <FingerPS_strTemplate+0x20>
	
	for (u8 i = 0; i < 15; i++)
  de:	10 e0       	ldi	r17, 0x00	; 0
  e0:	0a c0       	rjmp	.+20     	; 0xf6 <FingerPS_strTemplate+0x40>
	{
		UART_sendByte(store[i]);
  e2:	e1 e0       	ldi	r30, 0x01	; 1
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ec 0f       	add	r30, r28
  e8:	fd 1f       	adc	r31, r29
  ea:	e1 0f       	add	r30, r17
  ec:	f1 1d       	adc	r31, r1
  ee:	80 81       	ld	r24, Z
  f0:	0e 94 99 02 	call	0x532	; 0x532 <UART_sendByte>

u8 FingerPS_strTemplate(){
	
	u8 store[15]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x06, 0x06, 0x01, 0x00, 0x00, 0x00, 0x0E};
	
	for (u8 i = 0; i < 15; i++)
  f4:	1f 5f       	subi	r17, 0xFF	; 255
  f6:	1f 30       	cpi	r17, 0x0F	; 15
  f8:	a0 f3       	brcs	.-24     	; 0xe2 <FingerPS_strTemplate+0x2c>
	{
		UART_sendByte(store[i]);
	}
	UART_receiveByteAsynchCallBack(receiveCallback);
  fa:	80 e5       	ldi	r24, 0x50	; 80
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 9d 02 	call	0x53a	; 0x53a <UART_receiveByteAsynchCallBack>
	//_delay_ms(5);
	while(byte_no != 12);
 102:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__data_end>
 106:	8c 30       	cpi	r24, 0x0C	; 12
 108:	e1 f7       	brne	.-8      	; 0x102 <FingerPS_strTemplate+0x4c>
	//buffer[9] == 0 return SUCESS else return error code
	//clearBuffer()
	
	return 0;

}
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	2f 96       	adiw	r28, 0x0f	; 15
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	f8 94       	cli
 112:	de bf       	out	0x3e, r29	; 62
 114:	0f be       	out	0x3f, r0	; 63
 116:	cd bf       	out	0x3d, r28	; 61
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	08 95       	ret

00000120 <__vector_16>:
 120:	24 b1       	in	r18, 0x04	; 4
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	00 24       	eor	r0, r0
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	00 1c       	adc	r0, r0
 12c:	22 0f       	add	r18, r18
 12e:	33 1f       	adc	r19, r19
 130:	00 1c       	adc	r0, r0
 132:	23 2f       	mov	r18, r19
 134:	30 2d       	mov	r19, r0
 136:	85 b1       	in	r24, 0x05	; 5
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <ADC_callBack>
 146:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <ADC_callBack+0x1>
 14a:	82 2b       	or	r24, r18
 14c:	93 2b       	or	r25, r19
 14e:	09 95       	icall
 150:	08 95       	ret

00000152 <__vector_1>:
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
 174:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <Action>
 178:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <Action+0x1>
 17c:	30 97       	sbiw	r30, 0x00	; 0
 17e:	09 f0       	breq	.+2      	; 0x182 <__vector_1+0x30>
 180:	09 95       	icall
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <__vector_2>:
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
 1c6:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <Action+0x2>
 1ca:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <Action+0x3>
 1ce:	30 97       	sbiw	r30, 0x00	; 0
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <__vector_2+0x30>
 1d2:	09 95       	icall
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <__vector_3>:
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
 218:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <Action+0x4>
 21c:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <Action+0x5>
 220:	30 97       	sbiw	r30, 0x00	; 0
 222:	09 f0       	breq	.+2      	; 0x226 <__vector_3+0x30>
 224:	09 95       	icall
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <GIE_enable>:
 248:	78 94       	sei
 24a:	08 95       	ret

0000024c <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	if(Action_Spi != NULL){
 26e:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <Action_Spi>
 272:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <Action_Spi+0x1>
 276:	30 97       	sbiw	r30, 0x00	; 0
 278:	11 f0       	breq	.+4      	; 0x27e <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 27a:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 27c:	09 95       	icall
	}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_11>:
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
 2c2:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <Action_Timer>
 2c6:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <Action_Timer+0x1>
 2ca:	89 2b       	or	r24, r25
 2cc:	89 f1       	breq	.+98     	; 0x330 <__vector_11+0x90>
 2ce:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <counter.1685>
 2d2:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <counter.1685+0x1>
 2d6:	a0 91 8d 00 	lds	r26, 0x008D	; 0x80008d <counter.1685+0x2>
 2da:	b0 91 8e 00 	lds	r27, 0x008E	; 0x80008e <counter.1685+0x3>
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	a1 1d       	adc	r26, r1
 2e2:	b1 1d       	adc	r27, r1
 2e4:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <counter.1685>
 2e8:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <counter.1685+0x1>
 2ec:	a0 93 8d 00 	sts	0x008D, r26	; 0x80008d <counter.1685+0x2>
 2f0:	b0 93 8e 00 	sts	0x008E, r27	; 0x80008e <counter.1685+0x3>
 2f4:	40 91 97 00 	lds	r20, 0x0097	; 0x800097 <numOverflows>
 2f8:	50 91 98 00 	lds	r21, 0x0098	; 0x800098 <numOverflows+0x1>
 2fc:	60 91 99 00 	lds	r22, 0x0099	; 0x800099 <numOverflows+0x2>
 300:	70 91 9a 00 	lds	r23, 0x009A	; 0x80009a <numOverflows+0x3>
 304:	84 17       	cp	r24, r20
 306:	95 07       	cpc	r25, r21
 308:	a6 07       	cpc	r26, r22
 30a:	b7 07       	cpc	r27, r23
 30c:	89 f4       	brne	.+34     	; 0x330 <__vector_11+0x90>
 30e:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <remainingCounts>
 312:	81 95       	neg	r24
 314:	82 bf       	out	0x32, r24	; 50
 316:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <counter.1685>
 31a:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <counter.1685+0x1>
 31e:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <counter.1685+0x2>
 322:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <counter.1685+0x3>
 326:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <Action_Timer>
 32a:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <Action_Timer+0x1>
 32e:	09 95       	icall
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	7f 91       	pop	r23
 33e:	6f 91       	pop	r22
 340:	5f 91       	pop	r21
 342:	4f 91       	pop	r20
 344:	3f 91       	pop	r19
 346:	2f 91       	pop	r18
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <__vector_10>:
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	2f 93       	push	r18
 35e:	3f 93       	push	r19
 360:	4f 93       	push	r20
 362:	5f 93       	push	r21
 364:	6f 93       	push	r22
 366:	7f 93       	push	r23
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	af 93       	push	r26
 36e:	bf 93       	push	r27
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
 374:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <Action_Timer+0x2>
 378:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <Action_Timer+0x3>
 37c:	30 97       	sbiw	r30, 0x00	; 0
 37e:	09 f0       	breq	.+2      	; 0x382 <__vector_10+0x30>
 380:	09 95       	icall
 382:	ff 91       	pop	r31
 384:	ef 91       	pop	r30
 386:	bf 91       	pop	r27
 388:	af 91       	pop	r26
 38a:	9f 91       	pop	r25
 38c:	8f 91       	pop	r24
 38e:	7f 91       	pop	r23
 390:	6f 91       	pop	r22
 392:	5f 91       	pop	r21
 394:	4f 91       	pop	r20
 396:	3f 91       	pop	r19
 398:	2f 91       	pop	r18
 39a:	0f 90       	pop	r0
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	ef 93       	push	r30
 3c8:	ff 93       	push	r31
	Action_Timer[0]();
 3ca:	cf e9       	ldi	r28, 0x9F	; 159
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	e8 81       	ld	r30, Y
 3d0:	f9 81       	ldd	r31, Y+1	; 0x01
 3d2:	09 95       	icall
	numOverflows++;
 3d4:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <numOverflows>
 3d8:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <numOverflows+0x1>
 3dc:	a0 91 a9 00 	lds	r26, 0x00A9	; 0x8000a9 <numOverflows+0x2>
 3e0:	b0 91 aa 00 	lds	r27, 0x00AA	; 0x8000aa <numOverflows+0x3>
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	a1 1d       	adc	r26, r1
 3e8:	b1 1d       	adc	r27, r1
 3ea:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <numOverflows>
 3ee:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <numOverflows+0x1>
 3f2:	a0 93 a9 00 	sts	0x00A9, r26	; 0x8000a9 <numOverflows+0x2>
 3f6:	b0 93 aa 00 	sts	0x00AA, r27	; 0x8000aa <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 3fa:	e8 81       	ld	r30, Y
 3fc:	f9 81       	ldd	r31, Y+1	; 0x01
 3fe:	30 97       	sbiw	r30, 0x00	; 0
 400:	49 f1       	breq	.+82     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		counter++;
 402:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <counter.1744>
 406:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <counter.1744+0x1>
 40a:	a0 91 9d 00 	lds	r26, 0x009D	; 0x80009d <counter.1744+0x2>
 40e:	b0 91 9e 00 	lds	r27, 0x009E	; 0x80009e <counter.1744+0x3>
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	a1 1d       	adc	r26, r1
 416:	b1 1d       	adc	r27, r1
 418:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <counter.1744>
 41c:	90 93 9c 00 	sts	0x009C, r25	; 0x80009c <counter.1744+0x1>
 420:	a0 93 9d 00 	sts	0x009D, r26	; 0x80009d <counter.1744+0x2>
 424:	b0 93 9e 00 	sts	0x009E, r27	; 0x80009e <counter.1744+0x3>
		if(counter == req_numOverflows){
 428:	40 91 ab 00 	lds	r20, 0x00AB	; 0x8000ab <req_numOverflows>
 42c:	50 91 ac 00 	lds	r21, 0x00AC	; 0x8000ac <req_numOverflows+0x1>
 430:	60 91 ad 00 	lds	r22, 0x00AD	; 0x8000ad <req_numOverflows+0x2>
 434:	70 91 ae 00 	lds	r23, 0x00AE	; 0x8000ae <req_numOverflows+0x3>
 438:	84 17       	cp	r24, r20
 43a:	95 07       	cpc	r25, r21
 43c:	a6 07       	cpc	r26, r22
 43e:	b7 07       	cpc	r27, r23
 440:	49 f4       	brne	.+18     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 442:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <counter.1744>
 446:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <counter.1744+0x1>
 44a:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <counter.1744+0x2>
 44e:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <counter.1744+0x3>
			Action_Timer[0]();
 452:	09 95       	icall
		}
		
	}
}
 454:	ff 91       	pop	r31
 456:	ef 91       	pop	r30
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <__vector_7>:

ISR(TIMER1_COMPA_vect){
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	4f 93       	push	r20
 48a:	5f 93       	push	r21
 48c:	6f 93       	push	r22
 48e:	7f 93       	push	r23
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	af 93       	push	r26
 496:	bf 93       	push	r27
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 49c:	e0 91 a1 00 	lds	r30, 0x00A1	; 0x8000a1 <Action_Timer+0x2>
 4a0:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <Action_Timer+0x3>
 4a4:	30 97       	sbiw	r30, 0x00	; 0
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__vector_7+0x30>
		Action_Timer[1]();
 4a8:	09 95       	icall
	}
}
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	bf 91       	pop	r27
 4b0:	af 91       	pop	r26
 4b2:	9f 91       	pop	r25
 4b4:	8f 91       	pop	r24
 4b6:	7f 91       	pop	r23
 4b8:	6f 91       	pop	r22
 4ba:	5f 91       	pop	r21
 4bc:	4f 91       	pop	r20
 4be:	3f 91       	pop	r19
 4c0:	2f 91       	pop	r18
 4c2:	0f 90       	pop	r0
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	0f 90       	pop	r0
 4c8:	1f 90       	pop	r1
 4ca:	18 95       	reti

000004cc <__vector_6>:


ISR(TIMER1_CAPT_vect){
 4cc:	1f 92       	push	r1
 4ce:	0f 92       	push	r0
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	0f 92       	push	r0
 4d4:	11 24       	eor	r1, r1
 4d6:	2f 93       	push	r18
 4d8:	3f 93       	push	r19
 4da:	4f 93       	push	r20
 4dc:	5f 93       	push	r21
 4de:	6f 93       	push	r22
 4e0:	7f 93       	push	r23
 4e2:	8f 93       	push	r24
 4e4:	9f 93       	push	r25
 4e6:	af 93       	push	r26
 4e8:	bf 93       	push	r27
 4ea:	ef 93       	push	r30
 4ec:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 4ee:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <Action_Timer+0x6>
 4f2:	f0 91 a6 00 	lds	r31, 0x00A6	; 0x8000a6 <Action_Timer+0x7>
 4f6:	30 97       	sbiw	r30, 0x00	; 0
 4f8:	09 f0       	breq	.+2      	; 0x4fc <__vector_6+0x30>
			Action_Timer[3]();
 4fa:	09 95       	icall
			
			
		}
 4fc:	ff 91       	pop	r31
 4fe:	ef 91       	pop	r30
 500:	bf 91       	pop	r27
 502:	af 91       	pop	r26
 504:	9f 91       	pop	r25
 506:	8f 91       	pop	r24
 508:	7f 91       	pop	r23
 50a:	6f 91       	pop	r22
 50c:	5f 91       	pop	r21
 50e:	4f 91       	pop	r20
 510:	3f 91       	pop	r19
 512:	2f 91       	pop	r18
 514:	0f 90       	pop	r0
 516:	0f be       	out	0x3f, r0	; 63
 518:	0f 90       	pop	r0
 51a:	1f 90       	pop	r1
 51c:	18 95       	reti

0000051e <USART_Init>:
		Str[i] = MUART_voidRecieveByteSynch();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
}
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	8b b9       	out	0x0b, r24	; 11
 522:	88 e1       	ldi	r24, 0x18	; 24
 524:	8a b9       	out	0x0a, r24	; 10
 526:	86 e8       	ldi	r24, 0x86	; 134
 528:	80 bd       	out	0x20, r24	; 32
 52a:	10 bc       	out	0x20, r1	; 32
 52c:	80 e1       	ldi	r24, 0x10	; 16
 52e:	89 b9       	out	0x09, r24	; 9
 530:	08 95       	ret

00000532 <UART_sendByte>:
 532:	5d 9b       	sbis	0x0b, 5	; 11
 534:	fe cf       	rjmp	.-4      	; 0x532 <UART_sendByte>
 536:	8c b9       	out	0x0c, r24	; 12
 538:	08 95       	ret

0000053a <UART_receiveByteAsynchCallBack>:

void UART_receiveByteAsynchCallBack(void (*ptrfn)(u8)) {
	// Enable UART receiver interrupt
	UCSRB |= (1 << RXCIE);
 53a:	2a b1       	in	r18, 0x0a	; 10
 53c:	20 68       	ori	r18, 0x80	; 128
 53e:	2a b9       	out	0x0a, r18	; 10
	//set callback
	Action_Uart[0] = ptrfn;
 540:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <Action_Uart+0x1>
 544:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <Action_Uart>
 548:	08 95       	ret

0000054a <__vector_13>:
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 54a:	1f 92       	push	r1
 54c:	0f 92       	push	r0
 54e:	0f b6       	in	r0, 0x3f	; 63
 550:	0f 92       	push	r0
 552:	11 24       	eor	r1, r1
 554:	2f 93       	push	r18
 556:	3f 93       	push	r19
 558:	4f 93       	push	r20
 55a:	5f 93       	push	r21
 55c:	6f 93       	push	r22
 55e:	7f 93       	push	r23
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
 564:	af 93       	push	r26
 566:	bf 93       	push	r27
 568:	ef 93       	push	r30
 56a:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 56c:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 56e:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <Action_Uart>
 572:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <Action_Uart+0x1>
 576:	30 97       	sbiw	r30, 0x00	; 0
 578:	09 f0       	breq	.+2      	; 0x57c <__vector_13+0x32>
		Action_Uart[0](receivedData);
 57a:	09 95       	icall
	}
 57c:	ff 91       	pop	r31
 57e:	ef 91       	pop	r30
 580:	bf 91       	pop	r27
 582:	af 91       	pop	r26
 584:	9f 91       	pop	r25
 586:	8f 91       	pop	r24
 588:	7f 91       	pop	r23
 58a:	6f 91       	pop	r22
 58c:	5f 91       	pop	r21
 58e:	4f 91       	pop	r20
 590:	3f 91       	pop	r19
 592:	2f 91       	pop	r18
 594:	0f 90       	pop	r0
 596:	0f be       	out	0x3f, r0	; 63
 598:	0f 90       	pop	r0
 59a:	1f 90       	pop	r1
 59c:	18 95       	reti

0000059e <_exit>:
 59e:	f8 94       	cli

000005a0 <__stop_program>:
 5a0:	ff cf       	rjmp	.-2      	; 0x5a0 <__stop_program>
