
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000acc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000acc  00000b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  008000a0  008000a0  00000ba0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ea7  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011fa  00000000  00000000  00003e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001896  00000000  00000000  00005005  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009ec  00000000  00000000  0000689c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014af  00000000  00000000  00007288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020d7  00000000  00000000  00008737  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000a80e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_1>
   8:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_2>
   c:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__vector_6>
  1c:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 32 04 	jmp	0x864	; 0x864 <__vector_9>
  28:	0c 94 09 04 	jmp	0x812	; 0x812 <__vector_10>
  2c:	0c 94 b0 03 	jmp	0x760	; 0x760 <__vector_11>
  30:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_12>
  34:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3e       	cpi	r26, 0xEE	; 238
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 64 05 	jmp	0xac8	; 0xac8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>



int main(void) {
	GIE_enable();
  92:	0e 94 84 03 	call	0x708	; 0x708 <GIE_enable>
	USART_Init();
  96:	0e 94 ef 04 	call	0x9de	; 0x9de <USART_Init>
	H_LCD_void_Init();
  9a:	0e 94 76 01 	call	0x2ec	; 0x2ec <H_LCD_void_Init>
	
	u8 key = FingerPS_strTemplate();
  9e:	0e 94 63 00 	call	0xc6	; 0xc6 <FingerPS_strTemplate>
	H_LCD_void_sendIntNum(key);
  a2:	68 2f       	mov	r22, r24
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 51 02 	call	0x4a2	; 0x4a2 <H_LCD_void_sendIntNum>
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x1c>

000000b0 <receiveCallback>:

void clearBuffer()
{
	for(int i=0; i<25;i++)
	buffer[i]=0xFF;
	byte_no = 0;
  b0:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__data_end>
  b4:	e9 2f       	mov	r30, r25
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	eb 52       	subi	r30, 0x2B	; 43
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	80 83       	st	Z, r24
  be:	9f 5f       	subi	r25, 0xFF	; 255
  c0:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__data_end>
  c4:	08 95       	ret

000000c6 <FingerPS_strTemplate>:
	buffer[byte_no] = data;
	byte_no++;
}


u8 FingerPS_strTemplate(){
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	2f 97       	sbiw	r28, 0x0f	; 15
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
	
	u8 store[15]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x06, 0x06, 0x01, 0x00, 0x00, 0x00, 0x0E};
  dc:	8f e0       	ldi	r24, 0x0F	; 15
  de:	e0 e6       	ldi	r30, 0x60	; 96
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	de 01       	movw	r26, r28
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	8a 95       	dec	r24
  ec:	e1 f7       	brne	.-8      	; 0xe6 <FingerPS_strTemplate+0x20>
	
	for (u8 i = 0; i < 15; i++)
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	0a c0       	rjmp	.+20     	; 0x106 <FingerPS_strTemplate+0x40>
	{
		UART_sendByte(store[i]);
  f2:	e1 e0       	ldi	r30, 0x01	; 1
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ec 0f       	add	r30, r28
  f8:	fd 1f       	adc	r31, r29
  fa:	e1 0f       	add	r30, r17
  fc:	f1 1d       	adc	r31, r1
  fe:	80 81       	ld	r24, Z
 100:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <UART_sendByte>

u8 FingerPS_strTemplate(){
	
	u8 store[15]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x06, 0x06, 0x01, 0x00, 0x00, 0x00, 0x0E};
	
	for (u8 i = 0; i < 15; i++)
 104:	1f 5f       	subi	r17, 0xFF	; 255
 106:	1f 30       	cpi	r17, 0x0F	; 15
 108:	a0 f3       	brcs	.-24     	; 0xf2 <FingerPS_strTemplate+0x2c>
	{
		UART_sendByte(store[i]);
	}
	UART_receiveByteAsynchCallBack(receiveCallback);
 10a:	88 e5       	ldi	r24, 0x58	; 88
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 fd 04 	call	0x9fa	; 0x9fa <UART_receiveByteAsynchCallBack>
	//_delay_ms(5);
	while(byte_no != 12);
 112:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 116:	8c 30       	cpi	r24, 0x0C	; 12
 118:	e1 f7       	brne	.-8      	; 0x112 <FingerPS_strTemplate+0x4c>
	//buffer[9] == 0 return SUCESS else return error code
	//clearBuffer()
	
	return buffer[9];

}
 11a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <buffer+0x9>
 11e:	2f 96       	adiw	r28, 0x0f	; 15
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	f8 94       	cli
 124:	de bf       	out	0x3e, r29	; 62
 126:	0f be       	out	0x3f, r0	; 63
 128:	cd bf       	out	0x3d, r28	; 61
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	08 95       	ret

00000132 <H_LCD_void_latchByte>:
	H_LCD_void_sendString(buff); // Display the binary string
}



static void H_LCD_void_latchByte(u8 copy_u8Byte){
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	64 97       	sbiw	r28, 0x14	; 20
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	f8 94       	cli
 144:	de bf       	out	0x3e, r29	; 62
 146:	0f be       	out	0x3f, r0	; 63
 148:	cd bf       	out	0x3d, r28	; 61
 14a:	08 2f       	mov	r16, r24
	DIO_Config dataPins[] = {
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	1a 82       	std	Y+2, r1	; 0x02
 152:	8b 83       	std	Y+3, r24	; 0x03
 154:	04 fb       	bst	r16, 4
 156:	99 27       	eor	r25, r25
 158:	90 f9       	bld	r25, 0
 15a:	9c 83       	std	Y+4, r25	; 0x04
 15c:	8d 83       	std	Y+5, r24	; 0x05
 15e:	8e 83       	std	Y+6, r24	; 0x06
 160:	8f 83       	std	Y+7, r24	; 0x07
 162:	05 fb       	bst	r16, 5
 164:	99 27       	eor	r25, r25
 166:	90 f9       	bld	r25, 0
 168:	98 87       	std	Y+8, r25	; 0x08
 16a:	89 87       	std	Y+9, r24	; 0x09
 16c:	92 e0       	ldi	r25, 0x02	; 2
 16e:	9a 87       	std	Y+10, r25	; 0x0a
 170:	8b 87       	std	Y+11, r24	; 0x0b
 172:	06 fb       	bst	r16, 6
 174:	99 27       	eor	r25, r25
 176:	90 f9       	bld	r25, 0
 178:	9c 87       	std	Y+12, r25	; 0x0c
 17a:	8d 87       	std	Y+13, r24	; 0x0d
 17c:	94 e0       	ldi	r25, 0x04	; 4
 17e:	9e 87       	std	Y+14, r25	; 0x0e
 180:	8f 87       	std	Y+15, r24	; 0x0f
 182:	80 2f       	mov	r24, r16
 184:	88 1f       	adc	r24, r24
 186:	88 27       	eor	r24, r24
 188:	88 1f       	adc	r24, r24
 18a:	88 8b       	std	Y+16, r24	; 0x10
		{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 4)},//PD4 data bin
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 5)},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 6)},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 7)},//PD7 data bin
	};
	for (u8 i = 0; i < 4; i++) {
 18c:	10 e0       	ldi	r17, 0x00	; 0
 18e:	0f c0       	rjmp	.+30     	; 0x1ae <H_LCD_void_latchByte+0x7c>
		DIO_U8SetPinValue(&dataPins[i]);
 190:	81 2f       	mov	r24, r17
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	2c 0f       	add	r18, r28
 1a2:	3d 1f       	adc	r19, r29
 1a4:	82 0f       	add	r24, r18
 1a6:	93 1f       	adc	r25, r19
 1a8:	0e 94 c7 02 	call	0x58e	; 0x58e <DIO_U8SetPinValue>
		{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 4)},//PD4 data bin
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 5)},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 6)},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 7)},//PD7 data bin
	};
	for (u8 i = 0; i < 4; i++) {
 1ac:	1f 5f       	subi	r17, 0xFF	; 255
 1ae:	14 30       	cpi	r17, 0x04	; 4
 1b0:	78 f3       	brcs	.-34     	; 0x190 <H_LCD_void_latchByte+0x5e>
		DIO_U8SetPinValue(&dataPins[i]);
	}

	DIO_Config enable;
	enable.port = LCD_EN_PORT;
 1b2:	19 8a       	std	Y+17, r1	; 0x11
	enable.pin = LCD_EN_PIN;
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	8a 8b       	std	Y+18, r24	; 0x12
	enable.value = DIO_PIN_LOW;
 1b8:	1c 8a       	std	Y+20, r1	; 0x14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	8f e9       	ldi	r24, 0x9F	; 159
 1bc:	9f e0       	ldi	r25, 0x0F	; 15
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <H_LCD_void_latchByte+0x8c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <H_LCD_void_latchByte+0x92>
 1c4:	00 00       	nop
	_delay_ms(1); /* delay for processing */
	DIO_U8SetPinValue(&enable);
 1c6:	ce 01       	movw	r24, r28
 1c8:	41 96       	adiw	r24, 0x11	; 17
 1ca:	0e 94 c7 02 	call	0x58e	; 0x58e <DIO_U8SetPinValue>
 1ce:	ef e9       	ldi	r30, 0x9F	; 159
 1d0:	ff e0       	ldi	r31, 0x0F	; 15
 1d2:	31 97       	sbiw	r30, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <H_LCD_void_latchByte+0xa0>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <H_LCD_void_latchByte+0xa6>
 1d8:	00 00       	nop
	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_HIGH;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	8c 8b       	std	Y+20, r24	; 0x14
	DIO_U8SetPinValue(&enable);
 1de:	ce 01       	movw	r24, r28
 1e0:	41 96       	adiw	r24, 0x11	; 17
 1e2:	0e 94 c7 02 	call	0x58e	; 0x58e <DIO_U8SetPinValue>
 1e6:	8f e9       	ldi	r24, 0x9F	; 159
 1e8:	9f e0       	ldi	r25, 0x0F	; 15
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <H_LCD_void_latchByte+0xb8>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <H_LCD_void_latchByte+0xbe>
 1f0:	00 00       	nop
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
 1f2:	10 e0       	ldi	r17, 0x00	; 0
 1f4:	1a c0       	rjmp	.+52     	; 0x22a <H_LCD_void_latchByte+0xf8>
		dataPins[i].value = GET_BIT(copy_u8Byte, i);
 1f6:	81 2f       	mov	r24, r17
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	20 2f       	mov	r18, r16
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	01 2e       	mov	r0, r17
 200:	02 c0       	rjmp	.+4      	; 0x206 <H_LCD_void_latchByte+0xd4>
 202:	35 95       	asr	r19
 204:	27 95       	ror	r18
 206:	0a 94       	dec	r0
 208:	e2 f7       	brpl	.-8      	; 0x202 <H_LCD_void_latchByte+0xd0>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	e1 e0       	ldi	r30, 0x01	; 1
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	ec 0f       	add	r30, r28
 218:	fd 1f       	adc	r31, r29
 21a:	8e 0f       	add	r24, r30
 21c:	9f 1f       	adc	r25, r31
 21e:	21 70       	andi	r18, 0x01	; 1
 220:	fc 01       	movw	r30, r24
 222:	23 83       	std	Z+3, r18	; 0x03
		DIO_U8SetPinValue(&dataPins[i]);
 224:	0e 94 c7 02 	call	0x58e	; 0x58e <DIO_U8SetPinValue>
	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_HIGH;
	DIO_U8SetPinValue(&enable);
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
 228:	1f 5f       	subi	r17, 0xFF	; 255
 22a:	14 30       	cpi	r17, 0x04	; 4
 22c:	20 f3       	brcs	.-56     	; 0x1f6 <H_LCD_void_latchByte+0xc4>
 22e:	8f e9       	ldi	r24, 0x9F	; 159
 230:	9f e0       	ldi	r25, 0x0F	; 15
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <H_LCD_void_latchByte+0x100>
 236:	00 c0       	rjmp	.+0      	; 0x238 <H_LCD_void_latchByte+0x106>
 238:	00 00       	nop
		dataPins[i].value = GET_BIT(copy_u8Byte, i);
		DIO_U8SetPinValue(&dataPins[i]);
	}

	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_LOW;
 23a:	1c 8a       	std	Y+20, r1	; 0x14
	DIO_U8SetPinValue(&enable);
 23c:	ce 01       	movw	r24, r28
 23e:	41 96       	adiw	r24, 0x11	; 17
 240:	0e 94 c7 02 	call	0x58e	; 0x58e <DIO_U8SetPinValue>
 244:	ef e9       	ldi	r30, 0x9F	; 159
 246:	ff e0       	ldi	r31, 0x0F	; 15
 248:	31 97       	sbiw	r30, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <H_LCD_void_latchByte+0x116>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <H_LCD_void_latchByte+0x11c>
 24e:	00 00       	nop
	_delay_ms(1); /* delay for processing*/


}
 250:	64 96       	adiw	r28, 0x14	; 20
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	08 95       	ret

00000266 <H_LCD_void_sendCommand>:
}



void H_LCD_void_sendCommand(u8 copy_u8command)
{
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	28 97       	sbiw	r28, 0x08	; 8
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	08 2f       	mov	r16, r24
	//set mode to command
	DIO_Config mode[] = {
 280:	88 e0       	ldi	r24, 0x08	; 8
 282:	e0 e8       	ldi	r30, 0x80	; 128
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	de 01       	movw	r26, r28
 288:	11 96       	adiw	r26, 0x01	; 1
 28a:	01 90       	ld	r0, Z+
 28c:	0d 92       	st	X+, r0
 28e:	8a 95       	dec	r24
 290:	e1 f7       	brne	.-8      	; 0x28a <H_LCD_void_sendCommand+0x24>
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_LOW},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 292:	10 e0       	ldi	r17, 0x00	; 0
 294:	15 c0       	rjmp	.+42     	; 0x2c0 <H_LCD_void_sendCommand+0x5a>
		DIO_U8SetPinValue(&mode[i]);
 296:	81 2f       	mov	r24, r17
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	21 e0       	ldi	r18, 0x01	; 1
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	2c 0f       	add	r18, r28
 2a8:	3d 1f       	adc	r19, r29
 2aa:	82 0f       	add	r24, r18
 2ac:	93 1f       	adc	r25, r19
 2ae:	0e 94 c7 02 	call	0x58e	; 0x58e <DIO_U8SetPinValue>
 2b2:	8f e9       	ldi	r24, 0x9F	; 159
 2b4:	9f e0       	ldi	r25, 0x0F	; 15
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <H_LCD_void_sendCommand+0x50>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <H_LCD_void_sendCommand+0x56>
 2bc:	00 00       	nop
	DIO_Config mode[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_LOW},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 2be:	1f 5f       	subi	r17, 0xFF	; 255
 2c0:	12 30       	cpi	r17, 0x02	; 2
 2c2:	48 f3       	brcs	.-46     	; 0x296 <H_LCD_void_sendCommand+0x30>
 2c4:	8f e9       	ldi	r24, 0x9F	; 159
 2c6:	9f e0       	ldi	r25, 0x0F	; 15
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <H_LCD_void_sendCommand+0x62>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <H_LCD_void_sendCommand+0x68>
 2ce:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */


	#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	H_LCD_void_latchByte(copy_u8command);
 2d0:	80 2f       	mov	r24, r16
 2d2:	0e 94 99 00 	call	0x132	; 0x132 <H_LCD_void_latchByte>
	#else

	#endif

}
 2d6:	28 96       	adiw	r28, 0x08	; 8
 2d8:	0f b6       	in	r0, 0x3f	; 63
 2da:	f8 94       	cli
 2dc:	de bf       	out	0x3e, r29	; 62
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	cd bf       	out	0x3d, r28	; 61
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <H_LCD_void_Init>:
#include "LCD_config.h"


void functionSet();

void H_LCD_void_Init(void){
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	68 97       	sbiw	r28, 0x18	; 24
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
	DIO_Config lcdInit[] = {
 302:	fe 01       	movw	r30, r28
 304:	31 96       	adiw	r30, 0x01	; 1
 306:	88 e0       	ldi	r24, 0x08	; 8
 308:	df 01       	movw	r26, r30
 30a:	1d 92       	st	X+, r1
 30c:	8a 95       	dec	r24
 30e:	e9 f7       	brne	.-6      	; 0x30a <H_LCD_void_Init+0x1e>
 310:	83 e0       	ldi	r24, 0x03	; 3
 312:	8a 83       	std	Y+2, r24	; 0x02
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	8b 83       	std	Y+3, r24	; 0x03
 318:	92 e0       	ldi	r25, 0x02	; 2
 31a:	9e 83       	std	Y+6, r25	; 0x06
 31c:	8f 83       	std	Y+7, r24	; 0x07
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 31e:	10 e0       	ldi	r17, 0x00	; 0
 320:	0f c0       	rjmp	.+30     	; 0x340 <H_LCD_void_Init+0x54>
		DIO_U8SetPinDirection(&lcdInit[i]);
 322:	81 2f       	mov	r24, r17
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	2c 0f       	add	r18, r28
 334:	3d 1f       	adc	r19, r29
 336:	82 0f       	add	r24, r18
 338:	93 1f       	adc	r25, r19
 33a:	0e 94 89 02 	call	0x512	; 0x512 <DIO_U8SetPinDirection>
	DIO_Config lcdInit[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 33e:	1f 5f       	subi	r17, 0xFF	; 255
 340:	12 30       	cpi	r17, 0x02	; 2
 342:	78 f3       	brcs	.-34     	; 0x322 <H_LCD_void_Init+0x36>
		DIO_U8SetPinDirection(&lcdInit[i]);
	}

	#if (LCD_DATA_BITS_MODE == 4)
	DIO_Config dataPins[] = {
 344:	fe 01       	movw	r30, r28
 346:	39 96       	adiw	r30, 0x09	; 9
 348:	80 e1       	ldi	r24, 0x10	; 16
 34a:	df 01       	movw	r26, r30
 34c:	1d 92       	st	X+, r1
 34e:	8a 95       	dec	r24
 350:	e9 f7       	brne	.-6      	; 0x34c <H_LCD_void_Init+0x60>
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	89 87       	std	Y+9, r24	; 0x09
 356:	8b 87       	std	Y+11, r24	; 0x0b
 358:	8d 87       	std	Y+13, r24	; 0x0d
 35a:	8e 87       	std	Y+14, r24	; 0x0e
 35c:	8f 87       	std	Y+15, r24	; 0x0f
 35e:	89 8b       	std	Y+17, r24	; 0x11
 360:	92 e0       	ldi	r25, 0x02	; 2
 362:	9a 8b       	std	Y+18, r25	; 0x12
 364:	8b 8b       	std	Y+19, r24	; 0x13
 366:	8d 8b       	std	Y+21, r24	; 0x15
 368:	94 e0       	ldi	r25, 0x04	; 4
 36a:	9e 8b       	std	Y+22, r25	; 0x16
 36c:	8f 8b       	std	Y+23, r24	; 0x17
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT},//PD7 data bin
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 4; i++) {
 36e:	10 e0       	ldi	r17, 0x00	; 0
 370:	0f c0       	rjmp	.+30     	; 0x390 <H_LCD_void_Init+0xa4>
		DIO_U8SetPinDirection(&dataPins[i]);
 372:	81 2f       	mov	r24, r17
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	29 e0       	ldi	r18, 0x09	; 9
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	2c 0f       	add	r18, r28
 384:	3d 1f       	adc	r19, r29
 386:	82 0f       	add	r24, r18
 388:	93 1f       	adc	r25, r19
 38a:	0e 94 89 02 	call	0x512	; 0x512 <DIO_U8SetPinDirection>
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT},//PD7 data bin
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 4; i++) {
 38e:	1f 5f       	subi	r17, 0xFF	; 255
 390:	14 30       	cpi	r17, 0x04	; 4
 392:	78 f3       	brcs	.-34     	; 0x372 <H_LCD_void_Init+0x86>
		DIO_U8SetPinDirection(&dataPins[i]);
	}

	//Function Set Corner Case
	//functionSet();
	H_LCD_void_sendCommand(LCD_GO_TO_HOME);
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	0e 94 33 01 	call	0x266	; 0x266 <H_LCD_void_sendCommand>
 39a:	8f e9       	ldi	r24, 0x9F	; 159
 39c:	9f e0       	ldi	r25, 0x0F	; 15
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <H_LCD_void_Init+0xb2>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <H_LCD_void_Init+0xb8>
 3a4:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 3a6:	88 e2       	ldi	r24, 0x28	; 40
 3a8:	0e 94 33 01 	call	0x266	; 0x266 <H_LCD_void_sendCommand>
 3ac:	af e9       	ldi	r26, 0x9F	; 159
 3ae:	bf e0       	ldi	r27, 0x0F	; 15
 3b0:	11 97       	sbiw	r26, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <H_LCD_void_Init+0xc4>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <H_LCD_void_Init+0xca>
 3b6:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x0F);
 3b8:	8f e0       	ldi	r24, 0x0F	; 15
 3ba:	0e 94 33 01 	call	0x266	; 0x266 <H_LCD_void_sendCommand>
 3be:	8f e9       	ldi	r24, 0x9F	; 159
 3c0:	9f e0       	ldi	r25, 0x0F	; 15
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <H_LCD_void_Init+0xd6>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <H_LCD_void_Init+0xdc>
 3c8:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x01);
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 33 01 	call	0x266	; 0x266 <H_LCD_void_sendCommand>
 3d0:	af e3       	ldi	r26, 0x3F	; 63
 3d2:	bf e1       	ldi	r27, 0x1F	; 31
 3d4:	11 97       	sbiw	r26, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <H_LCD_void_Init+0xe8>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <H_LCD_void_Init+0xee>
 3da:	00 00       	nop
	_delay_ms(2);
	H_LCD_void_sendCommand(0x06);
 3dc:	86 e0       	ldi	r24, 0x06	; 6
 3de:	0e 94 33 01 	call	0x266	; 0x266 <H_LCD_void_sendCommand>

	#elif (LCD_DATA_BITS_MODE == 8)

	#endif
}
 3e2:	68 96       	adiw	r28, 0x18	; 24
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	f8 94       	cli
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	cd bf       	out	0x3d, r28	; 61
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	08 95       	ret

000003f6 <H_LCD_void_sendData>:
	#endif

}

void H_LCD_void_sendData(u8 copy_u8data )
{
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	28 97       	sbiw	r28, 0x08	; 8
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	08 2f       	mov	r16, r24
	DIO_Config mode[] = {
 410:	88 e0       	ldi	r24, 0x08	; 8
 412:	e8 e8       	ldi	r30, 0x88	; 136
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	de 01       	movw	r26, r28
 418:	11 96       	adiw	r26, 0x01	; 1
 41a:	01 90       	ld	r0, Z+
 41c:	0d 92       	st	X+, r0
 41e:	8a 95       	dec	r24
 420:	e1 f7       	brne	.-8      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_HIGH},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 422:	10 e0       	ldi	r17, 0x00	; 0
 424:	15 c0       	rjmp	.+42     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		DIO_U8SetPinValue(&mode[i]);
 426:	81 2f       	mov	r24, r17
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	21 e0       	ldi	r18, 0x01	; 1
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	2c 0f       	add	r18, r28
 438:	3d 1f       	adc	r19, r29
 43a:	82 0f       	add	r24, r18
 43c:	93 1f       	adc	r25, r19
 43e:	0e 94 c7 02 	call	0x58e	; 0x58e <DIO_U8SetPinValue>
 442:	8f e9       	ldi	r24, 0x9F	; 159
 444:	9f e0       	ldi	r25, 0x0F	; 15
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 44c:	00 00       	nop
	DIO_Config mode[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_HIGH},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 44e:	1f 5f       	subi	r17, 0xFF	; 255
 450:	12 30       	cpi	r17, 0x02	; 2
 452:	48 f3       	brcs	.-46     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 454:	8f e9       	ldi	r24, 0x9F	; 159
 456:	9f e0       	ldi	r25, 0x0F	; 15
 458:	01 97       	sbiw	r24, 0x01	; 1
 45a:	f1 f7       	brne	.-4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */


	#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	H_LCD_void_latchByte(copy_u8data);
 460:	80 2f       	mov	r24, r16
 462:	0e 94 99 00 	call	0x132	; 0x132 <H_LCD_void_latchByte>
	#else

	#endif
}
 466:	28 96       	adiw	r28, 0x08	; 8
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	08 95       	ret

0000047c <H_LCD_void_sendString>:


void H_LCD_void_sendString(const s8 * pstr){
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	8c 01       	movw	r16, r24
	u8 i = 0;
 484:	c0 e0       	ldi	r28, 0x00	; 0
	while(pstr[i] != '\0')
 486:	03 c0       	rjmp	.+6      	; 0x48e <H_LCD_void_sendString+0x12>
	{
		H_LCD_void_sendData(pstr[i]);
 488:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <H_LCD_void_sendData>
		i++;
 48c:	cf 5f       	subi	r28, 0xFF	; 255
}


void H_LCD_void_sendString(const s8 * pstr){
	u8 i = 0;
	while(pstr[i] != '\0')
 48e:	f8 01       	movw	r30, r16
 490:	ec 0f       	add	r30, r28
 492:	f1 1d       	adc	r31, r1
 494:	80 81       	ld	r24, Z
 496:	81 11       	cpse	r24, r1
 498:	f7 cf       	rjmp	.-18     	; 0x488 <H_LCD_void_sendString+0xc>
	{
		H_LCD_void_sendData(pstr[i]);
		i++;
	}
}
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	08 95       	ret

000004a2 <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_s32Num){
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	cd b7       	in	r28, 0x3d	; 61
 4a8:	de b7       	in	r29, 0x3e	; 62
 4aa:	60 97       	sbiw	r28, 0x10	; 16
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	cd bf       	out	0x3d, r28	; 61
 4b6:	dc 01       	movw	r26, r24
 4b8:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4ba:	4a e0       	ldi	r20, 0x0A	; 10
 4bc:	be 01       	movw	r22, r28
 4be:	6f 5f       	subi	r22, 0xFF	; 255
 4c0:	7f 4f       	sbci	r23, 0xFF	; 255
 4c2:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__itoa_ncheck>
	s8 buff[16]; /* String to hold the ascii result */
	itoa(copy_s32Num,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	H_LCD_void_sendString(buff); /* Display the string */
 4c6:	ce 01       	movw	r24, r28
 4c8:	01 96       	adiw	r24, 0x01	; 1
 4ca:	0e 94 3e 02 	call	0x47c	; 0x47c <H_LCD_void_sendString>
}
 4ce:	60 96       	adiw	r28, 0x10	; 16
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	de bf       	out	0x3e, r29	; 62
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	cd bf       	out	0x3d, r28	; 61
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 4e0:	24 b1       	in	r18, 0x04	; 4
 4e2:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 4e4:	00 24       	eor	r0, r0
 4e6:	22 0f       	add	r18, r18
 4e8:	33 1f       	adc	r19, r19
 4ea:	00 1c       	adc	r0, r0
 4ec:	22 0f       	add	r18, r18
 4ee:	33 1f       	adc	r19, r19
 4f0:	00 1c       	adc	r0, r0
 4f2:	23 2f       	mov	r18, r19
 4f4:	30 2d       	mov	r19, r0
 4f6:	85 b1       	in	r24, 0x05	; 5
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 502:	e0 91 a1 00 	lds	r30, 0x00A1	; 0x8000a1 <ADC_callBack>
 506:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <ADC_callBack+0x1>
 50a:	82 2b       	or	r24, r18
 50c:	93 2b       	or	r25, r19
 50e:	09 95       	icall
 510:	08 95       	ret

00000512 <DIO_U8SetPinDirection>:
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 512:	dc 01       	movw	r26, r24
 514:	ec 91       	ld	r30, X
 516:	e4 30       	cpi	r30, 0x04	; 4
 518:	a0 f5       	brcc	.+104    	; 0x582 <DIO_U8SetPinDirection+0x70>
 51a:	11 96       	adiw	r26, 0x01	; 1
 51c:	2c 91       	ld	r18, X
 51e:	11 97       	sbiw	r26, 0x01	; 1
 520:	28 30       	cpi	r18, 0x08	; 8
 522:	88 f5       	brcc	.+98     	; 0x586 <DIO_U8SetPinDirection+0x74>
 524:	12 96       	adiw	r26, 0x02	; 2
 526:	8c 91       	ld	r24, X
 528:	81 11       	cpse	r24, r1
 52a:	15 c0       	rjmp	.+42     	; 0x556 <DIO_U8SetPinDirection+0x44>
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	e8 56       	subi	r30, 0x68	; 104
 534:	ff 4f       	sbci	r31, 0xFF	; 255
 536:	01 90       	ld	r0, Z+
 538:	f0 81       	ld	r31, Z
 53a:	e0 2d       	mov	r30, r0
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_U8SetPinDirection+0x34>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	2a 95       	dec	r18
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_U8SetPinDirection+0x30>
 54a:	80 95       	com	r24
 54c:	90 81       	ld	r25, Z
 54e:	89 23       	and	r24, r25
 550:	80 83       	st	Z, r24
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	08 95       	ret
 556:	81 30       	cpi	r24, 0x01	; 1
 558:	c1 f4       	brne	.+48     	; 0x58a <DIO_U8SetPinDirection+0x78>
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	ee 0f       	add	r30, r30
 55e:	ff 1f       	adc	r31, r31
 560:	e8 56       	subi	r30, 0x68	; 104
 562:	ff 4f       	sbci	r31, 0xFF	; 255
 564:	01 90       	ld	r0, Z+
 566:	f0 81       	ld	r31, Z
 568:	e0 2d       	mov	r30, r0
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_U8SetPinDirection+0x62>
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	2a 95       	dec	r18
 576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_U8SetPinDirection+0x5e>
 578:	90 81       	ld	r25, Z
 57a:	89 2b       	or	r24, r25
 57c:	80 83       	st	Z, r24
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	08 95       	ret
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	08 95       	ret
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	08 95       	ret
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	08 95       	ret

0000058e <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(const DIO_Config* config) {
    if (config != NULL) {
 58e:	00 97       	sbiw	r24, 0x00	; 0
 590:	c1 f1       	breq	.+112    	; 0x602 <DIO_U8SetPinValue+0x74>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 592:	dc 01       	movw	r26, r24
 594:	ec 91       	ld	r30, X
 596:	e4 30       	cpi	r30, 0x04	; 4
 598:	b0 f5       	brcc	.+108    	; 0x606 <DIO_U8SetPinValue+0x78>
 59a:	11 96       	adiw	r26, 0x01	; 1
 59c:	2c 91       	ld	r18, X
 59e:	11 97       	sbiw	r26, 0x01	; 1
 5a0:	28 30       	cpi	r18, 0x08	; 8
 5a2:	98 f5       	brcc	.+102    	; 0x60a <DIO_U8SetPinValue+0x7c>
            if (config->value == DIO_PIN_HIGH) {
 5a4:	13 96       	adiw	r26, 0x03	; 3
 5a6:	8c 91       	ld	r24, X
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	a1 f4       	brne	.+40     	; 0x5d4 <DIO_U8SetPinValue+0x46>
                SET_BIT(*writeRegisters[config->port], config->pin);
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	ee 0f       	add	r30, r30
 5b0:	ff 1f       	adc	r31, r31
 5b2:	e0 57       	subi	r30, 0x70	; 112
 5b4:	ff 4f       	sbci	r31, 0xFF	; 255
 5b6:	01 90       	ld	r0, Z+
 5b8:	f0 81       	ld	r31, Z
 5ba:	e0 2d       	mov	r30, r0
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_U8SetPinValue+0x38>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	2a 95       	dec	r18
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_U8SetPinValue+0x34>
 5ca:	90 81       	ld	r25, Z
 5cc:	89 2b       	or	r24, r25
 5ce:	80 83       	st	Z, r24
                return NO_ERROR;
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	08 95       	ret
            } else if (config->value == DIO_PIN_LOW) {
 5d4:	81 11       	cpse	r24, r1
 5d6:	1b c0       	rjmp	.+54     	; 0x60e <DIO_U8SetPinValue+0x80>
                CLR_BIT(*writeRegisters[config->port], config->pin);
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	ee 0f       	add	r30, r30
 5dc:	ff 1f       	adc	r31, r31
 5de:	e0 57       	subi	r30, 0x70	; 112
 5e0:	ff 4f       	sbci	r31, 0xFF	; 255
 5e2:	01 90       	ld	r0, Z+
 5e4:	f0 81       	ld	r31, Z
 5e6:	e0 2d       	mov	r30, r0
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_U8SetPinValue+0x64>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	2a 95       	dec	r18
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_U8SetPinValue+0x60>
 5f6:	80 95       	com	r24
 5f8:	90 81       	ld	r25, Z
 5fa:	89 23       	and	r24, r25
 5fc:	80 83       	st	Z, r24
                return NO_ERROR;
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	08 95       	ret
            }
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	08 95       	ret
                return NO_ERROR;
            } else {
                return ERROR;
            }
        } else {
            return ERROR;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	08 95       	ret
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	08 95       	ret
                return NO_ERROR;
            } else if (config->value == DIO_PIN_LOW) {
                CLR_BIT(*writeRegisters[config->port], config->pin);
                return NO_ERROR;
            } else {
                return ERROR;
 60e:	81 e0       	ldi	r24, 0x01	; 1
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 610:	08 95       	ret

00000612 <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 612:	1f 92       	push	r1
 614:	0f 92       	push	r0
 616:	0f b6       	in	r0, 0x3f	; 63
 618:	0f 92       	push	r0
 61a:	11 24       	eor	r1, r1
 61c:	2f 93       	push	r18
 61e:	3f 93       	push	r19
 620:	4f 93       	push	r20
 622:	5f 93       	push	r21
 624:	6f 93       	push	r22
 626:	7f 93       	push	r23
 628:	8f 93       	push	r24
 62a:	9f 93       	push	r25
 62c:	af 93       	push	r26
 62e:	bf 93       	push	r27
 630:	ef 93       	push	r30
 632:	ff 93       	push	r31
	if(Action[0]!= NULL){
 634:	e0 91 a3 00 	lds	r30, 0x00A3	; 0x8000a3 <Action>
 638:	f0 91 a4 00 	lds	r31, 0x00A4	; 0x8000a4 <Action+0x1>
 63c:	30 97       	sbiw	r30, 0x00	; 0
 63e:	09 f0       	breq	.+2      	; 0x642 <__vector_1+0x30>
		Action[0]();
 640:	09 95       	icall
	}
}
 642:	ff 91       	pop	r31
 644:	ef 91       	pop	r30
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	7f 91       	pop	r23
 650:	6f 91       	pop	r22
 652:	5f 91       	pop	r21
 654:	4f 91       	pop	r20
 656:	3f 91       	pop	r19
 658:	2f 91       	pop	r18
 65a:	0f 90       	pop	r0
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	0f 90       	pop	r0
 660:	1f 90       	pop	r1
 662:	18 95       	reti

00000664 <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
	if(Action[1]!= NULL){
 686:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <Action+0x2>
 68a:	f0 91 a6 00 	lds	r31, 0x00A6	; 0x8000a6 <Action+0x3>
 68e:	30 97       	sbiw	r30, 0x00	; 0
 690:	09 f0       	breq	.+2      	; 0x694 <__vector_2+0x30>
		Action[1]();
 692:	09 95       	icall
	}
}
 694:	ff 91       	pop	r31
 696:	ef 91       	pop	r30
 698:	bf 91       	pop	r27
 69a:	af 91       	pop	r26
 69c:	9f 91       	pop	r25
 69e:	8f 91       	pop	r24
 6a0:	7f 91       	pop	r23
 6a2:	6f 91       	pop	r22
 6a4:	5f 91       	pop	r21
 6a6:	4f 91       	pop	r20
 6a8:	3f 91       	pop	r19
 6aa:	2f 91       	pop	r18
 6ac:	0f 90       	pop	r0
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	0f 90       	pop	r0
 6b2:	1f 90       	pop	r1
 6b4:	18 95       	reti

000006b6 <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 6b6:	1f 92       	push	r1
 6b8:	0f 92       	push	r0
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	0f 92       	push	r0
 6be:	11 24       	eor	r1, r1
 6c0:	2f 93       	push	r18
 6c2:	3f 93       	push	r19
 6c4:	4f 93       	push	r20
 6c6:	5f 93       	push	r21
 6c8:	6f 93       	push	r22
 6ca:	7f 93       	push	r23
 6cc:	8f 93       	push	r24
 6ce:	9f 93       	push	r25
 6d0:	af 93       	push	r26
 6d2:	bf 93       	push	r27
 6d4:	ef 93       	push	r30
 6d6:	ff 93       	push	r31
	if(Action[2]!= NULL){
 6d8:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <Action+0x4>
 6dc:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <Action+0x5>
 6e0:	30 97       	sbiw	r30, 0x00	; 0
 6e2:	09 f0       	breq	.+2      	; 0x6e6 <__vector_3+0x30>
		Action[2]();
 6e4:	09 95       	icall
	}
}
 6e6:	ff 91       	pop	r31
 6e8:	ef 91       	pop	r30
 6ea:	bf 91       	pop	r27
 6ec:	af 91       	pop	r26
 6ee:	9f 91       	pop	r25
 6f0:	8f 91       	pop	r24
 6f2:	7f 91       	pop	r23
 6f4:	6f 91       	pop	r22
 6f6:	5f 91       	pop	r21
 6f8:	4f 91       	pop	r20
 6fa:	3f 91       	pop	r19
 6fc:	2f 91       	pop	r18
 6fe:	0f 90       	pop	r0
 700:	0f be       	out	0x3f, r0	; 63
 702:	0f 90       	pop	r0
 704:	1f 90       	pop	r1
 706:	18 95       	reti

00000708 <GIE_enable>:
#include "GIE_interface.h"


// Enable Global Interrupts
void GIE_enable(){
    __asm__ __volatile__ ("sei" ::);
 708:	78 94       	sei
 70a:	08 95       	ret

0000070c <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	2f 93       	push	r18
 718:	3f 93       	push	r19
 71a:	4f 93       	push	r20
 71c:	5f 93       	push	r21
 71e:	6f 93       	push	r22
 720:	7f 93       	push	r23
 722:	8f 93       	push	r24
 724:	9f 93       	push	r25
 726:	af 93       	push	r26
 728:	bf 93       	push	r27
 72a:	ef 93       	push	r30
 72c:	ff 93       	push	r31
	if(Action_Spi != NULL){
 72e:	e0 91 a9 00 	lds	r30, 0x00A9	; 0x8000a9 <Action_Spi>
 732:	f0 91 aa 00 	lds	r31, 0x00AA	; 0x8000aa <Action_Spi+0x1>
 736:	30 97       	sbiw	r30, 0x00	; 0
 738:	11 f0       	breq	.+4      	; 0x73e <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 73a:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 73c:	09 95       	icall
	}
 73e:	ff 91       	pop	r31
 740:	ef 91       	pop	r30
 742:	bf 91       	pop	r27
 744:	af 91       	pop	r26
 746:	9f 91       	pop	r25
 748:	8f 91       	pop	r24
 74a:	7f 91       	pop	r23
 74c:	6f 91       	pop	r22
 74e:	5f 91       	pop	r21
 750:	4f 91       	pop	r20
 752:	3f 91       	pop	r19
 754:	2f 91       	pop	r18
 756:	0f 90       	pop	r0
 758:	0f be       	out	0x3f, r0	; 63
 75a:	0f 90       	pop	r0
 75c:	1f 90       	pop	r1
 75e:	18 95       	reti

00000760 <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 760:	1f 92       	push	r1
 762:	0f 92       	push	r0
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	0f 92       	push	r0
 768:	11 24       	eor	r1, r1
 76a:	2f 93       	push	r18
 76c:	3f 93       	push	r19
 76e:	4f 93       	push	r20
 770:	5f 93       	push	r21
 772:	6f 93       	push	r22
 774:	7f 93       	push	r23
 776:	8f 93       	push	r24
 778:	9f 93       	push	r25
 77a:	af 93       	push	r26
 77c:	bf 93       	push	r27
 77e:	ef 93       	push	r30
 780:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 782:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <Action_Timer>
 786:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <Action_Timer+0x1>
 78a:	89 2b       	or	r24, r25
 78c:	89 f1       	breq	.+98     	; 0x7f0 <__vector_11+0x90>
		counter++;
 78e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <counter.1685>
 792:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <counter.1685+0x1>
 796:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <counter.1685+0x2>
 79a:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <counter.1685+0x3>
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	a1 1d       	adc	r26, r1
 7a2:	b1 1d       	adc	r27, r1
 7a4:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <counter.1685>
 7a8:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <counter.1685+0x1>
 7ac:	a0 93 ad 00 	sts	0x00AD, r26	; 0x8000ad <counter.1685+0x2>
 7b0:	b0 93 ae 00 	sts	0x00AE, r27	; 0x8000ae <counter.1685+0x3>
		if(counter == numOverflows){
 7b4:	40 91 b7 00 	lds	r20, 0x00B7	; 0x8000b7 <numOverflows>
 7b8:	50 91 b8 00 	lds	r21, 0x00B8	; 0x8000b8 <numOverflows+0x1>
 7bc:	60 91 b9 00 	lds	r22, 0x00B9	; 0x8000b9 <numOverflows+0x2>
 7c0:	70 91 ba 00 	lds	r23, 0x00BA	; 0x8000ba <numOverflows+0x3>
 7c4:	84 17       	cp	r24, r20
 7c6:	95 07       	cpc	r25, r21
 7c8:	a6 07       	cpc	r26, r22
 7ca:	b7 07       	cpc	r27, r23
 7cc:	89 f4       	brne	.+34     	; 0x7f0 <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 7ce:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <remainingCounts>
 7d2:	81 95       	neg	r24
 7d4:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 7d6:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <counter.1685>
 7da:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <counter.1685+0x1>
 7de:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <counter.1685+0x2>
 7e2:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <counter.1685+0x3>
			Action_Timer[0]();
 7e6:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <Action_Timer>
 7ea:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <Action_Timer+0x1>
 7ee:	09 95       	icall
		}
		
	}
}
 7f0:	ff 91       	pop	r31
 7f2:	ef 91       	pop	r30
 7f4:	bf 91       	pop	r27
 7f6:	af 91       	pop	r26
 7f8:	9f 91       	pop	r25
 7fa:	8f 91       	pop	r24
 7fc:	7f 91       	pop	r23
 7fe:	6f 91       	pop	r22
 800:	5f 91       	pop	r21
 802:	4f 91       	pop	r20
 804:	3f 91       	pop	r19
 806:	2f 91       	pop	r18
 808:	0f 90       	pop	r0
 80a:	0f be       	out	0x3f, r0	; 63
 80c:	0f 90       	pop	r0
 80e:	1f 90       	pop	r1
 810:	18 95       	reti

00000812 <__vector_10>:

ISR(TIMER0_COMP_vect){
 812:	1f 92       	push	r1
 814:	0f 92       	push	r0
 816:	0f b6       	in	r0, 0x3f	; 63
 818:	0f 92       	push	r0
 81a:	11 24       	eor	r1, r1
 81c:	2f 93       	push	r18
 81e:	3f 93       	push	r19
 820:	4f 93       	push	r20
 822:	5f 93       	push	r21
 824:	6f 93       	push	r22
 826:	7f 93       	push	r23
 828:	8f 93       	push	r24
 82a:	9f 93       	push	r25
 82c:	af 93       	push	r26
 82e:	bf 93       	push	r27
 830:	ef 93       	push	r30
 832:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 834:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <Action_Timer+0x2>
 838:	f0 91 b2 00 	lds	r31, 0x00B2	; 0x8000b2 <Action_Timer+0x3>
 83c:	30 97       	sbiw	r30, 0x00	; 0
 83e:	09 f0       	breq	.+2      	; 0x842 <__vector_10+0x30>
		Action_Timer[1]();
 840:	09 95       	icall
		
	}
}
 842:	ff 91       	pop	r31
 844:	ef 91       	pop	r30
 846:	bf 91       	pop	r27
 848:	af 91       	pop	r26
 84a:	9f 91       	pop	r25
 84c:	8f 91       	pop	r24
 84e:	7f 91       	pop	r23
 850:	6f 91       	pop	r22
 852:	5f 91       	pop	r21
 854:	4f 91       	pop	r20
 856:	3f 91       	pop	r19
 858:	2f 91       	pop	r18
 85a:	0f 90       	pop	r0
 85c:	0f be       	out	0x3f, r0	; 63
 85e:	0f 90       	pop	r0
 860:	1f 90       	pop	r1
 862:	18 95       	reti

00000864 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 864:	1f 92       	push	r1
 866:	0f 92       	push	r0
 868:	0f b6       	in	r0, 0x3f	; 63
 86a:	0f 92       	push	r0
 86c:	11 24       	eor	r1, r1
 86e:	2f 93       	push	r18
 870:	3f 93       	push	r19
 872:	4f 93       	push	r20
 874:	5f 93       	push	r21
 876:	6f 93       	push	r22
 878:	7f 93       	push	r23
 87a:	8f 93       	push	r24
 87c:	9f 93       	push	r25
 87e:	af 93       	push	r26
 880:	bf 93       	push	r27
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
 886:	ef 93       	push	r30
 888:	ff 93       	push	r31
	Action_Timer[0]();
 88a:	cf eb       	ldi	r28, 0xBF	; 191
 88c:	d0 e0       	ldi	r29, 0x00	; 0
 88e:	e8 81       	ld	r30, Y
 890:	f9 81       	ldd	r31, Y+1	; 0x01
 892:	09 95       	icall
	numOverflows++;
 894:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <numOverflows>
 898:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <numOverflows+0x1>
 89c:	a0 91 c9 00 	lds	r26, 0x00C9	; 0x8000c9 <numOverflows+0x2>
 8a0:	b0 91 ca 00 	lds	r27, 0x00CA	; 0x8000ca <numOverflows+0x3>
 8a4:	01 96       	adiw	r24, 0x01	; 1
 8a6:	a1 1d       	adc	r26, r1
 8a8:	b1 1d       	adc	r27, r1
 8aa:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <numOverflows>
 8ae:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <numOverflows+0x1>
 8b2:	a0 93 c9 00 	sts	0x00C9, r26	; 0x8000c9 <numOverflows+0x2>
 8b6:	b0 93 ca 00 	sts	0x00CA, r27	; 0x8000ca <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 8ba:	e8 81       	ld	r30, Y
 8bc:	f9 81       	ldd	r31, Y+1	; 0x01
 8be:	30 97       	sbiw	r30, 0x00	; 0
 8c0:	49 f1       	breq	.+82     	; 0x914 <__vector_9+0xb0>
		counter++;
 8c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <counter.1744>
 8c6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <counter.1744+0x1>
 8ca:	a0 91 bd 00 	lds	r26, 0x00BD	; 0x8000bd <counter.1744+0x2>
 8ce:	b0 91 be 00 	lds	r27, 0x00BE	; 0x8000be <counter.1744+0x3>
 8d2:	01 96       	adiw	r24, 0x01	; 1
 8d4:	a1 1d       	adc	r26, r1
 8d6:	b1 1d       	adc	r27, r1
 8d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <counter.1744>
 8dc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <counter.1744+0x1>
 8e0:	a0 93 bd 00 	sts	0x00BD, r26	; 0x8000bd <counter.1744+0x2>
 8e4:	b0 93 be 00 	sts	0x00BE, r27	; 0x8000be <counter.1744+0x3>
		if(counter == req_numOverflows){
 8e8:	40 91 cb 00 	lds	r20, 0x00CB	; 0x8000cb <req_numOverflows>
 8ec:	50 91 cc 00 	lds	r21, 0x00CC	; 0x8000cc <req_numOverflows+0x1>
 8f0:	60 91 cd 00 	lds	r22, 0x00CD	; 0x8000cd <req_numOverflows+0x2>
 8f4:	70 91 ce 00 	lds	r23, 0x00CE	; 0x8000ce <req_numOverflows+0x3>
 8f8:	84 17       	cp	r24, r20
 8fa:	95 07       	cpc	r25, r21
 8fc:	a6 07       	cpc	r26, r22
 8fe:	b7 07       	cpc	r27, r23
 900:	49 f4       	brne	.+18     	; 0x914 <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 902:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <counter.1744>
 906:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <counter.1744+0x1>
 90a:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <counter.1744+0x2>
 90e:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <counter.1744+0x3>
			Action_Timer[0]();
 912:	09 95       	icall
		}
		
	}
}
 914:	ff 91       	pop	r31
 916:	ef 91       	pop	r30
 918:	df 91       	pop	r29
 91a:	cf 91       	pop	r28
 91c:	bf 91       	pop	r27
 91e:	af 91       	pop	r26
 920:	9f 91       	pop	r25
 922:	8f 91       	pop	r24
 924:	7f 91       	pop	r23
 926:	6f 91       	pop	r22
 928:	5f 91       	pop	r21
 92a:	4f 91       	pop	r20
 92c:	3f 91       	pop	r19
 92e:	2f 91       	pop	r18
 930:	0f 90       	pop	r0
 932:	0f be       	out	0x3f, r0	; 63
 934:	0f 90       	pop	r0
 936:	1f 90       	pop	r1
 938:	18 95       	reti

0000093a <__vector_7>:

ISR(TIMER1_COMPA_vect){
 93a:	1f 92       	push	r1
 93c:	0f 92       	push	r0
 93e:	0f b6       	in	r0, 0x3f	; 63
 940:	0f 92       	push	r0
 942:	11 24       	eor	r1, r1
 944:	2f 93       	push	r18
 946:	3f 93       	push	r19
 948:	4f 93       	push	r20
 94a:	5f 93       	push	r21
 94c:	6f 93       	push	r22
 94e:	7f 93       	push	r23
 950:	8f 93       	push	r24
 952:	9f 93       	push	r25
 954:	af 93       	push	r26
 956:	bf 93       	push	r27
 958:	ef 93       	push	r30
 95a:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 95c:	e0 91 c1 00 	lds	r30, 0x00C1	; 0x8000c1 <Action_Timer+0x2>
 960:	f0 91 c2 00 	lds	r31, 0x00C2	; 0x8000c2 <Action_Timer+0x3>
 964:	30 97       	sbiw	r30, 0x00	; 0
 966:	09 f0       	breq	.+2      	; 0x96a <__vector_7+0x30>
		Action_Timer[1]();
 968:	09 95       	icall
	}
}
 96a:	ff 91       	pop	r31
 96c:	ef 91       	pop	r30
 96e:	bf 91       	pop	r27
 970:	af 91       	pop	r26
 972:	9f 91       	pop	r25
 974:	8f 91       	pop	r24
 976:	7f 91       	pop	r23
 978:	6f 91       	pop	r22
 97a:	5f 91       	pop	r21
 97c:	4f 91       	pop	r20
 97e:	3f 91       	pop	r19
 980:	2f 91       	pop	r18
 982:	0f 90       	pop	r0
 984:	0f be       	out	0x3f, r0	; 63
 986:	0f 90       	pop	r0
 988:	1f 90       	pop	r1
 98a:	18 95       	reti

0000098c <__vector_6>:


ISR(TIMER1_CAPT_vect){
 98c:	1f 92       	push	r1
 98e:	0f 92       	push	r0
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	0f 92       	push	r0
 994:	11 24       	eor	r1, r1
 996:	2f 93       	push	r18
 998:	3f 93       	push	r19
 99a:	4f 93       	push	r20
 99c:	5f 93       	push	r21
 99e:	6f 93       	push	r22
 9a0:	7f 93       	push	r23
 9a2:	8f 93       	push	r24
 9a4:	9f 93       	push	r25
 9a6:	af 93       	push	r26
 9a8:	bf 93       	push	r27
 9aa:	ef 93       	push	r30
 9ac:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 9ae:	e0 91 c5 00 	lds	r30, 0x00C5	; 0x8000c5 <Action_Timer+0x6>
 9b2:	f0 91 c6 00 	lds	r31, 0x00C6	; 0x8000c6 <Action_Timer+0x7>
 9b6:	30 97       	sbiw	r30, 0x00	; 0
 9b8:	09 f0       	breq	.+2      	; 0x9bc <__vector_6+0x30>
			Action_Timer[3]();
 9ba:	09 95       	icall
			
			
		}
 9bc:	ff 91       	pop	r31
 9be:	ef 91       	pop	r30
 9c0:	bf 91       	pop	r27
 9c2:	af 91       	pop	r26
 9c4:	9f 91       	pop	r25
 9c6:	8f 91       	pop	r24
 9c8:	7f 91       	pop	r23
 9ca:	6f 91       	pop	r22
 9cc:	5f 91       	pop	r21
 9ce:	4f 91       	pop	r20
 9d0:	3f 91       	pop	r19
 9d2:	2f 91       	pop	r18
 9d4:	0f 90       	pop	r0
 9d6:	0f be       	out	0x3f, r0	; 63
 9d8:	0f 90       	pop	r0
 9da:	1f 90       	pop	r1
 9dc:	18 95       	reti

000009de <USART_Init>:
		Str[i] = MUART_voidRecieveByteSynch();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
}
 9de:	82 e0       	ldi	r24, 0x02	; 2
 9e0:	8b b9       	out	0x0b, r24	; 11
 9e2:	88 e1       	ldi	r24, 0x18	; 24
 9e4:	8a b9       	out	0x0a, r24	; 10
 9e6:	86 e8       	ldi	r24, 0x86	; 134
 9e8:	80 bd       	out	0x20, r24	; 32
 9ea:	10 bc       	out	0x20, r1	; 32
 9ec:	80 e1       	ldi	r24, 0x10	; 16
 9ee:	89 b9       	out	0x09, r24	; 9
 9f0:	08 95       	ret

000009f2 <UART_sendByte>:
 9f2:	5d 9b       	sbis	0x0b, 5	; 11
 9f4:	fe cf       	rjmp	.-4      	; 0x9f2 <UART_sendByte>
 9f6:	8c b9       	out	0x0c, r24	; 12
 9f8:	08 95       	ret

000009fa <UART_receiveByteAsynchCallBack>:

void UART_receiveByteAsynchCallBack(void (*ptrfn)(u8)) {
	// Enable UART receiver interrupt
	UCSRB |= (1 << RXCIE);
 9fa:	2a b1       	in	r18, 0x0a	; 10
 9fc:	20 68       	ori	r18, 0x80	; 128
 9fe:	2a b9       	out	0x0a, r18	; 10
	//set callback
	Action_Uart[0] = ptrfn;
 a00:	90 93 d0 00 	sts	0x00D0, r25	; 0x8000d0 <Action_Uart+0x1>
 a04:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <Action_Uart>
 a08:	08 95       	ret

00000a0a <__vector_13>:
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 a0a:	1f 92       	push	r1
 a0c:	0f 92       	push	r0
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	0f 92       	push	r0
 a12:	11 24       	eor	r1, r1
 a14:	2f 93       	push	r18
 a16:	3f 93       	push	r19
 a18:	4f 93       	push	r20
 a1a:	5f 93       	push	r21
 a1c:	6f 93       	push	r22
 a1e:	7f 93       	push	r23
 a20:	8f 93       	push	r24
 a22:	9f 93       	push	r25
 a24:	af 93       	push	r26
 a26:	bf 93       	push	r27
 a28:	ef 93       	push	r30
 a2a:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 a2c:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 a2e:	e0 91 cf 00 	lds	r30, 0x00CF	; 0x8000cf <Action_Uart>
 a32:	f0 91 d0 00 	lds	r31, 0x00D0	; 0x8000d0 <Action_Uart+0x1>
 a36:	30 97       	sbiw	r30, 0x00	; 0
 a38:	09 f0       	breq	.+2      	; 0xa3c <__vector_13+0x32>
		Action_Uart[0](receivedData);
 a3a:	09 95       	icall
	}
 a3c:	ff 91       	pop	r31
 a3e:	ef 91       	pop	r30
 a40:	bf 91       	pop	r27
 a42:	af 91       	pop	r26
 a44:	9f 91       	pop	r25
 a46:	8f 91       	pop	r24
 a48:	7f 91       	pop	r23
 a4a:	6f 91       	pop	r22
 a4c:	5f 91       	pop	r21
 a4e:	4f 91       	pop	r20
 a50:	3f 91       	pop	r19
 a52:	2f 91       	pop	r18
 a54:	0f 90       	pop	r0
 a56:	0f be       	out	0x3f, r0	; 63
 a58:	0f 90       	pop	r0
 a5a:	1f 90       	pop	r1
 a5c:	18 95       	reti

00000a5e <__itoa_ncheck>:
 a5e:	bb 27       	eor	r27, r27
 a60:	4a 30       	cpi	r20, 0x0A	; 10
 a62:	31 f4       	brne	.+12     	; 0xa70 <__itoa_ncheck+0x12>
 a64:	99 23       	and	r25, r25
 a66:	22 f4       	brpl	.+8      	; 0xa70 <__itoa_ncheck+0x12>
 a68:	bd e2       	ldi	r27, 0x2D	; 45
 a6a:	90 95       	com	r25
 a6c:	81 95       	neg	r24
 a6e:	9f 4f       	sbci	r25, 0xFF	; 255
 a70:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__utoa_common>

00000a74 <__utoa_ncheck>:
 a74:	bb 27       	eor	r27, r27

00000a76 <__utoa_common>:
 a76:	fb 01       	movw	r30, r22
 a78:	55 27       	eor	r21, r21
 a7a:	aa 27       	eor	r26, r26
 a7c:	88 0f       	add	r24, r24
 a7e:	99 1f       	adc	r25, r25
 a80:	aa 1f       	adc	r26, r26
 a82:	a4 17       	cp	r26, r20
 a84:	10 f0       	brcs	.+4      	; 0xa8a <__utoa_common+0x14>
 a86:	a4 1b       	sub	r26, r20
 a88:	83 95       	inc	r24
 a8a:	50 51       	subi	r21, 0x10	; 16
 a8c:	b9 f7       	brne	.-18     	; 0xa7c <__utoa_common+0x6>
 a8e:	a0 5d       	subi	r26, 0xD0	; 208
 a90:	aa 33       	cpi	r26, 0x3A	; 58
 a92:	08 f0       	brcs	.+2      	; 0xa96 <__utoa_common+0x20>
 a94:	a9 5d       	subi	r26, 0xD9	; 217
 a96:	a1 93       	st	Z+, r26
 a98:	00 97       	sbiw	r24, 0x00	; 0
 a9a:	79 f7       	brne	.-34     	; 0xa7a <__utoa_common+0x4>
 a9c:	b1 11       	cpse	r27, r1
 a9e:	b1 93       	st	Z+, r27
 aa0:	11 92       	st	Z+, r1
 aa2:	cb 01       	movw	r24, r22
 aa4:	0c 94 54 05 	jmp	0xaa8	; 0xaa8 <strrev>

00000aa8 <strrev>:
 aa8:	dc 01       	movw	r26, r24
 aaa:	fc 01       	movw	r30, r24
 aac:	67 2f       	mov	r22, r23
 aae:	71 91       	ld	r23, Z+
 ab0:	77 23       	and	r23, r23
 ab2:	e1 f7       	brne	.-8      	; 0xaac <strrev+0x4>
 ab4:	32 97       	sbiw	r30, 0x02	; 2
 ab6:	04 c0       	rjmp	.+8      	; 0xac0 <strrev+0x18>
 ab8:	7c 91       	ld	r23, X
 aba:	6d 93       	st	X+, r22
 abc:	70 83       	st	Z, r23
 abe:	62 91       	ld	r22, -Z
 ac0:	ae 17       	cp	r26, r30
 ac2:	bf 07       	cpc	r27, r31
 ac4:	c8 f3       	brcs	.-14     	; 0xab8 <strrev+0x10>
 ac6:	08 95       	ret

00000ac8 <_exit>:
 ac8:	f8 94       	cli

00000aca <__stop_program>:
 aca:	ff cf       	rjmp	.-2      	; 0xaca <__stop_program>
