
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00000c60  00000cf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  008000f4  008000f4  00000d88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000030ca  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000124c  00000000  00000000  000041e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018e0  00000000  00000000  00005432  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009b8  00000000  00000000  00006d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014cb  00000000  00000000  000076cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002205  00000000  00000000  00008b97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000ad9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 1a 04 	jmp	0x834	; 0x834 <__vector_1>
   8:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_2>
   c:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__vector_3>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 d5 05 	jmp	0xbaa	; 0xbaa <__vector_6>
  1c:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__vector_7>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__vector_9>
  28:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__vector_10>
  2c:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__vector_11>
  30:	0c 94 95 04 	jmp	0x92a	; 0x92a <__vector_12>
  34:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__vector_13>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	a4 00       	.word	0x00a4	; ????
  56:	c0 00       	.word	0x00c0	; ????
  58:	a6 00       	.word	0x00a6	; ????
  5a:	a8 00       	.word	0x00a8	; ????
  5c:	aa 00       	.word	0x00aa	; ????
  5e:	ac 00       	.word	0x00ac	; ????
  60:	ae 00       	.word	0x00ae	; ????
  62:	b0 00       	.word	0x00b0	; ????
  64:	b2 00       	.word	0x00b2	; ????
  66:	b4 00       	.word	0x00b4	; ????
  68:	b6 00       	.word	0x00b6	; ????
  6a:	b8 00       	.word	0x00b8	; ????
  6c:	c1 00       	.word	0x00c1	; ????
  6e:	ba 00       	.word	0x00ba	; ????
  70:	bc 00       	.word	0x00bc	; ????
  72:	be 00       	.word	0x00be	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e0 e6       	ldi	r30, 0x60	; 96
  88:	fc e0       	ldi	r31, 0x0C	; 12
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a4 3f       	cpi	r26, 0xF4	; 244
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	a4 ef       	ldi	r26, 0xF4	; 244
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	aa 32       	cpi	r26, 0x2A	; 42
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 94 00 	call	0x128	; 0x128 <main>
  aa:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <takeUserInput>:
u8 duty=0;
u8 freq=0;

void takeUserInput(void){
	u8 key;
	H_LCD_void_clearScreen();
  b2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <H_LCD_void_clearScreen>
	H_LCD_void_sendString("Enter Duty Cycle (0-100)");
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 2e 03 	call	0x65c	; 0x65c <H_LCD_void_sendString>
	H_LCD_void_gotoXY(1,0);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 41 03 	call	0x682	; 0x682 <H_LCD_void_gotoXY>
	for(u8 i =0; i<3;i++){
		key = KEYPAD_getPressedKey();
  c6:	0e 94 c2 00 	call	0x184	; 0x184 <KEYPAD_getPressedKey>
		if(key != '#'){
  ca:	83 32       	cpi	r24, 0x23	; 35
  cc:	51 f0       	breq	.+20     	; 0xe2 <takeUserInput+0x30>
			duty = duty * 10 + key;
  ce:	90 91 f5 00 	lds	r25, 0x00F5	; 0x8000f5 <duty>
  d2:	99 0f       	add	r25, r25
  d4:	29 2f       	mov	r18, r25
  d6:	22 0f       	add	r18, r18
  d8:	22 0f       	add	r18, r18
  da:	92 0f       	add	r25, r18
  dc:	89 0f       	add	r24, r25
  de:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <duty>
		}
		break;
	}
	
	H_LCD_void_clearScreen();
  e2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <H_LCD_void_clearScreen>
	H_LCD_void_sendString("Choose Freq :");
  e6:	89 e9       	ldi	r24, 0x99	; 153
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 2e 03 	call	0x65c	; 0x65c <H_LCD_void_sendString>
	H_LCD_void_gotoXY(1,0);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 41 03 	call	0x682	; 0x682 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("1- 62.5khz   2- 7.8khz");
  f6:	87 ea       	ldi	r24, 0xA7	; 167
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 2e 03 	call	0x65c	; 0x65c <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2,0);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 41 03 	call	0x682	; 0x682 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("3- 976hz   4- 244khz");
 106:	8e eb       	ldi	r24, 0xBE	; 190
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 2e 03 	call	0x65c	; 0x65c <H_LCD_void_sendString>
	H_LCD_void_gotoXY(3,0);
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	0e 94 41 03 	call	0x682	; 0x682 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("5- 61hz");
 116:	83 ed       	ldi	r24, 0xD3	; 211
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 2e 03 	call	0x65c	; 0x65c <H_LCD_void_sendString>
	freq = KEYPAD_getPressedKey();
 11e:	0e 94 c2 00 	call	0x184	; 0x184 <KEYPAD_getPressedKey>
 122:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__data_end>
 126:	08 95       	ret

00000128 <main>:
	
}

int main(void) {

	H_LCD_void_Init();
 128:	0e 94 66 02 	call	0x4cc	; 0x4cc <H_LCD_void_Init>
	

	while (1) {
		takeUserInput();
 12c:	0e 94 59 00 	call	0xb2	; 0xb2 <takeUserInput>
 130:	ff cf       	rjmp	.-2      	; 0x130 <main+0x8>

00000132 <KEYPAD_4x4_adjustKeyNumber>:
* Update the keypad pressed button value with the correct one in keypad 4x4 shape
*/
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number)
{
	u8 keypad_button = 0;
	switch(button_number)
 132:	48 2f       	mov	r20, r24
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	fa 01       	movw	r30, r20
 138:	31 97       	sbiw	r30, 0x01	; 1
 13a:	e0 31       	cpi	r30, 0x10	; 16
 13c:	f1 05       	cpc	r31, r1
 13e:	08 f5       	brcc	.+66     	; 0x182 <KEYPAD_4x4_adjustKeyNumber+0x50>
 140:	e6 5d       	subi	r30, 0xD6	; 214
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__tablejump2__>
	{
		case 1: keypad_button = 7;
 148:	87 e0       	ldi	r24, 0x07	; 7
 14a:	08 95       	ret
		break;
		case 2: keypad_button = 8;
		break;
		case 3: keypad_button = 9;
 14c:	89 e0       	ldi	r24, 0x09	; 9
		break;
 14e:	08 95       	ret
		case 4: keypad_button = '%'; // ASCII Code of %
 150:	85 e2       	ldi	r24, 0x25	; 37
		break;
 152:	08 95       	ret
		case 5: keypad_button = 4;
 154:	84 e0       	ldi	r24, 0x04	; 4
		break;
 156:	08 95       	ret
		case 6: keypad_button = 5;
 158:	85 e0       	ldi	r24, 0x05	; 5
		break;
 15a:	08 95       	ret
		case 7: keypad_button = 6;
 15c:	86 e0       	ldi	r24, 0x06	; 6
		break;
 15e:	08 95       	ret
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
 160:	8a e2       	ldi	r24, 0x2A	; 42
		break;
 162:	08 95       	ret
		case 9: keypad_button = 1;
 164:	81 e0       	ldi	r24, 0x01	; 1
		break;
 166:	08 95       	ret
		case 10: keypad_button = 2;
 168:	82 e0       	ldi	r24, 0x02	; 2
		break;
 16a:	08 95       	ret
		case 11: keypad_button = 3;
 16c:	83 e0       	ldi	r24, 0x03	; 3
		break;
 16e:	08 95       	ret
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
 170:	8d e2       	ldi	r24, 0x2D	; 45
		break;
 172:	08 95       	ret
		case 13: keypad_button = 13;  /* ASCII of Enter */
		break;
		case 14: keypad_button = 0;
 174:	80 e0       	ldi	r24, 0x00	; 0
		break;
 176:	08 95       	ret
		case 15: keypad_button = '='; /* ASCII Code of '=' */
 178:	8d e3       	ldi	r24, 0x3D	; 61
		break;
 17a:	08 95       	ret
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
 17c:	8b e2       	ldi	r24, 0x2B	; 43
		break;
 17e:	08 95       	ret
	u8 keypad_button = 0;
	switch(button_number)
	{
		case 1: keypad_button = 7;
		break;
		case 2: keypad_button = 8;
 180:	88 e0       	ldi	r24, 0x08	; 8
		break;
		default: keypad_button = button_number;
		break;
	}
	return keypad_button;
}
 182:	08 95       	ret

00000184 <KEYPAD_getPressedKey>:
#include "Keypad_config.h"
#include "Keypad_private.h"



u8 KEYPAD_getPressedKey(){
 184:	9f 92       	push	r9
 186:	af 92       	push	r10
 188:	bf 92       	push	r11
 18a:	cf 92       	push	r12
 18c:	df 92       	push	r13
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	a1 97       	sbiw	r28, 0x21	; 33
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
	u8 col,row;
	u8 prevKey = 0; // Previous key state
	u8 currentKey = 0; // Current key state
 1aa:	19 82       	std	Y+1, r1	; 0x01
	// Configuration for the columns
	DIO_Config colPins[] = {
 1ac:	80 e1       	ldi	r24, 0x10	; 16
 1ae:	e0 e6       	ldi	r30, 0x60	; 96
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	de 01       	movw	r26, r28
 1b4:	12 96       	adiw	r26, 0x02	; 2
 1b6:	01 90       	ld	r0, Z+
 1b8:	0d 92       	st	X+, r0
 1ba:	8a 95       	dec	r24
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <KEYPAD_getPressedKey+0x32>
		{COL2_PORT, COL2_PIN, DIO_PIN_INPUT, DIO_PIN_HIGH},
		{COL3_PORT, COL3_PIN, DIO_PIN_INPUT, DIO_PIN_HIGH},
		{COL4_PORT, COL4_PIN, DIO_PIN_INPUT, DIO_PIN_HIGH},
	};
	// Configuration for the rows
	DIO_Config rowPins[] = {
 1be:	fe 01       	movw	r30, r28
 1c0:	72 96       	adiw	r30, 0x12	; 18
 1c2:	80 e1       	ldi	r24, 0x10	; 16
 1c4:	df 01       	movw	r26, r30
 1c6:	1d 92       	st	X+, r1
 1c8:	8a 95       	dec	r24
 1ca:	e9 f7       	brne	.-6      	; 0x1c6 <KEYPAD_getPressedKey+0x42>
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	8a 8b       	std	Y+18, r24	; 0x12
 1d0:	95 e0       	ldi	r25, 0x05	; 5
 1d2:	9b 8b       	std	Y+19, r25	; 0x13
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	9c 8b       	std	Y+20, r25	; 0x14
 1d8:	8e 8b       	std	Y+22, r24	; 0x16
 1da:	24 e0       	ldi	r18, 0x04	; 4
 1dc:	2f 8b       	std	Y+23, r18	; 0x17
 1de:	98 8f       	std	Y+24, r25	; 0x18
 1e0:	8a 8f       	std	Y+26, r24	; 0x1a
 1e2:	23 e0       	ldi	r18, 0x03	; 3
 1e4:	2b 8f       	std	Y+27, r18	; 0x1b
 1e6:	9c 8f       	std	Y+28, r25	; 0x1c
 1e8:	8e 8f       	std	Y+30, r24	; 0x1e
 1ea:	8f 8f       	std	Y+31, r24	; 0x1f
 1ec:	98 a3       	std	Y+32, r25	; 0x20
		{ROW3_PORT, ROW3_PIN, DIO_PIN_OUTPUT},
		{ROW4_PORT, ROW4_PIN, DIO_PIN_OUTPUT},
	};

	// Initialize the keypad pins
	for (u8 i = 0; i < 4; i++) {
 1ee:	d1 2c       	mov	r13, r1
 1f0:	1b c0       	rjmp	.+54     	; 0x228 <KEYPAD_getPressedKey+0xa4>
		DIO_U8SetPinDirection(&colPins[i]);
 1f2:	ed 2c       	mov	r14, r13
 1f4:	f1 2c       	mov	r15, r1
 1f6:	ee 0c       	add	r14, r14
 1f8:	ff 1c       	adc	r15, r15
 1fa:	ee 0c       	add	r14, r14
 1fc:	ff 1c       	adc	r15, r15
 1fe:	02 e0       	ldi	r16, 0x02	; 2
 200:	10 e0       	ldi	r17, 0x00	; 0
 202:	0c 0f       	add	r16, r28
 204:	1d 1f       	adc	r17, r29
 206:	0e 0d       	add	r16, r14
 208:	1f 1d       	adc	r17, r15
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_U8SetPinDirection>
		DIO_U8SetPinDirection(&rowPins[i]);
 210:	82 e1       	ldi	r24, 0x12	; 18
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	8c 0f       	add	r24, r28
 216:	9d 1f       	adc	r25, r29
 218:	8e 0d       	add	r24, r14
 21a:	9f 1d       	adc	r25, r15
 21c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_U8SetPinDirection>
		DIO_U8SetPinValue(&colPins[i]);
 220:	c8 01       	movw	r24, r16
 222:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_U8SetPinValue>
		{ROW3_PORT, ROW3_PIN, DIO_PIN_OUTPUT},
		{ROW4_PORT, ROW4_PIN, DIO_PIN_OUTPUT},
	};

	// Initialize the keypad pins
	for (u8 i = 0; i < 4; i++) {
 226:	d3 94       	inc	r13
 228:	b3 e0       	ldi	r27, 0x03	; 3
 22a:	bd 15       	cp	r27, r13
 22c:	10 f7       	brcc	.-60     	; 0x1f2 <KEYPAD_getPressedKey+0x6e>
 22e:	91 2c       	mov	r9, r1
	}

	while(1)
	{
		/*for loop to scan all keypad columns*/
		for (row = 0 ; row < 4 ; row++)
 230:	a1 2c       	mov	r10, r1
 232:	58 c0       	rjmp	.+176    	; 0x2e4 <KEYPAD_getPressedKey+0x160>
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
 234:	ea 2c       	mov	r14, r10
 236:	f1 2c       	mov	r15, r1
 238:	67 01       	movw	r12, r14
 23a:	cc 0c       	add	r12, r12
 23c:	dd 1c       	adc	r13, r13
 23e:	cc 0c       	add	r12, r12
 240:	dd 1c       	adc	r13, r13
 242:	e1 e0       	ldi	r30, 0x01	; 1
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	ec 0f       	add	r30, r28
 248:	fd 1f       	adc	r31, r29
 24a:	ec 0d       	add	r30, r12
 24c:	fd 1d       	adc	r31, r13
 24e:	14 8a       	std	Z+20, r1	; 0x14
			DIO_U8SetPinValue(&rowPins[row]);
 250:	82 e1       	ldi	r24, 0x12	; 18
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	8c 0f       	add	r24, r28
 256:	9d 1f       	adc	r25, r29
 258:	c8 0e       	add	r12, r24
 25a:	d9 1e       	adc	r13, r25
 25c:	c6 01       	movw	r24, r12
 25e:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_U8SetPinValue>
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 262:	b1 2c       	mov	r11, r1
 264:	2c c0       	rjmp	.+88     	; 0x2be <KEYPAD_getPressedKey+0x13a>
			{
				DIO_U8GetPinValue(&colPins[col], &currentKey);
 266:	0b 2d       	mov	r16, r11
 268:	10 e0       	ldi	r17, 0x00	; 0
 26a:	00 0f       	add	r16, r16
 26c:	11 1f       	adc	r17, r17
 26e:	00 0f       	add	r16, r16
 270:	11 1f       	adc	r17, r17
 272:	a2 e0       	ldi	r26, 0x02	; 2
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	ac 0f       	add	r26, r28
 278:	bd 1f       	adc	r27, r29
 27a:	0a 0f       	add	r16, r26
 27c:	1b 1f       	adc	r17, r27
 27e:	be 01       	movw	r22, r28
 280:	6f 5f       	subi	r22, 0xFF	; 255
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	c8 01       	movw	r24, r16
 286:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <DIO_U8GetPinValue>

				/* Check current row pin value */
				if (DIO_PIN_LOW == currentKey && DIO_PIN_HIGH == prevKey) {
 28a:	99 81       	ldd	r25, Y+1	; 0x01
 28c:	91 11       	cpse	r25, r1
 28e:	15 c0       	rjmp	.+42     	; 0x2ba <KEYPAD_getPressedKey+0x136>
 290:	b1 e0       	ldi	r27, 0x01	; 1
 292:	9b 12       	cpse	r9, r27
 294:	12 c0       	rjmp	.+36     	; 0x2ba <KEYPAD_getPressedKey+0x136>
 296:	06 c0       	rjmp	.+12     	; 0x2a4 <KEYPAD_getPressedKey+0x120>
					/* Key is pressed, return the pressed button value */
					while (currentKey != DIO_PIN_HIGH) {
						DIO_U8GetPinValue(&colPins[col], &currentKey);
 298:	be 01       	movw	r22, r28
 29a:	6f 5f       	subi	r22, 0xFF	; 255
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	c8 01       	movw	r24, r16
 2a0:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <DIO_U8GetPinValue>
				DIO_U8GetPinValue(&colPins[col], &currentKey);

				/* Check current row pin value */
				if (DIO_PIN_LOW == currentKey && DIO_PIN_HIGH == prevKey) {
					/* Key is pressed, return the pressed button value */
					while (currentKey != DIO_PIN_HIGH) {
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	b9 f7       	brne	.-18     	; 0x298 <KEYPAD_getPressedKey+0x114>
						DIO_U8GetPinValue(&colPins[col], &currentKey);
					}
					return KEYPAD_4x4_adjustKeyNumber((col * KEYPAD_NUM_COLS) + row + 1);
 2aa:	bb 0c       	add	r11, r11
 2ac:	bb 0c       	add	r11, r11
 2ae:	8b 2d       	mov	r24, r11
 2b0:	8a 0d       	add	r24, r10
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
 2b4:	0e 94 99 00 	call	0x132	; 0x132 <KEYPAD_4x4_adjustKeyNumber>
 2b8:	1a c0       	rjmp	.+52     	; 0x2ee <KEYPAD_getPressedKey+0x16a>
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
			DIO_U8SetPinValue(&rowPins[row]);
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 2ba:	b3 94       	inc	r11
						DIO_U8GetPinValue(&colPins[col], &currentKey);
					}
					return KEYPAD_4x4_adjustKeyNumber((col * KEYPAD_NUM_COLS) + row + 1);
				}

				prevKey = currentKey; // Update the previous key state
 2bc:	99 2e       	mov	r9, r25
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
			DIO_U8SetPinValue(&rowPins[row]);
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	8b 15       	cp	r24, r11
 2c2:	88 f6       	brcc	.-94     	; 0x266 <KEYPAD_getPressedKey+0xe2>

				prevKey = currentKey; // Update the previous key state
				/*end of for loop*/
			}
			/*set current column pin HIGH again*/
			rowPins[row].value = DIO_PIN_HIGH;
 2c4:	ee 0c       	add	r14, r14
 2c6:	ff 1c       	adc	r15, r15
 2c8:	ee 0c       	add	r14, r14
 2ca:	ff 1c       	adc	r15, r15
 2cc:	e1 e0       	ldi	r30, 0x01	; 1
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	ec 0f       	add	r30, r28
 2d2:	fd 1f       	adc	r31, r29
 2d4:	ee 0d       	add	r30, r14
 2d6:	ff 1d       	adc	r31, r15
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	84 8b       	std	Z+20, r24	; 0x14
			DIO_U8SetPinValue(&rowPins[row]);
 2dc:	c6 01       	movw	r24, r12
 2de:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_U8SetPinValue>
	}

	while(1)
	{
		/*for loop to scan all keypad columns*/
		for (row = 0 ; row < 4 ; row++)
 2e2:	a3 94       	inc	r10
 2e4:	93 e0       	ldi	r25, 0x03	; 3
 2e6:	9a 15       	cp	r25, r10
 2e8:	08 f0       	brcs	.+2      	; 0x2ec <KEYPAD_getPressedKey+0x168>
 2ea:	a4 cf       	rjmp	.-184    	; 0x234 <KEYPAD_getPressedKey+0xb0>
 2ec:	a1 cf       	rjmp	.-190    	; 0x230 <KEYPAD_getPressedKey+0xac>
			DIO_U8SetPinValue(&rowPins[row]);

		}
		/*end of for loop*/
	}
}
 2ee:	a1 96       	adiw	r28, 0x21	; 33
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	ff 90       	pop	r15
 304:	ef 90       	pop	r14
 306:	df 90       	pop	r13
 308:	cf 90       	pop	r12
 30a:	bf 90       	pop	r11
 30c:	af 90       	pop	r10
 30e:	9f 90       	pop	r9
 310:	08 95       	ret

00000312 <H_LCD_void_latchByte>:
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	64 97       	sbiw	r28, 0x14	; 20
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	08 2f       	mov	r16, r24
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	89 83       	std	Y+1, r24	; 0x01
 330:	1a 82       	std	Y+2, r1	; 0x02
 332:	8b 83       	std	Y+3, r24	; 0x03
 334:	04 fb       	bst	r16, 4
 336:	99 27       	eor	r25, r25
 338:	90 f9       	bld	r25, 0
 33a:	9c 83       	std	Y+4, r25	; 0x04
 33c:	8d 83       	std	Y+5, r24	; 0x05
 33e:	8e 83       	std	Y+6, r24	; 0x06
 340:	8f 83       	std	Y+7, r24	; 0x07
 342:	05 fb       	bst	r16, 5
 344:	99 27       	eor	r25, r25
 346:	90 f9       	bld	r25, 0
 348:	98 87       	std	Y+8, r25	; 0x08
 34a:	89 87       	std	Y+9, r24	; 0x09
 34c:	92 e0       	ldi	r25, 0x02	; 2
 34e:	9a 87       	std	Y+10, r25	; 0x0a
 350:	8b 87       	std	Y+11, r24	; 0x0b
 352:	06 fb       	bst	r16, 6
 354:	99 27       	eor	r25, r25
 356:	90 f9       	bld	r25, 0
 358:	9c 87       	std	Y+12, r25	; 0x0c
 35a:	8d 87       	std	Y+13, r24	; 0x0d
 35c:	94 e0       	ldi	r25, 0x04	; 4
 35e:	9e 87       	std	Y+14, r25	; 0x0e
 360:	8f 87       	std	Y+15, r24	; 0x0f
 362:	80 2f       	mov	r24, r16
 364:	88 1f       	adc	r24, r24
 366:	88 27       	eor	r24, r24
 368:	88 1f       	adc	r24, r24
 36a:	88 8b       	std	Y+16, r24	; 0x10
 36c:	10 e0       	ldi	r17, 0x00	; 0
 36e:	0f c0       	rjmp	.+30     	; 0x38e <H_LCD_void_latchByte+0x7c>
 370:	81 2f       	mov	r24, r17
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	2c 0f       	add	r18, r28
 382:	3d 1f       	adc	r19, r29
 384:	82 0f       	add	r24, r18
 386:	93 1f       	adc	r25, r19
 388:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_U8SetPinValue>
 38c:	1f 5f       	subi	r17, 0xFF	; 255
 38e:	14 30       	cpi	r17, 0x04	; 4
 390:	78 f3       	brcs	.-34     	; 0x370 <H_LCD_void_latchByte+0x5e>
 392:	19 8a       	std	Y+17, r1	; 0x11
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	8a 8b       	std	Y+18, r24	; 0x12
 398:	1c 8a       	std	Y+20, r1	; 0x14
 39a:	89 ef       	ldi	r24, 0xF9	; 249
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <H_LCD_void_latchByte+0x8c>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <H_LCD_void_latchByte+0x92>
 3a4:	00 00       	nop
 3a6:	ce 01       	movw	r24, r28
 3a8:	41 96       	adiw	r24, 0x11	; 17
 3aa:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_U8SetPinValue>
 3ae:	e9 ef       	ldi	r30, 0xF9	; 249
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	31 97       	sbiw	r30, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <H_LCD_void_latchByte+0xa0>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <H_LCD_void_latchByte+0xa6>
 3b8:	00 00       	nop
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	8c 8b       	std	Y+20, r24	; 0x14
 3be:	ce 01       	movw	r24, r28
 3c0:	41 96       	adiw	r24, 0x11	; 17
 3c2:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_U8SetPinValue>
 3c6:	89 ef       	ldi	r24, 0xF9	; 249
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <H_LCD_void_latchByte+0xb8>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <H_LCD_void_latchByte+0xbe>
 3d0:	00 00       	nop
 3d2:	10 e0       	ldi	r17, 0x00	; 0
 3d4:	1a c0       	rjmp	.+52     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3d6:	81 2f       	mov	r24, r17
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	20 2f       	mov	r18, r16
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	01 2e       	mov	r0, r17
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <H_LCD_void_latchByte+0xd4>
 3e2:	35 95       	asr	r19
 3e4:	27 95       	ror	r18
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <H_LCD_void_latchByte+0xd0>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	e1 e0       	ldi	r30, 0x01	; 1
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	ec 0f       	add	r30, r28
 3f8:	fd 1f       	adc	r31, r29
 3fa:	8e 0f       	add	r24, r30
 3fc:	9f 1f       	adc	r25, r31
 3fe:	21 70       	andi	r18, 0x01	; 1
 400:	fc 01       	movw	r30, r24
 402:	23 83       	std	Z+3, r18	; 0x03
 404:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_U8SetPinValue>
 408:	1f 5f       	subi	r17, 0xFF	; 255
 40a:	14 30       	cpi	r17, 0x04	; 4
 40c:	20 f3       	brcs	.-56     	; 0x3d6 <H_LCD_void_latchByte+0xc4>
 40e:	89 ef       	ldi	r24, 0xF9	; 249
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 418:	00 00       	nop
 41a:	1c 8a       	std	Y+20, r1	; 0x14
 41c:	ce 01       	movw	r24, r28
 41e:	41 96       	adiw	r24, 0x11	; 17
 420:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_U8SetPinValue>
 424:	e9 ef       	ldi	r30, 0xF9	; 249
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	31 97       	sbiw	r30, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
 430:	64 96       	adiw	r28, 0x14	; 20
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	08 95       	ret

00000446 <H_LCD_void_sendCommand>:
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
 452:	28 97       	sbiw	r28, 0x08	; 8
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
 45e:	08 2f       	mov	r16, r24
 460:	88 e0       	ldi	r24, 0x08	; 8
 462:	e0 e7       	ldi	r30, 0x70	; 112
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	de 01       	movw	r26, r28
 468:	11 96       	adiw	r26, 0x01	; 1
 46a:	01 90       	ld	r0, Z+
 46c:	0d 92       	st	X+, r0
 46e:	8a 95       	dec	r24
 470:	e1 f7       	brne	.-8      	; 0x46a <H_LCD_void_sendCommand+0x24>
 472:	10 e0       	ldi	r17, 0x00	; 0
 474:	15 c0       	rjmp	.+42     	; 0x4a0 <H_LCD_void_sendCommand+0x5a>
 476:	81 2f       	mov	r24, r17
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	21 e0       	ldi	r18, 0x01	; 1
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	2c 0f       	add	r18, r28
 488:	3d 1f       	adc	r19, r29
 48a:	82 0f       	add	r24, r18
 48c:	93 1f       	adc	r25, r19
 48e:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_U8SetPinValue>
 492:	89 ef       	ldi	r24, 0xF9	; 249
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <H_LCD_void_sendCommand+0x50>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <H_LCD_void_sendCommand+0x56>
 49c:	00 00       	nop
 49e:	1f 5f       	subi	r17, 0xFF	; 255
 4a0:	12 30       	cpi	r17, 0x02	; 2
 4a2:	48 f3       	brcs	.-46     	; 0x476 <H_LCD_void_sendCommand+0x30>
 4a4:	89 ef       	ldi	r24, 0xF9	; 249
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <H_LCD_void_sendCommand+0x62>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <H_LCD_void_sendCommand+0x68>
 4ae:	00 00       	nop
 4b0:	80 2f       	mov	r24, r16
 4b2:	0e 94 89 01 	call	0x312	; 0x312 <H_LCD_void_latchByte>
 4b6:	28 96       	adiw	r28, 0x08	; 8
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	f8 94       	cli
 4bc:	de bf       	out	0x3e, r29	; 62
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	cd bf       	out	0x3d, r28	; 61
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	1f 91       	pop	r17
 4c8:	0f 91       	pop	r16
 4ca:	08 95       	ret

000004cc <H_LCD_void_Init>:
 4cc:	1f 93       	push	r17
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	cd b7       	in	r28, 0x3d	; 61
 4d4:	de b7       	in	r29, 0x3e	; 62
 4d6:	68 97       	sbiw	r28, 0x18	; 24
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	f8 94       	cli
 4dc:	de bf       	out	0x3e, r29	; 62
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	cd bf       	out	0x3d, r28	; 61
 4e2:	fe 01       	movw	r30, r28
 4e4:	31 96       	adiw	r30, 0x01	; 1
 4e6:	88 e0       	ldi	r24, 0x08	; 8
 4e8:	df 01       	movw	r26, r30
 4ea:	1d 92       	st	X+, r1
 4ec:	8a 95       	dec	r24
 4ee:	e9 f7       	brne	.-6      	; 0x4ea <H_LCD_void_Init+0x1e>
 4f0:	83 e0       	ldi	r24, 0x03	; 3
 4f2:	8a 83       	std	Y+2, r24	; 0x02
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	8b 83       	std	Y+3, r24	; 0x03
 4f8:	92 e0       	ldi	r25, 0x02	; 2
 4fa:	9e 83       	std	Y+6, r25	; 0x06
 4fc:	8f 83       	std	Y+7, r24	; 0x07
 4fe:	10 e0       	ldi	r17, 0x00	; 0
 500:	0f c0       	rjmp	.+30     	; 0x520 <H_LCD_void_Init+0x54>
 502:	81 2f       	mov	r24, r17
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	21 e0       	ldi	r18, 0x01	; 1
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	2c 0f       	add	r18, r28
 514:	3d 1f       	adc	r19, r29
 516:	82 0f       	add	r24, r18
 518:	93 1f       	adc	r25, r19
 51a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_U8SetPinDirection>
 51e:	1f 5f       	subi	r17, 0xFF	; 255
 520:	12 30       	cpi	r17, 0x02	; 2
 522:	78 f3       	brcs	.-34     	; 0x502 <H_LCD_void_Init+0x36>
 524:	fe 01       	movw	r30, r28
 526:	39 96       	adiw	r30, 0x09	; 9
 528:	80 e1       	ldi	r24, 0x10	; 16
 52a:	df 01       	movw	r26, r30
 52c:	1d 92       	st	X+, r1
 52e:	8a 95       	dec	r24
 530:	e9 f7       	brne	.-6      	; 0x52c <H_LCD_void_Init+0x60>
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	89 87       	std	Y+9, r24	; 0x09
 536:	8b 87       	std	Y+11, r24	; 0x0b
 538:	8d 87       	std	Y+13, r24	; 0x0d
 53a:	8e 87       	std	Y+14, r24	; 0x0e
 53c:	8f 87       	std	Y+15, r24	; 0x0f
 53e:	89 8b       	std	Y+17, r24	; 0x11
 540:	92 e0       	ldi	r25, 0x02	; 2
 542:	9a 8b       	std	Y+18, r25	; 0x12
 544:	8b 8b       	std	Y+19, r24	; 0x13
 546:	8d 8b       	std	Y+21, r24	; 0x15
 548:	94 e0       	ldi	r25, 0x04	; 4
 54a:	9e 8b       	std	Y+22, r25	; 0x16
 54c:	8f 8b       	std	Y+23, r24	; 0x17
 54e:	10 e0       	ldi	r17, 0x00	; 0
 550:	0f c0       	rjmp	.+30     	; 0x570 <H_LCD_void_Init+0xa4>
 552:	81 2f       	mov	r24, r17
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	29 e0       	ldi	r18, 0x09	; 9
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	2c 0f       	add	r18, r28
 564:	3d 1f       	adc	r19, r29
 566:	82 0f       	add	r24, r18
 568:	93 1f       	adc	r25, r19
 56a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <DIO_U8SetPinDirection>
 56e:	1f 5f       	subi	r17, 0xFF	; 255
 570:	14 30       	cpi	r17, 0x04	; 4
 572:	78 f3       	brcs	.-34     	; 0x552 <H_LCD_void_Init+0x86>
 574:	82 e0       	ldi	r24, 0x02	; 2
 576:	0e 94 23 02 	call	0x446	; 0x446 <H_LCD_void_sendCommand>
 57a:	89 ef       	ldi	r24, 0xF9	; 249
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <H_LCD_void_Init+0xb2>
 582:	00 c0       	rjmp	.+0      	; 0x584 <H_LCD_void_Init+0xb8>
 584:	00 00       	nop
 586:	88 e2       	ldi	r24, 0x28	; 40
 588:	0e 94 23 02 	call	0x446	; 0x446 <H_LCD_void_sendCommand>
 58c:	a9 ef       	ldi	r26, 0xF9	; 249
 58e:	b0 e0       	ldi	r27, 0x00	; 0
 590:	11 97       	sbiw	r26, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <H_LCD_void_Init+0xc4>
 594:	00 c0       	rjmp	.+0      	; 0x596 <H_LCD_void_Init+0xca>
 596:	00 00       	nop
 598:	8f e0       	ldi	r24, 0x0F	; 15
 59a:	0e 94 23 02 	call	0x446	; 0x446 <H_LCD_void_sendCommand>
 59e:	89 ef       	ldi	r24, 0xF9	; 249
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <H_LCD_void_Init+0xd6>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <H_LCD_void_Init+0xdc>
 5a8:	00 00       	nop
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	0e 94 23 02 	call	0x446	; 0x446 <H_LCD_void_sendCommand>
 5b0:	a3 ef       	ldi	r26, 0xF3	; 243
 5b2:	b1 e0       	ldi	r27, 0x01	; 1
 5b4:	11 97       	sbiw	r26, 0x01	; 1
 5b6:	f1 f7       	brne	.-4      	; 0x5b4 <H_LCD_void_Init+0xe8>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <H_LCD_void_Init+0xee>
 5ba:	00 00       	nop
 5bc:	86 e0       	ldi	r24, 0x06	; 6
 5be:	0e 94 23 02 	call	0x446	; 0x446 <H_LCD_void_sendCommand>
 5c2:	68 96       	adiw	r28, 0x18	; 24
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	1f 91       	pop	r17
 5d4:	08 95       	ret

000005d6 <H_LCD_void_sendData>:
 5d6:	0f 93       	push	r16
 5d8:	1f 93       	push	r17
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
 5e2:	28 97       	sbiw	r28, 0x08	; 8
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	de bf       	out	0x3e, r29	; 62
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	cd bf       	out	0x3d, r28	; 61
 5ee:	08 2f       	mov	r16, r24
 5f0:	88 e0       	ldi	r24, 0x08	; 8
 5f2:	e8 e7       	ldi	r30, 0x78	; 120
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	de 01       	movw	r26, r28
 5f8:	11 96       	adiw	r26, 0x01	; 1
 5fa:	01 90       	ld	r0, Z+
 5fc:	0d 92       	st	X+, r0
 5fe:	8a 95       	dec	r24
 600:	e1 f7       	brne	.-8      	; 0x5fa <H_LCD_void_sendData+0x24>
 602:	10 e0       	ldi	r17, 0x00	; 0
 604:	15 c0       	rjmp	.+42     	; 0x630 <H_LCD_void_sendData+0x5a>
 606:	81 2f       	mov	r24, r17
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	21 e0       	ldi	r18, 0x01	; 1
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	2c 0f       	add	r18, r28
 618:	3d 1f       	adc	r19, r29
 61a:	82 0f       	add	r24, r18
 61c:	93 1f       	adc	r25, r19
 61e:	0e 94 af 03 	call	0x75e	; 0x75e <DIO_U8SetPinValue>
 622:	89 ef       	ldi	r24, 0xF9	; 249
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <H_LCD_void_sendData+0x50>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <H_LCD_void_sendData+0x56>
 62c:	00 00       	nop
 62e:	1f 5f       	subi	r17, 0xFF	; 255
 630:	12 30       	cpi	r17, 0x02	; 2
 632:	48 f3       	brcs	.-46     	; 0x606 <H_LCD_void_sendData+0x30>
 634:	89 ef       	ldi	r24, 0xF9	; 249
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <H_LCD_void_sendData+0x62>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <H_LCD_void_sendData+0x68>
 63e:	00 00       	nop
 640:	80 2f       	mov	r24, r16
 642:	0e 94 89 01 	call	0x312	; 0x312 <H_LCD_void_latchByte>
 646:	28 96       	adiw	r28, 0x08	; 8
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	f8 94       	cli
 64c:	de bf       	out	0x3e, r29	; 62
 64e:	0f be       	out	0x3f, r0	; 63
 650:	cd bf       	out	0x3d, r28	; 61
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	08 95       	ret

0000065c <H_LCD_void_sendString>:
 65c:	0f 93       	push	r16
 65e:	1f 93       	push	r17
 660:	cf 93       	push	r28
 662:	8c 01       	movw	r16, r24
 664:	c0 e0       	ldi	r28, 0x00	; 0
 666:	03 c0       	rjmp	.+6      	; 0x66e <H_LCD_void_sendString+0x12>
 668:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <H_LCD_void_sendData>
 66c:	cf 5f       	subi	r28, 0xFF	; 255
 66e:	f8 01       	movw	r30, r16
 670:	ec 0f       	add	r30, r28
 672:	f1 1d       	adc	r31, r1
 674:	80 81       	ld	r24, Z
 676:	81 11       	cpse	r24, r1
 678:	f7 cf       	rjmp	.-18     	; 0x668 <H_LCD_void_sendString+0xc>
 67a:	cf 91       	pop	r28
 67c:	1f 91       	pop	r17
 67e:	0f 91       	pop	r16
 680:	08 95       	ret

00000682 <H_LCD_void_gotoXY>:
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	39 f0       	breq	.+14     	; 0x694 <H_LCD_void_gotoXY+0x12>
 686:	58 f0       	brcs	.+22     	; 0x69e <H_LCD_void_gotoXY+0x1c>
 688:	82 30       	cpi	r24, 0x02	; 2
 68a:	31 f0       	breq	.+12     	; 0x698 <H_LCD_void_gotoXY+0x16>
 68c:	83 30       	cpi	r24, 0x03	; 3
 68e:	31 f0       	breq	.+12     	; 0x69c <H_LCD_void_gotoXY+0x1a>
 690:	60 e0       	ldi	r22, 0x00	; 0
 692:	05 c0       	rjmp	.+10     	; 0x69e <H_LCD_void_gotoXY+0x1c>
 694:	60 5c       	subi	r22, 0xC0	; 192
 696:	03 c0       	rjmp	.+6      	; 0x69e <H_LCD_void_gotoXY+0x1c>
 698:	60 5f       	subi	r22, 0xF0	; 240
 69a:	01 c0       	rjmp	.+2      	; 0x69e <H_LCD_void_gotoXY+0x1c>
 69c:	60 5b       	subi	r22, 0xB0	; 176
 69e:	86 2f       	mov	r24, r22
 6a0:	80 68       	ori	r24, 0x80	; 128
 6a2:	0e 94 23 02 	call	0x446	; 0x446 <H_LCD_void_sendCommand>
 6a6:	08 95       	ret

000006a8 <H_LCD_void_clearScreen>:
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	0e 94 23 02 	call	0x446	; 0x446 <H_LCD_void_sendCommand>
 6ae:	08 95       	ret

000006b0 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 6b0:	24 b1       	in	r18, 0x04	; 4
 6b2:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 6b4:	00 24       	eor	r0, r0
 6b6:	22 0f       	add	r18, r18
 6b8:	33 1f       	adc	r19, r19
 6ba:	00 1c       	adc	r0, r0
 6bc:	22 0f       	add	r18, r18
 6be:	33 1f       	adc	r19, r19
 6c0:	00 1c       	adc	r0, r0
 6c2:	23 2f       	mov	r18, r19
 6c4:	30 2d       	mov	r19, r0
 6c6:	85 b1       	in	r24, 0x05	; 5
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 6d2:	e0 91 f6 00 	lds	r30, 0x00F6	; 0x8000f6 <ADC_callBack>
 6d6:	f0 91 f7 00 	lds	r31, 0x00F7	; 0x8000f7 <ADC_callBack+0x1>
 6da:	82 2b       	or	r24, r18
 6dc:	93 2b       	or	r25, r19
 6de:	09 95       	icall
 6e0:	08 95       	ret

000006e2 <DIO_U8SetPinDirection>:
        *writeRegisters[port] = ~(*writeRegisters[port]);
        return NO_ERROR;
    } else {
        return ERROR;
    }
}
 6e2:	dc 01       	movw	r26, r24
 6e4:	ec 91       	ld	r30, X
 6e6:	e4 30       	cpi	r30, 0x04	; 4
 6e8:	a0 f5       	brcc	.+104    	; 0x752 <DIO_U8SetPinDirection+0x70>
 6ea:	11 96       	adiw	r26, 0x01	; 1
 6ec:	2c 91       	ld	r18, X
 6ee:	11 97       	sbiw	r26, 0x01	; 1
 6f0:	28 30       	cpi	r18, 0x08	; 8
 6f2:	88 f5       	brcc	.+98     	; 0x756 <DIO_U8SetPinDirection+0x74>
 6f4:	12 96       	adiw	r26, 0x02	; 2
 6f6:	8c 91       	ld	r24, X
 6f8:	81 11       	cpse	r24, r1
 6fa:	15 c0       	rjmp	.+42     	; 0x726 <DIO_U8SetPinDirection+0x44>
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	ee 0f       	add	r30, r30
 700:	ff 1f       	adc	r31, r31
 702:	e5 51       	subi	r30, 0x15	; 21
 704:	ff 4f       	sbci	r31, 0xFF	; 255
 706:	01 90       	ld	r0, Z+
 708:	f0 81       	ld	r31, Z
 70a:	e0 2d       	mov	r30, r0
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_U8SetPinDirection+0x34>
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	2a 95       	dec	r18
 718:	e2 f7       	brpl	.-8      	; 0x712 <DIO_U8SetPinDirection+0x30>
 71a:	80 95       	com	r24
 71c:	90 81       	ld	r25, Z
 71e:	89 23       	and	r24, r25
 720:	80 83       	st	Z, r24
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	08 95       	ret
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	c1 f4       	brne	.+48     	; 0x75a <DIO_U8SetPinDirection+0x78>
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	ee 0f       	add	r30, r30
 72e:	ff 1f       	adc	r31, r31
 730:	e5 51       	subi	r30, 0x15	; 21
 732:	ff 4f       	sbci	r31, 0xFF	; 255
 734:	01 90       	ld	r0, Z+
 736:	f0 81       	ld	r31, Z
 738:	e0 2d       	mov	r30, r0
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	02 c0       	rjmp	.+4      	; 0x744 <DIO_U8SetPinDirection+0x62>
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	2a 95       	dec	r18
 746:	e2 f7       	brpl	.-8      	; 0x740 <DIO_U8SetPinDirection+0x5e>
 748:	90 81       	ld	r25, Z
 74a:	89 2b       	or	r24, r25
 74c:	80 83       	st	Z, r24
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	08 95       	ret
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	08 95       	ret
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	08 95       	ret
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	08 95       	ret

0000075e <DIO_U8SetPinValue>:
 75e:	00 97       	sbiw	r24, 0x00	; 0
 760:	c1 f1       	breq	.+112    	; 0x7d2 <DIO_U8SetPinValue+0x74>
 762:	dc 01       	movw	r26, r24
 764:	ec 91       	ld	r30, X
 766:	e4 30       	cpi	r30, 0x04	; 4
 768:	b0 f5       	brcc	.+108    	; 0x7d6 <DIO_U8SetPinValue+0x78>
 76a:	11 96       	adiw	r26, 0x01	; 1
 76c:	2c 91       	ld	r18, X
 76e:	11 97       	sbiw	r26, 0x01	; 1
 770:	28 30       	cpi	r18, 0x08	; 8
 772:	98 f5       	brcc	.+102    	; 0x7da <DIO_U8SetPinValue+0x7c>
 774:	13 96       	adiw	r26, 0x03	; 3
 776:	8c 91       	ld	r24, X
 778:	81 30       	cpi	r24, 0x01	; 1
 77a:	a1 f4       	brne	.+40     	; 0x7a4 <DIO_U8SetPinValue+0x46>
 77c:	f0 e0       	ldi	r31, 0x00	; 0
 77e:	ee 0f       	add	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	ed 51       	subi	r30, 0x1D	; 29
 784:	ff 4f       	sbci	r31, 0xFF	; 255
 786:	01 90       	ld	r0, Z+
 788:	f0 81       	ld	r31, Z
 78a:	e0 2d       	mov	r30, r0
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	02 c0       	rjmp	.+4      	; 0x796 <DIO_U8SetPinValue+0x38>
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	2a 95       	dec	r18
 798:	e2 f7       	brpl	.-8      	; 0x792 <DIO_U8SetPinValue+0x34>
 79a:	90 81       	ld	r25, Z
 79c:	89 2b       	or	r24, r25
 79e:	80 83       	st	Z, r24
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	08 95       	ret
 7a4:	81 11       	cpse	r24, r1
 7a6:	1b c0       	rjmp	.+54     	; 0x7de <DIO_U8SetPinValue+0x80>
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	ee 0f       	add	r30, r30
 7ac:	ff 1f       	adc	r31, r31
 7ae:	ed 51       	subi	r30, 0x1D	; 29
 7b0:	ff 4f       	sbci	r31, 0xFF	; 255
 7b2:	01 90       	ld	r0, Z+
 7b4:	f0 81       	ld	r31, Z
 7b6:	e0 2d       	mov	r30, r0
 7b8:	81 e0       	ldi	r24, 0x01	; 1
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <DIO_U8SetPinValue+0x64>
 7be:	88 0f       	add	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	2a 95       	dec	r18
 7c4:	e2 f7       	brpl	.-8      	; 0x7be <DIO_U8SetPinValue+0x60>
 7c6:	80 95       	com	r24
 7c8:	90 81       	ld	r25, Z
 7ca:	89 23       	and	r24, r25
 7cc:	80 83       	st	Z, r24
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	08 95       	ret
 7d2:	81 e0       	ldi	r24, 0x01	; 1
 7d4:	08 95       	ret
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	08 95       	ret
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	08 95       	ret
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	08 95       	ret

000007e2 <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(const DIO_Config* config, u8* value) {
    if (config != NULL && value != NULL) {
 7e2:	00 97       	sbiw	r24, 0x00	; 0
 7e4:	f9 f0       	breq	.+62     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 7e6:	61 15       	cp	r22, r1
 7e8:	71 05       	cpc	r23, r1
 7ea:	f1 f0       	breq	.+60     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 7ec:	dc 01       	movw	r26, r24
 7ee:	ec 91       	ld	r30, X
 7f0:	e4 30       	cpi	r30, 0x04	; 4
 7f2:	e0 f4       	brcc	.+56     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7f4:	11 96       	adiw	r26, 0x01	; 1
 7f6:	2c 91       	ld	r18, X
 7f8:	28 30       	cpi	r18, 0x08	; 8
 7fa:	d0 f4       	brcc	.+52     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
            *value = GET_BIT(*readRegisters[config->port], config->pin);
 7fc:	f0 e0       	ldi	r31, 0x00	; 0
 7fe:	ee 0f       	add	r30, r30
 800:	ff 1f       	adc	r31, r31
 802:	e5 52       	subi	r30, 0x25	; 37
 804:	ff 4f       	sbci	r31, 0xFF	; 255
 806:	01 90       	ld	r0, Z+
 808:	f0 81       	ld	r31, Z
 80a:	e0 2d       	mov	r30, r0
 80c:	80 81       	ld	r24, Z
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	02 c0       	rjmp	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 812:	95 95       	asr	r25
 814:	87 95       	ror	r24
 816:	2a 95       	dec	r18
 818:	e2 f7       	brpl	.-8      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 81a:	81 70       	andi	r24, 0x01	; 1
 81c:	fb 01       	movw	r30, r22
 81e:	80 83       	st	Z, r24
            return NO_ERROR;
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	08 95       	ret
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	08 95       	ret
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	08 95       	ret
    if (config != NULL && value != NULL) {
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
            *value = GET_BIT(*readRegisters[config->port], config->pin);
            return NO_ERROR;
        } else {
            return ERROR;
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	08 95       	ret
 830:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        return ERROR;
    }
}
 832:	08 95       	ret

00000834 <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 834:	1f 92       	push	r1
 836:	0f 92       	push	r0
 838:	0f b6       	in	r0, 0x3f	; 63
 83a:	0f 92       	push	r0
 83c:	11 24       	eor	r1, r1
 83e:	2f 93       	push	r18
 840:	3f 93       	push	r19
 842:	4f 93       	push	r20
 844:	5f 93       	push	r21
 846:	6f 93       	push	r22
 848:	7f 93       	push	r23
 84a:	8f 93       	push	r24
 84c:	9f 93       	push	r25
 84e:	af 93       	push	r26
 850:	bf 93       	push	r27
 852:	ef 93       	push	r30
 854:	ff 93       	push	r31
	if(Action[0]!= NULL){
 856:	e0 91 f8 00 	lds	r30, 0x00F8	; 0x8000f8 <Action>
 85a:	f0 91 f9 00 	lds	r31, 0x00F9	; 0x8000f9 <Action+0x1>
 85e:	30 97       	sbiw	r30, 0x00	; 0
 860:	09 f0       	breq	.+2      	; 0x864 <__stack+0x5>
		Action[0]();
 862:	09 95       	icall
	}
}
 864:	ff 91       	pop	r31
 866:	ef 91       	pop	r30
 868:	bf 91       	pop	r27
 86a:	af 91       	pop	r26
 86c:	9f 91       	pop	r25
 86e:	8f 91       	pop	r24
 870:	7f 91       	pop	r23
 872:	6f 91       	pop	r22
 874:	5f 91       	pop	r21
 876:	4f 91       	pop	r20
 878:	3f 91       	pop	r19
 87a:	2f 91       	pop	r18
 87c:	0f 90       	pop	r0
 87e:	0f be       	out	0x3f, r0	; 63
 880:	0f 90       	pop	r0
 882:	1f 90       	pop	r1
 884:	18 95       	reti

00000886 <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 886:	1f 92       	push	r1
 888:	0f 92       	push	r0
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	0f 92       	push	r0
 88e:	11 24       	eor	r1, r1
 890:	2f 93       	push	r18
 892:	3f 93       	push	r19
 894:	4f 93       	push	r20
 896:	5f 93       	push	r21
 898:	6f 93       	push	r22
 89a:	7f 93       	push	r23
 89c:	8f 93       	push	r24
 89e:	9f 93       	push	r25
 8a0:	af 93       	push	r26
 8a2:	bf 93       	push	r27
 8a4:	ef 93       	push	r30
 8a6:	ff 93       	push	r31
	if(Action[1]!= NULL){
 8a8:	e0 91 fa 00 	lds	r30, 0x00FA	; 0x8000fa <Action+0x2>
 8ac:	f0 91 fb 00 	lds	r31, 0x00FB	; 0x8000fb <Action+0x3>
 8b0:	30 97       	sbiw	r30, 0x00	; 0
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <__vector_2+0x30>
		Action[1]();
 8b4:	09 95       	icall
	}
}
 8b6:	ff 91       	pop	r31
 8b8:	ef 91       	pop	r30
 8ba:	bf 91       	pop	r27
 8bc:	af 91       	pop	r26
 8be:	9f 91       	pop	r25
 8c0:	8f 91       	pop	r24
 8c2:	7f 91       	pop	r23
 8c4:	6f 91       	pop	r22
 8c6:	5f 91       	pop	r21
 8c8:	4f 91       	pop	r20
 8ca:	3f 91       	pop	r19
 8cc:	2f 91       	pop	r18
 8ce:	0f 90       	pop	r0
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	0f 90       	pop	r0
 8d4:	1f 90       	pop	r1
 8d6:	18 95       	reti

000008d8 <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 8d8:	1f 92       	push	r1
 8da:	0f 92       	push	r0
 8dc:	0f b6       	in	r0, 0x3f	; 63
 8de:	0f 92       	push	r0
 8e0:	11 24       	eor	r1, r1
 8e2:	2f 93       	push	r18
 8e4:	3f 93       	push	r19
 8e6:	4f 93       	push	r20
 8e8:	5f 93       	push	r21
 8ea:	6f 93       	push	r22
 8ec:	7f 93       	push	r23
 8ee:	8f 93       	push	r24
 8f0:	9f 93       	push	r25
 8f2:	af 93       	push	r26
 8f4:	bf 93       	push	r27
 8f6:	ef 93       	push	r30
 8f8:	ff 93       	push	r31
	if(Action[2]!= NULL){
 8fa:	e0 91 fc 00 	lds	r30, 0x00FC	; 0x8000fc <Action+0x4>
 8fe:	f0 91 fd 00 	lds	r31, 0x00FD	; 0x8000fd <Action+0x5>
 902:	30 97       	sbiw	r30, 0x00	; 0
 904:	09 f0       	breq	.+2      	; 0x908 <__vector_3+0x30>
		Action[2]();
 906:	09 95       	icall
	}
}
 908:	ff 91       	pop	r31
 90a:	ef 91       	pop	r30
 90c:	bf 91       	pop	r27
 90e:	af 91       	pop	r26
 910:	9f 91       	pop	r25
 912:	8f 91       	pop	r24
 914:	7f 91       	pop	r23
 916:	6f 91       	pop	r22
 918:	5f 91       	pop	r21
 91a:	4f 91       	pop	r20
 91c:	3f 91       	pop	r19
 91e:	2f 91       	pop	r18
 920:	0f 90       	pop	r0
 922:	0f be       	out	0x3f, r0	; 63
 924:	0f 90       	pop	r0
 926:	1f 90       	pop	r1
 928:	18 95       	reti

0000092a <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 92a:	1f 92       	push	r1
 92c:	0f 92       	push	r0
 92e:	0f b6       	in	r0, 0x3f	; 63
 930:	0f 92       	push	r0
 932:	11 24       	eor	r1, r1
 934:	2f 93       	push	r18
 936:	3f 93       	push	r19
 938:	4f 93       	push	r20
 93a:	5f 93       	push	r21
 93c:	6f 93       	push	r22
 93e:	7f 93       	push	r23
 940:	8f 93       	push	r24
 942:	9f 93       	push	r25
 944:	af 93       	push	r26
 946:	bf 93       	push	r27
 948:	ef 93       	push	r30
 94a:	ff 93       	push	r31
	if(Action_Spi != NULL){
 94c:	e0 91 fe 00 	lds	r30, 0x00FE	; 0x8000fe <Action_Spi>
 950:	f0 91 ff 00 	lds	r31, 0x00FF	; 0x8000ff <Action_Spi+0x1>
 954:	30 97       	sbiw	r30, 0x00	; 0
 956:	11 f0       	breq	.+4      	; 0x95c <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 958:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 95a:	09 95       	icall
	}
 95c:	ff 91       	pop	r31
 95e:	ef 91       	pop	r30
 960:	bf 91       	pop	r27
 962:	af 91       	pop	r26
 964:	9f 91       	pop	r25
 966:	8f 91       	pop	r24
 968:	7f 91       	pop	r23
 96a:	6f 91       	pop	r22
 96c:	5f 91       	pop	r21
 96e:	4f 91       	pop	r20
 970:	3f 91       	pop	r19
 972:	2f 91       	pop	r18
 974:	0f 90       	pop	r0
 976:	0f be       	out	0x3f, r0	; 63
 978:	0f 90       	pop	r0
 97a:	1f 90       	pop	r1
 97c:	18 95       	reti

0000097e <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 97e:	1f 92       	push	r1
 980:	0f 92       	push	r0
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	0f 92       	push	r0
 986:	11 24       	eor	r1, r1
 988:	2f 93       	push	r18
 98a:	3f 93       	push	r19
 98c:	4f 93       	push	r20
 98e:	5f 93       	push	r21
 990:	6f 93       	push	r22
 992:	7f 93       	push	r23
 994:	8f 93       	push	r24
 996:	9f 93       	push	r25
 998:	af 93       	push	r26
 99a:	bf 93       	push	r27
 99c:	ef 93       	push	r30
 99e:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 9a0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Action_Timer>
 9a4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Action_Timer+0x1>
 9a8:	89 2b       	or	r24, r25
 9aa:	89 f1       	breq	.+98     	; 0xa0e <__vector_11+0x90>
		counter++;
 9ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <counter.1685>
 9b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <counter.1685+0x1>
 9b4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <counter.1685+0x2>
 9b8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <counter.1685+0x3>
 9bc:	01 96       	adiw	r24, 0x01	; 1
 9be:	a1 1d       	adc	r26, r1
 9c0:	b1 1d       	adc	r27, r1
 9c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <counter.1685>
 9c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <counter.1685+0x1>
 9ca:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <counter.1685+0x2>
 9ce:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <counter.1685+0x3>
		if(counter == numOverflows){
 9d2:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <numOverflows>
 9d6:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <numOverflows+0x1>
 9da:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <numOverflows+0x2>
 9de:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <numOverflows+0x3>
 9e2:	84 17       	cp	r24, r20
 9e4:	95 07       	cpc	r25, r21
 9e6:	a6 07       	cpc	r26, r22
 9e8:	b7 07       	cpc	r27, r23
 9ea:	89 f4       	brne	.+34     	; 0xa0e <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 9ec:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <remainingCounts>
 9f0:	81 95       	neg	r24
 9f2:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 9f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <counter.1685>
 9f8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <counter.1685+0x1>
 9fc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <counter.1685+0x2>
 a00:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <counter.1685+0x3>
			Action_Timer[0]();
 a04:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <Action_Timer>
 a08:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <Action_Timer+0x1>
 a0c:	09 95       	icall
		}
		
	}
}
 a0e:	ff 91       	pop	r31
 a10:	ef 91       	pop	r30
 a12:	bf 91       	pop	r27
 a14:	af 91       	pop	r26
 a16:	9f 91       	pop	r25
 a18:	8f 91       	pop	r24
 a1a:	7f 91       	pop	r23
 a1c:	6f 91       	pop	r22
 a1e:	5f 91       	pop	r21
 a20:	4f 91       	pop	r20
 a22:	3f 91       	pop	r19
 a24:	2f 91       	pop	r18
 a26:	0f 90       	pop	r0
 a28:	0f be       	out	0x3f, r0	; 63
 a2a:	0f 90       	pop	r0
 a2c:	1f 90       	pop	r1
 a2e:	18 95       	reti

00000a30 <__vector_10>:

ISR(TIMER0_COMP_vect){
 a30:	1f 92       	push	r1
 a32:	0f 92       	push	r0
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	0f 92       	push	r0
 a38:	11 24       	eor	r1, r1
 a3a:	2f 93       	push	r18
 a3c:	3f 93       	push	r19
 a3e:	4f 93       	push	r20
 a40:	5f 93       	push	r21
 a42:	6f 93       	push	r22
 a44:	7f 93       	push	r23
 a46:	8f 93       	push	r24
 a48:	9f 93       	push	r25
 a4a:	af 93       	push	r26
 a4c:	bf 93       	push	r27
 a4e:	ef 93       	push	r30
 a50:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 a52:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <Action_Timer+0x2>
 a56:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <Action_Timer+0x3>
 a5a:	30 97       	sbiw	r30, 0x00	; 0
 a5c:	09 f0       	breq	.+2      	; 0xa60 <__vector_10+0x30>
		Action_Timer[1]();
 a5e:	09 95       	icall
		
	}
}
 a60:	ff 91       	pop	r31
 a62:	ef 91       	pop	r30
 a64:	bf 91       	pop	r27
 a66:	af 91       	pop	r26
 a68:	9f 91       	pop	r25
 a6a:	8f 91       	pop	r24
 a6c:	7f 91       	pop	r23
 a6e:	6f 91       	pop	r22
 a70:	5f 91       	pop	r21
 a72:	4f 91       	pop	r20
 a74:	3f 91       	pop	r19
 a76:	2f 91       	pop	r18
 a78:	0f 90       	pop	r0
 a7a:	0f be       	out	0x3f, r0	; 63
 a7c:	0f 90       	pop	r0
 a7e:	1f 90       	pop	r1
 a80:	18 95       	reti

00000a82 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 a82:	1f 92       	push	r1
 a84:	0f 92       	push	r0
 a86:	0f b6       	in	r0, 0x3f	; 63
 a88:	0f 92       	push	r0
 a8a:	11 24       	eor	r1, r1
 a8c:	2f 93       	push	r18
 a8e:	3f 93       	push	r19
 a90:	4f 93       	push	r20
 a92:	5f 93       	push	r21
 a94:	6f 93       	push	r22
 a96:	7f 93       	push	r23
 a98:	8f 93       	push	r24
 a9a:	9f 93       	push	r25
 a9c:	af 93       	push	r26
 a9e:	bf 93       	push	r27
 aa0:	cf 93       	push	r28
 aa2:	df 93       	push	r29
 aa4:	ef 93       	push	r30
 aa6:	ff 93       	push	r31
	Action_Timer[0]();
 aa8:	c4 e1       	ldi	r28, 0x14	; 20
 aaa:	d1 e0       	ldi	r29, 0x01	; 1
 aac:	e8 81       	ld	r30, Y
 aae:	f9 81       	ldd	r31, Y+1	; 0x01
 ab0:	09 95       	icall
	numOverflows++;
 ab2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <numOverflows>
 ab6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <numOverflows+0x1>
 aba:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <numOverflows+0x2>
 abe:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <numOverflows+0x3>
 ac2:	01 96       	adiw	r24, 0x01	; 1
 ac4:	a1 1d       	adc	r26, r1
 ac6:	b1 1d       	adc	r27, r1
 ac8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <numOverflows>
 acc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <numOverflows+0x1>
 ad0:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <numOverflows+0x2>
 ad4:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 ad8:	e8 81       	ld	r30, Y
 ada:	f9 81       	ldd	r31, Y+1	; 0x01
 adc:	30 97       	sbiw	r30, 0x00	; 0
 ade:	49 f1       	breq	.+82     	; 0xb32 <__vector_9+0xb0>
		counter++;
 ae0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <counter.1744>
 ae4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <counter.1744+0x1>
 ae8:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <counter.1744+0x2>
 aec:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <counter.1744+0x3>
 af0:	01 96       	adiw	r24, 0x01	; 1
 af2:	a1 1d       	adc	r26, r1
 af4:	b1 1d       	adc	r27, r1
 af6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <counter.1744>
 afa:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <counter.1744+0x1>
 afe:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <counter.1744+0x2>
 b02:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <counter.1744+0x3>
		if(counter == req_numOverflows){
 b06:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <req_numOverflows>
 b0a:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <req_numOverflows+0x1>
 b0e:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <req_numOverflows+0x2>
 b12:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <req_numOverflows+0x3>
 b16:	84 17       	cp	r24, r20
 b18:	95 07       	cpc	r25, r21
 b1a:	a6 07       	cpc	r26, r22
 b1c:	b7 07       	cpc	r27, r23
 b1e:	49 f4       	brne	.+18     	; 0xb32 <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 b20:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <counter.1744>
 b24:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <counter.1744+0x1>
 b28:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <counter.1744+0x2>
 b2c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <counter.1744+0x3>
			Action_Timer[0]();
 b30:	09 95       	icall
		}
		
	}
}
 b32:	ff 91       	pop	r31
 b34:	ef 91       	pop	r30
 b36:	df 91       	pop	r29
 b38:	cf 91       	pop	r28
 b3a:	bf 91       	pop	r27
 b3c:	af 91       	pop	r26
 b3e:	9f 91       	pop	r25
 b40:	8f 91       	pop	r24
 b42:	7f 91       	pop	r23
 b44:	6f 91       	pop	r22
 b46:	5f 91       	pop	r21
 b48:	4f 91       	pop	r20
 b4a:	3f 91       	pop	r19
 b4c:	2f 91       	pop	r18
 b4e:	0f 90       	pop	r0
 b50:	0f be       	out	0x3f, r0	; 63
 b52:	0f 90       	pop	r0
 b54:	1f 90       	pop	r1
 b56:	18 95       	reti

00000b58 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 b58:	1f 92       	push	r1
 b5a:	0f 92       	push	r0
 b5c:	0f b6       	in	r0, 0x3f	; 63
 b5e:	0f 92       	push	r0
 b60:	11 24       	eor	r1, r1
 b62:	2f 93       	push	r18
 b64:	3f 93       	push	r19
 b66:	4f 93       	push	r20
 b68:	5f 93       	push	r21
 b6a:	6f 93       	push	r22
 b6c:	7f 93       	push	r23
 b6e:	8f 93       	push	r24
 b70:	9f 93       	push	r25
 b72:	af 93       	push	r26
 b74:	bf 93       	push	r27
 b76:	ef 93       	push	r30
 b78:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 b7a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <Action_Timer+0x2>
 b7e:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <Action_Timer+0x3>
 b82:	30 97       	sbiw	r30, 0x00	; 0
 b84:	09 f0       	breq	.+2      	; 0xb88 <__vector_7+0x30>
		Action_Timer[1]();
 b86:	09 95       	icall
	}
}
 b88:	ff 91       	pop	r31
 b8a:	ef 91       	pop	r30
 b8c:	bf 91       	pop	r27
 b8e:	af 91       	pop	r26
 b90:	9f 91       	pop	r25
 b92:	8f 91       	pop	r24
 b94:	7f 91       	pop	r23
 b96:	6f 91       	pop	r22
 b98:	5f 91       	pop	r21
 b9a:	4f 91       	pop	r20
 b9c:	3f 91       	pop	r19
 b9e:	2f 91       	pop	r18
 ba0:	0f 90       	pop	r0
 ba2:	0f be       	out	0x3f, r0	; 63
 ba4:	0f 90       	pop	r0
 ba6:	1f 90       	pop	r1
 ba8:	18 95       	reti

00000baa <__vector_6>:


ISR(TIMER1_CAPT_vect){
 baa:	1f 92       	push	r1
 bac:	0f 92       	push	r0
 bae:	0f b6       	in	r0, 0x3f	; 63
 bb0:	0f 92       	push	r0
 bb2:	11 24       	eor	r1, r1
 bb4:	2f 93       	push	r18
 bb6:	3f 93       	push	r19
 bb8:	4f 93       	push	r20
 bba:	5f 93       	push	r21
 bbc:	6f 93       	push	r22
 bbe:	7f 93       	push	r23
 bc0:	8f 93       	push	r24
 bc2:	9f 93       	push	r25
 bc4:	af 93       	push	r26
 bc6:	bf 93       	push	r27
 bc8:	ef 93       	push	r30
 bca:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 bcc:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <Action_Timer+0x6>
 bd0:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <Action_Timer+0x7>
 bd4:	30 97       	sbiw	r30, 0x00	; 0
 bd6:	09 f0       	breq	.+2      	; 0xbda <__vector_6+0x30>
			Action_Timer[3]();
 bd8:	09 95       	icall
			
			
		}
 bda:	ff 91       	pop	r31
 bdc:	ef 91       	pop	r30
 bde:	bf 91       	pop	r27
 be0:	af 91       	pop	r26
 be2:	9f 91       	pop	r25
 be4:	8f 91       	pop	r24
 be6:	7f 91       	pop	r23
 be8:	6f 91       	pop	r22
 bea:	5f 91       	pop	r21
 bec:	4f 91       	pop	r20
 bee:	3f 91       	pop	r19
 bf0:	2f 91       	pop	r18
 bf2:	0f 90       	pop	r0
 bf4:	0f be       	out	0x3f, r0	; 63
 bf6:	0f 90       	pop	r0
 bf8:	1f 90       	pop	r1
 bfa:	18 95       	reti

00000bfc <__vector_13>:
	//set callback
	Action_Uart[0] = ptrfn;
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 bfc:	1f 92       	push	r1
 bfe:	0f 92       	push	r0
 c00:	0f b6       	in	r0, 0x3f	; 63
 c02:	0f 92       	push	r0
 c04:	11 24       	eor	r1, r1
 c06:	2f 93       	push	r18
 c08:	3f 93       	push	r19
 c0a:	4f 93       	push	r20
 c0c:	5f 93       	push	r21
 c0e:	6f 93       	push	r22
 c10:	7f 93       	push	r23
 c12:	8f 93       	push	r24
 c14:	9f 93       	push	r25
 c16:	af 93       	push	r26
 c18:	bf 93       	push	r27
 c1a:	ef 93       	push	r30
 c1c:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 c1e:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 c20:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <Action_Uart>
 c24:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <Action_Uart+0x1>
 c28:	30 97       	sbiw	r30, 0x00	; 0
 c2a:	09 f0       	breq	.+2      	; 0xc2e <__vector_13+0x32>
		Action_Uart[0](receivedData);
 c2c:	09 95       	icall
	}
 c2e:	ff 91       	pop	r31
 c30:	ef 91       	pop	r30
 c32:	bf 91       	pop	r27
 c34:	af 91       	pop	r26
 c36:	9f 91       	pop	r25
 c38:	8f 91       	pop	r24
 c3a:	7f 91       	pop	r23
 c3c:	6f 91       	pop	r22
 c3e:	5f 91       	pop	r21
 c40:	4f 91       	pop	r20
 c42:	3f 91       	pop	r19
 c44:	2f 91       	pop	r18
 c46:	0f 90       	pop	r0
 c48:	0f be       	out	0x3f, r0	; 63
 c4a:	0f 90       	pop	r0
 c4c:	1f 90       	pop	r1
 c4e:	18 95       	reti

00000c50 <__tablejump2__>:
 c50:	ee 0f       	add	r30, r30
 c52:	ff 1f       	adc	r31, r31
 c54:	05 90       	lpm	r0, Z+
 c56:	f4 91       	lpm	r31, Z
 c58:	e0 2d       	mov	r30, r0
 c5a:	09 94       	ijmp

00000c5c <_exit>:
 c5c:	f8 94       	cli

00000c5e <__stop_program>:
 c5e:	ff cf       	rjmp	.-2      	; 0xc5e <__stop_program>
