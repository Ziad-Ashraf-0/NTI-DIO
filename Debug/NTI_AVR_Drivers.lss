
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000682  00000716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  0080007c  0080007c  00000732  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000764  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d45  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c87  00000000  00000000  000026c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d58  00000000  00000000  0000334c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000514  00000000  00000000  000040a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e89  00000000  00000000  000045b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e1a  00000000  00000000  00005441  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000625b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_1>
   8:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_2>
   c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_9>
  28:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_10>
  2c:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e8       	ldi	r30, 0x82	; 130
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3a       	cpi	r26, 0xA5	; 165
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  8a:	0c 94 3f 03 	jmp	0x67e	; 0x67e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <timerCallback>:
#include "../HAL/LCD/LCD_interface.h"
#include "../MCAL/TIMER0/TIMER0_interface.h"
#include "../MCAL/TIMER1/TIMER1_interface.h"
#include <util/delay.h>

void timerCallback(){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <timerCallback+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <timerCallback+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	DIO_Config led = {DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT,DIO_PIN_HIGH};
  9e:	19 82       	std	Y+1, r1	; 0x01
  a0:	86 e0       	ldi	r24, 0x06	; 6
  a2:	8a 83       	std	Y+2, r24	; 0x02
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	8b 83       	std	Y+3, r24	; 0x03
  a8:	8c 83       	std	Y+4, r24	; 0x04
	DIO_U8SetPinDirection(&led);
  aa:	ce 01       	movw	r24, r28
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	0e 94 a9 00 	call	0x152	; 0x152 <DIO_U8SetPinDirection>
	DIO_U8TogglePin(&led);
  b2:	ce 01       	movw	r24, r28
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_U8TogglePin>
}
  ba:	0f 90       	pop	r0
  bc:	0f 90       	pop	r0
  be:	0f 90       	pop	r0
  c0:	0f 90       	pop	r0
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <main>:

int main(void) {
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <main+0x6>
  ce:	00 d0       	rcall	.+0      	; 0xd0 <main+0x8>
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	//DIO_Config led1 = {DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT};
	//DIO_U8SetPinDirection(&led1);
	
	GIE_enable();
  d4:	0e 94 86 01 	call	0x30c	; 0x30c <GIE_enable>
	
	Timer1_Config timerConfig = {Timer1_NORMAL, Timer1_PRESCALER_1024};
  d8:	19 82       	std	Y+1, r1	; 0x01
  da:	1a 82       	std	Y+2, r1	; 0x02
  dc:	1b 82       	std	Y+3, r1	; 0x03
  de:	1c 82       	std	Y+4, r1	; 0x04
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	8a 83       	std	Y+2, r24	; 0x02
	M_TIMER1_void_setCallBack(timerCallback,TIMER1_OVERFLOW);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	89 e4       	ldi	r24, 0x49	; 73
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 83 02 	call	0x506	; 0x506 <M_TIMER1_void_setCallBack>
	M_TIMER1_void_Init(&timerConfig);
  ee:	ce 01       	movw	r24, r28
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	0e 94 1a 02 	call	0x434	; 0x434 <M_TIMER1_void_Init>
	M_TIMER1_void_IntEnable(TIMER1_OVERFLOW);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 2d 02 	call	0x45a	; 0x45a <M_TIMER1_void_IntEnable>
	M_TIMER1_void_setDelayTimeMilliSec(5000);
  fc:	68 e8       	ldi	r22, 0x88	; 136
  fe:	73 e1       	ldi	r23, 0x13	; 19
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 33 02 	call	0x466	; 0x466 <M_TIMER1_void_setDelayTimeMilliSec>
	M_TIMER1_void_start();
 108:	0e 94 24 02 	call	0x448	; 0x448 <M_TIMER1_void_start>
	//H_LCD_void_displayFloat(25.6545);
	

	while (1) {
		
		for (u8 i =0;i<100;i++){
 10c:	10 e0       	ldi	r17, 0x00	; 0
 10e:	05 c0       	rjmp	.+10     	; 0x11a <main+0x52>
			//M_TIMER0_void_setFastPWM(FREQ_61_HZ,i);
			M_TIMER0_void_setPhaseCorrectPWM(FREQ_61_HZ,i);
 110:	61 2f       	mov	r22, r17
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	0e 94 88 01 	call	0x310	; 0x310 <M_TIMER0_void_setPhaseCorrectPWM>
	//H_LCD_void_displayFloat(25.6545);
	

	while (1) {
		
		for (u8 i =0;i<100;i++){
 118:	1f 5f       	subi	r17, 0xFF	; 255
 11a:	14 36       	cpi	r17, 0x64	; 100
 11c:	c8 f3       	brcs	.-14     	; 0x110 <main+0x48>
 11e:	f6 cf       	rjmp	.-20     	; 0x10c <main+0x44>

00000120 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 120:	24 b1       	in	r18, 0x04	; 4
 122:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 124:	00 24       	eor	r0, r0
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	00 1c       	adc	r0, r0
 12c:	22 0f       	add	r18, r18
 12e:	33 1f       	adc	r19, r19
 130:	00 1c       	adc	r0, r0
 132:	23 2f       	mov	r18, r19
 134:	30 2d       	mov	r19, r0
 136:	85 b1       	in	r24, 0x05	; 5
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 142:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <__data_end>
 146:	f0 91 7d 00 	lds	r31, 0x007D	; 0x80007d <__data_end+0x1>
 14a:	82 2b       	or	r24, r18
 14c:	93 2b       	or	r25, r19
 14e:	09 95       	icall
 150:	08 95       	ret

00000152 <DIO_U8SetPinDirection>:
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 152:	dc 01       	movw	r26, r24
 154:	ec 91       	ld	r30, X
 156:	e4 30       	cpi	r30, 0x04	; 4
 158:	a0 f5       	brcc	.+104    	; 0x1c2 <DIO_U8SetPinDirection+0x70>
 15a:	11 96       	adiw	r26, 0x01	; 1
 15c:	2c 91       	ld	r18, X
 15e:	11 97       	sbiw	r26, 0x01	; 1
 160:	28 30       	cpi	r18, 0x08	; 8
 162:	88 f5       	brcc	.+98     	; 0x1c6 <DIO_U8SetPinDirection+0x74>
 164:	12 96       	adiw	r26, 0x02	; 2
 166:	8c 91       	ld	r24, X
 168:	81 11       	cpse	r24, r1
 16a:	15 c0       	rjmp	.+42     	; 0x196 <DIO_U8SetPinDirection+0x44>
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	ec 58       	subi	r30, 0x8C	; 140
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	01 90       	ld	r0, Z+
 178:	f0 81       	ld	r31, Z
 17a:	e0 2d       	mov	r30, r0
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_U8SetPinDirection+0x34>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	2a 95       	dec	r18
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_U8SetPinDirection+0x30>
 18a:	80 95       	com	r24
 18c:	90 81       	ld	r25, Z
 18e:	89 23       	and	r24, r25
 190:	80 83       	st	Z, r24
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	c1 f4       	brne	.+48     	; 0x1ca <DIO_U8SetPinDirection+0x78>
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ee 0f       	add	r30, r30
 19e:	ff 1f       	adc	r31, r31
 1a0:	ec 58       	subi	r30, 0x8C	; 140
 1a2:	ff 4f       	sbci	r31, 0xFF	; 255
 1a4:	01 90       	ld	r0, Z+
 1a6:	f0 81       	ld	r31, Z
 1a8:	e0 2d       	mov	r30, r0
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_U8SetPinDirection+0x62>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	2a 95       	dec	r18
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_U8SetPinDirection+0x5e>
 1b8:	90 81       	ld	r25, Z
 1ba:	89 2b       	or	r24, r25
 1bc:	80 83       	st	Z, r24
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	08 95       	ret
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	08 95       	ret
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	08 95       	ret

000001ce <DIO_U8TogglePin>:

u8 DIO_U8TogglePin(const DIO_Config* config) {
    if (config != NULL) {
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	e1 f0       	breq	.+56     	; 0x20a <DIO_U8TogglePin+0x3c>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 1d2:	dc 01       	movw	r26, r24
 1d4:	ec 91       	ld	r30, X
 1d6:	e4 30       	cpi	r30, 0x04	; 4
 1d8:	d0 f4       	brcc	.+52     	; 0x20e <DIO_U8TogglePin+0x40>
 1da:	11 96       	adiw	r26, 0x01	; 1
 1dc:	2c 91       	ld	r18, X
 1de:	28 30       	cpi	r18, 0x08	; 8
 1e0:	c0 f4       	brcc	.+48     	; 0x212 <DIO_U8TogglePin+0x44>
            TOG_BIT(*writeRegisters[config->port], config->pin);
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	e4 59       	subi	r30, 0x94	; 148
 1ea:	ff 4f       	sbci	r31, 0xFF	; 255
 1ec:	01 90       	ld	r0, Z+
 1ee:	f0 81       	ld	r31, Z
 1f0:	e0 2d       	mov	r30, r0
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_U8TogglePin+0x2e>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	2a 95       	dec	r18
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_U8TogglePin+0x2a>
 200:	90 81       	ld	r25, Z
 202:	89 27       	eor	r24, r25
 204:	80 83       	st	Z, r24
            return NO_ERROR;
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	08 95       	ret
    if (config != NULL) {
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
            TOG_BIT(*writeRegisters[config->port], config->pin);
            return NO_ERROR;
        } else {
            return ERROR;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	08 95       	ret
 212:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        return ERROR;
    }
}
 214:	08 95       	ret

00000216 <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	if(Action[0]!= NULL){
 238:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <Action>
 23c:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <Action+0x1>
 240:	30 97       	sbiw	r30, 0x00	; 0
 242:	09 f0       	breq	.+2      	; 0x246 <__vector_1+0x30>
		Action[0]();
 244:	09 95       	icall
	}
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	7f 91       	pop	r23
 254:	6f 91       	pop	r22
 256:	5f 91       	pop	r21
 258:	4f 91       	pop	r20
 25a:	3f 91       	pop	r19
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	2f 93       	push	r18
 274:	3f 93       	push	r19
 276:	4f 93       	push	r20
 278:	5f 93       	push	r21
 27a:	6f 93       	push	r22
 27c:	7f 93       	push	r23
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
 282:	af 93       	push	r26
 284:	bf 93       	push	r27
 286:	ef 93       	push	r30
 288:	ff 93       	push	r31
	if(Action[1]!= NULL){
 28a:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <Action+0x2>
 28e:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <Action+0x3>
 292:	30 97       	sbiw	r30, 0x00	; 0
 294:	09 f0       	breq	.+2      	; 0x298 <__vector_2+0x30>
		Action[1]();
 296:	09 95       	icall
	}
}
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	7f 91       	pop	r23
 2a6:	6f 91       	pop	r22
 2a8:	5f 91       	pop	r21
 2aa:	4f 91       	pop	r20
 2ac:	3f 91       	pop	r19
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	5f 93       	push	r21
 2cc:	6f 93       	push	r22
 2ce:	7f 93       	push	r23
 2d0:	8f 93       	push	r24
 2d2:	9f 93       	push	r25
 2d4:	af 93       	push	r26
 2d6:	bf 93       	push	r27
 2d8:	ef 93       	push	r30
 2da:	ff 93       	push	r31
	if(Action[2]!= NULL){
 2dc:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <Action+0x4>
 2e0:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <Action+0x5>
 2e4:	30 97       	sbiw	r30, 0x00	; 0
 2e6:	09 f0       	breq	.+2      	; 0x2ea <__vector_3+0x30>
		Action[2]();
 2e8:	09 95       	icall
	}
}
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <GIE_enable>:
#include "GIE_interface.h"


// Enable Global Interrupts
void GIE_enable(){
    __asm__ __volatile__ ("sei" ::);
 30c:	78 94       	sei
 30e:	08 95       	ret

00000310 <M_TIMER0_void_setPhaseCorrectPWM>:

void M_TIMER0_void_setCallBack(void (*ptrfn)(void),u8 copy_u8IntID){
	if(copy_u8IntID == OVERFLOW){
		Action_Timer[0] = ptrfn;
		}else if(copy_u8IntID == COMPARE){
		Action_Timer[1] = ptrfn;
 310:	28 2f       	mov	r18, r24
 312:	66 95       	lsr	r22
 314:	3f ef       	ldi	r19, 0xFF	; 255
 316:	63 9f       	mul	r22, r19
 318:	c0 01       	movw	r24, r0
 31a:	11 24       	eor	r1, r1
 31c:	64 e6       	ldi	r22, 0x64	; 100
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__divmodhi4>
 324:	6c bf       	out	0x3c, r22	; 60
 326:	83 b7       	in	r24, 0x33	; 51
 328:	88 7f       	andi	r24, 0xF8	; 248
 32a:	28 2b       	or	r18, r24
 32c:	23 bf       	out	0x33, r18	; 51
 32e:	08 95       	ret

00000330 <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	ef 93       	push	r30
 350:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 352:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Action_Timer>
 356:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <Action_Timer+0x1>
 35a:	89 2b       	or	r24, r25
 35c:	89 f1       	breq	.+98     	; 0x3c0 <__vector_11+0x90>
		counter++;
 35e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <counter.1685>
 362:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <counter.1685+0x1>
 366:	a0 91 86 00 	lds	r26, 0x0086	; 0x800086 <counter.1685+0x2>
 36a:	b0 91 87 00 	lds	r27, 0x0087	; 0x800087 <counter.1685+0x3>
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	a1 1d       	adc	r26, r1
 372:	b1 1d       	adc	r27, r1
 374:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <counter.1685>
 378:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <counter.1685+0x1>
 37c:	a0 93 86 00 	sts	0x0086, r26	; 0x800086 <counter.1685+0x2>
 380:	b0 93 87 00 	sts	0x0087, r27	; 0x800087 <counter.1685+0x3>
		if(counter == numOverflows){
 384:	40 91 90 00 	lds	r20, 0x0090	; 0x800090 <numOverflows>
 388:	50 91 91 00 	lds	r21, 0x0091	; 0x800091 <numOverflows+0x1>
 38c:	60 91 92 00 	lds	r22, 0x0092	; 0x800092 <numOverflows+0x2>
 390:	70 91 93 00 	lds	r23, 0x0093	; 0x800093 <numOverflows+0x3>
 394:	84 17       	cp	r24, r20
 396:	95 07       	cpc	r25, r21
 398:	a6 07       	cpc	r26, r22
 39a:	b7 07       	cpc	r27, r23
 39c:	89 f4       	brne	.+34     	; 0x3c0 <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 39e:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <remainingCounts>
 3a2:	81 95       	neg	r24
 3a4:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 3a6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <counter.1685>
 3aa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <counter.1685+0x1>
 3ae:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <counter.1685+0x2>
 3b2:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <counter.1685+0x3>
			Action_Timer[0]();
 3b6:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <Action_Timer>
 3ba:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <Action_Timer+0x1>
 3be:	09 95       	icall
		}
		
	}
}
 3c0:	ff 91       	pop	r31
 3c2:	ef 91       	pop	r30
 3c4:	bf 91       	pop	r27
 3c6:	af 91       	pop	r26
 3c8:	9f 91       	pop	r25
 3ca:	8f 91       	pop	r24
 3cc:	7f 91       	pop	r23
 3ce:	6f 91       	pop	r22
 3d0:	5f 91       	pop	r21
 3d2:	4f 91       	pop	r20
 3d4:	3f 91       	pop	r19
 3d6:	2f 91       	pop	r18
 3d8:	0f 90       	pop	r0
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	0f 90       	pop	r0
 3de:	1f 90       	pop	r1
 3e0:	18 95       	reti

000003e2 <__vector_10>:

ISR(TIMER0_COMP_vect){
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 404:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <Action_Timer+0x2>
 408:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <Action_Timer+0x3>
 40c:	30 97       	sbiw	r30, 0x00	; 0
 40e:	09 f0       	breq	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		Action_Timer[1]();
 410:	09 95       	icall
		
	}
}
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <M_TIMER1_void_Init>:

// Array of two pointers to functions
static void (*Action_Timer[4])(void) = {NULL, NULL, NULL, NULL};

void M_TIMER1_void_Init(const Timer1_Config* config){
	prescaler = config->prescaler;
 434:	fc 01       	movw	r30, r24
 436:	21 81       	ldd	r18, Z+1	; 0x01
 438:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <prescaler>
	
	if(config->mode == Timer1_NORMAL){
 43c:	80 81       	ld	r24, Z
 43e:	81 11       	cpse	r24, r1
 440:	02 c0       	rjmp	.+4      	; 0x446 <M_TIMER1_void_Init+0x12>
		/* Configure the timer control register
		* 1. Non PWM mode FOC1A=1 & FOCA1B=1
		* 2. Normal Mode WGM13=0 & WGM12=0 & WGM11=0 & WGM10=0
		* 3. Normal Mode COM1A1=0 & COM1A0=0 & COM1B1=0 & COM1B0=0
		*/
		TIMER1_BASE->TCCR1A = (1<<FOC1A_BIT) | (1<<FOC1B_BIT);
 442:	8c e0       	ldi	r24, 0x0C	; 12
 444:	8f bd       	out	0x2f, r24	; 47
 446:	08 95       	ret

00000448 <M_TIMER1_void_start>:
}


void M_TIMER1_void_start(void){
	
	TIMER1_BASE-> TCCR1B &= TIMER1_PRESCALER_MASK;
 448:	8e b5       	in	r24, 0x2e	; 46
 44a:	88 7f       	andi	r24, 0xF8	; 248
 44c:	8e bd       	out	0x2e, r24	; 46
	TIMER1_BASE-> TCCR1B |= prescaler;
 44e:	9e b5       	in	r25, 0x2e	; 46
 450:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <prescaler>
 454:	89 2b       	or	r24, r25
 456:	8e bd       	out	0x2e, r24	; 46
 458:	08 95       	ret

0000045a <M_TIMER1_void_IntEnable>:
}

void M_TIMER1_void_IntEnable(Timer1_IntID copy_u8IntID){
	if(copy_u8IntID == TIMER1_OVERFLOW){
 45a:	81 11       	cpse	r24, r1
 45c:	03 c0       	rjmp	.+6      	; 0x464 <M_TIMER1_void_IntEnable+0xa>
		TIMER1_BASE->TIMSK |= (1<<TOIE1_BIT); // Enable Timer1 Overflow Interrupt
 45e:	89 b7       	in	r24, 0x39	; 57
 460:	84 60       	ori	r24, 0x04	; 4
 462:	89 bf       	out	0x39, r24	; 57
 464:	08 95       	ret

00000466 <M_TIMER1_void_setDelayTimeMilliSec>:
	}
}


void M_TIMER1_void_setDelayTimeMilliSec(u32 copy_u32TimeMS){
 466:	cf 92       	push	r12
 468:	df 92       	push	r13
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	2c 97       	sbiw	r28, 0x0c	; 12
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	9b 01       	movw	r18, r22
 484:	ac 01       	movw	r20, r24
	// Create an array to map prescaler values to their numbers
	const u16 prescalerMap[] = {
 486:	8c e0       	ldi	r24, 0x0C	; 12
 488:	e0 e6       	ldi	r30, 0x60	; 96
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	de 01       	movw	r26, r28
 48e:	11 96       	adiw	r26, 0x01	; 1
 490:	01 90       	ld	r0, Z+
 492:	0d 92       	st	X+, r0
 494:	8a 95       	dec	r24
 496:	e1 f7       	brne	.-8      	; 0x490 <M_TIMER1_void_setDelayTimeMilliSec+0x2a>
		64,		//TIMER1_PRESCALER_64
		256,	//TIMER1_PRESCALER_256
		1024,	//TIMER1_PRESCALER_1024
	};

	u32 tickTime = prescalerMap[prescaler] / FCPU;
 498:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <prescaler>
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	ee 0f       	add	r30, r30
 4a0:	ff 1f       	adc	r31, r31
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	8c 0f       	add	r24, r28
 4a8:	9d 1f       	adc	r25, r29
 4aa:	e8 0f       	add	r30, r24
 4ac:	f9 1f       	adc	r31, r25
 4ae:	c0 80       	ld	r12, Z
 4b0:	d1 80       	ldd	r13, Z+1	; 0x01
 4b2:	d6 94       	lsr	r13
 4b4:	c7 94       	ror	r12
 4b6:	d6 94       	lsr	r13
 4b8:	c7 94       	ror	r12
 4ba:	d6 94       	lsr	r13
 4bc:	c7 94       	ror	r12
 4be:	d6 94       	lsr	r13
 4c0:	c7 94       	ror	r12
 4c2:	e1 2c       	mov	r14, r1
 4c4:	f1 2c       	mov	r15, r1
	u32 totalCounts = (copy_u32TimeMS * 1000) / tickTime;
 4c6:	a8 ee       	ldi	r26, 0xE8	; 232
 4c8:	b3 e0       	ldi	r27, 0x03	; 3
 4ca:	0e 94 11 03 	call	0x622	; 0x622 <__muluhisi3>
 4ce:	a7 01       	movw	r20, r14
 4d0:	96 01       	movw	r18, r12
 4d2:	0e 94 ef 02 	call	0x5de	; 0x5de <__udivmodsi4>
	
	// Calculate the number of overflows required
	numOverflows = totalCounts / 65536;
 4d6:	ca 01       	movw	r24, r20
 4d8:	aa 27       	eor	r26, r26
 4da:	bb 27       	eor	r27, r27
 4dc:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <numOverflows>
 4e0:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <numOverflows+0x1>
 4e4:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <numOverflows+0x2>
 4e8:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <numOverflows+0x3>
	// Calculate the remaining counts
	remainingCounts = totalCounts % 65536;

}
 4ec:	2c 96       	adiw	r28, 0x0c	; 12
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	cd bf       	out	0x3d, r28	; 61
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	ff 90       	pop	r15
 4fe:	ef 90       	pop	r14
 500:	df 90       	pop	r13
 502:	cf 90       	pop	r12
 504:	08 95       	ret

00000506 <M_TIMER1_void_setCallBack>:

void M_TIMER1_void_setCallBack(void (*ptrfn)(void),Timer1_IntID copy_u8IntID){
	if(copy_u8IntID == TIMER1_OVERFLOW){
 506:	61 11       	cpse	r22, r1
 508:	04 c0       	rjmp	.+8      	; 0x512 <M_TIMER1_void_setCallBack+0xc>
		Action_Timer[0] = ptrfn;
 50a:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Action_Timer+0x1>
 50e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Action_Timer>
 512:	08 95       	ret

00000514 <__vector_9>:
	}
}


ISR(TIMER1_OVF_vect){
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	2f 93       	push	r18
 520:	3f 93       	push	r19
 522:	4f 93       	push	r20
 524:	5f 93       	push	r21
 526:	6f 93       	push	r22
 528:	7f 93       	push	r23
 52a:	8f 93       	push	r24
 52c:	9f 93       	push	r25
 52e:	af 93       	push	r26
 530:	bf 93       	push	r27
 532:	ef 93       	push	r30
 534:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 536:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <Action_Timer>
 53a:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <Action_Timer+0x1>
 53e:	30 97       	sbiw	r30, 0x00	; 0
 540:	49 f1       	breq	.+82     	; 0x594 <__vector_9+0x80>
		
		counter++;
 542:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <counter.1690>
 546:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <counter.1690+0x1>
 54a:	a0 91 96 00 	lds	r26, 0x0096	; 0x800096 <counter.1690+0x2>
 54e:	b0 91 97 00 	lds	r27, 0x0097	; 0x800097 <counter.1690+0x3>
 552:	01 96       	adiw	r24, 0x01	; 1
 554:	a1 1d       	adc	r26, r1
 556:	b1 1d       	adc	r27, r1
 558:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <counter.1690>
 55c:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <counter.1690+0x1>
 560:	a0 93 96 00 	sts	0x0096, r26	; 0x800096 <counter.1690+0x2>
 564:	b0 93 97 00 	sts	0x0097, r27	; 0x800097 <counter.1690+0x3>
		if(counter == numOverflows){
 568:	40 91 a1 00 	lds	r20, 0x00A1	; 0x8000a1 <numOverflows>
 56c:	50 91 a2 00 	lds	r21, 0x00A2	; 0x8000a2 <numOverflows+0x1>
 570:	60 91 a3 00 	lds	r22, 0x00A3	; 0x8000a3 <numOverflows+0x2>
 574:	70 91 a4 00 	lds	r23, 0x00A4	; 0x8000a4 <numOverflows+0x3>
 578:	84 17       	cp	r24, r20
 57a:	95 07       	cpc	r25, r21
 57c:	a6 07       	cpc	r26, r22
 57e:	b7 07       	cpc	r27, r23
 580:	49 f4       	brne	.+18     	; 0x594 <__vector_9+0x80>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 582:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <counter.1690>
 586:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <counter.1690+0x1>
 58a:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <counter.1690+0x2>
 58e:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <counter.1690+0x3>
			Action_Timer[0]();
 592:	09 95       	icall
		}
		
	}
 594:	ff 91       	pop	r31
 596:	ef 91       	pop	r30
 598:	bf 91       	pop	r27
 59a:	af 91       	pop	r26
 59c:	9f 91       	pop	r25
 59e:	8f 91       	pop	r24
 5a0:	7f 91       	pop	r23
 5a2:	6f 91       	pop	r22
 5a4:	5f 91       	pop	r21
 5a6:	4f 91       	pop	r20
 5a8:	3f 91       	pop	r19
 5aa:	2f 91       	pop	r18
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <__divmodhi4>:
 5b6:	97 fb       	bst	r25, 7
 5b8:	07 2e       	mov	r0, r23
 5ba:	16 f4       	brtc	.+4      	; 0x5c0 <__divmodhi4+0xa>
 5bc:	00 94       	com	r0
 5be:	07 d0       	rcall	.+14     	; 0x5ce <__divmodhi4_neg1>
 5c0:	77 fd       	sbrc	r23, 7
 5c2:	09 d0       	rcall	.+18     	; 0x5d6 <__divmodhi4_neg2>
 5c4:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 5c8:	07 fc       	sbrc	r0, 7
 5ca:	05 d0       	rcall	.+10     	; 0x5d6 <__divmodhi4_neg2>
 5cc:	3e f4       	brtc	.+14     	; 0x5dc <__divmodhi4_exit>

000005ce <__divmodhi4_neg1>:
 5ce:	90 95       	com	r25
 5d0:	81 95       	neg	r24
 5d2:	9f 4f       	sbci	r25, 0xFF	; 255
 5d4:	08 95       	ret

000005d6 <__divmodhi4_neg2>:
 5d6:	70 95       	com	r23
 5d8:	61 95       	neg	r22
 5da:	7f 4f       	sbci	r23, 0xFF	; 255

000005dc <__divmodhi4_exit>:
 5dc:	08 95       	ret

000005de <__udivmodsi4>:
 5de:	a1 e2       	ldi	r26, 0x21	; 33
 5e0:	1a 2e       	mov	r1, r26
 5e2:	aa 1b       	sub	r26, r26
 5e4:	bb 1b       	sub	r27, r27
 5e6:	fd 01       	movw	r30, r26
 5e8:	0d c0       	rjmp	.+26     	; 0x604 <__udivmodsi4_ep>

000005ea <__udivmodsi4_loop>:
 5ea:	aa 1f       	adc	r26, r26
 5ec:	bb 1f       	adc	r27, r27
 5ee:	ee 1f       	adc	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	a2 17       	cp	r26, r18
 5f4:	b3 07       	cpc	r27, r19
 5f6:	e4 07       	cpc	r30, r20
 5f8:	f5 07       	cpc	r31, r21
 5fa:	20 f0       	brcs	.+8      	; 0x604 <__udivmodsi4_ep>
 5fc:	a2 1b       	sub	r26, r18
 5fe:	b3 0b       	sbc	r27, r19
 600:	e4 0b       	sbc	r30, r20
 602:	f5 0b       	sbc	r31, r21

00000604 <__udivmodsi4_ep>:
 604:	66 1f       	adc	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	88 1f       	adc	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	1a 94       	dec	r1
 60e:	69 f7       	brne	.-38     	; 0x5ea <__udivmodsi4_loop>
 610:	60 95       	com	r22
 612:	70 95       	com	r23
 614:	80 95       	com	r24
 616:	90 95       	com	r25
 618:	9b 01       	movw	r18, r22
 61a:	ac 01       	movw	r20, r24
 61c:	bd 01       	movw	r22, r26
 61e:	cf 01       	movw	r24, r30
 620:	08 95       	ret

00000622 <__muluhisi3>:
 622:	0e 94 30 03 	call	0x660	; 0x660 <__umulhisi3>
 626:	a5 9f       	mul	r26, r21
 628:	90 0d       	add	r25, r0
 62a:	b4 9f       	mul	r27, r20
 62c:	90 0d       	add	r25, r0
 62e:	a4 9f       	mul	r26, r20
 630:	80 0d       	add	r24, r0
 632:	91 1d       	adc	r25, r1
 634:	11 24       	eor	r1, r1
 636:	08 95       	ret

00000638 <__udivmodhi4>:
 638:	aa 1b       	sub	r26, r26
 63a:	bb 1b       	sub	r27, r27
 63c:	51 e1       	ldi	r21, 0x11	; 17
 63e:	07 c0       	rjmp	.+14     	; 0x64e <__udivmodhi4_ep>

00000640 <__udivmodhi4_loop>:
 640:	aa 1f       	adc	r26, r26
 642:	bb 1f       	adc	r27, r27
 644:	a6 17       	cp	r26, r22
 646:	b7 07       	cpc	r27, r23
 648:	10 f0       	brcs	.+4      	; 0x64e <__udivmodhi4_ep>
 64a:	a6 1b       	sub	r26, r22
 64c:	b7 0b       	sbc	r27, r23

0000064e <__udivmodhi4_ep>:
 64e:	88 1f       	adc	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	5a 95       	dec	r21
 654:	a9 f7       	brne	.-22     	; 0x640 <__udivmodhi4_loop>
 656:	80 95       	com	r24
 658:	90 95       	com	r25
 65a:	bc 01       	movw	r22, r24
 65c:	cd 01       	movw	r24, r26
 65e:	08 95       	ret

00000660 <__umulhisi3>:
 660:	a2 9f       	mul	r26, r18
 662:	b0 01       	movw	r22, r0
 664:	b3 9f       	mul	r27, r19
 666:	c0 01       	movw	r24, r0
 668:	a3 9f       	mul	r26, r19
 66a:	70 0d       	add	r23, r0
 66c:	81 1d       	adc	r24, r1
 66e:	11 24       	eor	r1, r1
 670:	91 1d       	adc	r25, r1
 672:	b2 9f       	mul	r27, r18
 674:	70 0d       	add	r23, r0
 676:	81 1d       	adc	r24, r1
 678:	11 24       	eor	r1, r1
 67a:	91 1d       	adc	r25, r1
 67c:	08 95       	ret

0000067e <_exit>:
 67e:	f8 94       	cli

00000680 <__stop_program>:
 680:	ff cf       	rjmp	.-2      	; 0x680 <__stop_program>
