
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000008b6  0000094a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800080  00800080  0000096a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c04  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010cc  00000000  00000000  000038fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001655  00000000  00000000  000049c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000968  00000000  00000000  00006020  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001460  00000000  00000000  00006988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001faf  00000000  00000000  00007de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00009d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 02 	jmp	0x492	; 0x492 <__vector_1>
   8:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__vector_2>
   c:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 06 04 	jmp	0x80c	; 0x80c <__vector_6>
  1c:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_9>
  28:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_10>
  2c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_11>
  30:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__vector_12>
  34:	0c 94 2f 04 	jmp	0x85e	; 0x85e <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3b       	cpi	r26, 0xB4	; 180
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 59 04 	jmp	0x8b2	; 0x8b2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main(void) {

	
	
	GIE_enable();
  92:	0e 94 c4 02 	call	0x588	; 0x588 <GIE_enable>
	H_LCD_void_Init();	
  96:	0e 94 2b 01 	call	0x256	; 0x256 <H_LCD_void_Init>
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0x8>

0000009c <H_LCD_void_latchByte>:
	H_LCD_void_sendString(buff); // Display the binary string
}



static void H_LCD_void_latchByte(u8 copy_u8Byte){
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	64 97       	sbiw	r28, 0x14	; 20
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	08 2f       	mov	r16, r24
	DIO_Config dataPins[] = {
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	89 83       	std	Y+1, r24	; 0x01
  ba:	1a 82       	std	Y+2, r1	; 0x02
  bc:	8b 83       	std	Y+3, r24	; 0x03
  be:	04 fb       	bst	r16, 4
  c0:	99 27       	eor	r25, r25
  c2:	90 f9       	bld	r25, 0
  c4:	9c 83       	std	Y+4, r25	; 0x04
  c6:	8d 83       	std	Y+5, r24	; 0x05
  c8:	8e 83       	std	Y+6, r24	; 0x06
  ca:	8f 83       	std	Y+7, r24	; 0x07
  cc:	05 fb       	bst	r16, 5
  ce:	99 27       	eor	r25, r25
  d0:	90 f9       	bld	r25, 0
  d2:	98 87       	std	Y+8, r25	; 0x08
  d4:	89 87       	std	Y+9, r24	; 0x09
  d6:	92 e0       	ldi	r25, 0x02	; 2
  d8:	9a 87       	std	Y+10, r25	; 0x0a
  da:	8b 87       	std	Y+11, r24	; 0x0b
  dc:	06 fb       	bst	r16, 6
  de:	99 27       	eor	r25, r25
  e0:	90 f9       	bld	r25, 0
  e2:	9c 87       	std	Y+12, r25	; 0x0c
  e4:	8d 87       	std	Y+13, r24	; 0x0d
  e6:	94 e0       	ldi	r25, 0x04	; 4
  e8:	9e 87       	std	Y+14, r25	; 0x0e
  ea:	8f 87       	std	Y+15, r24	; 0x0f
  ec:	80 2f       	mov	r24, r16
  ee:	88 1f       	adc	r24, r24
  f0:	88 27       	eor	r24, r24
  f2:	88 1f       	adc	r24, r24
  f4:	88 8b       	std	Y+16, r24	; 0x10
		{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 4)},//PD4 data bin
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 5)},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 6)},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 7)},//PD7 data bin
	};
	for (u8 i = 0; i < 4; i++) {
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	0f c0       	rjmp	.+30     	; 0x118 <H_LCD_void_latchByte+0x7c>
		DIO_U8SetPinValue(&dataPins[i]);
  fa:	81 2f       	mov	r24, r17
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	2c 0f       	add	r18, r28
 10c:	3d 1f       	adc	r19, r29
 10e:	82 0f       	add	r24, r18
 110:	93 1f       	adc	r25, r19
 112:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_U8SetPinValue>
		{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 4)},//PD4 data bin
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 5)},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 6)},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 7)},//PD7 data bin
	};
	for (u8 i = 0; i < 4; i++) {
 116:	1f 5f       	subi	r17, 0xFF	; 255
 118:	14 30       	cpi	r17, 0x04	; 4
 11a:	78 f3       	brcs	.-34     	; 0xfa <H_LCD_void_latchByte+0x5e>
		DIO_U8SetPinValue(&dataPins[i]);
	}

	DIO_Config enable;
	enable.port = LCD_EN_PORT;
 11c:	19 8a       	std	Y+17, r1	; 0x11
	enable.pin = LCD_EN_PIN;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	8a 8b       	std	Y+18, r24	; 0x12
	enable.value = DIO_PIN_LOW;
 122:	1c 8a       	std	Y+20, r1	; 0x14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	89 ef       	ldi	r24, 0xF9	; 249
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <H_LCD_void_latchByte+0x8c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <H_LCD_void_latchByte+0x92>
 12e:	00 00       	nop
	_delay_ms(1); /* delay for processing */
	DIO_U8SetPinValue(&enable);
 130:	ce 01       	movw	r24, r28
 132:	41 96       	adiw	r24, 0x11	; 17
 134:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_U8SetPinValue>
 138:	e9 ef       	ldi	r30, 0xF9	; 249
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <H_LCD_void_latchByte+0xa0>
 140:	00 c0       	rjmp	.+0      	; 0x142 <H_LCD_void_latchByte+0xa6>
 142:	00 00       	nop
	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_HIGH;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	8c 8b       	std	Y+20, r24	; 0x14
	DIO_U8SetPinValue(&enable);
 148:	ce 01       	movw	r24, r28
 14a:	41 96       	adiw	r24, 0x11	; 17
 14c:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_U8SetPinValue>
 150:	89 ef       	ldi	r24, 0xF9	; 249
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <H_LCD_void_latchByte+0xb8>
 158:	00 c0       	rjmp	.+0      	; 0x15a <H_LCD_void_latchByte+0xbe>
 15a:	00 00       	nop
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
 15c:	10 e0       	ldi	r17, 0x00	; 0
 15e:	1a c0       	rjmp	.+52     	; 0x194 <H_LCD_void_latchByte+0xf8>
		dataPins[i].value = GET_BIT(copy_u8Byte, i);
 160:	81 2f       	mov	r24, r17
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	20 2f       	mov	r18, r16
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	01 2e       	mov	r0, r17
 16a:	02 c0       	rjmp	.+4      	; 0x170 <H_LCD_void_latchByte+0xd4>
 16c:	35 95       	asr	r19
 16e:	27 95       	ror	r18
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <H_LCD_void_latchByte+0xd0>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	e1 e0       	ldi	r30, 0x01	; 1
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ec 0f       	add	r30, r28
 182:	fd 1f       	adc	r31, r29
 184:	8e 0f       	add	r24, r30
 186:	9f 1f       	adc	r25, r31
 188:	21 70       	andi	r18, 0x01	; 1
 18a:	fc 01       	movw	r30, r24
 18c:	23 83       	std	Z+3, r18	; 0x03
		DIO_U8SetPinValue(&dataPins[i]);
 18e:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_U8SetPinValue>
	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_HIGH;
	DIO_U8SetPinValue(&enable);
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
 192:	1f 5f       	subi	r17, 0xFF	; 255
 194:	14 30       	cpi	r17, 0x04	; 4
 196:	20 f3       	brcs	.-56     	; 0x160 <H_LCD_void_latchByte+0xc4>
 198:	89 ef       	ldi	r24, 0xF9	; 249
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <H_LCD_void_latchByte+0x100>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <H_LCD_void_latchByte+0x106>
 1a2:	00 00       	nop
		dataPins[i].value = GET_BIT(copy_u8Byte, i);
		DIO_U8SetPinValue(&dataPins[i]);
	}

	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_LOW;
 1a4:	1c 8a       	std	Y+20, r1	; 0x14
	DIO_U8SetPinValue(&enable);
 1a6:	ce 01       	movw	r24, r28
 1a8:	41 96       	adiw	r24, 0x11	; 17
 1aa:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_U8SetPinValue>
 1ae:	e9 ef       	ldi	r30, 0xF9	; 249
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	31 97       	sbiw	r30, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <H_LCD_void_latchByte+0x116>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <H_LCD_void_latchByte+0x11c>
 1b8:	00 00       	nop
	_delay_ms(1); /* delay for processing*/


}
 1ba:	64 96       	adiw	r28, 0x14	; 20
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	de bf       	out	0x3e, r29	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	cd bf       	out	0x3d, r28	; 61
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	08 95       	ret

000001d0 <H_LCD_void_sendCommand>:
}



void H_LCD_void_sendCommand(u8 copy_u8command)
{
 1d0:	0f 93       	push	r16
 1d2:	1f 93       	push	r17
 1d4:	cf 93       	push	r28
 1d6:	df 93       	push	r29
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	28 97       	sbiw	r28, 0x08	; 8
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	08 2f       	mov	r16, r24
	//set mode to command
	DIO_Config mode[] = {
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	e0 e6       	ldi	r30, 0x60	; 96
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	de 01       	movw	r26, r28
 1f2:	11 96       	adiw	r26, 0x01	; 1
 1f4:	01 90       	ld	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	8a 95       	dec	r24
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <H_LCD_void_sendCommand+0x24>
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_LOW},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 1fc:	10 e0       	ldi	r17, 0x00	; 0
 1fe:	15 c0       	rjmp	.+42     	; 0x22a <H_LCD_void_sendCommand+0x5a>
		DIO_U8SetPinValue(&mode[i]);
 200:	81 2f       	mov	r24, r17
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	2c 0f       	add	r18, r28
 212:	3d 1f       	adc	r19, r29
 214:	82 0f       	add	r24, r18
 216:	93 1f       	adc	r25, r19
 218:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_U8SetPinValue>
 21c:	89 ef       	ldi	r24, 0xF9	; 249
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <H_LCD_void_sendCommand+0x50>
 224:	00 c0       	rjmp	.+0      	; 0x226 <H_LCD_void_sendCommand+0x56>
 226:	00 00       	nop
	DIO_Config mode[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_LOW},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 228:	1f 5f       	subi	r17, 0xFF	; 255
 22a:	12 30       	cpi	r17, 0x02	; 2
 22c:	48 f3       	brcs	.-46     	; 0x200 <H_LCD_void_sendCommand+0x30>
 22e:	89 ef       	ldi	r24, 0xF9	; 249
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <H_LCD_void_sendCommand+0x62>
 236:	00 c0       	rjmp	.+0      	; 0x238 <H_LCD_void_sendCommand+0x68>
 238:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */


	#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	H_LCD_void_latchByte(copy_u8command);
 23a:	80 2f       	mov	r24, r16
 23c:	0e 94 4e 00 	call	0x9c	; 0x9c <H_LCD_void_latchByte>
	#else

	#endif

}
 240:	28 96       	adiw	r28, 0x08	; 8
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	f8 94       	cli
 246:	de bf       	out	0x3e, r29	; 62
 248:	0f be       	out	0x3f, r0	; 63
 24a:	cd bf       	out	0x3d, r28	; 61
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	08 95       	ret

00000256 <H_LCD_void_Init>:
#include "LCD_config.h"


void functionSet();

void H_LCD_void_Init(void){
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	68 97       	sbiw	r28, 0x18	; 24
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
	DIO_Config lcdInit[] = {
 26c:	fe 01       	movw	r30, r28
 26e:	31 96       	adiw	r30, 0x01	; 1
 270:	88 e0       	ldi	r24, 0x08	; 8
 272:	df 01       	movw	r26, r30
 274:	1d 92       	st	X+, r1
 276:	8a 95       	dec	r24
 278:	e9 f7       	brne	.-6      	; 0x274 <H_LCD_void_Init+0x1e>
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	8a 83       	std	Y+2, r24	; 0x02
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	8b 83       	std	Y+3, r24	; 0x03
 282:	92 e0       	ldi	r25, 0x02	; 2
 284:	9e 83       	std	Y+6, r25	; 0x06
 286:	8f 83       	std	Y+7, r24	; 0x07
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	0f c0       	rjmp	.+30     	; 0x2aa <H_LCD_void_Init+0x54>
		DIO_U8SetPinDirection(&lcdInit[i]);
 28c:	81 2f       	mov	r24, r17
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	2c 0f       	add	r18, r28
 29e:	3d 1f       	adc	r19, r29
 2a0:	82 0f       	add	r24, r18
 2a2:	93 1f       	adc	r25, r19
 2a4:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_U8SetPinDirection>
	DIO_Config lcdInit[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 2a8:	1f 5f       	subi	r17, 0xFF	; 255
 2aa:	12 30       	cpi	r17, 0x02	; 2
 2ac:	78 f3       	brcs	.-34     	; 0x28c <H_LCD_void_Init+0x36>
		DIO_U8SetPinDirection(&lcdInit[i]);
	}

	#if (LCD_DATA_BITS_MODE == 4)
	DIO_Config dataPins[] = {
 2ae:	fe 01       	movw	r30, r28
 2b0:	39 96       	adiw	r30, 0x09	; 9
 2b2:	80 e1       	ldi	r24, 0x10	; 16
 2b4:	df 01       	movw	r26, r30
 2b6:	1d 92       	st	X+, r1
 2b8:	8a 95       	dec	r24
 2ba:	e9 f7       	brne	.-6      	; 0x2b6 <H_LCD_void_Init+0x60>
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	89 87       	std	Y+9, r24	; 0x09
 2c0:	8b 87       	std	Y+11, r24	; 0x0b
 2c2:	8d 87       	std	Y+13, r24	; 0x0d
 2c4:	8e 87       	std	Y+14, r24	; 0x0e
 2c6:	8f 87       	std	Y+15, r24	; 0x0f
 2c8:	89 8b       	std	Y+17, r24	; 0x11
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	9a 8b       	std	Y+18, r25	; 0x12
 2ce:	8b 8b       	std	Y+19, r24	; 0x13
 2d0:	8d 8b       	std	Y+21, r24	; 0x15
 2d2:	94 e0       	ldi	r25, 0x04	; 4
 2d4:	9e 8b       	std	Y+22, r25	; 0x16
 2d6:	8f 8b       	std	Y+23, r24	; 0x17
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT},//PD7 data bin
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 4; i++) {
 2d8:	10 e0       	ldi	r17, 0x00	; 0
 2da:	0f c0       	rjmp	.+30     	; 0x2fa <H_LCD_void_Init+0xa4>
		DIO_U8SetPinDirection(&dataPins[i]);
 2dc:	81 2f       	mov	r24, r17
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	29 e0       	ldi	r18, 0x09	; 9
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	2c 0f       	add	r18, r28
 2ee:	3d 1f       	adc	r19, r29
 2f0:	82 0f       	add	r24, r18
 2f2:	93 1f       	adc	r25, r19
 2f4:	0e 94 c9 01 	call	0x392	; 0x392 <DIO_U8SetPinDirection>
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT},//PD7 data bin
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 4; i++) {
 2f8:	1f 5f       	subi	r17, 0xFF	; 255
 2fa:	14 30       	cpi	r17, 0x04	; 4
 2fc:	78 f3       	brcs	.-34     	; 0x2dc <H_LCD_void_Init+0x86>
		DIO_U8SetPinDirection(&dataPins[i]);
	}

	//Function Set Corner Case
	//functionSet();
	H_LCD_void_sendCommand(LCD_GO_TO_HOME);
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <H_LCD_void_sendCommand>
 304:	89 ef       	ldi	r24, 0xF9	; 249
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <H_LCD_void_Init+0xb2>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <H_LCD_void_Init+0xb8>
 30e:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 310:	88 e2       	ldi	r24, 0x28	; 40
 312:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <H_LCD_void_sendCommand>
 316:	a9 ef       	ldi	r26, 0xF9	; 249
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	11 97       	sbiw	r26, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <H_LCD_void_Init+0xc4>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <H_LCD_void_Init+0xca>
 320:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x0F);
 322:	8f e0       	ldi	r24, 0x0F	; 15
 324:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <H_LCD_void_sendCommand>
 328:	89 ef       	ldi	r24, 0xF9	; 249
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <H_LCD_void_Init+0xd6>
 330:	00 c0       	rjmp	.+0      	; 0x332 <H_LCD_void_Init+0xdc>
 332:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x01);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <H_LCD_void_sendCommand>
 33a:	a3 ef       	ldi	r26, 0xF3	; 243
 33c:	b1 e0       	ldi	r27, 0x01	; 1
 33e:	11 97       	sbiw	r26, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <H_LCD_void_Init+0xe8>
 342:	00 c0       	rjmp	.+0      	; 0x344 <H_LCD_void_Init+0xee>
 344:	00 00       	nop
	_delay_ms(2);
	H_LCD_void_sendCommand(0x06);
 346:	86 e0       	ldi	r24, 0x06	; 6
 348:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <H_LCD_void_sendCommand>

	#elif (LCD_DATA_BITS_MODE == 8)

	#endif
}
 34c:	68 96       	adiw	r28, 0x18	; 24
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	08 95       	ret

00000360 <__vector_16>:
 360:	24 b1       	in	r18, 0x04	; 4
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	00 24       	eor	r0, r0
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	00 1c       	adc	r0, r0
 36c:	22 0f       	add	r18, r18
 36e:	33 1f       	adc	r19, r19
 370:	00 1c       	adc	r0, r0
 372:	23 2f       	mov	r18, r19
 374:	30 2d       	mov	r19, r0
 376:	85 b1       	in	r24, 0x05	; 5
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
 386:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x1>
 38a:	82 2b       	or	r24, r18
 38c:	93 2b       	or	r25, r19
 38e:	09 95       	icall
 390:	08 95       	ret

00000392 <DIO_U8SetPinDirection>:
 392:	dc 01       	movw	r26, r24
 394:	ec 91       	ld	r30, X
 396:	e4 30       	cpi	r30, 0x04	; 4
 398:	a0 f5       	brcc	.+104    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 39a:	11 96       	adiw	r26, 0x01	; 1
 39c:	2c 91       	ld	r18, X
 39e:	11 97       	sbiw	r26, 0x01	; 1
 3a0:	28 30       	cpi	r18, 0x08	; 8
 3a2:	88 f5       	brcc	.+98     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3a4:	12 96       	adiw	r26, 0x02	; 2
 3a6:	8c 91       	ld	r24, X
 3a8:	81 11       	cpse	r24, r1
 3aa:	15 c0       	rjmp	.+42     	; 0x3d6 <DIO_U8SetPinDirection+0x44>
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	e8 58       	subi	r30, 0x88	; 136
 3b4:	ff 4f       	sbci	r31, 0xFF	; 255
 3b6:	01 90       	ld	r0, Z+
 3b8:	f0 81       	ld	r31, Z
 3ba:	e0 2d       	mov	r30, r0
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_U8SetPinDirection+0x34>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	2a 95       	dec	r18
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_U8SetPinDirection+0x30>
 3ca:	80 95       	com	r24
 3cc:	90 81       	ld	r25, Z
 3ce:	89 23       	and	r24, r25
 3d0:	80 83       	st	Z, r24
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	08 95       	ret
 3d6:	81 30       	cpi	r24, 0x01	; 1
 3d8:	c1 f4       	brne	.+48     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	ee 0f       	add	r30, r30
 3de:	ff 1f       	adc	r31, r31
 3e0:	e8 58       	subi	r30, 0x88	; 136
 3e2:	ff 4f       	sbci	r31, 0xFF	; 255
 3e4:	01 90       	ld	r0, Z+
 3e6:	f0 81       	ld	r31, Z
 3e8:	e0 2d       	mov	r30, r0
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_U8SetPinDirection+0x62>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	2a 95       	dec	r18
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_U8SetPinDirection+0x5e>
 3f8:	90 81       	ld	r25, Z
 3fa:	89 2b       	or	r24, r25
 3fc:	80 83       	st	Z, r24
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	08 95       	ret
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	08 95       	ret
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	08 95       	ret
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	08 95       	ret

0000040e <DIO_U8SetPinValue>:
 40e:	00 97       	sbiw	r24, 0x00	; 0
 410:	c1 f1       	breq	.+112    	; 0x482 <DIO_U8SetPinValue+0x74>
 412:	dc 01       	movw	r26, r24
 414:	ec 91       	ld	r30, X
 416:	e4 30       	cpi	r30, 0x04	; 4
 418:	b0 f5       	brcc	.+108    	; 0x486 <DIO_U8SetPinValue+0x78>
 41a:	11 96       	adiw	r26, 0x01	; 1
 41c:	2c 91       	ld	r18, X
 41e:	11 97       	sbiw	r26, 0x01	; 1
 420:	28 30       	cpi	r18, 0x08	; 8
 422:	98 f5       	brcc	.+102    	; 0x48a <DIO_U8SetPinValue+0x7c>
 424:	13 96       	adiw	r26, 0x03	; 3
 426:	8c 91       	ld	r24, X
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	a1 f4       	brne	.+40     	; 0x454 <DIO_U8SetPinValue+0x46>
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	ee 0f       	add	r30, r30
 430:	ff 1f       	adc	r31, r31
 432:	e0 59       	subi	r30, 0x90	; 144
 434:	ff 4f       	sbci	r31, 0xFF	; 255
 436:	01 90       	ld	r0, Z+
 438:	f0 81       	ld	r31, Z
 43a:	e0 2d       	mov	r30, r0
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_U8SetPinValue+0x38>
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	2a 95       	dec	r18
 448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_U8SetPinValue+0x34>
 44a:	90 81       	ld	r25, Z
 44c:	89 2b       	or	r24, r25
 44e:	80 83       	st	Z, r24
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	08 95       	ret
 454:	81 11       	cpse	r24, r1
 456:	1b c0       	rjmp	.+54     	; 0x48e <DIO_U8SetPinValue+0x80>
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	ee 0f       	add	r30, r30
 45c:	ff 1f       	adc	r31, r31
 45e:	e0 59       	subi	r30, 0x90	; 144
 460:	ff 4f       	sbci	r31, 0xFF	; 255
 462:	01 90       	ld	r0, Z+
 464:	f0 81       	ld	r31, Z
 466:	e0 2d       	mov	r30, r0
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_U8SetPinValue+0x64>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	2a 95       	dec	r18
 474:	e2 f7       	brpl	.-8      	; 0x46e <DIO_U8SetPinValue+0x60>
 476:	80 95       	com	r24
 478:	90 81       	ld	r25, Z
 47a:	89 23       	and	r24, r25
 47c:	80 83       	st	Z, r24
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	08 95       	ret
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	08 95       	ret
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	08 95       	ret
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	08 95       	ret

00000492 <__vector_1>:
 492:	1f 92       	push	r1
 494:	0f 92       	push	r0
 496:	0f b6       	in	r0, 0x3f	; 63
 498:	0f 92       	push	r0
 49a:	11 24       	eor	r1, r1
 49c:	2f 93       	push	r18
 49e:	3f 93       	push	r19
 4a0:	4f 93       	push	r20
 4a2:	5f 93       	push	r21
 4a4:	6f 93       	push	r22
 4a6:	7f 93       	push	r23
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	af 93       	push	r26
 4ae:	bf 93       	push	r27
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31
 4b4:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <Action>
 4b8:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <Action+0x1>
 4bc:	30 97       	sbiw	r30, 0x00	; 0
 4be:	09 f0       	breq	.+2      	; 0x4c2 <__vector_1+0x30>
 4c0:	09 95       	icall
 4c2:	ff 91       	pop	r31
 4c4:	ef 91       	pop	r30
 4c6:	bf 91       	pop	r27
 4c8:	af 91       	pop	r26
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	7f 91       	pop	r23
 4d0:	6f 91       	pop	r22
 4d2:	5f 91       	pop	r21
 4d4:	4f 91       	pop	r20
 4d6:	3f 91       	pop	r19
 4d8:	2f 91       	pop	r18
 4da:	0f 90       	pop	r0
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	0f 90       	pop	r0
 4e0:	1f 90       	pop	r1
 4e2:	18 95       	reti

000004e4 <__vector_2>:
 4e4:	1f 92       	push	r1
 4e6:	0f 92       	push	r0
 4e8:	0f b6       	in	r0, 0x3f	; 63
 4ea:	0f 92       	push	r0
 4ec:	11 24       	eor	r1, r1
 4ee:	2f 93       	push	r18
 4f0:	3f 93       	push	r19
 4f2:	4f 93       	push	r20
 4f4:	5f 93       	push	r21
 4f6:	6f 93       	push	r22
 4f8:	7f 93       	push	r23
 4fa:	8f 93       	push	r24
 4fc:	9f 93       	push	r25
 4fe:	af 93       	push	r26
 500:	bf 93       	push	r27
 502:	ef 93       	push	r30
 504:	ff 93       	push	r31
 506:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <Action+0x2>
 50a:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <Action+0x3>
 50e:	30 97       	sbiw	r30, 0x00	; 0
 510:	09 f0       	breq	.+2      	; 0x514 <__vector_2+0x30>
 512:	09 95       	icall
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <__vector_3>:
 536:	1f 92       	push	r1
 538:	0f 92       	push	r0
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	0f 92       	push	r0
 53e:	11 24       	eor	r1, r1
 540:	2f 93       	push	r18
 542:	3f 93       	push	r19
 544:	4f 93       	push	r20
 546:	5f 93       	push	r21
 548:	6f 93       	push	r22
 54a:	7f 93       	push	r23
 54c:	8f 93       	push	r24
 54e:	9f 93       	push	r25
 550:	af 93       	push	r26
 552:	bf 93       	push	r27
 554:	ef 93       	push	r30
 556:	ff 93       	push	r31
 558:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <Action+0x4>
 55c:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <Action+0x5>
 560:	30 97       	sbiw	r30, 0x00	; 0
 562:	09 f0       	breq	.+2      	; 0x566 <__vector_3+0x30>
 564:	09 95       	icall
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	bf 91       	pop	r27
 56c:	af 91       	pop	r26
 56e:	9f 91       	pop	r25
 570:	8f 91       	pop	r24
 572:	7f 91       	pop	r23
 574:	6f 91       	pop	r22
 576:	5f 91       	pop	r21
 578:	4f 91       	pop	r20
 57a:	3f 91       	pop	r19
 57c:	2f 91       	pop	r18
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <GIE_enable>:
 588:	78 94       	sei
 58a:	08 95       	ret

0000058c <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 58c:	1f 92       	push	r1
 58e:	0f 92       	push	r0
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
 596:	2f 93       	push	r18
 598:	3f 93       	push	r19
 59a:	4f 93       	push	r20
 59c:	5f 93       	push	r21
 59e:	6f 93       	push	r22
 5a0:	7f 93       	push	r23
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
 5a6:	af 93       	push	r26
 5a8:	bf 93       	push	r27
 5aa:	ef 93       	push	r30
 5ac:	ff 93       	push	r31
	if(Action_Spi != NULL){
 5ae:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <Action_Spi>
 5b2:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <Action_Spi+0x1>
 5b6:	30 97       	sbiw	r30, 0x00	; 0
 5b8:	11 f0       	breq	.+4      	; 0x5be <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 5ba:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 5bc:	09 95       	icall
	}
 5be:	ff 91       	pop	r31
 5c0:	ef 91       	pop	r30
 5c2:	bf 91       	pop	r27
 5c4:	af 91       	pop	r26
 5c6:	9f 91       	pop	r25
 5c8:	8f 91       	pop	r24
 5ca:	7f 91       	pop	r23
 5cc:	6f 91       	pop	r22
 5ce:	5f 91       	pop	r21
 5d0:	4f 91       	pop	r20
 5d2:	3f 91       	pop	r19
 5d4:	2f 91       	pop	r18
 5d6:	0f 90       	pop	r0
 5d8:	0f be       	out	0x3f, r0	; 63
 5da:	0f 90       	pop	r0
 5dc:	1f 90       	pop	r1
 5de:	18 95       	reti

000005e0 <__vector_11>:
 5e0:	1f 92       	push	r1
 5e2:	0f 92       	push	r0
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	0f 92       	push	r0
 5e8:	11 24       	eor	r1, r1
 5ea:	2f 93       	push	r18
 5ec:	3f 93       	push	r19
 5ee:	4f 93       	push	r20
 5f0:	5f 93       	push	r21
 5f2:	6f 93       	push	r22
 5f4:	7f 93       	push	r23
 5f6:	8f 93       	push	r24
 5f8:	9f 93       	push	r25
 5fa:	af 93       	push	r26
 5fc:	bf 93       	push	r27
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
 602:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <Action_Timer>
 606:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <Action_Timer+0x1>
 60a:	89 2b       	or	r24, r25
 60c:	89 f1       	breq	.+98     	; 0x670 <__vector_11+0x90>
 60e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <counter.1685>
 612:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <counter.1685+0x1>
 616:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <counter.1685+0x2>
 61a:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <counter.1685+0x3>
 61e:	01 96       	adiw	r24, 0x01	; 1
 620:	a1 1d       	adc	r26, r1
 622:	b1 1d       	adc	r27, r1
 624:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <counter.1685>
 628:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <counter.1685+0x1>
 62c:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <counter.1685+0x2>
 630:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <counter.1685+0x3>
 634:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <numOverflows>
 638:	50 91 97 00 	lds	r21, 0x0097	; 0x800097 <numOverflows+0x1>
 63c:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <numOverflows+0x2>
 640:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <numOverflows+0x3>
 644:	84 17       	cp	r24, r20
 646:	95 07       	cpc	r25, r21
 648:	a6 07       	cpc	r26, r22
 64a:	b7 07       	cpc	r27, r23
 64c:	89 f4       	brne	.+34     	; 0x670 <__vector_11+0x90>
 64e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <remainingCounts>
 652:	81 95       	neg	r24
 654:	82 bf       	out	0x32, r24	; 50
 656:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <counter.1685>
 65a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <counter.1685+0x1>
 65e:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <counter.1685+0x2>
 662:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <counter.1685+0x3>
 666:	e0 91 8e 00 	lds	r30, 0x008E	; 0x80008e <Action_Timer>
 66a:	f0 91 8f 00 	lds	r31, 0x008F	; 0x80008f <Action_Timer+0x1>
 66e:	09 95       	icall
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <__vector_10>:
 692:	1f 92       	push	r1
 694:	0f 92       	push	r0
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	2f 93       	push	r18
 69e:	3f 93       	push	r19
 6a0:	4f 93       	push	r20
 6a2:	5f 93       	push	r21
 6a4:	6f 93       	push	r22
 6a6:	7f 93       	push	r23
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	af 93       	push	r26
 6ae:	bf 93       	push	r27
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
 6b4:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <Action_Timer+0x2>
 6b8:	f0 91 91 00 	lds	r31, 0x0091	; 0x800091 <Action_Timer+0x3>
 6bc:	30 97       	sbiw	r30, 0x00	; 0
 6be:	09 f0       	breq	.+2      	; 0x6c2 <__vector_10+0x30>
 6c0:	09 95       	icall
 6c2:	ff 91       	pop	r31
 6c4:	ef 91       	pop	r30
 6c6:	bf 91       	pop	r27
 6c8:	af 91       	pop	r26
 6ca:	9f 91       	pop	r25
 6cc:	8f 91       	pop	r24
 6ce:	7f 91       	pop	r23
 6d0:	6f 91       	pop	r22
 6d2:	5f 91       	pop	r21
 6d4:	4f 91       	pop	r20
 6d6:	3f 91       	pop	r19
 6d8:	2f 91       	pop	r18
 6da:	0f 90       	pop	r0
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	0f 90       	pop	r0
 6e0:	1f 90       	pop	r1
 6e2:	18 95       	reti

000006e4 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 6e4:	1f 92       	push	r1
 6e6:	0f 92       	push	r0
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	0f 92       	push	r0
 6ec:	11 24       	eor	r1, r1
 6ee:	2f 93       	push	r18
 6f0:	3f 93       	push	r19
 6f2:	4f 93       	push	r20
 6f4:	5f 93       	push	r21
 6f6:	6f 93       	push	r22
 6f8:	7f 93       	push	r23
 6fa:	8f 93       	push	r24
 6fc:	9f 93       	push	r25
 6fe:	af 93       	push	r26
 700:	bf 93       	push	r27
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
 706:	ef 93       	push	r30
 708:	ff 93       	push	r31
	Action_Timer[0]();
 70a:	ce e9       	ldi	r28, 0x9E	; 158
 70c:	d0 e0       	ldi	r29, 0x00	; 0
 70e:	e8 81       	ld	r30, Y
 710:	f9 81       	ldd	r31, Y+1	; 0x01
 712:	09 95       	icall
	numOverflows++;
 714:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <numOverflows>
 718:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <numOverflows+0x1>
 71c:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <numOverflows+0x2>
 720:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <numOverflows+0x3>
 724:	01 96       	adiw	r24, 0x01	; 1
 726:	a1 1d       	adc	r26, r1
 728:	b1 1d       	adc	r27, r1
 72a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <numOverflows>
 72e:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <numOverflows+0x1>
 732:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <numOverflows+0x2>
 736:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 73a:	e8 81       	ld	r30, Y
 73c:	f9 81       	ldd	r31, Y+1	; 0x01
 73e:	30 97       	sbiw	r30, 0x00	; 0
 740:	49 f1       	breq	.+82     	; 0x794 <__vector_9+0xb0>
		counter++;
 742:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <counter.1744>
 746:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <counter.1744+0x1>
 74a:	a0 91 9c 00 	lds	r26, 0x009C	; 0x80009c <counter.1744+0x2>
 74e:	b0 91 9d 00 	lds	r27, 0x009D	; 0x80009d <counter.1744+0x3>
 752:	01 96       	adiw	r24, 0x01	; 1
 754:	a1 1d       	adc	r26, r1
 756:	b1 1d       	adc	r27, r1
 758:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <counter.1744>
 75c:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <counter.1744+0x1>
 760:	a0 93 9c 00 	sts	0x009C, r26	; 0x80009c <counter.1744+0x2>
 764:	b0 93 9d 00 	sts	0x009D, r27	; 0x80009d <counter.1744+0x3>
		if(counter == req_numOverflows){
 768:	40 91 aa 00 	lds	r20, 0x00AA	; 0x8000aa <req_numOverflows>
 76c:	50 91 ab 00 	lds	r21, 0x00AB	; 0x8000ab <req_numOverflows+0x1>
 770:	60 91 ac 00 	lds	r22, 0x00AC	; 0x8000ac <req_numOverflows+0x2>
 774:	70 91 ad 00 	lds	r23, 0x00AD	; 0x8000ad <req_numOverflows+0x3>
 778:	84 17       	cp	r24, r20
 77a:	95 07       	cpc	r25, r21
 77c:	a6 07       	cpc	r26, r22
 77e:	b7 07       	cpc	r27, r23
 780:	49 f4       	brne	.+18     	; 0x794 <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 782:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <counter.1744>
 786:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <counter.1744+0x1>
 78a:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <counter.1744+0x2>
 78e:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <counter.1744+0x3>
			Action_Timer[0]();
 792:	09 95       	icall
		}
		
	}
}
 794:	ff 91       	pop	r31
 796:	ef 91       	pop	r30
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	bf 91       	pop	r27
 79e:	af 91       	pop	r26
 7a0:	9f 91       	pop	r25
 7a2:	8f 91       	pop	r24
 7a4:	7f 91       	pop	r23
 7a6:	6f 91       	pop	r22
 7a8:	5f 91       	pop	r21
 7aa:	4f 91       	pop	r20
 7ac:	3f 91       	pop	r19
 7ae:	2f 91       	pop	r18
 7b0:	0f 90       	pop	r0
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	0f 90       	pop	r0
 7b6:	1f 90       	pop	r1
 7b8:	18 95       	reti

000007ba <__vector_7>:

ISR(TIMER1_COMPA_vect){
 7ba:	1f 92       	push	r1
 7bc:	0f 92       	push	r0
 7be:	0f b6       	in	r0, 0x3f	; 63
 7c0:	0f 92       	push	r0
 7c2:	11 24       	eor	r1, r1
 7c4:	2f 93       	push	r18
 7c6:	3f 93       	push	r19
 7c8:	4f 93       	push	r20
 7ca:	5f 93       	push	r21
 7cc:	6f 93       	push	r22
 7ce:	7f 93       	push	r23
 7d0:	8f 93       	push	r24
 7d2:	9f 93       	push	r25
 7d4:	af 93       	push	r26
 7d6:	bf 93       	push	r27
 7d8:	ef 93       	push	r30
 7da:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 7dc:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <Action_Timer+0x2>
 7e0:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <Action_Timer+0x3>
 7e4:	30 97       	sbiw	r30, 0x00	; 0
 7e6:	09 f0       	breq	.+2      	; 0x7ea <__vector_7+0x30>
		Action_Timer[1]();
 7e8:	09 95       	icall
	}
}
 7ea:	ff 91       	pop	r31
 7ec:	ef 91       	pop	r30
 7ee:	bf 91       	pop	r27
 7f0:	af 91       	pop	r26
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	7f 91       	pop	r23
 7f8:	6f 91       	pop	r22
 7fa:	5f 91       	pop	r21
 7fc:	4f 91       	pop	r20
 7fe:	3f 91       	pop	r19
 800:	2f 91       	pop	r18
 802:	0f 90       	pop	r0
 804:	0f be       	out	0x3f, r0	; 63
 806:	0f 90       	pop	r0
 808:	1f 90       	pop	r1
 80a:	18 95       	reti

0000080c <__vector_6>:


ISR(TIMER1_CAPT_vect){
 80c:	1f 92       	push	r1
 80e:	0f 92       	push	r0
 810:	0f b6       	in	r0, 0x3f	; 63
 812:	0f 92       	push	r0
 814:	11 24       	eor	r1, r1
 816:	2f 93       	push	r18
 818:	3f 93       	push	r19
 81a:	4f 93       	push	r20
 81c:	5f 93       	push	r21
 81e:	6f 93       	push	r22
 820:	7f 93       	push	r23
 822:	8f 93       	push	r24
 824:	9f 93       	push	r25
 826:	af 93       	push	r26
 828:	bf 93       	push	r27
 82a:	ef 93       	push	r30
 82c:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 82e:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <Action_Timer+0x6>
 832:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <Action_Timer+0x7>
 836:	30 97       	sbiw	r30, 0x00	; 0
 838:	09 f0       	breq	.+2      	; 0x83c <__vector_6+0x30>
			Action_Timer[3]();
 83a:	09 95       	icall
			
			
		}
 83c:	ff 91       	pop	r31
 83e:	ef 91       	pop	r30
 840:	bf 91       	pop	r27
 842:	af 91       	pop	r26
 844:	9f 91       	pop	r25
 846:	8f 91       	pop	r24
 848:	7f 91       	pop	r23
 84a:	6f 91       	pop	r22
 84c:	5f 91       	pop	r21
 84e:	4f 91       	pop	r20
 850:	3f 91       	pop	r19
 852:	2f 91       	pop	r18
 854:	0f 90       	pop	r0
 856:	0f be       	out	0x3f, r0	; 63
 858:	0f 90       	pop	r0
 85a:	1f 90       	pop	r1
 85c:	18 95       	reti

0000085e <__vector_13>:
	//set callback
	Action_Uart[0] = ptrfn;
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 85e:	1f 92       	push	r1
 860:	0f 92       	push	r0
 862:	0f b6       	in	r0, 0x3f	; 63
 864:	0f 92       	push	r0
 866:	11 24       	eor	r1, r1
 868:	2f 93       	push	r18
 86a:	3f 93       	push	r19
 86c:	4f 93       	push	r20
 86e:	5f 93       	push	r21
 870:	6f 93       	push	r22
 872:	7f 93       	push	r23
 874:	8f 93       	push	r24
 876:	9f 93       	push	r25
 878:	af 93       	push	r26
 87a:	bf 93       	push	r27
 87c:	ef 93       	push	r30
 87e:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 880:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 882:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <Action_Uart>
 886:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <Action_Uart+0x1>
 88a:	30 97       	sbiw	r30, 0x00	; 0
 88c:	09 f0       	breq	.+2      	; 0x890 <__stack+0x31>
		Action_Uart[0](receivedData);
 88e:	09 95       	icall
	}
 890:	ff 91       	pop	r31
 892:	ef 91       	pop	r30
 894:	bf 91       	pop	r27
 896:	af 91       	pop	r26
 898:	9f 91       	pop	r25
 89a:	8f 91       	pop	r24
 89c:	7f 91       	pop	r23
 89e:	6f 91       	pop	r22
 8a0:	5f 91       	pop	r21
 8a2:	4f 91       	pop	r20
 8a4:	3f 91       	pop	r19
 8a6:	2f 91       	pop	r18
 8a8:	0f 90       	pop	r0
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	0f 90       	pop	r0
 8ae:	1f 90       	pop	r1
 8b0:	18 95       	reti

000008b2 <_exit>:
 8b2:	f8 94       	cli

000008b4 <__stop_program>:
 8b4:	ff cf       	rjmp	.-2      	; 0x8b4 <__stop_program>
