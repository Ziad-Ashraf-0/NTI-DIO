
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000e2c  00000ec0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800096  00800096  00000ef6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ef6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000351d  00000000  00000000  000012dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013b4  00000000  00000000  000047f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b3d  00000000  00000000  00005bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a54  00000000  00000000  000076ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000159d  00000000  00000000  00008140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021c3  00000000  00000000  000096dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000b8a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 94 04 	jmp	0x928	; 0x928 <__vector_1>
   8:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_2>
   c:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_6>
  1c:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__vector_9>
  28:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__vector_10>
  2c:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__vector_11>
  30:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__vector_12>
  34:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 fb 03 	jmp	0x7f6	; 0x7f6 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 3c       	cpi	r26, 0xCA	; 202
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 14 07 	jmp	0xe28	; 0xe28 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "../HAL/RTC/RTC_interface.h"
#include <util/delay.h>



int main(void) {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	2a 97       	sbiw	r28, 0x0a	; 10
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	H_LCD_void_Init();
  a6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <H_LCD_void_Init>
	H_void_RTC_Init();
  aa:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <H_void_RTC_Init>
	Time_Config config = {10,18,59,HOUR_12,PM};
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	e0 e6       	ldi	r30, 0x60	; 96
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	8a 95       	dec	r24
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x26>
	H_void_RTC_setTime(&config);
  c0:	ce 01       	movw	r24, r28
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	0e 94 8c 02 	call	0x518	; 0x518 <H_void_RTC_setTime>
	Time_Config time;
		
	while (1) {
		H_LCD_void_clearScreen();
  c8:	0e 94 76 02 	call	0x4ec	; 0x4ec <H_LCD_void_clearScreen>
		H_void_RTC_getTime(&time);
  cc:	ce 01       	movw	r24, r28
  ce:	06 96       	adiw	r24, 0x06	; 6
  d0:	0e 94 2b 03 	call	0x656	; 0x656 <H_void_RTC_getTime>
		H_LCD_void_sendString("TIME : ");
  d4:	85 e7       	ldi	r24, 0x75	; 117
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 44 02 	call	0x488	; 0x488 <H_LCD_void_sendString>
		H_LCD_void_sendIntNum(time.hour);
  dc:	6e 81       	ldd	r22, Y+6	; 0x06
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 57 02 	call	0x4ae	; 0x4ae <H_LCD_void_sendIntNum>
		H_LCD_void_sendData(':');
  e8:	8a e3       	ldi	r24, 0x3A	; 58
  ea:	0e 94 01 02 	call	0x402	; 0x402 <H_LCD_void_sendData>
		H_LCD_void_sendIntNum(time.minute);
  ee:	6f 81       	ldd	r22, Y+7	; 0x07
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 57 02 	call	0x4ae	; 0x4ae <H_LCD_void_sendIntNum>
		H_LCD_void_sendData(':');
  fa:	8a e3       	ldi	r24, 0x3A	; 58
  fc:	0e 94 01 02 	call	0x402	; 0x402 <H_LCD_void_sendData>
		H_LCD_void_sendIntNum(time.sec);
 100:	68 85       	ldd	r22, Y+8	; 0x08
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 57 02 	call	0x4ae	; 0x4ae <H_LCD_void_sendIntNum>
		if(time.hour_type == HOUR_12){
 10c:	89 85       	ldd	r24, Y+9	; 0x09
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	61 f4       	brne	.+24     	; 0x12a <main+0x98>
			if(time.hour_value == AM){
 112:	8a 85       	ldd	r24, Y+10	; 0x0a
 114:	81 11       	cpse	r24, r1
 116:	05 c0       	rjmp	.+10     	; 0x122 <main+0x90>
				H_LCD_void_sendString(" AM");
 118:	8d e7       	ldi	r24, 0x7D	; 125
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 44 02 	call	0x488	; 0x488 <H_LCD_void_sendString>
 120:	04 c0       	rjmp	.+8      	; 0x12a <main+0x98>
				}else{
				H_LCD_void_sendString(" PM");
 122:	81 e8       	ldi	r24, 0x81	; 129
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 44 02 	call	0x488	; 0x488 <H_LCD_void_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	89 e6       	ldi	r24, 0x69	; 105
 12e:	98 e1       	ldi	r25, 0x18	; 24
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x9e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xa8>
 13a:	00 00       	nop
 13c:	c5 cf       	rjmp	.-118    	; 0xc8 <main+0x36>

0000013e <H_LCD_void_latchByte>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode){

	H_LCD_void_sendCommand(0xc0);
	H_LCD_void_sendData(copy_u8charCode);

}
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	64 97       	sbiw	r28, 0x14	; 20
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
 156:	08 2f       	mov	r16, r24
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	89 83       	std	Y+1, r24	; 0x01
 15c:	1a 82       	std	Y+2, r1	; 0x02
 15e:	8b 83       	std	Y+3, r24	; 0x03
 160:	04 fb       	bst	r16, 4
 162:	99 27       	eor	r25, r25
 164:	90 f9       	bld	r25, 0
 166:	9c 83       	std	Y+4, r25	; 0x04
 168:	8d 83       	std	Y+5, r24	; 0x05
 16a:	8e 83       	std	Y+6, r24	; 0x06
 16c:	8f 83       	std	Y+7, r24	; 0x07
 16e:	05 fb       	bst	r16, 5
 170:	99 27       	eor	r25, r25
 172:	90 f9       	bld	r25, 0
 174:	98 87       	std	Y+8, r25	; 0x08
 176:	89 87       	std	Y+9, r24	; 0x09
 178:	92 e0       	ldi	r25, 0x02	; 2
 17a:	9a 87       	std	Y+10, r25	; 0x0a
 17c:	8b 87       	std	Y+11, r24	; 0x0b
 17e:	06 fb       	bst	r16, 6
 180:	99 27       	eor	r25, r25
 182:	90 f9       	bld	r25, 0
 184:	9c 87       	std	Y+12, r25	; 0x0c
 186:	8d 87       	std	Y+13, r24	; 0x0d
 188:	94 e0       	ldi	r25, 0x04	; 4
 18a:	9e 87       	std	Y+14, r25	; 0x0e
 18c:	8f 87       	std	Y+15, r24	; 0x0f
 18e:	80 2f       	mov	r24, r16
 190:	88 1f       	adc	r24, r24
 192:	88 27       	eor	r24, r24
 194:	88 1f       	adc	r24, r24
 196:	88 8b       	std	Y+16, r24	; 0x10
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	0f c0       	rjmp	.+30     	; 0x1ba <H_LCD_void_latchByte+0x7c>
 19c:	81 2f       	mov	r24, r17
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	2c 0f       	add	r18, r28
 1ae:	3d 1f       	adc	r19, r29
 1b0:	82 0f       	add	r24, r18
 1b2:	93 1f       	adc	r25, r19
 1b4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_U8SetPinValue>
 1b8:	1f 5f       	subi	r17, 0xFF	; 255
 1ba:	14 30       	cpi	r17, 0x04	; 4
 1bc:	78 f3       	brcs	.-34     	; 0x19c <H_LCD_void_latchByte+0x5e>
 1be:	19 8a       	std	Y+17, r1	; 0x11
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	8a 8b       	std	Y+18, r24	; 0x12
 1c4:	1c 8a       	std	Y+20, r1	; 0x14
 1c6:	8f e9       	ldi	r24, 0x9F	; 159
 1c8:	9f e0       	ldi	r25, 0x0F	; 15
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <H_LCD_void_latchByte+0x8c>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <H_LCD_void_latchByte+0x92>
 1d0:	00 00       	nop
 1d2:	ce 01       	movw	r24, r28
 1d4:	41 96       	adiw	r24, 0x11	; 17
 1d6:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_U8SetPinValue>
 1da:	ef e9       	ldi	r30, 0x9F	; 159
 1dc:	ff e0       	ldi	r31, 0x0F	; 15
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <H_LCD_void_latchByte+0xa0>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <H_LCD_void_latchByte+0xa6>
 1e4:	00 00       	nop
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	8c 8b       	std	Y+20, r24	; 0x14
 1ea:	ce 01       	movw	r24, r28
 1ec:	41 96       	adiw	r24, 0x11	; 17
 1ee:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_U8SetPinValue>
 1f2:	8f e9       	ldi	r24, 0x9F	; 159
 1f4:	9f e0       	ldi	r25, 0x0F	; 15
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <H_LCD_void_latchByte+0xb8>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <H_LCD_void_latchByte+0xbe>
 1fc:	00 00       	nop
 1fe:	10 e0       	ldi	r17, 0x00	; 0
 200:	1a c0       	rjmp	.+52     	; 0x236 <H_LCD_void_latchByte+0xf8>
 202:	81 2f       	mov	r24, r17
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	20 2f       	mov	r18, r16
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	01 2e       	mov	r0, r17
 20c:	02 c0       	rjmp	.+4      	; 0x212 <H_LCD_void_latchByte+0xd4>
 20e:	35 95       	asr	r19
 210:	27 95       	ror	r18
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <H_LCD_void_latchByte+0xd0>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	e1 e0       	ldi	r30, 0x01	; 1
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	ec 0f       	add	r30, r28
 224:	fd 1f       	adc	r31, r29
 226:	8e 0f       	add	r24, r30
 228:	9f 1f       	adc	r25, r31
 22a:	21 70       	andi	r18, 0x01	; 1
 22c:	fc 01       	movw	r30, r24
 22e:	23 83       	std	Z+3, r18	; 0x03
 230:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_U8SetPinValue>
 234:	1f 5f       	subi	r17, 0xFF	; 255
 236:	14 30       	cpi	r17, 0x04	; 4
 238:	20 f3       	brcs	.-56     	; 0x202 <H_LCD_void_latchByte+0xc4>
 23a:	8f e9       	ldi	r24, 0x9F	; 159
 23c:	9f e0       	ldi	r25, 0x0F	; 15
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <H_LCD_void_latchByte+0x100>
 242:	00 c0       	rjmp	.+0      	; 0x244 <H_LCD_void_latchByte+0x106>
 244:	00 00       	nop
 246:	1c 8a       	std	Y+20, r1	; 0x14
 248:	ce 01       	movw	r24, r28
 24a:	41 96       	adiw	r24, 0x11	; 17
 24c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_U8SetPinValue>
 250:	ef e9       	ldi	r30, 0x9F	; 159
 252:	ff e0       	ldi	r31, 0x0F	; 15
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <H_LCD_void_latchByte+0x116>
 258:	00 c0       	rjmp	.+0      	; 0x25a <H_LCD_void_latchByte+0x11c>
 25a:	00 00       	nop
 25c:	64 96       	adiw	r28, 0x14	; 20
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	f8 94       	cli
 262:	de bf       	out	0x3e, r29	; 62
 264:	0f be       	out	0x3f, r0	; 63
 266:	cd bf       	out	0x3d, r28	; 61
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	08 95       	ret

00000272 <H_LCD_void_sendCommand>:
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	28 97       	sbiw	r28, 0x08	; 8
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
 28a:	08 2f       	mov	r16, r24
 28c:	88 e0       	ldi	r24, 0x08	; 8
 28e:	e5 e6       	ldi	r30, 0x65	; 101
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	de 01       	movw	r26, r28
 294:	11 96       	adiw	r26, 0x01	; 1
 296:	01 90       	ld	r0, Z+
 298:	0d 92       	st	X+, r0
 29a:	8a 95       	dec	r24
 29c:	e1 f7       	brne	.-8      	; 0x296 <H_LCD_void_sendCommand+0x24>
 29e:	10 e0       	ldi	r17, 0x00	; 0
 2a0:	15 c0       	rjmp	.+42     	; 0x2cc <H_LCD_void_sendCommand+0x5a>
 2a2:	81 2f       	mov	r24, r17
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	21 e0       	ldi	r18, 0x01	; 1
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	2c 0f       	add	r18, r28
 2b4:	3d 1f       	adc	r19, r29
 2b6:	82 0f       	add	r24, r18
 2b8:	93 1f       	adc	r25, r19
 2ba:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_U8SetPinValue>
 2be:	8f e9       	ldi	r24, 0x9F	; 159
 2c0:	9f e0       	ldi	r25, 0x0F	; 15
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <H_LCD_void_sendCommand+0x50>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <H_LCD_void_sendCommand+0x56>
 2c8:	00 00       	nop
 2ca:	1f 5f       	subi	r17, 0xFF	; 255
 2cc:	12 30       	cpi	r17, 0x02	; 2
 2ce:	48 f3       	brcs	.-46     	; 0x2a2 <H_LCD_void_sendCommand+0x30>
 2d0:	8f e9       	ldi	r24, 0x9F	; 159
 2d2:	9f e0       	ldi	r25, 0x0F	; 15
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <H_LCD_void_sendCommand+0x62>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <H_LCD_void_sendCommand+0x68>
 2da:	00 00       	nop
 2dc:	80 2f       	mov	r24, r16
 2de:	0e 94 9f 00 	call	0x13e	; 0x13e <H_LCD_void_latchByte>
 2e2:	28 96       	adiw	r28, 0x08	; 8
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	08 95       	ret

000002f8 <H_LCD_void_Init>:
 2f8:	1f 93       	push	r17
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
 302:	68 97       	sbiw	r28, 0x18	; 24
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	fe 01       	movw	r30, r28
 310:	31 96       	adiw	r30, 0x01	; 1
 312:	88 e0       	ldi	r24, 0x08	; 8
 314:	df 01       	movw	r26, r30
 316:	1d 92       	st	X+, r1
 318:	8a 95       	dec	r24
 31a:	e9 f7       	brne	.-6      	; 0x316 <H_LCD_void_Init+0x1e>
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	8a 83       	std	Y+2, r24	; 0x02
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	8b 83       	std	Y+3, r24	; 0x03
 324:	92 e0       	ldi	r25, 0x02	; 2
 326:	9e 83       	std	Y+6, r25	; 0x06
 328:	8f 83       	std	Y+7, r24	; 0x07
 32a:	10 e0       	ldi	r17, 0x00	; 0
 32c:	0f c0       	rjmp	.+30     	; 0x34c <H_LCD_void_Init+0x54>
 32e:	81 2f       	mov	r24, r17
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	2c 0f       	add	r18, r28
 340:	3d 1f       	adc	r19, r29
 342:	82 0f       	add	r24, r18
 344:	93 1f       	adc	r25, r19
 346:	0e 94 14 04 	call	0x828	; 0x828 <DIO_U8SetPinDirection>
 34a:	1f 5f       	subi	r17, 0xFF	; 255
 34c:	12 30       	cpi	r17, 0x02	; 2
 34e:	78 f3       	brcs	.-34     	; 0x32e <H_LCD_void_Init+0x36>
 350:	fe 01       	movw	r30, r28
 352:	39 96       	adiw	r30, 0x09	; 9
 354:	80 e1       	ldi	r24, 0x10	; 16
 356:	df 01       	movw	r26, r30
 358:	1d 92       	st	X+, r1
 35a:	8a 95       	dec	r24
 35c:	e9 f7       	brne	.-6      	; 0x358 <H_LCD_void_Init+0x60>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	89 87       	std	Y+9, r24	; 0x09
 362:	8b 87       	std	Y+11, r24	; 0x0b
 364:	8d 87       	std	Y+13, r24	; 0x0d
 366:	8e 87       	std	Y+14, r24	; 0x0e
 368:	8f 87       	std	Y+15, r24	; 0x0f
 36a:	89 8b       	std	Y+17, r24	; 0x11
 36c:	92 e0       	ldi	r25, 0x02	; 2
 36e:	9a 8b       	std	Y+18, r25	; 0x12
 370:	8b 8b       	std	Y+19, r24	; 0x13
 372:	8d 8b       	std	Y+21, r24	; 0x15
 374:	94 e0       	ldi	r25, 0x04	; 4
 376:	9e 8b       	std	Y+22, r25	; 0x16
 378:	8f 8b       	std	Y+23, r24	; 0x17
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	0f c0       	rjmp	.+30     	; 0x39c <H_LCD_void_Init+0xa4>
 37e:	81 2f       	mov	r24, r17
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	29 e0       	ldi	r18, 0x09	; 9
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	2c 0f       	add	r18, r28
 390:	3d 1f       	adc	r19, r29
 392:	82 0f       	add	r24, r18
 394:	93 1f       	adc	r25, r19
 396:	0e 94 14 04 	call	0x828	; 0x828 <DIO_U8SetPinDirection>
 39a:	1f 5f       	subi	r17, 0xFF	; 255
 39c:	14 30       	cpi	r17, 0x04	; 4
 39e:	78 f3       	brcs	.-34     	; 0x37e <H_LCD_void_Init+0x86>
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	0e 94 39 01 	call	0x272	; 0x272 <H_LCD_void_sendCommand>
 3a6:	8f e9       	ldi	r24, 0x9F	; 159
 3a8:	9f e0       	ldi	r25, 0x0F	; 15
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <H_LCD_void_Init+0xb2>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <H_LCD_void_Init+0xb8>
 3b0:	00 00       	nop
 3b2:	88 e2       	ldi	r24, 0x28	; 40
 3b4:	0e 94 39 01 	call	0x272	; 0x272 <H_LCD_void_sendCommand>
 3b8:	af e9       	ldi	r26, 0x9F	; 159
 3ba:	bf e0       	ldi	r27, 0x0F	; 15
 3bc:	11 97       	sbiw	r26, 0x01	; 1
 3be:	f1 f7       	brne	.-4      	; 0x3bc <H_LCD_void_Init+0xc4>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <H_LCD_void_Init+0xca>
 3c2:	00 00       	nop
 3c4:	8f e0       	ldi	r24, 0x0F	; 15
 3c6:	0e 94 39 01 	call	0x272	; 0x272 <H_LCD_void_sendCommand>
 3ca:	8f e9       	ldi	r24, 0x9F	; 159
 3cc:	9f e0       	ldi	r25, 0x0F	; 15
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <H_LCD_void_Init+0xd6>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <H_LCD_void_Init+0xdc>
 3d4:	00 00       	nop
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 39 01 	call	0x272	; 0x272 <H_LCD_void_sendCommand>
 3dc:	af e3       	ldi	r26, 0x3F	; 63
 3de:	bf e1       	ldi	r27, 0x1F	; 31
 3e0:	11 97       	sbiw	r26, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <H_LCD_void_Init+0xe8>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <H_LCD_void_Init+0xee>
 3e6:	00 00       	nop
 3e8:	86 e0       	ldi	r24, 0x06	; 6
 3ea:	0e 94 39 01 	call	0x272	; 0x272 <H_LCD_void_sendCommand>
 3ee:	68 96       	adiw	r28, 0x18	; 24
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	f8 94       	cli
 3f4:	de bf       	out	0x3e, r29	; 62
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	cd bf       	out	0x3d, r28	; 61
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	1f 91       	pop	r17
 400:	08 95       	ret

00000402 <H_LCD_void_sendData>:
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
 40e:	28 97       	sbiw	r28, 0x08	; 8
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	f8 94       	cli
 414:	de bf       	out	0x3e, r29	; 62
 416:	0f be       	out	0x3f, r0	; 63
 418:	cd bf       	out	0x3d, r28	; 61
 41a:	08 2f       	mov	r16, r24
 41c:	88 e0       	ldi	r24, 0x08	; 8
 41e:	ed e6       	ldi	r30, 0x6D	; 109
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	de 01       	movw	r26, r28
 424:	11 96       	adiw	r26, 0x01	; 1
 426:	01 90       	ld	r0, Z+
 428:	0d 92       	st	X+, r0
 42a:	8a 95       	dec	r24
 42c:	e1 f7       	brne	.-8      	; 0x426 <H_LCD_void_sendData+0x24>
 42e:	10 e0       	ldi	r17, 0x00	; 0
 430:	15 c0       	rjmp	.+42     	; 0x45c <H_LCD_void_sendData+0x5a>
 432:	81 2f       	mov	r24, r17
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	2c 0f       	add	r18, r28
 444:	3d 1f       	adc	r19, r29
 446:	82 0f       	add	r24, r18
 448:	93 1f       	adc	r25, r19
 44a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <DIO_U8SetPinValue>
 44e:	8f e9       	ldi	r24, 0x9F	; 159
 450:	9f e0       	ldi	r25, 0x0F	; 15
 452:	01 97       	sbiw	r24, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <H_LCD_void_sendData+0x50>
 456:	00 c0       	rjmp	.+0      	; 0x458 <H_LCD_void_sendData+0x56>
 458:	00 00       	nop
 45a:	1f 5f       	subi	r17, 0xFF	; 255
 45c:	12 30       	cpi	r17, 0x02	; 2
 45e:	48 f3       	brcs	.-46     	; 0x432 <H_LCD_void_sendData+0x30>
 460:	8f e9       	ldi	r24, 0x9F	; 159
 462:	9f e0       	ldi	r25, 0x0F	; 15
 464:	01 97       	sbiw	r24, 0x01	; 1
 466:	f1 f7       	brne	.-4      	; 0x464 <H_LCD_void_sendData+0x62>
 468:	00 c0       	rjmp	.+0      	; 0x46a <H_LCD_void_sendData+0x68>
 46a:	00 00       	nop
 46c:	80 2f       	mov	r24, r16
 46e:	0e 94 9f 00 	call	0x13e	; 0x13e <H_LCD_void_latchByte>
 472:	28 96       	adiw	r28, 0x08	; 8
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	08 95       	ret

00000488 <H_LCD_void_sendString>:
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	8c 01       	movw	r16, r24
 490:	c0 e0       	ldi	r28, 0x00	; 0
 492:	03 c0       	rjmp	.+6      	; 0x49a <H_LCD_void_sendString+0x12>
 494:	0e 94 01 02 	call	0x402	; 0x402 <H_LCD_void_sendData>
 498:	cf 5f       	subi	r28, 0xFF	; 255
 49a:	f8 01       	movw	r30, r16
 49c:	ec 0f       	add	r30, r28
 49e:	f1 1d       	adc	r31, r1
 4a0:	80 81       	ld	r24, Z
 4a2:	81 11       	cpse	r24, r1
 4a4:	f7 cf       	rjmp	.-18     	; 0x494 <H_LCD_void_sendString+0xc>
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	08 95       	ret

000004ae <H_LCD_void_sendIntNum>:
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
 4b6:	60 97       	sbiw	r28, 0x10	; 16
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	f8 94       	cli
 4bc:	de bf       	out	0x3e, r29	; 62
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	cd bf       	out	0x3d, r28	; 61
 4c2:	dc 01       	movw	r26, r24
 4c4:	cb 01       	movw	r24, r22
 4c6:	4a e0       	ldi	r20, 0x0A	; 10
 4c8:	be 01       	movw	r22, r28
 4ca:	6f 5f       	subi	r22, 0xFF	; 255
 4cc:	7f 4f       	sbci	r23, 0xFF	; 255
 4ce:	0e 94 df 06 	call	0xdbe	; 0xdbe <__itoa_ncheck>
 4d2:	ce 01       	movw	r24, r28
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	0e 94 44 02 	call	0x488	; 0x488 <H_LCD_void_sendString>
 4da:	60 96       	adiw	r28, 0x10	; 16
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	de bf       	out	0x3e, r29	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	cd bf       	out	0x3d, r28	; 61
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	08 95       	ret

000004ec <H_LCD_void_clearScreen>:

void H_LCD_void_clearScreen(void){
	H_LCD_void_sendCommand(LCD_CLEAR_COMMAND);
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 39 01 	call	0x272	; 0x272 <H_LCD_void_sendCommand>
 4f2:	08 95       	ret

000004f4 <H_void_RTC_Init>:
#include "RTC_private.h"



void H_void_RTC_Init()
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <H_void_RTC_Init+0x6>
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
	TWI_Config twi_config = {BIT_RATE_100};
 4fe:	1a 82       	std	Y+2, r1	; 0x02
 500:	19 82       	std	Y+1, r1	; 0x01
 502:	88 e4       	ldi	r24, 0x48	; 72
 504:	89 83       	std	Y+1, r24	; 0x01
	M_TWI_void_init(&twi_config);
 506:	ce 01       	movw	r24, r28
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <M_TWI_void_init>
}
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <H_void_RTC_setTime>:

u8 H_void_RTC_setTime(Time_Config * config){
 518:	0f 93       	push	r16
 51a:	1f 93       	push	r17
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	1f 92       	push	r1
 522:	cd b7       	in	r28, 0x3d	; 61
 524:	de b7       	in	r29, 0x3e	; 62
 526:	8c 01       	movw	r16, r24
	u8 status;
	M_TWI_void_start();
 528:	0e 94 82 06 	call	0xd04	; 0xd04 <M_TWI_void_start>
	M_TWI_void_getStatus(&status);
 52c:	ce 01       	movw	r24, r28
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_START)
 534:	89 81       	ldd	r24, Y+1	; 0x01
 536:	88 30       	cpi	r24, 0x08	; 8
 538:	09 f0       	breq	.+2      	; 0x53c <H_void_RTC_setTime+0x24>
 53a:	7c c0       	rjmp	.+248    	; 0x634 <H_void_RTC_setTime+0x11c>
	return ERROR;
	M_TWI_void_writeByte(Device_Write_address);
 53c:	80 ed       	ldi	r24, 0xD0	; 208
 53e:	0e 94 8b 06 	call	0xd16	; 0xd16 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
 542:	ce 01       	movw	r24, r28
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_MT_SLA_W_ACK)
 54a:	89 81       	ldd	r24, Y+1	; 0x01
 54c:	88 31       	cpi	r24, 0x18	; 24
 54e:	09 f0       	breq	.+2      	; 0x552 <H_void_RTC_setTime+0x3a>
 550:	73 c0       	rjmp	.+230    	; 0x638 <H_void_RTC_setTime+0x120>
	return ERROR;
	M_TWI_void_writeByte(0x00);
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 8b 06 	call	0xd16	; 0xd16 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
 558:	ce 01       	movw	r24, r28
 55a:	01 96       	adiw	r24, 0x01	; 1
 55c:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
 560:	89 81       	ldd	r24, Y+1	; 0x01
 562:	88 32       	cpi	r24, 0x28	; 40
 564:	09 f0       	breq	.+2      	; 0x568 <H_void_RTC_setTime+0x50>
 566:	6a c0       	rjmp	.+212    	; 0x63c <H_void_RTC_setTime+0x124>
	return ERROR;
	M_TWI_void_writeByte((config->sec / 10) << 4 | (config->sec % 10));
 568:	d8 01       	movw	r26, r16
 56a:	12 96       	adiw	r26, 0x02	; 2
 56c:	2c 91       	ld	r18, X
 56e:	9d ec       	ldi	r25, 0xCD	; 205
 570:	29 9f       	mul	r18, r25
 572:	91 2d       	mov	r25, r1
 574:	11 24       	eor	r1, r1
 576:	96 95       	lsr	r25
 578:	96 95       	lsr	r25
 57a:	96 95       	lsr	r25
 57c:	b0 e1       	ldi	r27, 0x10	; 16
 57e:	9b 9f       	mul	r25, r27
 580:	a0 01       	movw	r20, r0
 582:	11 24       	eor	r1, r1
 584:	99 0f       	add	r25, r25
 586:	39 2f       	mov	r19, r25
 588:	33 0f       	add	r19, r19
 58a:	33 0f       	add	r19, r19
 58c:	93 0f       	add	r25, r19
 58e:	82 2f       	mov	r24, r18
 590:	89 1b       	sub	r24, r25
 592:	84 2b       	or	r24, r20
 594:	0e 94 8b 06 	call	0xd16	; 0xd16 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
 598:	ce 01       	movw	r24, r28
 59a:	01 96       	adiw	r24, 0x01	; 1
 59c:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
 5a0:	89 81       	ldd	r24, Y+1	; 0x01
 5a2:	88 32       	cpi	r24, 0x28	; 40
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <H_void_RTC_setTime+0x90>
 5a6:	4c c0       	rjmp	.+152    	; 0x640 <H_void_RTC_setTime+0x128>
	return ERROR;
	M_TWI_void_writeByte((config->minute / 10) << 4 | (config->minute % 10));
 5a8:	f8 01       	movw	r30, r16
 5aa:	21 81       	ldd	r18, Z+1	; 0x01
 5ac:	9d ec       	ldi	r25, 0xCD	; 205
 5ae:	29 9f       	mul	r18, r25
 5b0:	91 2d       	mov	r25, r1
 5b2:	11 24       	eor	r1, r1
 5b4:	96 95       	lsr	r25
 5b6:	96 95       	lsr	r25
 5b8:	96 95       	lsr	r25
 5ba:	f0 e1       	ldi	r31, 0x10	; 16
 5bc:	9f 9f       	mul	r25, r31
 5be:	a0 01       	movw	r20, r0
 5c0:	11 24       	eor	r1, r1
 5c2:	99 0f       	add	r25, r25
 5c4:	39 2f       	mov	r19, r25
 5c6:	33 0f       	add	r19, r19
 5c8:	33 0f       	add	r19, r19
 5ca:	93 0f       	add	r25, r19
 5cc:	82 2f       	mov	r24, r18
 5ce:	89 1b       	sub	r24, r25
 5d0:	84 2b       	or	r24, r20
 5d2:	0e 94 8b 06 	call	0xd16	; 0xd16 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
 5d6:	ce 01       	movw	r24, r28
 5d8:	01 96       	adiw	r24, 0x01	; 1
 5da:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
 5de:	89 81       	ldd	r24, Y+1	; 0x01
 5e0:	88 32       	cpi	r24, 0x28	; 40
 5e2:	81 f5       	brne	.+96     	; 0x644 <H_void_RTC_setTime+0x12c>
	return ERROR;
	M_TWI_void_writeByte(config->hour_type << 6 | config->hour_value << 5 | (config->hour / 10) << 4 | (config->hour % 10));
 5e4:	d8 01       	movw	r26, r16
 5e6:	13 96       	adiw	r26, 0x03	; 3
 5e8:	4c 91       	ld	r20, X
 5ea:	b0 e4       	ldi	r27, 0x40	; 64
 5ec:	4b 9f       	mul	r20, r27
 5ee:	f0 01       	movw	r30, r0
 5f0:	11 24       	eor	r1, r1
 5f2:	d8 01       	movw	r26, r16
 5f4:	14 96       	adiw	r26, 0x04	; 4
 5f6:	8c 91       	ld	r24, X
 5f8:	b0 e2       	ldi	r27, 0x20	; 32
 5fa:	8b 9f       	mul	r24, r27
 5fc:	a0 01       	movw	r20, r0
 5fe:	11 24       	eor	r1, r1
 600:	d8 01       	movw	r26, r16
 602:	8c 91       	ld	r24, X
 604:	6a e0       	ldi	r22, 0x0A	; 10
 606:	0e 94 d3 06 	call	0xda6	; 0xda6 <__udivmodqi4>
 60a:	b0 e1       	ldi	r27, 0x10	; 16
 60c:	8b 9f       	mul	r24, r27
 60e:	90 01       	movw	r18, r0
 610:	11 24       	eor	r1, r1
 612:	4e 2b       	or	r20, r30
 614:	84 2f       	mov	r24, r20
 616:	82 2b       	or	r24, r18
 618:	89 2b       	or	r24, r25
 61a:	0e 94 8b 06 	call	0xd16	; 0xd16 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
 61e:	ce 01       	movw	r24, r28
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
 626:	89 81       	ldd	r24, Y+1	; 0x01
 628:	88 32       	cpi	r24, 0x28	; 40
 62a:	71 f4       	brne	.+28     	; 0x648 <H_void_RTC_setTime+0x130>
	return ERROR;
	M_TWI_void_stop();
 62c:	0e 94 88 06 	call	0xd10	; 0xd10 <M_TWI_void_stop>
	return SUCCESS;
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	0b c0       	rjmp	.+22     	; 0x64a <H_void_RTC_setTime+0x132>
u8 H_void_RTC_setTime(Time_Config * config){
	u8 status;
	M_TWI_void_start();
	M_TWI_void_getStatus(&status);
	if(status != TWI_START)
	return ERROR;
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	09 c0       	rjmp	.+18     	; 0x64a <H_void_RTC_setTime+0x132>
	M_TWI_void_writeByte(Device_Write_address);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_SLA_W_ACK)
	return ERROR;
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	07 c0       	rjmp	.+14     	; 0x64a <H_void_RTC_setTime+0x132>
	M_TWI_void_writeByte(0x00);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	05 c0       	rjmp	.+10     	; 0x64a <H_void_RTC_setTime+0x132>
	M_TWI_void_writeByte((config->sec / 10) << 4 | (config->sec % 10));
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	03 c0       	rjmp	.+6      	; 0x64a <H_void_RTC_setTime+0x132>
	M_TWI_void_writeByte((config->minute / 10) << 4 | (config->minute % 10));
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	01 c0       	rjmp	.+2      	; 0x64a <H_void_RTC_setTime+0x132>
	M_TWI_void_writeByte(config->hour_type << 6 | config->hour_value << 5 | (config->hour / 10) << 4 | (config->hour % 10));
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
 648:	80 e0       	ldi	r24, 0x00	; 0
	M_TWI_void_stop();
	return SUCCESS;
}
 64a:	0f 90       	pop	r0
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	1f 91       	pop	r17
 652:	0f 91       	pop	r16
 654:	08 95       	ret

00000656 <H_void_RTC_getTime>:


u8 H_void_RTC_getTime(Time_Config * config){
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	00 d0       	rcall	.+0      	; 0x660 <H_void_RTC_getTime+0xa>
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
 664:	8c 01       	movw	r16, r24
	u8 status,data;
	M_TWI_void_start();
 666:	0e 94 82 06 	call	0xd04	; 0xd04 <M_TWI_void_start>
	M_TWI_void_getStatus(&status);
 66a:	ce 01       	movw	r24, r28
 66c:	01 96       	adiw	r24, 0x01	; 1
 66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_START)
 672:	89 81       	ldd	r24, Y+1	; 0x01
 674:	88 30       	cpi	r24, 0x08	; 8
 676:	09 f0       	breq	.+2      	; 0x67a <H_void_RTC_getTime+0x24>
 678:	a8 c0       	rjmp	.+336    	; 0x7ca <H_void_RTC_getTime+0x174>
	return ERROR;
	
	M_TWI_void_writeByte(Device_Write_address);
 67a:	80 ed       	ldi	r24, 0xD0	; 208
 67c:	0e 94 8b 06 	call	0xd16	; 0xd16 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
 680:	ce 01       	movw	r24, r28
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_MT_SLA_W_ACK)
 688:	89 81       	ldd	r24, Y+1	; 0x01
 68a:	88 31       	cpi	r24, 0x18	; 24
 68c:	09 f0       	breq	.+2      	; 0x690 <H_void_RTC_getTime+0x3a>
 68e:	9f c0       	rjmp	.+318    	; 0x7ce <H_void_RTC_getTime+0x178>
	return ERROR;
	
	M_TWI_void_writeByte(0x00);
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	0e 94 8b 06 	call	0xd16	; 0xd16 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
 696:	ce 01       	movw	r24, r28
 698:	01 96       	adiw	r24, 0x01	; 1
 69a:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_MT_DATA_ACK)
 69e:	89 81       	ldd	r24, Y+1	; 0x01
 6a0:	88 32       	cpi	r24, 0x28	; 40
 6a2:	09 f0       	breq	.+2      	; 0x6a6 <H_void_RTC_getTime+0x50>
 6a4:	96 c0       	rjmp	.+300    	; 0x7d2 <H_void_RTC_getTime+0x17c>
	return ERROR;
	
	M_TWI_void_start();
 6a6:	0e 94 82 06 	call	0xd04	; 0xd04 <M_TWI_void_start>
	M_TWI_void_getStatus(&status);
 6aa:	ce 01       	movw	r24, r28
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_REP_START)
 6b2:	89 81       	ldd	r24, Y+1	; 0x01
 6b4:	80 31       	cpi	r24, 0x10	; 16
 6b6:	09 f0       	breq	.+2      	; 0x6ba <H_void_RTC_getTime+0x64>
 6b8:	8e c0       	rjmp	.+284    	; 0x7d6 <H_void_RTC_getTime+0x180>
	return ERROR;
	
	M_TWI_void_writeByte(Device_Read_address);
 6ba:	81 ed       	ldi	r24, 0xD1	; 209
 6bc:	0e 94 8b 06 	call	0xd16	; 0xd16 <M_TWI_void_writeByte>
	M_TWI_void_getStatus(&status);
 6c0:	ce 01       	movw	r24, r28
 6c2:	01 96       	adiw	r24, 0x01	; 1
 6c4:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_MT_SLA_R_ACK)
 6c8:	89 81       	ldd	r24, Y+1	; 0x01
 6ca:	80 34       	cpi	r24, 0x40	; 64
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <H_void_RTC_getTime+0x7a>
 6ce:	85 c0       	rjmp	.+266    	; 0x7da <H_void_RTC_getTime+0x184>
	return ERROR;
	
	M_TWI_void_readByteWithACK(&data);
 6d0:	ce 01       	movw	r24, r28
 6d2:	02 96       	adiw	r24, 0x02	; 2
 6d4:	0e 94 92 06 	call	0xd24	; 0xd24 <M_TWI_void_readByteWithACK>
	M_TWI_void_getStatus(&status);
 6d8:	ce 01       	movw	r24, r28
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_MR_DATA_ACK)
 6e0:	89 81       	ldd	r24, Y+1	; 0x01
 6e2:	80 35       	cpi	r24, 0x50	; 80
 6e4:	09 f0       	breq	.+2      	; 0x6e8 <H_void_RTC_getTime+0x92>
 6e6:	7b c0       	rjmp	.+246    	; 0x7de <H_void_RTC_getTime+0x188>
	return ERROR;
	config->sec = (data & 0x0F) + (((data & 0x70) * 10) >> 4);
 6e8:	2a 81       	ldd	r18, Y+2	; 0x02
 6ea:	82 2f       	mov	r24, r18
 6ec:	80 77       	andi	r24, 0x70	; 112
 6ee:	3a e0       	ldi	r19, 0x0A	; 10
 6f0:	83 9f       	mul	r24, r19
 6f2:	c0 01       	movw	r24, r0
 6f4:	11 24       	eor	r1, r1
 6f6:	95 95       	asr	r25
 6f8:	87 95       	ror	r24
 6fa:	95 95       	asr	r25
 6fc:	87 95       	ror	r24
 6fe:	95 95       	asr	r25
 700:	87 95       	ror	r24
 702:	95 95       	asr	r25
 704:	87 95       	ror	r24
 706:	2f 70       	andi	r18, 0x0F	; 15
 708:	82 0f       	add	r24, r18
 70a:	f8 01       	movw	r30, r16
 70c:	82 83       	std	Z+2, r24	; 0x02
	
	M_TWI_void_readByteWithACK(&data);
 70e:	ce 01       	movw	r24, r28
 710:	02 96       	adiw	r24, 0x02	; 2
 712:	0e 94 92 06 	call	0xd24	; 0xd24 <M_TWI_void_readByteWithACK>
	M_TWI_void_getStatus(&status);
 716:	ce 01       	movw	r24, r28
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_MR_DATA_ACK)
 71e:	89 81       	ldd	r24, Y+1	; 0x01
 720:	80 35       	cpi	r24, 0x50	; 80
 722:	09 f0       	breq	.+2      	; 0x726 <H_void_RTC_getTime+0xd0>
 724:	5e c0       	rjmp	.+188    	; 0x7e2 <H_void_RTC_getTime+0x18c>
	return ERROR;
	config->minute = (data & 0x0F) + (((data & 0x70) * 10) >> 4);
 726:	2a 81       	ldd	r18, Y+2	; 0x02
 728:	82 2f       	mov	r24, r18
 72a:	80 77       	andi	r24, 0x70	; 112
 72c:	fa e0       	ldi	r31, 0x0A	; 10
 72e:	8f 9f       	mul	r24, r31
 730:	c0 01       	movw	r24, r0
 732:	11 24       	eor	r1, r1
 734:	95 95       	asr	r25
 736:	87 95       	ror	r24
 738:	95 95       	asr	r25
 73a:	87 95       	ror	r24
 73c:	95 95       	asr	r25
 73e:	87 95       	ror	r24
 740:	95 95       	asr	r25
 742:	87 95       	ror	r24
 744:	2f 70       	andi	r18, 0x0F	; 15
 746:	82 0f       	add	r24, r18
 748:	f8 01       	movw	r30, r16
 74a:	81 83       	std	Z+1, r24	; 0x01
	
	M_TWI_void_readByteWithNACK(&data);
 74c:	ce 01       	movw	r24, r28
 74e:	02 96       	adiw	r24, 0x02	; 2
 750:	0e 94 9b 06 	call	0xd36	; 0xd36 <M_TWI_void_readByteWithNACK>
	M_TWI_void_getStatus(&status);
 754:	ce 01       	movw	r24, r28
 756:	01 96       	adiw	r24, 0x01	; 1
 758:	0e 94 a4 06 	call	0xd48	; 0xd48 <M_TWI_void_getStatus>
	if(status != TWI_MR_DATA_NACK)
 75c:	89 81       	ldd	r24, Y+1	; 0x01
 75e:	88 35       	cpi	r24, 0x58	; 88
 760:	09 f0       	breq	.+2      	; 0x764 <H_void_RTC_getTime+0x10e>
 762:	41 c0       	rjmp	.+130    	; 0x7e6 <H_void_RTC_getTime+0x190>
	return ERROR;
	if(BIT_IS_SET(data,6)){
 764:	8a 81       	ldd	r24, Y+2	; 0x02
 766:	86 ff       	sbrs	r24, 6
 768:	1a c0       	rjmp	.+52     	; 0x79e <H_void_RTC_getTime+0x148>
		config->hour = (data & 0x0F) + (((data & 0x10) * 10) >> 4);
 76a:	28 2f       	mov	r18, r24
 76c:	20 71       	andi	r18, 0x10	; 16
 76e:	fa e0       	ldi	r31, 0x0A	; 10
 770:	2f 9f       	mul	r18, r31
 772:	90 01       	movw	r18, r0
 774:	11 24       	eor	r1, r1
 776:	35 95       	asr	r19
 778:	27 95       	ror	r18
 77a:	35 95       	asr	r19
 77c:	27 95       	ror	r18
 77e:	35 95       	asr	r19
 780:	27 95       	ror	r18
 782:	35 95       	asr	r19
 784:	27 95       	ror	r18
 786:	8f 70       	andi	r24, 0x0F	; 15
 788:	82 0f       	add	r24, r18
 78a:	f8 01       	movw	r30, r16
 78c:	80 83       	st	Z, r24
		config->hour_type = HOUR_12;
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	83 83       	std	Z+3, r24	; 0x03
		config->hour_value = (data >> 5 ) & 1;
 792:	8a 81       	ldd	r24, Y+2	; 0x02
 794:	85 fb       	bst	r24, 5
 796:	88 27       	eor	r24, r24
 798:	80 f9       	bld	r24, 0
 79a:	84 83       	std	Z+4, r24	; 0x04
 79c:	12 c0       	rjmp	.+36     	; 0x7c2 <H_void_RTC_getTime+0x16c>
	}else{
		config->hour = (data & 0x0F) + (((data & 0x30) * 10) >> 4);
 79e:	28 2f       	mov	r18, r24
 7a0:	20 73       	andi	r18, 0x30	; 48
 7a2:	fa e0       	ldi	r31, 0x0A	; 10
 7a4:	2f 9f       	mul	r18, r31
 7a6:	90 01       	movw	r18, r0
 7a8:	11 24       	eor	r1, r1
 7aa:	35 95       	asr	r19
 7ac:	27 95       	ror	r18
 7ae:	35 95       	asr	r19
 7b0:	27 95       	ror	r18
 7b2:	35 95       	asr	r19
 7b4:	27 95       	ror	r18
 7b6:	35 95       	asr	r19
 7b8:	27 95       	ror	r18
 7ba:	8f 70       	andi	r24, 0x0F	; 15
 7bc:	82 0f       	add	r24, r18
 7be:	f8 01       	movw	r30, r16
 7c0:	80 83       	st	Z, r24
	}
	
	M_TWI_void_stop();
 7c2:	0e 94 88 06 	call	0xd10	; 0xd10 <M_TWI_void_stop>
	return SUCCESS;
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	0f c0       	rjmp	.+30     	; 0x7e8 <H_void_RTC_getTime+0x192>
u8 H_void_RTC_getTime(Time_Config * config){
	u8 status,data;
	M_TWI_void_start();
	M_TWI_void_getStatus(&status);
	if(status != TWI_START)
	return ERROR;
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	0d c0       	rjmp	.+26     	; 0x7e8 <H_void_RTC_getTime+0x192>
	
	M_TWI_void_writeByte(Device_Write_address);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_SLA_W_ACK)
	return ERROR;
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	0b c0       	rjmp	.+22     	; 0x7e8 <H_void_RTC_getTime+0x192>
	
	M_TWI_void_writeByte(0x00);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_DATA_ACK)
	return ERROR;
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	09 c0       	rjmp	.+18     	; 0x7e8 <H_void_RTC_getTime+0x192>
	
	M_TWI_void_start();
	M_TWI_void_getStatus(&status);
	if(status != TWI_REP_START)
	return ERROR;
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <H_void_RTC_getTime+0x192>
	
	M_TWI_void_writeByte(Device_Read_address);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MT_SLA_R_ACK)
	return ERROR;
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <H_void_RTC_getTime+0x192>
	
	M_TWI_void_readByteWithACK(&data);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MR_DATA_ACK)
	return ERROR;
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <H_void_RTC_getTime+0x192>
	config->sec = (data & 0x0F) + (((data & 0x70) * 10) >> 4);
	
	M_TWI_void_readByteWithACK(&data);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MR_DATA_ACK)
	return ERROR;
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <H_void_RTC_getTime+0x192>
	config->minute = (data & 0x0F) + (((data & 0x70) * 10) >> 4);
	
	M_TWI_void_readByteWithNACK(&data);
	M_TWI_void_getStatus(&status);
	if(status != TWI_MR_DATA_NACK)
	return ERROR;
 7e6:	80 e0       	ldi	r24, 0x00	; 0
		config->hour = (data & 0x0F) + (((data & 0x30) * 10) >> 4);
	}
	
	M_TWI_void_stop();
	return SUCCESS;
 7e8:	0f 90       	pop	r0
 7ea:	0f 90       	pop	r0
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	08 95       	ret

000007f6 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 7f6:	24 b1       	in	r18, 0x04	; 4
 7f8:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 7fa:	00 24       	eor	r0, r0
 7fc:	22 0f       	add	r18, r18
 7fe:	33 1f       	adc	r19, r19
 800:	00 1c       	adc	r0, r0
 802:	22 0f       	add	r18, r18
 804:	33 1f       	adc	r19, r19
 806:	00 1c       	adc	r0, r0
 808:	23 2f       	mov	r18, r19
 80a:	30 2d       	mov	r19, r0
 80c:	85 b1       	in	r24, 0x05	; 5
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 818:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <__data_end>
 81c:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <__data_end+0x1>
 820:	82 2b       	or	r24, r18
 822:	93 2b       	or	r25, r19
 824:	09 95       	icall
 826:	08 95       	ret

00000828 <DIO_U8SetPinDirection>:
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 828:	dc 01       	movw	r26, r24
 82a:	ec 91       	ld	r30, X
 82c:	e4 30       	cpi	r30, 0x04	; 4
 82e:	a0 f5       	brcc	.+104    	; 0x898 <__stack+0x39>
 830:	11 96       	adiw	r26, 0x01	; 1
 832:	2c 91       	ld	r18, X
 834:	11 97       	sbiw	r26, 0x01	; 1
 836:	28 30       	cpi	r18, 0x08	; 8
 838:	88 f5       	brcc	.+98     	; 0x89c <__stack+0x3d>
 83a:	12 96       	adiw	r26, 0x02	; 2
 83c:	8c 91       	ld	r24, X
 83e:	81 11       	cpse	r24, r1
 840:	15 c0       	rjmp	.+42     	; 0x86c <__stack+0xd>
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	ee 0f       	add	r30, r30
 846:	ff 1f       	adc	r31, r31
 848:	e3 57       	subi	r30, 0x73	; 115
 84a:	ff 4f       	sbci	r31, 0xFF	; 255
 84c:	01 90       	ld	r0, Z+
 84e:	f0 81       	ld	r31, Z
 850:	e0 2d       	mov	r30, r0
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <DIO_U8SetPinDirection+0x34>
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	2a 95       	dec	r18
 85e:	e2 f7       	brpl	.-8      	; 0x858 <DIO_U8SetPinDirection+0x30>
 860:	80 95       	com	r24
 862:	90 81       	ld	r25, Z
 864:	89 23       	and	r24, r25
 866:	80 83       	st	Z, r24
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	08 95       	ret
 86c:	81 30       	cpi	r24, 0x01	; 1
 86e:	c1 f4       	brne	.+48     	; 0x8a0 <__stack+0x41>
 870:	f0 e0       	ldi	r31, 0x00	; 0
 872:	ee 0f       	add	r30, r30
 874:	ff 1f       	adc	r31, r31
 876:	e3 57       	subi	r30, 0x73	; 115
 878:	ff 4f       	sbci	r31, 0xFF	; 255
 87a:	01 90       	ld	r0, Z+
 87c:	f0 81       	ld	r31, Z
 87e:	e0 2d       	mov	r30, r0
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	2a 95       	dec	r18
 88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
 88e:	90 81       	ld	r25, Z
 890:	89 2b       	or	r24, r25
 892:	80 83       	st	Z, r24
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	08 95       	ret
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	08 95       	ret
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	08 95       	ret
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	08 95       	ret

000008a4 <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(const DIO_Config* config) {
    if (config != NULL) {
 8a4:	00 97       	sbiw	r24, 0x00	; 0
 8a6:	c1 f1       	breq	.+112    	; 0x918 <DIO_U8SetPinValue+0x74>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 8a8:	dc 01       	movw	r26, r24
 8aa:	ec 91       	ld	r30, X
 8ac:	e4 30       	cpi	r30, 0x04	; 4
 8ae:	b0 f5       	brcc	.+108    	; 0x91c <DIO_U8SetPinValue+0x78>
 8b0:	11 96       	adiw	r26, 0x01	; 1
 8b2:	2c 91       	ld	r18, X
 8b4:	11 97       	sbiw	r26, 0x01	; 1
 8b6:	28 30       	cpi	r18, 0x08	; 8
 8b8:	98 f5       	brcc	.+102    	; 0x920 <DIO_U8SetPinValue+0x7c>
            if (config->value == DIO_PIN_HIGH) {
 8ba:	13 96       	adiw	r26, 0x03	; 3
 8bc:	8c 91       	ld	r24, X
 8be:	81 30       	cpi	r24, 0x01	; 1
 8c0:	a1 f4       	brne	.+40     	; 0x8ea <DIO_U8SetPinValue+0x46>
                SET_BIT(*writeRegisters[config->port], config->pin);
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	ee 0f       	add	r30, r30
 8c6:	ff 1f       	adc	r31, r31
 8c8:	eb 57       	subi	r30, 0x7B	; 123
 8ca:	ff 4f       	sbci	r31, 0xFF	; 255
 8cc:	01 90       	ld	r0, Z+
 8ce:	f0 81       	ld	r31, Z
 8d0:	e0 2d       	mov	r30, r0
 8d2:	81 e0       	ldi	r24, 0x01	; 1
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <DIO_U8SetPinValue+0x38>
 8d8:	88 0f       	add	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	2a 95       	dec	r18
 8de:	e2 f7       	brpl	.-8      	; 0x8d8 <DIO_U8SetPinValue+0x34>
 8e0:	90 81       	ld	r25, Z
 8e2:	89 2b       	or	r24, r25
 8e4:	80 83       	st	Z, r24
                return NO_ERROR;
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	08 95       	ret
            } else if (config->value == DIO_PIN_LOW) {
 8ea:	81 11       	cpse	r24, r1
 8ec:	1b c0       	rjmp	.+54     	; 0x924 <DIO_U8SetPinValue+0x80>
                CLR_BIT(*writeRegisters[config->port], config->pin);
 8ee:	f0 e0       	ldi	r31, 0x00	; 0
 8f0:	ee 0f       	add	r30, r30
 8f2:	ff 1f       	adc	r31, r31
 8f4:	eb 57       	subi	r30, 0x7B	; 123
 8f6:	ff 4f       	sbci	r31, 0xFF	; 255
 8f8:	01 90       	ld	r0, Z+
 8fa:	f0 81       	ld	r31, Z
 8fc:	e0 2d       	mov	r30, r0
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	02 c0       	rjmp	.+4      	; 0x908 <DIO_U8SetPinValue+0x64>
 904:	88 0f       	add	r24, r24
 906:	99 1f       	adc	r25, r25
 908:	2a 95       	dec	r18
 90a:	e2 f7       	brpl	.-8      	; 0x904 <DIO_U8SetPinValue+0x60>
 90c:	80 95       	com	r24
 90e:	90 81       	ld	r25, Z
 910:	89 23       	and	r24, r25
 912:	80 83       	st	Z, r24
                return NO_ERROR;
 914:	80 e0       	ldi	r24, 0x00	; 0
 916:	08 95       	ret
            }
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	08 95       	ret
                return NO_ERROR;
            } else {
                return ERROR;
            }
        } else {
            return ERROR;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	08 95       	ret
 920:	81 e0       	ldi	r24, 0x01	; 1
 922:	08 95       	ret
                return NO_ERROR;
            } else if (config->value == DIO_PIN_LOW) {
                CLR_BIT(*writeRegisters[config->port], config->pin);
                return NO_ERROR;
            } else {
                return ERROR;
 924:	81 e0       	ldi	r24, 0x01	; 1
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 926:	08 95       	ret

00000928 <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 928:	1f 92       	push	r1
 92a:	0f 92       	push	r0
 92c:	0f b6       	in	r0, 0x3f	; 63
 92e:	0f 92       	push	r0
 930:	11 24       	eor	r1, r1
 932:	2f 93       	push	r18
 934:	3f 93       	push	r19
 936:	4f 93       	push	r20
 938:	5f 93       	push	r21
 93a:	6f 93       	push	r22
 93c:	7f 93       	push	r23
 93e:	8f 93       	push	r24
 940:	9f 93       	push	r25
 942:	af 93       	push	r26
 944:	bf 93       	push	r27
 946:	ef 93       	push	r30
 948:	ff 93       	push	r31
	if(Action[0]!= NULL){
 94a:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <Action>
 94e:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <Action+0x1>
 952:	30 97       	sbiw	r30, 0x00	; 0
 954:	09 f0       	breq	.+2      	; 0x958 <__vector_1+0x30>
		Action[0]();
 956:	09 95       	icall
	}
}
 958:	ff 91       	pop	r31
 95a:	ef 91       	pop	r30
 95c:	bf 91       	pop	r27
 95e:	af 91       	pop	r26
 960:	9f 91       	pop	r25
 962:	8f 91       	pop	r24
 964:	7f 91       	pop	r23
 966:	6f 91       	pop	r22
 968:	5f 91       	pop	r21
 96a:	4f 91       	pop	r20
 96c:	3f 91       	pop	r19
 96e:	2f 91       	pop	r18
 970:	0f 90       	pop	r0
 972:	0f be       	out	0x3f, r0	; 63
 974:	0f 90       	pop	r0
 976:	1f 90       	pop	r1
 978:	18 95       	reti

0000097a <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 97a:	1f 92       	push	r1
 97c:	0f 92       	push	r0
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	0f 92       	push	r0
 982:	11 24       	eor	r1, r1
 984:	2f 93       	push	r18
 986:	3f 93       	push	r19
 988:	4f 93       	push	r20
 98a:	5f 93       	push	r21
 98c:	6f 93       	push	r22
 98e:	7f 93       	push	r23
 990:	8f 93       	push	r24
 992:	9f 93       	push	r25
 994:	af 93       	push	r26
 996:	bf 93       	push	r27
 998:	ef 93       	push	r30
 99a:	ff 93       	push	r31
	if(Action[1]!= NULL){
 99c:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <Action+0x2>
 9a0:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <Action+0x3>
 9a4:	30 97       	sbiw	r30, 0x00	; 0
 9a6:	09 f0       	breq	.+2      	; 0x9aa <__vector_2+0x30>
		Action[1]();
 9a8:	09 95       	icall
	}
}
 9aa:	ff 91       	pop	r31
 9ac:	ef 91       	pop	r30
 9ae:	bf 91       	pop	r27
 9b0:	af 91       	pop	r26
 9b2:	9f 91       	pop	r25
 9b4:	8f 91       	pop	r24
 9b6:	7f 91       	pop	r23
 9b8:	6f 91       	pop	r22
 9ba:	5f 91       	pop	r21
 9bc:	4f 91       	pop	r20
 9be:	3f 91       	pop	r19
 9c0:	2f 91       	pop	r18
 9c2:	0f 90       	pop	r0
 9c4:	0f be       	out	0x3f, r0	; 63
 9c6:	0f 90       	pop	r0
 9c8:	1f 90       	pop	r1
 9ca:	18 95       	reti

000009cc <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 9cc:	1f 92       	push	r1
 9ce:	0f 92       	push	r0
 9d0:	0f b6       	in	r0, 0x3f	; 63
 9d2:	0f 92       	push	r0
 9d4:	11 24       	eor	r1, r1
 9d6:	2f 93       	push	r18
 9d8:	3f 93       	push	r19
 9da:	4f 93       	push	r20
 9dc:	5f 93       	push	r21
 9de:	6f 93       	push	r22
 9e0:	7f 93       	push	r23
 9e2:	8f 93       	push	r24
 9e4:	9f 93       	push	r25
 9e6:	af 93       	push	r26
 9e8:	bf 93       	push	r27
 9ea:	ef 93       	push	r30
 9ec:	ff 93       	push	r31
	if(Action[2]!= NULL){
 9ee:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <Action+0x4>
 9f2:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <Action+0x5>
 9f6:	30 97       	sbiw	r30, 0x00	; 0
 9f8:	09 f0       	breq	.+2      	; 0x9fc <__vector_3+0x30>
		Action[2]();
 9fa:	09 95       	icall
	}
}
 9fc:	ff 91       	pop	r31
 9fe:	ef 91       	pop	r30
 a00:	bf 91       	pop	r27
 a02:	af 91       	pop	r26
 a04:	9f 91       	pop	r25
 a06:	8f 91       	pop	r24
 a08:	7f 91       	pop	r23
 a0a:	6f 91       	pop	r22
 a0c:	5f 91       	pop	r21
 a0e:	4f 91       	pop	r20
 a10:	3f 91       	pop	r19
 a12:	2f 91       	pop	r18
 a14:	0f 90       	pop	r0
 a16:	0f be       	out	0x3f, r0	; 63
 a18:	0f 90       	pop	r0
 a1a:	1f 90       	pop	r1
 a1c:	18 95       	reti

00000a1e <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 a1e:	1f 92       	push	r1
 a20:	0f 92       	push	r0
 a22:	0f b6       	in	r0, 0x3f	; 63
 a24:	0f 92       	push	r0
 a26:	11 24       	eor	r1, r1
 a28:	2f 93       	push	r18
 a2a:	3f 93       	push	r19
 a2c:	4f 93       	push	r20
 a2e:	5f 93       	push	r21
 a30:	6f 93       	push	r22
 a32:	7f 93       	push	r23
 a34:	8f 93       	push	r24
 a36:	9f 93       	push	r25
 a38:	af 93       	push	r26
 a3a:	bf 93       	push	r27
 a3c:	ef 93       	push	r30
 a3e:	ff 93       	push	r31
	if(Action_Spi != NULL){
 a40:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <Action_Spi>
 a44:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <Action_Spi+0x1>
 a48:	30 97       	sbiw	r30, 0x00	; 0
 a4a:	11 f0       	breq	.+4      	; 0xa50 <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 a4c:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 a4e:	09 95       	icall
	}
 a50:	ff 91       	pop	r31
 a52:	ef 91       	pop	r30
 a54:	bf 91       	pop	r27
 a56:	af 91       	pop	r26
 a58:	9f 91       	pop	r25
 a5a:	8f 91       	pop	r24
 a5c:	7f 91       	pop	r23
 a5e:	6f 91       	pop	r22
 a60:	5f 91       	pop	r21
 a62:	4f 91       	pop	r20
 a64:	3f 91       	pop	r19
 a66:	2f 91       	pop	r18
 a68:	0f 90       	pop	r0
 a6a:	0f be       	out	0x3f, r0	; 63
 a6c:	0f 90       	pop	r0
 a6e:	1f 90       	pop	r1
 a70:	18 95       	reti

00000a72 <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 a72:	1f 92       	push	r1
 a74:	0f 92       	push	r0
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	0f 92       	push	r0
 a7a:	11 24       	eor	r1, r1
 a7c:	2f 93       	push	r18
 a7e:	3f 93       	push	r19
 a80:	4f 93       	push	r20
 a82:	5f 93       	push	r21
 a84:	6f 93       	push	r22
 a86:	7f 93       	push	r23
 a88:	8f 93       	push	r24
 a8a:	9f 93       	push	r25
 a8c:	af 93       	push	r26
 a8e:	bf 93       	push	r27
 a90:	ef 93       	push	r30
 a92:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 a94:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <Action_Timer>
 a98:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <Action_Timer+0x1>
 a9c:	89 2b       	or	r24, r25
 a9e:	89 f1       	breq	.+98     	; 0xb02 <__vector_11+0x90>
		counter++;
 aa0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <counter.1685>
 aa4:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <counter.1685+0x1>
 aa8:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <counter.1685+0x2>
 aac:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <counter.1685+0x3>
 ab0:	01 96       	adiw	r24, 0x01	; 1
 ab2:	a1 1d       	adc	r26, r1
 ab4:	b1 1d       	adc	r27, r1
 ab6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter.1685>
 aba:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <counter.1685+0x1>
 abe:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <counter.1685+0x2>
 ac2:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <counter.1685+0x3>
		if(counter == numOverflows){
 ac6:	40 91 ac 00 	lds	r20, 0x00AC	; 0x8000ac <numOverflows>
 aca:	50 91 ad 00 	lds	r21, 0x00AD	; 0x8000ad <numOverflows+0x1>
 ace:	60 91 ae 00 	lds	r22, 0x00AE	; 0x8000ae <numOverflows+0x2>
 ad2:	70 91 af 00 	lds	r23, 0x00AF	; 0x8000af <numOverflows+0x3>
 ad6:	84 17       	cp	r24, r20
 ad8:	95 07       	cpc	r25, r21
 ada:	a6 07       	cpc	r26, r22
 adc:	b7 07       	cpc	r27, r23
 ade:	89 f4       	brne	.+34     	; 0xb02 <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 ae0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <remainingCounts>
 ae4:	81 95       	neg	r24
 ae6:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 ae8:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <counter.1685>
 aec:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <counter.1685+0x1>
 af0:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <counter.1685+0x2>
 af4:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <counter.1685+0x3>
			Action_Timer[0]();
 af8:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <Action_Timer>
 afc:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <Action_Timer+0x1>
 b00:	09 95       	icall
		}
		
	}
}
 b02:	ff 91       	pop	r31
 b04:	ef 91       	pop	r30
 b06:	bf 91       	pop	r27
 b08:	af 91       	pop	r26
 b0a:	9f 91       	pop	r25
 b0c:	8f 91       	pop	r24
 b0e:	7f 91       	pop	r23
 b10:	6f 91       	pop	r22
 b12:	5f 91       	pop	r21
 b14:	4f 91       	pop	r20
 b16:	3f 91       	pop	r19
 b18:	2f 91       	pop	r18
 b1a:	0f 90       	pop	r0
 b1c:	0f be       	out	0x3f, r0	; 63
 b1e:	0f 90       	pop	r0
 b20:	1f 90       	pop	r1
 b22:	18 95       	reti

00000b24 <__vector_10>:

ISR(TIMER0_COMP_vect){
 b24:	1f 92       	push	r1
 b26:	0f 92       	push	r0
 b28:	0f b6       	in	r0, 0x3f	; 63
 b2a:	0f 92       	push	r0
 b2c:	11 24       	eor	r1, r1
 b2e:	2f 93       	push	r18
 b30:	3f 93       	push	r19
 b32:	4f 93       	push	r20
 b34:	5f 93       	push	r21
 b36:	6f 93       	push	r22
 b38:	7f 93       	push	r23
 b3a:	8f 93       	push	r24
 b3c:	9f 93       	push	r25
 b3e:	af 93       	push	r26
 b40:	bf 93       	push	r27
 b42:	ef 93       	push	r30
 b44:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 b46:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <Action_Timer+0x2>
 b4a:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <Action_Timer+0x3>
 b4e:	30 97       	sbiw	r30, 0x00	; 0
 b50:	09 f0       	breq	.+2      	; 0xb54 <__vector_10+0x30>
		Action_Timer[1]();
 b52:	09 95       	icall
		
	}
}
 b54:	ff 91       	pop	r31
 b56:	ef 91       	pop	r30
 b58:	bf 91       	pop	r27
 b5a:	af 91       	pop	r26
 b5c:	9f 91       	pop	r25
 b5e:	8f 91       	pop	r24
 b60:	7f 91       	pop	r23
 b62:	6f 91       	pop	r22
 b64:	5f 91       	pop	r21
 b66:	4f 91       	pop	r20
 b68:	3f 91       	pop	r19
 b6a:	2f 91       	pop	r18
 b6c:	0f 90       	pop	r0
 b6e:	0f be       	out	0x3f, r0	; 63
 b70:	0f 90       	pop	r0
 b72:	1f 90       	pop	r1
 b74:	18 95       	reti

00000b76 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 b76:	1f 92       	push	r1
 b78:	0f 92       	push	r0
 b7a:	0f b6       	in	r0, 0x3f	; 63
 b7c:	0f 92       	push	r0
 b7e:	11 24       	eor	r1, r1
 b80:	2f 93       	push	r18
 b82:	3f 93       	push	r19
 b84:	4f 93       	push	r20
 b86:	5f 93       	push	r21
 b88:	6f 93       	push	r22
 b8a:	7f 93       	push	r23
 b8c:	8f 93       	push	r24
 b8e:	9f 93       	push	r25
 b90:	af 93       	push	r26
 b92:	bf 93       	push	r27
 b94:	cf 93       	push	r28
 b96:	df 93       	push	r29
 b98:	ef 93       	push	r30
 b9a:	ff 93       	push	r31
	Action_Timer[0]();
 b9c:	c4 eb       	ldi	r28, 0xB4	; 180
 b9e:	d0 e0       	ldi	r29, 0x00	; 0
 ba0:	e8 81       	ld	r30, Y
 ba2:	f9 81       	ldd	r31, Y+1	; 0x01
 ba4:	09 95       	icall
	numOverflows++;
 ba6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <numOverflows>
 baa:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <numOverflows+0x1>
 bae:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <numOverflows+0x2>
 bb2:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <numOverflows+0x3>
 bb6:	01 96       	adiw	r24, 0x01	; 1
 bb8:	a1 1d       	adc	r26, r1
 bba:	b1 1d       	adc	r27, r1
 bbc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <numOverflows>
 bc0:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <numOverflows+0x1>
 bc4:	a0 93 be 00 	sts	0x00BE, r26	; 0x8000be <numOverflows+0x2>
 bc8:	b0 93 bf 00 	sts	0x00BF, r27	; 0x8000bf <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 bcc:	e8 81       	ld	r30, Y
 bce:	f9 81       	ldd	r31, Y+1	; 0x01
 bd0:	30 97       	sbiw	r30, 0x00	; 0
 bd2:	49 f1       	breq	.+82     	; 0xc26 <__vector_9+0xb0>
		counter++;
 bd4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <counter.1744>
 bd8:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <counter.1744+0x1>
 bdc:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <counter.1744+0x2>
 be0:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <counter.1744+0x3>
 be4:	01 96       	adiw	r24, 0x01	; 1
 be6:	a1 1d       	adc	r26, r1
 be8:	b1 1d       	adc	r27, r1
 bea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <counter.1744>
 bee:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <counter.1744+0x1>
 bf2:	a0 93 b2 00 	sts	0x00B2, r26	; 0x8000b2 <counter.1744+0x2>
 bf6:	b0 93 b3 00 	sts	0x00B3, r27	; 0x8000b3 <counter.1744+0x3>
		if(counter == req_numOverflows){
 bfa:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <req_numOverflows>
 bfe:	50 91 c1 00 	lds	r21, 0x00C1	; 0x8000c1 <req_numOverflows+0x1>
 c02:	60 91 c2 00 	lds	r22, 0x00C2	; 0x8000c2 <req_numOverflows+0x2>
 c06:	70 91 c3 00 	lds	r23, 0x00C3	; 0x8000c3 <req_numOverflows+0x3>
 c0a:	84 17       	cp	r24, r20
 c0c:	95 07       	cpc	r25, r21
 c0e:	a6 07       	cpc	r26, r22
 c10:	b7 07       	cpc	r27, r23
 c12:	49 f4       	brne	.+18     	; 0xc26 <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 c14:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <counter.1744>
 c18:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <counter.1744+0x1>
 c1c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <counter.1744+0x2>
 c20:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <counter.1744+0x3>
			Action_Timer[0]();
 c24:	09 95       	icall
		}
		
	}
}
 c26:	ff 91       	pop	r31
 c28:	ef 91       	pop	r30
 c2a:	df 91       	pop	r29
 c2c:	cf 91       	pop	r28
 c2e:	bf 91       	pop	r27
 c30:	af 91       	pop	r26
 c32:	9f 91       	pop	r25
 c34:	8f 91       	pop	r24
 c36:	7f 91       	pop	r23
 c38:	6f 91       	pop	r22
 c3a:	5f 91       	pop	r21
 c3c:	4f 91       	pop	r20
 c3e:	3f 91       	pop	r19
 c40:	2f 91       	pop	r18
 c42:	0f 90       	pop	r0
 c44:	0f be       	out	0x3f, r0	; 63
 c46:	0f 90       	pop	r0
 c48:	1f 90       	pop	r1
 c4a:	18 95       	reti

00000c4c <__vector_7>:

ISR(TIMER1_COMPA_vect){
 c4c:	1f 92       	push	r1
 c4e:	0f 92       	push	r0
 c50:	0f b6       	in	r0, 0x3f	; 63
 c52:	0f 92       	push	r0
 c54:	11 24       	eor	r1, r1
 c56:	2f 93       	push	r18
 c58:	3f 93       	push	r19
 c5a:	4f 93       	push	r20
 c5c:	5f 93       	push	r21
 c5e:	6f 93       	push	r22
 c60:	7f 93       	push	r23
 c62:	8f 93       	push	r24
 c64:	9f 93       	push	r25
 c66:	af 93       	push	r26
 c68:	bf 93       	push	r27
 c6a:	ef 93       	push	r30
 c6c:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 c6e:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <Action_Timer+0x2>
 c72:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <Action_Timer+0x3>
 c76:	30 97       	sbiw	r30, 0x00	; 0
 c78:	09 f0       	breq	.+2      	; 0xc7c <__vector_7+0x30>
		Action_Timer[1]();
 c7a:	09 95       	icall
	}
}
 c7c:	ff 91       	pop	r31
 c7e:	ef 91       	pop	r30
 c80:	bf 91       	pop	r27
 c82:	af 91       	pop	r26
 c84:	9f 91       	pop	r25
 c86:	8f 91       	pop	r24
 c88:	7f 91       	pop	r23
 c8a:	6f 91       	pop	r22
 c8c:	5f 91       	pop	r21
 c8e:	4f 91       	pop	r20
 c90:	3f 91       	pop	r19
 c92:	2f 91       	pop	r18
 c94:	0f 90       	pop	r0
 c96:	0f be       	out	0x3f, r0	; 63
 c98:	0f 90       	pop	r0
 c9a:	1f 90       	pop	r1
 c9c:	18 95       	reti

00000c9e <__vector_6>:


ISR(TIMER1_CAPT_vect){
 c9e:	1f 92       	push	r1
 ca0:	0f 92       	push	r0
 ca2:	0f b6       	in	r0, 0x3f	; 63
 ca4:	0f 92       	push	r0
 ca6:	11 24       	eor	r1, r1
 ca8:	2f 93       	push	r18
 caa:	3f 93       	push	r19
 cac:	4f 93       	push	r20
 cae:	5f 93       	push	r21
 cb0:	6f 93       	push	r22
 cb2:	7f 93       	push	r23
 cb4:	8f 93       	push	r24
 cb6:	9f 93       	push	r25
 cb8:	af 93       	push	r26
 cba:	bf 93       	push	r27
 cbc:	ef 93       	push	r30
 cbe:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 cc0:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <Action_Timer+0x6>
 cc4:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <Action_Timer+0x7>
 cc8:	30 97       	sbiw	r30, 0x00	; 0
 cca:	09 f0       	breq	.+2      	; 0xcce <__vector_6+0x30>
			Action_Timer[3]();
 ccc:	09 95       	icall
			
			
		}
 cce:	ff 91       	pop	r31
 cd0:	ef 91       	pop	r30
 cd2:	bf 91       	pop	r27
 cd4:	af 91       	pop	r26
 cd6:	9f 91       	pop	r25
 cd8:	8f 91       	pop	r24
 cda:	7f 91       	pop	r23
 cdc:	6f 91       	pop	r22
 cde:	5f 91       	pop	r21
 ce0:	4f 91       	pop	r20
 ce2:	3f 91       	pop	r19
 ce4:	2f 91       	pop	r18
 ce6:	0f 90       	pop	r0
 ce8:	0f be       	out	0x3f, r0	; 63
 cea:	0f 90       	pop	r0
 cec:	1f 90       	pop	r1
 cee:	18 95       	reti

00000cf0 <M_TWI_void_init>:

void M_TWI_void_init(const TWI_Config *Config_Ptr)
{
	//put 2 in case of 8 mhz 400 bit
	//put 32 in case of 8mhz 100 bit
    TWI->TWBR = Config_Ptr->twbr;
 cf0:	fc 01       	movw	r30, r24
 cf2:	20 81       	ld	r18, Z
 cf4:	20 b9       	out	0x00, r18	; 0
   //TWI->TWBR = 32;
	TWI->TWSR = 0;
 cf6:	11 b8       	out	0x01, r1	; 1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWI->TWAR = Config_Ptr->myAddress << 1 ; // my address = 0x01 :)
 cf8:	81 81       	ldd	r24, Z+1	; 0x01
 cfa:	88 0f       	add	r24, r24
 cfc:	82 b9       	out	0x02, r24	; 2
	
    TWI->TWCR = (1<<TWEN); /* enable TWI */
 cfe:	84 e0       	ldi	r24, 0x04	; 4
 d00:	86 bf       	out	0x36, r24	; 54
 d02:	08 95       	ret

00000d04 <M_TWI_void_start>:
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWI->TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 d04:	84 ea       	ldi	r24, 0xA4	; 164
 d06:	86 bf       	out	0x36, r24	; 54
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWI->TWCR,TWINT));
 d08:	06 b6       	in	r0, 0x36	; 54
 d0a:	07 fe       	sbrs	r0, 7
 d0c:	fd cf       	rjmp	.-6      	; 0xd08 <M_TWI_void_start+0x4>
}
 d0e:	08 95       	ret

00000d10 <M_TWI_void_stop>:
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWI->TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 d10:	84 e9       	ldi	r24, 0x94	; 148
 d12:	86 bf       	out	0x36, r24	; 54
 d14:	08 95       	ret

00000d16 <M_TWI_void_writeByte>:
}

void M_TWI_void_writeByte(u8 data)
{
    /* Put data On TWI data Register */
    TWI->TWDR = data;
 d16:	83 b9       	out	0x03, r24	; 3
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWI->TWCR = (1 << TWINT) | (1 << TWEN);
 d18:	84 e8       	ldi	r24, 0x84	; 132
 d1a:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWI->TWCR,TWINT));
 d1c:	06 b6       	in	r0, 0x36	; 54
 d1e:	07 fe       	sbrs	r0, 7
 d20:	fd cf       	rjmp	.-6      	; 0xd1c <M_TWI_void_writeByte+0x6>
}
 d22:	08 95       	ret

00000d24 <M_TWI_void_readByteWithACK>:
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWI->TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 d24:	24 ec       	ldi	r18, 0xC4	; 196
 d26:	26 bf       	out	0x36, r18	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWI->TWCR,TWINT));
 d28:	06 b6       	in	r0, 0x36	; 54
 d2a:	07 fe       	sbrs	r0, 7
 d2c:	fd cf       	rjmp	.-6      	; 0xd28 <M_TWI_void_readByteWithACK+0x4>
    /* Read Data */
    *ptr = TWI->TWDR;
 d2e:	23 b1       	in	r18, 0x03	; 3
 d30:	fc 01       	movw	r30, r24
 d32:	20 83       	st	Z, r18
 d34:	08 95       	ret

00000d36 <M_TWI_void_readByteWithNACK>:
{
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWI->TWCR = (1 << TWINT) | (1 << TWEN);
 d36:	24 e8       	ldi	r18, 0x84	; 132
 d38:	26 bf       	out	0x36, r18	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWI->TWCR,TWINT));
 d3a:	06 b6       	in	r0, 0x36	; 54
 d3c:	07 fe       	sbrs	r0, 7
 d3e:	fd cf       	rjmp	.-6      	; 0xd3a <M_TWI_void_readByteWithNACK+0x4>
    /* Read Data */
    *ptr = TWI->TWDR;
 d40:	23 b1       	in	r18, 0x03	; 3
 d42:	fc 01       	movw	r30, r24
 d44:	20 83       	st	Z, r18
 d46:	08 95       	ret

00000d48 <M_TWI_void_getStatus>:
}

void M_TWI_void_getStatus(u8 * status)
{
 d48:	fc 01       	movw	r30, r24
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    *status = TWI->TWSR & 0xF8;
 d4a:	91 b1       	in	r25, 0x01	; 1
 d4c:	98 7f       	andi	r25, 0xF8	; 248
 d4e:	90 83       	st	Z, r25
 d50:	08 95       	ret

00000d52 <__vector_13>:
	//set callback
	Action_Uart[0] = ptrfn;
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 d52:	1f 92       	push	r1
 d54:	0f 92       	push	r0
 d56:	0f b6       	in	r0, 0x3f	; 63
 d58:	0f 92       	push	r0
 d5a:	11 24       	eor	r1, r1
 d5c:	2f 93       	push	r18
 d5e:	3f 93       	push	r19
 d60:	4f 93       	push	r20
 d62:	5f 93       	push	r21
 d64:	6f 93       	push	r22
 d66:	7f 93       	push	r23
 d68:	8f 93       	push	r24
 d6a:	9f 93       	push	r25
 d6c:	af 93       	push	r26
 d6e:	bf 93       	push	r27
 d70:	ef 93       	push	r30
 d72:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 d74:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 d76:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <Action_Uart>
 d7a:	f0 91 c5 00 	lds	r31, 0x00C5	; 0x8000c5 <Action_Uart+0x1>
 d7e:	30 97       	sbiw	r30, 0x00	; 0
 d80:	09 f0       	breq	.+2      	; 0xd84 <__vector_13+0x32>
		Action_Uart[0](receivedData);
 d82:	09 95       	icall
	}
 d84:	ff 91       	pop	r31
 d86:	ef 91       	pop	r30
 d88:	bf 91       	pop	r27
 d8a:	af 91       	pop	r26
 d8c:	9f 91       	pop	r25
 d8e:	8f 91       	pop	r24
 d90:	7f 91       	pop	r23
 d92:	6f 91       	pop	r22
 d94:	5f 91       	pop	r21
 d96:	4f 91       	pop	r20
 d98:	3f 91       	pop	r19
 d9a:	2f 91       	pop	r18
 d9c:	0f 90       	pop	r0
 d9e:	0f be       	out	0x3f, r0	; 63
 da0:	0f 90       	pop	r0
 da2:	1f 90       	pop	r1
 da4:	18 95       	reti

00000da6 <__udivmodqi4>:
 da6:	99 1b       	sub	r25, r25
 da8:	79 e0       	ldi	r23, 0x09	; 9
 daa:	04 c0       	rjmp	.+8      	; 0xdb4 <__udivmodqi4_ep>

00000dac <__udivmodqi4_loop>:
 dac:	99 1f       	adc	r25, r25
 dae:	96 17       	cp	r25, r22
 db0:	08 f0       	brcs	.+2      	; 0xdb4 <__udivmodqi4_ep>
 db2:	96 1b       	sub	r25, r22

00000db4 <__udivmodqi4_ep>:
 db4:	88 1f       	adc	r24, r24
 db6:	7a 95       	dec	r23
 db8:	c9 f7       	brne	.-14     	; 0xdac <__udivmodqi4_loop>
 dba:	80 95       	com	r24
 dbc:	08 95       	ret

00000dbe <__itoa_ncheck>:
 dbe:	bb 27       	eor	r27, r27
 dc0:	4a 30       	cpi	r20, 0x0A	; 10
 dc2:	31 f4       	brne	.+12     	; 0xdd0 <__itoa_ncheck+0x12>
 dc4:	99 23       	and	r25, r25
 dc6:	22 f4       	brpl	.+8      	; 0xdd0 <__itoa_ncheck+0x12>
 dc8:	bd e2       	ldi	r27, 0x2D	; 45
 dca:	90 95       	com	r25
 dcc:	81 95       	neg	r24
 dce:	9f 4f       	sbci	r25, 0xFF	; 255
 dd0:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__utoa_common>

00000dd4 <__utoa_ncheck>:
 dd4:	bb 27       	eor	r27, r27

00000dd6 <__utoa_common>:
 dd6:	fb 01       	movw	r30, r22
 dd8:	55 27       	eor	r21, r21
 dda:	aa 27       	eor	r26, r26
 ddc:	88 0f       	add	r24, r24
 dde:	99 1f       	adc	r25, r25
 de0:	aa 1f       	adc	r26, r26
 de2:	a4 17       	cp	r26, r20
 de4:	10 f0       	brcs	.+4      	; 0xdea <__utoa_common+0x14>
 de6:	a4 1b       	sub	r26, r20
 de8:	83 95       	inc	r24
 dea:	50 51       	subi	r21, 0x10	; 16
 dec:	b9 f7       	brne	.-18     	; 0xddc <__utoa_common+0x6>
 dee:	a0 5d       	subi	r26, 0xD0	; 208
 df0:	aa 33       	cpi	r26, 0x3A	; 58
 df2:	08 f0       	brcs	.+2      	; 0xdf6 <__utoa_common+0x20>
 df4:	a9 5d       	subi	r26, 0xD9	; 217
 df6:	a1 93       	st	Z+, r26
 df8:	00 97       	sbiw	r24, 0x00	; 0
 dfa:	79 f7       	brne	.-34     	; 0xdda <__utoa_common+0x4>
 dfc:	b1 11       	cpse	r27, r1
 dfe:	b1 93       	st	Z+, r27
 e00:	11 92       	st	Z+, r1
 e02:	cb 01       	movw	r24, r22
 e04:	0c 94 04 07 	jmp	0xe08	; 0xe08 <strrev>

00000e08 <strrev>:
 e08:	dc 01       	movw	r26, r24
 e0a:	fc 01       	movw	r30, r24
 e0c:	67 2f       	mov	r22, r23
 e0e:	71 91       	ld	r23, Z+
 e10:	77 23       	and	r23, r23
 e12:	e1 f7       	brne	.-8      	; 0xe0c <strrev+0x4>
 e14:	32 97       	sbiw	r30, 0x02	; 2
 e16:	04 c0       	rjmp	.+8      	; 0xe20 <strrev+0x18>
 e18:	7c 91       	ld	r23, X
 e1a:	6d 93       	st	X+, r22
 e1c:	70 83       	st	Z, r23
 e1e:	62 91       	ld	r22, -Z
 e20:	ae 17       	cp	r26, r30
 e22:	bf 07       	cpc	r27, r31
 e24:	c8 f3       	brcs	.-14     	; 0xe18 <strrev+0x10>
 e26:	08 95       	ret

00000e28 <_exit>:
 e28:	f8 94       	cli

00000e2a <__stop_program>:
 e2a:	ff cf       	rjmp	.-2      	; 0xe2a <__stop_program>
