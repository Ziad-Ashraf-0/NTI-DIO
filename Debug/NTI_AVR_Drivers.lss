
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00000d76  00000e0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000034  00800092  00800092  00000e3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f1e  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011d5  00000000  00000000  000040f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001803  00000000  00000000  000052cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000099c  00000000  00000000  00006ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000147e  00000000  00000000  0000746c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002057  00000000  00000000  000088ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000a941  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__vector_1>
   8:	0c 94 c8 03 	jmp	0x790	; 0x790 <__vector_2>
   c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_6>
  1c:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 c8 04 	jmp	0x990	; 0x990 <__vector_9>
  28:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__vector_10>
  2c:	0c 94 46 04 	jmp	0x88c	; 0x88c <__vector_11>
  30:	0c 94 1c 04 	jmp	0x838	; 0x838 <__vector_12>
  34:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 39       	cpi	r26, 0x92	; 146
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e9       	ldi	r26, 0x92	; 146
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3c       	cpi	r26, 0xC6	; 198
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  8a:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <encrypt>:

// Define the 4-byte key
u8 key[4] = {0xAA, 0xBB, 0xCC, 0xDD};

// Function to encrypt a 4-byte data block using XOR
void encrypt(uint8_t *plaintext, uint8_t *ciphertext) {
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; i < 4; ++i) {
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	10 c0       	rjmp	.+32     	; 0xbc <encrypt+0x2a>
		ciphertext[i] = plaintext[i] ^ key[i];
  9c:	29 2f       	mov	r18, r25
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	fb 01       	movw	r30, r22
  a2:	e2 0f       	add	r30, r18
  a4:	f3 1f       	adc	r31, r19
  a6:	de 01       	movw	r26, r28
  a8:	a2 0f       	add	r26, r18
  aa:	b3 1f       	adc	r27, r19
  ac:	4c 91       	ld	r20, X
  ae:	d9 01       	movw	r26, r18
  b0:	ab 59       	subi	r26, 0x9B	; 155
  b2:	bf 4f       	sbci	r27, 0xFF	; 255
  b4:	2c 91       	ld	r18, X
  b6:	24 27       	eor	r18, r20
  b8:	20 83       	st	Z, r18
// Define the 4-byte key
u8 key[4] = {0xAA, 0xBB, 0xCC, 0xDD};

// Function to encrypt a 4-byte data block using XOR
void encrypt(uint8_t *plaintext, uint8_t *ciphertext) {
	for (uint8_t i = 0; i < 4; ++i) {
  ba:	9f 5f       	subi	r25, 0xFF	; 255
  bc:	94 30       	cpi	r25, 0x04	; 4
  be:	70 f3       	brcs	.-36     	; 0x9c <encrypt+0xa>
		ciphertext[i] = plaintext[i] ^ key[i];
	}
}
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <processLedRoutine>:
}



void processLedRoutine(){
	if(state == ACCESS){
  c6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <state>
  ca:	81 11       	cpse	r24, r1
  cc:	21 c0       	rjmp	.+66     	; 0x110 <processLedRoutine+0x4a>
		H_LCD_void_sendHexNum(0x71);
  ce:	61 e7       	ldi	r22, 0x71	; 113
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 c9 02 	call	0x592	; 0x592 <H_LCD_void_sendHexNum>
		H_LCD_void_sendData(' ');
  da:	80 e2       	ldi	r24, 0x20	; 32
  dc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <H_LCD_void_sendData>
		H_LCD_void_sendHexNum(0x01);
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 c9 02 	call	0x592	; 0x592 <H_LCD_void_sendHexNum>
		H_LCD_void_sendData(' ');
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	0e 94 73 02 	call	0x4e6	; 0x4e6 <H_LCD_void_sendData>
		H_LCD_void_sendHexNum(0xAA);
  f2:	6a ea       	ldi	r22, 0xAA	; 170
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 c9 02 	call	0x592	; 0x592 <H_LCD_void_sendHexNum>
		H_LCD_void_sendData(' ');
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	0e 94 73 02 	call	0x4e6	; 0x4e6 <H_LCD_void_sendData>
		H_LCD_void_sendHexNum(0x00);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	70 e0       	ldi	r23, 0x00	; 0
 108:	cb 01       	movw	r24, r22
 10a:	0e 94 c9 02 	call	0x592	; 0x592 <H_LCD_void_sendHexNum>
 10e:	08 95       	ret
		}else{
		H_LCD_void_sendHexNum(0x7F);
 110:	6f e7       	ldi	r22, 0x7F	; 127
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 c9 02 	call	0x592	; 0x592 <H_LCD_void_sendHexNum>
		H_LCD_void_sendData(' ');
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <H_LCD_void_sendData>
		H_LCD_void_sendHexNum(0x31);
 122:	61 e3       	ldi	r22, 0x31	; 49
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 c9 02 	call	0x592	; 0x592 <H_LCD_void_sendHexNum>
		H_LCD_void_sendData(' ');
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	0e 94 73 02 	call	0x4e6	; 0x4e6 <H_LCD_void_sendData>
		H_LCD_void_sendHexNum(0x33);
 134:	63 e3       	ldi	r22, 0x33	; 51
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 c9 02 	call	0x592	; 0x592 <H_LCD_void_sendHexNum>
 140:	08 95       	ret

00000142 <main>:

u8 state = NO_ACCESS;


// Main function
int main(void) {
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	2c 97       	sbiw	r28, 0x0c	; 12
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
	// Enable global interrupts
	GIE_enable();
 156:	0e 94 1a 04 	call	0x834	; 0x834 <GIE_enable>
	// Initialize USART communication
	USART_Init();
 15a:	0e 94 85 05 	call	0xb0a	; 0xb0a <USART_Init>
	// Initialize LCD
	H_LCD_void_Init();
 15e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <H_LCD_void_Init>
	
	// 4-byte data to encrypt
	u8 plaintext[4] = {0x01, 0x23, 0x45, 0x67};
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	83 e2       	ldi	r24, 0x23	; 35
 168:	8a 83       	std	Y+2, r24	; 0x02
 16a:	85 e4       	ldi	r24, 0x45	; 69
 16c:	8b 83       	std	Y+3, r24	; 0x03
 16e:	87 e6       	ldi	r24, 0x67	; 103
 170:	8c 83       	std	Y+4, r24	; 0x04
	
	// 4-byte random to encrypt
	u8 randomtext[4] = {0};
	
	//receive buffer
	u8 buffer[4] = {0};
 172:	1d 82       	std	Y+5, r1	; 0x05
 174:	1e 82       	std	Y+6, r1	; 0x06
 176:	1f 82       	std	Y+7, r1	; 0x07
 178:	18 86       	std	Y+8, r1	; 0x08
	
	//receive buffer
	u8 ciphertext[4] = {0};
 17a:	19 86       	std	Y+9, r1	; 0x09
 17c:	1a 86       	std	Y+10, r1	; 0x0a
 17e:	1b 86       	std	Y+11, r1	; 0x0b
 180:	1c 86       	std	Y+12, r1	; 0x0c


	// Encrypt the data
	encrypt(plaintext, ciphertext);
 182:	be 01       	movw	r22, r28
 184:	67 5f       	subi	r22, 0xF7	; 247
 186:	7f 4f       	sbci	r23, 0xFF	; 255
 188:	ce 01       	movw	r24, r28
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	0e 94 49 00 	call	0x92	; 0x92 <encrypt>
	

	// Main loop
	while (1) {
		
		for(int i=0;i<4;i++){
 190:	00 e0       	ldi	r16, 0x00	; 0
 192:	10 e0       	ldi	r17, 0x00	; 0
 194:	0b c0       	rjmp	.+22     	; 0x1ac <main+0x6a>
			buffer [i] = MUART_voidRecieveByteSynch();
 196:	0e 94 8f 05 	call	0xb1e	; 0xb1e <MUART_voidRecieveByteSynch>
 19a:	e5 e0       	ldi	r30, 0x05	; 5
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ec 0f       	add	r30, r28
 1a0:	fd 1f       	adc	r31, r29
 1a2:	e0 0f       	add	r30, r16
 1a4:	f1 1f       	adc	r31, r17
 1a6:	80 83       	st	Z, r24
	

	// Main loop
	while (1) {
		
		for(int i=0;i<4;i++){
 1a8:	0f 5f       	subi	r16, 0xFF	; 255
 1aa:	1f 4f       	sbci	r17, 0xFF	; 255
 1ac:	04 30       	cpi	r16, 0x04	; 4
 1ae:	11 05       	cpc	r17, r1
 1b0:	94 f3       	brlt	.-28     	; 0x196 <main+0x54>
			buffer [i] = MUART_voidRecieveByteSynch();
		}
		
		if(buffer[0] == 0x31 && buffer[1] == 0x01){
 1b2:	8d 81       	ldd	r24, Y+5	; 0x05
 1b4:	81 33       	cpi	r24, 0x31	; 49
 1b6:	31 f4       	brne	.+12     	; 0x1c4 <main+0x82>
 1b8:	9e 81       	ldd	r25, Y+6	; 0x06
 1ba:	91 30       	cpi	r25, 0x01	; 1
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <main+0x82>
			processLedRoutine();
 1be:	0e 94 63 00 	call	0xc6	; 0xc6 <processLedRoutine>
 1c2:	25 c0       	rjmp	.+74     	; 0x20e <main+0xcc>

			}else if(buffer[0] == 0x27 && buffer[1]==0x01){
 1c4:	87 32       	cpi	r24, 0x27	; 39
 1c6:	61 f4       	brne	.+24     	; 0x1e0 <main+0x9e>
 1c8:	9e 81       	ldd	r25, Y+6	; 0x06
 1ca:	91 30       	cpi	r25, 0x01	; 1
 1cc:	49 f4       	brne	.+18     	; 0x1e0 <main+0x9e>
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <main+0x96>
			  for (u8 i = 0; i < 4; ++i) {
				  randomtext[i] = rand() % 256;  // % 256 limits the range to 0-255
 1d0:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <rand>
		
		if(buffer[0] == 0x31 && buffer[1] == 0x01){
			processLedRoutine();

			}else if(buffer[0] == 0x27 && buffer[1]==0x01){
			  for (u8 i = 0; i < 4; ++i) {
 1d4:	1f 5f       	subi	r17, 0xFF	; 255
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <main+0x98>
 1d8:	10 e0       	ldi	r17, 0x00	; 0
 1da:	14 30       	cpi	r17, 0x04	; 4
 1dc:	c8 f3       	brcs	.-14     	; 0x1d0 <main+0x8e>
 1de:	17 c0       	rjmp	.+46     	; 0x20e <main+0xcc>
				  randomtext[i] = rand() % 256;  // % 256 limits the range to 0-255
			  }
			}else if(buffer[0] == 0x27 && buffer[1] ==0x02){
 1e0:	87 32       	cpi	r24, 0x27	; 39
 1e2:	a9 f4       	brne	.+42     	; 0x20e <main+0xcc>
 1e4:	8e 81       	ldd	r24, Y+6	; 0x06
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	91 f4       	brne	.+36     	; 0x20e <main+0xcc>
 1ea:	0c c0       	rjmp	.+24     	; 0x204 <main+0xc2>
			for(int i=0;i<4;i++){
				ciphertext [i] = MUART_voidRecieveByteSynch();
 1ec:	0e 94 8f 05 	call	0xb1e	; 0xb1e <MUART_voidRecieveByteSynch>
 1f0:	e9 e0       	ldi	r30, 0x09	; 9
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	ec 0f       	add	r30, r28
 1f6:	fd 1f       	adc	r31, r29
 1f8:	e0 0f       	add	r30, r16
 1fa:	f1 1f       	adc	r31, r17
 1fc:	80 83       	st	Z, r24
			}else if(buffer[0] == 0x27 && buffer[1]==0x01){
			  for (u8 i = 0; i < 4; ++i) {
				  randomtext[i] = rand() % 256;  // % 256 limits the range to 0-255
			  }
			}else if(buffer[0] == 0x27 && buffer[1] ==0x02){
			for(int i=0;i<4;i++){
 1fe:	0f 5f       	subi	r16, 0xFF	; 255
 200:	1f 4f       	sbci	r17, 0xFF	; 255
 202:	02 c0       	rjmp	.+4      	; 0x208 <main+0xc6>
 204:	00 e0       	ldi	r16, 0x00	; 0
 206:	10 e0       	ldi	r17, 0x00	; 0
 208:	04 30       	cpi	r16, 0x04	; 4
 20a:	11 05       	cpc	r17, r1
 20c:	7c f3       	brlt	.-34     	; 0x1ec <main+0xaa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20e:	2f ef       	ldi	r18, 0xFF	; 255
 210:	83 e2       	ldi	r24, 0x23	; 35
 212:	94 ef       	ldi	r25, 0xF4	; 244
 214:	21 50       	subi	r18, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0xd2>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0xdc>
 21e:	00 00       	nop
 220:	b7 cf       	rjmp	.-146    	; 0x190 <main+0x4e>

00000222 <H_LCD_void_latchByte>:

	// Assuming you have an LCD display function called H_LCD_void_sendIntNum
	H_LCD_void_sendIntNum(integral); // Display the integral part
	H_LCD_void_sendString("."); // Display the decimal point
	H_LCD_void_sendIntNum(fractional); // Display the fractional part
}
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	64 97       	sbiw	r28, 0x14	; 20
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	08 2f       	mov	r16, r24
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	89 83       	std	Y+1, r24	; 0x01
 240:	1a 82       	std	Y+2, r1	; 0x02
 242:	8b 83       	std	Y+3, r24	; 0x03
 244:	04 fb       	bst	r16, 4
 246:	99 27       	eor	r25, r25
 248:	90 f9       	bld	r25, 0
 24a:	9c 83       	std	Y+4, r25	; 0x04
 24c:	8d 83       	std	Y+5, r24	; 0x05
 24e:	8e 83       	std	Y+6, r24	; 0x06
 250:	8f 83       	std	Y+7, r24	; 0x07
 252:	05 fb       	bst	r16, 5
 254:	99 27       	eor	r25, r25
 256:	90 f9       	bld	r25, 0
 258:	98 87       	std	Y+8, r25	; 0x08
 25a:	89 87       	std	Y+9, r24	; 0x09
 25c:	92 e0       	ldi	r25, 0x02	; 2
 25e:	9a 87       	std	Y+10, r25	; 0x0a
 260:	8b 87       	std	Y+11, r24	; 0x0b
 262:	06 fb       	bst	r16, 6
 264:	99 27       	eor	r25, r25
 266:	90 f9       	bld	r25, 0
 268:	9c 87       	std	Y+12, r25	; 0x0c
 26a:	8d 87       	std	Y+13, r24	; 0x0d
 26c:	94 e0       	ldi	r25, 0x04	; 4
 26e:	9e 87       	std	Y+14, r25	; 0x0e
 270:	8f 87       	std	Y+15, r24	; 0x0f
 272:	80 2f       	mov	r24, r16
 274:	88 1f       	adc	r24, r24
 276:	88 27       	eor	r24, r24
 278:	88 1f       	adc	r24, r24
 27a:	88 8b       	std	Y+16, r24	; 0x10
 27c:	10 e0       	ldi	r17, 0x00	; 0
 27e:	0f c0       	rjmp	.+30     	; 0x29e <H_LCD_void_latchByte+0x7c>
 280:	81 2f       	mov	r24, r17
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	2c 0f       	add	r18, r28
 292:	3d 1f       	adc	r19, r29
 294:	82 0f       	add	r24, r18
 296:	93 1f       	adc	r25, r19
 298:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_U8SetPinValue>
 29c:	1f 5f       	subi	r17, 0xFF	; 255
 29e:	14 30       	cpi	r17, 0x04	; 4
 2a0:	78 f3       	brcs	.-34     	; 0x280 <H_LCD_void_latchByte+0x5e>
 2a2:	19 8a       	std	Y+17, r1	; 0x11
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	8a 8b       	std	Y+18, r24	; 0x12
 2a8:	1c 8a       	std	Y+20, r1	; 0x14
 2aa:	8f e9       	ldi	r24, 0x9F	; 159
 2ac:	9f e0       	ldi	r25, 0x0F	; 15
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <H_LCD_void_latchByte+0x8c>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <H_LCD_void_latchByte+0x92>
 2b4:	00 00       	nop
 2b6:	ce 01       	movw	r24, r28
 2b8:	41 96       	adiw	r24, 0x11	; 17
 2ba:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_U8SetPinValue>
 2be:	ef e9       	ldi	r30, 0x9F	; 159
 2c0:	ff e0       	ldi	r31, 0x0F	; 15
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <H_LCD_void_latchByte+0xa0>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <H_LCD_void_latchByte+0xa6>
 2c8:	00 00       	nop
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	8c 8b       	std	Y+20, r24	; 0x14
 2ce:	ce 01       	movw	r24, r28
 2d0:	41 96       	adiw	r24, 0x11	; 17
 2d2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_U8SetPinValue>
 2d6:	8f e9       	ldi	r24, 0x9F	; 159
 2d8:	9f e0       	ldi	r25, 0x0F	; 15
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <H_LCD_void_latchByte+0xb8>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <H_LCD_void_latchByte+0xbe>
 2e0:	00 00       	nop
 2e2:	10 e0       	ldi	r17, 0x00	; 0
 2e4:	1a c0       	rjmp	.+52     	; 0x31a <H_LCD_void_latchByte+0xf8>
 2e6:	81 2f       	mov	r24, r17
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	20 2f       	mov	r18, r16
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	01 2e       	mov	r0, r17
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <H_LCD_void_latchByte+0xd4>
 2f2:	35 95       	asr	r19
 2f4:	27 95       	ror	r18
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <H_LCD_void_latchByte+0xd0>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	e1 e0       	ldi	r30, 0x01	; 1
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	ec 0f       	add	r30, r28
 308:	fd 1f       	adc	r31, r29
 30a:	8e 0f       	add	r24, r30
 30c:	9f 1f       	adc	r25, r31
 30e:	21 70       	andi	r18, 0x01	; 1
 310:	fc 01       	movw	r30, r24
 312:	23 83       	std	Z+3, r18	; 0x03
 314:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_U8SetPinValue>
 318:	1f 5f       	subi	r17, 0xFF	; 255
 31a:	14 30       	cpi	r17, 0x04	; 4
 31c:	20 f3       	brcs	.-56     	; 0x2e6 <H_LCD_void_latchByte+0xc4>
 31e:	8f e9       	ldi	r24, 0x9F	; 159
 320:	9f e0       	ldi	r25, 0x0F	; 15
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <H_LCD_void_latchByte+0x100>
 326:	00 c0       	rjmp	.+0      	; 0x328 <H_LCD_void_latchByte+0x106>
 328:	00 00       	nop
 32a:	1c 8a       	std	Y+20, r1	; 0x14
 32c:	ce 01       	movw	r24, r28
 32e:	41 96       	adiw	r24, 0x11	; 17
 330:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_U8SetPinValue>
 334:	ef e9       	ldi	r30, 0x9F	; 159
 336:	ff e0       	ldi	r31, 0x0F	; 15
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <H_LCD_void_latchByte+0x116>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <H_LCD_void_latchByte+0x11c>
 33e:	00 00       	nop
 340:	64 96       	adiw	r28, 0x14	; 20
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	08 95       	ret

00000356 <H_LCD_void_sendCommand>:
 356:	0f 93       	push	r16
 358:	1f 93       	push	r17
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	28 97       	sbiw	r28, 0x08	; 8
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
 36e:	08 2f       	mov	r16, r24
 370:	88 e0       	ldi	r24, 0x08	; 8
 372:	e9 e6       	ldi	r30, 0x69	; 105
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	de 01       	movw	r26, r28
 378:	11 96       	adiw	r26, 0x01	; 1
 37a:	01 90       	ld	r0, Z+
 37c:	0d 92       	st	X+, r0
 37e:	8a 95       	dec	r24
 380:	e1 f7       	brne	.-8      	; 0x37a <H_LCD_void_sendCommand+0x24>
 382:	10 e0       	ldi	r17, 0x00	; 0
 384:	15 c0       	rjmp	.+42     	; 0x3b0 <H_LCD_void_sendCommand+0x5a>
 386:	81 2f       	mov	r24, r17
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	2c 0f       	add	r18, r28
 398:	3d 1f       	adc	r19, r29
 39a:	82 0f       	add	r24, r18
 39c:	93 1f       	adc	r25, r19
 39e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_U8SetPinValue>
 3a2:	8f e9       	ldi	r24, 0x9F	; 159
 3a4:	9f e0       	ldi	r25, 0x0F	; 15
 3a6:	01 97       	sbiw	r24, 0x01	; 1
 3a8:	f1 f7       	brne	.-4      	; 0x3a6 <H_LCD_void_sendCommand+0x50>
 3aa:	00 c0       	rjmp	.+0      	; 0x3ac <H_LCD_void_sendCommand+0x56>
 3ac:	00 00       	nop
 3ae:	1f 5f       	subi	r17, 0xFF	; 255
 3b0:	12 30       	cpi	r17, 0x02	; 2
 3b2:	48 f3       	brcs	.-46     	; 0x386 <H_LCD_void_sendCommand+0x30>
 3b4:	8f e9       	ldi	r24, 0x9F	; 159
 3b6:	9f e0       	ldi	r25, 0x0F	; 15
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <H_LCD_void_sendCommand+0x62>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <H_LCD_void_sendCommand+0x68>
 3be:	00 00       	nop
 3c0:	80 2f       	mov	r24, r16
 3c2:	0e 94 11 01 	call	0x222	; 0x222 <H_LCD_void_latchByte>
 3c6:	28 96       	adiw	r28, 0x08	; 8
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	08 95       	ret

000003dc <H_LCD_void_Init>:
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	68 97       	sbiw	r28, 0x18	; 24
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	f8 94       	cli
 3ec:	de bf       	out	0x3e, r29	; 62
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	cd bf       	out	0x3d, r28	; 61
 3f2:	fe 01       	movw	r30, r28
 3f4:	31 96       	adiw	r30, 0x01	; 1
 3f6:	88 e0       	ldi	r24, 0x08	; 8
 3f8:	df 01       	movw	r26, r30
 3fa:	1d 92       	st	X+, r1
 3fc:	8a 95       	dec	r24
 3fe:	e9 f7       	brne	.-6      	; 0x3fa <H_LCD_void_Init+0x1e>
 400:	83 e0       	ldi	r24, 0x03	; 3
 402:	8a 83       	std	Y+2, r24	; 0x02
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	8b 83       	std	Y+3, r24	; 0x03
 408:	92 e0       	ldi	r25, 0x02	; 2
 40a:	9e 83       	std	Y+6, r25	; 0x06
 40c:	8f 83       	std	Y+7, r24	; 0x07
 40e:	10 e0       	ldi	r17, 0x00	; 0
 410:	0f c0       	rjmp	.+30     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 412:	81 2f       	mov	r24, r17
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	21 e0       	ldi	r18, 0x01	; 1
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	2c 0f       	add	r18, r28
 424:	3d 1f       	adc	r19, r29
 426:	82 0f       	add	r24, r18
 428:	93 1f       	adc	r25, r19
 42a:	0e 94 1f 03 	call	0x63e	; 0x63e <DIO_U8SetPinDirection>
 42e:	1f 5f       	subi	r17, 0xFF	; 255
 430:	12 30       	cpi	r17, 0x02	; 2
 432:	78 f3       	brcs	.-34     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 434:	fe 01       	movw	r30, r28
 436:	39 96       	adiw	r30, 0x09	; 9
 438:	80 e1       	ldi	r24, 0x10	; 16
 43a:	df 01       	movw	r26, r30
 43c:	1d 92       	st	X+, r1
 43e:	8a 95       	dec	r24
 440:	e9 f7       	brne	.-6      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	89 87       	std	Y+9, r24	; 0x09
 446:	8b 87       	std	Y+11, r24	; 0x0b
 448:	8d 87       	std	Y+13, r24	; 0x0d
 44a:	8e 87       	std	Y+14, r24	; 0x0e
 44c:	8f 87       	std	Y+15, r24	; 0x0f
 44e:	89 8b       	std	Y+17, r24	; 0x11
 450:	92 e0       	ldi	r25, 0x02	; 2
 452:	9a 8b       	std	Y+18, r25	; 0x12
 454:	8b 8b       	std	Y+19, r24	; 0x13
 456:	8d 8b       	std	Y+21, r24	; 0x15
 458:	94 e0       	ldi	r25, 0x04	; 4
 45a:	9e 8b       	std	Y+22, r25	; 0x16
 45c:	8f 8b       	std	Y+23, r24	; 0x17
 45e:	10 e0       	ldi	r17, 0x00	; 0
 460:	0f c0       	rjmp	.+30     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 462:	81 2f       	mov	r24, r17
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	29 e0       	ldi	r18, 0x09	; 9
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	2c 0f       	add	r18, r28
 474:	3d 1f       	adc	r19, r29
 476:	82 0f       	add	r24, r18
 478:	93 1f       	adc	r25, r19
 47a:	0e 94 1f 03 	call	0x63e	; 0x63e <DIO_U8SetPinDirection>
 47e:	1f 5f       	subi	r17, 0xFF	; 255
 480:	14 30       	cpi	r17, 0x04	; 4
 482:	78 f3       	brcs	.-34     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	0e 94 ab 01 	call	0x356	; 0x356 <H_LCD_void_sendCommand>
 48a:	8f e9       	ldi	r24, 0x9F	; 159
 48c:	9f e0       	ldi	r25, 0x0F	; 15
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 492:	00 c0       	rjmp	.+0      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 494:	00 00       	nop
 496:	88 e2       	ldi	r24, 0x28	; 40
 498:	0e 94 ab 01 	call	0x356	; 0x356 <H_LCD_void_sendCommand>
 49c:	af e9       	ldi	r26, 0x9F	; 159
 49e:	bf e0       	ldi	r27, 0x0F	; 15
 4a0:	11 97       	sbiw	r26, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a6:	00 00       	nop
 4a8:	8f e0       	ldi	r24, 0x0F	; 15
 4aa:	0e 94 ab 01 	call	0x356	; 0x356 <H_LCD_void_sendCommand>
 4ae:	8f e9       	ldi	r24, 0x9F	; 159
 4b0:	9f e0       	ldi	r25, 0x0F	; 15
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b8:	00 00       	nop
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	0e 94 ab 01 	call	0x356	; 0x356 <H_LCD_void_sendCommand>
 4c0:	af e3       	ldi	r26, 0x3F	; 63
 4c2:	bf e1       	ldi	r27, 0x1F	; 31
 4c4:	11 97       	sbiw	r26, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4ca:	00 00       	nop
 4cc:	86 e0       	ldi	r24, 0x06	; 6
 4ce:	0e 94 ab 01 	call	0x356	; 0x356 <H_LCD_void_sendCommand>
 4d2:	68 96       	adiw	r28, 0x18	; 24
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	f8 94       	cli
 4d8:	de bf       	out	0x3e, r29	; 62
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	cd bf       	out	0x3d, r28	; 61
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	1f 91       	pop	r17
 4e4:	08 95       	ret

000004e6 <H_LCD_void_sendData>:
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	28 97       	sbiw	r28, 0x08	; 8
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
 4fe:	08 2f       	mov	r16, r24
 500:	88 e0       	ldi	r24, 0x08	; 8
 502:	e1 e7       	ldi	r30, 0x71	; 113
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	de 01       	movw	r26, r28
 508:	11 96       	adiw	r26, 0x01	; 1
 50a:	01 90       	ld	r0, Z+
 50c:	0d 92       	st	X+, r0
 50e:	8a 95       	dec	r24
 510:	e1 f7       	brne	.-8      	; 0x50a <H_LCD_void_sendData+0x24>
 512:	10 e0       	ldi	r17, 0x00	; 0
 514:	15 c0       	rjmp	.+42     	; 0x540 <H_LCD_void_sendData+0x5a>
 516:	81 2f       	mov	r24, r17
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	21 e0       	ldi	r18, 0x01	; 1
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	2c 0f       	add	r18, r28
 528:	3d 1f       	adc	r19, r29
 52a:	82 0f       	add	r24, r18
 52c:	93 1f       	adc	r25, r19
 52e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <DIO_U8SetPinValue>
 532:	8f e9       	ldi	r24, 0x9F	; 159
 534:	9f e0       	ldi	r25, 0x0F	; 15
 536:	01 97       	sbiw	r24, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <H_LCD_void_sendData+0x50>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <H_LCD_void_sendData+0x56>
 53c:	00 00       	nop
 53e:	1f 5f       	subi	r17, 0xFF	; 255
 540:	12 30       	cpi	r17, 0x02	; 2
 542:	48 f3       	brcs	.-46     	; 0x516 <H_LCD_void_sendData+0x30>
 544:	8f e9       	ldi	r24, 0x9F	; 159
 546:	9f e0       	ldi	r25, 0x0F	; 15
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	f1 f7       	brne	.-4      	; 0x548 <H_LCD_void_sendData+0x62>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <H_LCD_void_sendData+0x68>
 54e:	00 00       	nop
 550:	80 2f       	mov	r24, r16
 552:	0e 94 11 01 	call	0x222	; 0x222 <H_LCD_void_latchByte>
 556:	28 96       	adiw	r28, 0x08	; 8
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	f8 94       	cli
 55c:	de bf       	out	0x3e, r29	; 62
 55e:	0f be       	out	0x3f, r0	; 63
 560:	cd bf       	out	0x3d, r28	; 61
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	08 95       	ret

0000056c <H_LCD_void_sendString>:
 56c:	0f 93       	push	r16
 56e:	1f 93       	push	r17
 570:	cf 93       	push	r28
 572:	8c 01       	movw	r16, r24
 574:	c0 e0       	ldi	r28, 0x00	; 0
 576:	03 c0       	rjmp	.+6      	; 0x57e <H_LCD_void_sendString+0x12>
 578:	0e 94 73 02 	call	0x4e6	; 0x4e6 <H_LCD_void_sendData>
 57c:	cf 5f       	subi	r28, 0xFF	; 255
 57e:	f8 01       	movw	r30, r16
 580:	ec 0f       	add	r30, r28
 582:	f1 1d       	adc	r31, r1
 584:	80 81       	ld	r24, Z
 586:	81 11       	cpse	r24, r1
 588:	f7 cf       	rjmp	.-18     	; 0x578 <H_LCD_void_sendString+0xc>
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	08 95       	ret

00000592 <H_LCD_void_sendHexNum>:

void H_LCD_void_sendHexNum(u32 copy_u32Num) {
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
 59a:	60 97       	sbiw	r28, 0x10	; 16
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	f8 94       	cli
 5a0:	de bf       	out	0x3e, r29	; 62
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	cd bf       	out	0x3d, r28	; 61
 5a6:	dc 01       	movw	r26, r24
 5a8:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5aa:	40 e1       	ldi	r20, 0x10	; 16
 5ac:	be 01       	movw	r22, r28
 5ae:	6f 5f       	subi	r22, 0xFF	; 255
 5b0:	7f 4f       	sbci	r23, 0xFF	; 255
 5b2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__itoa_ncheck>
 s8 buff[16]; // String to hold the hexadecimal result
 itoa(copy_u32Num, buff, 16); // Convert to hexadecimal ASCII value (base 16)
 
 // Convert the string to uppercase by adding the ASCII difference
 for (u8 i = 0; buff[i]; i++) {
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0d c0       	rjmp	.+26     	; 0x5d4 <H_LCD_void_sendHexNum+0x42>
	 if (buff[i] >= 'a' && buff[i] <= 'f') {
 5ba:	4f e9       	ldi	r20, 0x9F	; 159
 5bc:	48 0f       	add	r20, r24
 5be:	46 30       	cpi	r20, 0x06	; 6
 5c0:	40 f4       	brcc	.+16     	; 0x5d2 <H_LCD_void_sendHexNum+0x40>
		 buff[i] = (s8)(buff[i] - 32);
 5c2:	80 52       	subi	r24, 0x20	; 32
 5c4:	e1 e0       	ldi	r30, 0x01	; 1
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	ec 0f       	add	r30, r28
 5ca:	fd 1f       	adc	r31, r29
 5cc:	e2 0f       	add	r30, r18
 5ce:	f3 1f       	adc	r31, r19
 5d0:	80 83       	st	Z, r24
void H_LCD_void_sendHexNum(u32 copy_u32Num) {
 s8 buff[16]; // String to hold the hexadecimal result
 itoa(copy_u32Num, buff, 16); // Convert to hexadecimal ASCII value (base 16)
 
 // Convert the string to uppercase by adding the ASCII difference
 for (u8 i = 0; buff[i]; i++) {
 5d2:	9f 5f       	subi	r25, 0xFF	; 255
 5d4:	29 2f       	mov	r18, r25
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	e1 e0       	ldi	r30, 0x01	; 1
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	ec 0f       	add	r30, r28
 5de:	fd 1f       	adc	r31, r29
 5e0:	e2 0f       	add	r30, r18
 5e2:	f3 1f       	adc	r31, r19
 5e4:	80 81       	ld	r24, Z
 5e6:	81 11       	cpse	r24, r1
 5e8:	e8 cf       	rjmp	.-48     	; 0x5ba <H_LCD_void_sendHexNum+0x28>
	 if (buff[i] >= 'a' && buff[i] <= 'f') {
		 buff[i] = (s8)(buff[i] - 32);
	 }
 }

 H_LCD_void_sendString("0x"); // Display "0x" as a prefix for hexadecimal numbers
 5ea:	8b e7       	ldi	r24, 0x7B	; 123
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 b6 02 	call	0x56c	; 0x56c <H_LCD_void_sendString>
 H_LCD_void_sendString(buff); // Display the uppercase hexadecimal string
 5f2:	ce 01       	movw	r24, r28
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	0e 94 b6 02 	call	0x56c	; 0x56c <H_LCD_void_sendString>
}
 5fa:	60 96       	adiw	r28, 0x10	; 16
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	08 95       	ret

0000060c <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 60c:	24 b1       	in	r18, 0x04	; 4
 60e:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 610:	00 24       	eor	r0, r0
 612:	22 0f       	add	r18, r18
 614:	33 1f       	adc	r19, r19
 616:	00 1c       	adc	r0, r0
 618:	22 0f       	add	r18, r18
 61a:	33 1f       	adc	r19, r19
 61c:	00 1c       	adc	r0, r0
 61e:	23 2f       	mov	r18, r19
 620:	30 2d       	mov	r19, r0
 622:	85 b1       	in	r24, 0x05	; 5
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 62e:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <__data_end>
 632:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <__data_end+0x1>
 636:	82 2b       	or	r24, r18
 638:	93 2b       	or	r25, r19
 63a:	09 95       	icall
 63c:	08 95       	ret

0000063e <DIO_U8SetPinDirection>:
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 63e:	dc 01       	movw	r26, r24
 640:	ec 91       	ld	r30, X
 642:	e4 30       	cpi	r30, 0x04	; 4
 644:	a0 f5       	brcc	.+104    	; 0x6ae <DIO_U8SetPinDirection+0x70>
 646:	11 96       	adiw	r26, 0x01	; 1
 648:	2c 91       	ld	r18, X
 64a:	11 97       	sbiw	r26, 0x01	; 1
 64c:	28 30       	cpi	r18, 0x08	; 8
 64e:	88 f5       	brcc	.+98     	; 0x6b2 <DIO_U8SetPinDirection+0x74>
 650:	12 96       	adiw	r26, 0x02	; 2
 652:	8c 91       	ld	r24, X
 654:	81 11       	cpse	r24, r1
 656:	15 c0       	rjmp	.+42     	; 0x682 <DIO_U8SetPinDirection+0x44>
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	ee 0f       	add	r30, r30
 65c:	ff 1f       	adc	r31, r31
 65e:	e7 57       	subi	r30, 0x77	; 119
 660:	ff 4f       	sbci	r31, 0xFF	; 255
 662:	01 90       	ld	r0, Z+
 664:	f0 81       	ld	r31, Z
 666:	e0 2d       	mov	r30, r0
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 c0       	rjmp	.+4      	; 0x672 <DIO_U8SetPinDirection+0x34>
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	2a 95       	dec	r18
 674:	e2 f7       	brpl	.-8      	; 0x66e <DIO_U8SetPinDirection+0x30>
 676:	80 95       	com	r24
 678:	90 81       	ld	r25, Z
 67a:	89 23       	and	r24, r25
 67c:	80 83       	st	Z, r24
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	08 95       	ret
 682:	81 30       	cpi	r24, 0x01	; 1
 684:	c1 f4       	brne	.+48     	; 0x6b6 <DIO_U8SetPinDirection+0x78>
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	e7 57       	subi	r30, 0x77	; 119
 68e:	ff 4f       	sbci	r31, 0xFF	; 255
 690:	01 90       	ld	r0, Z+
 692:	f0 81       	ld	r31, Z
 694:	e0 2d       	mov	r30, r0
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <DIO_U8SetPinDirection+0x62>
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	2a 95       	dec	r18
 6a2:	e2 f7       	brpl	.-8      	; 0x69c <DIO_U8SetPinDirection+0x5e>
 6a4:	90 81       	ld	r25, Z
 6a6:	89 2b       	or	r24, r25
 6a8:	80 83       	st	Z, r24
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	08 95       	ret
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	08 95       	ret
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	08 95       	ret
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	08 95       	ret

000006ba <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(const DIO_Config* config) {
    if (config != NULL) {
 6ba:	00 97       	sbiw	r24, 0x00	; 0
 6bc:	c1 f1       	breq	.+112    	; 0x72e <DIO_U8SetPinValue+0x74>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 6be:	dc 01       	movw	r26, r24
 6c0:	ec 91       	ld	r30, X
 6c2:	e4 30       	cpi	r30, 0x04	; 4
 6c4:	b0 f5       	brcc	.+108    	; 0x732 <DIO_U8SetPinValue+0x78>
 6c6:	11 96       	adiw	r26, 0x01	; 1
 6c8:	2c 91       	ld	r18, X
 6ca:	11 97       	sbiw	r26, 0x01	; 1
 6cc:	28 30       	cpi	r18, 0x08	; 8
 6ce:	98 f5       	brcc	.+102    	; 0x736 <DIO_U8SetPinValue+0x7c>
            if (config->value == DIO_PIN_HIGH) {
 6d0:	13 96       	adiw	r26, 0x03	; 3
 6d2:	8c 91       	ld	r24, X
 6d4:	81 30       	cpi	r24, 0x01	; 1
 6d6:	a1 f4       	brne	.+40     	; 0x700 <DIO_U8SetPinValue+0x46>
                SET_BIT(*writeRegisters[config->port], config->pin);
 6d8:	f0 e0       	ldi	r31, 0x00	; 0
 6da:	ee 0f       	add	r30, r30
 6dc:	ff 1f       	adc	r31, r31
 6de:	ef 57       	subi	r30, 0x7F	; 127
 6e0:	ff 4f       	sbci	r31, 0xFF	; 255
 6e2:	01 90       	ld	r0, Z+
 6e4:	f0 81       	ld	r31, Z
 6e6:	e0 2d       	mov	r30, r0
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_U8SetPinValue+0x38>
 6ee:	88 0f       	add	r24, r24
 6f0:	99 1f       	adc	r25, r25
 6f2:	2a 95       	dec	r18
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_U8SetPinValue+0x34>
 6f6:	90 81       	ld	r25, Z
 6f8:	89 2b       	or	r24, r25
 6fa:	80 83       	st	Z, r24
                return NO_ERROR;
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	08 95       	ret
            } else if (config->value == DIO_PIN_LOW) {
 700:	81 11       	cpse	r24, r1
 702:	1b c0       	rjmp	.+54     	; 0x73a <DIO_U8SetPinValue+0x80>
                CLR_BIT(*writeRegisters[config->port], config->pin);
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	ee 0f       	add	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	ef 57       	subi	r30, 0x7F	; 127
 70c:	ff 4f       	sbci	r31, 0xFF	; 255
 70e:	01 90       	ld	r0, Z+
 710:	f0 81       	ld	r31, Z
 712:	e0 2d       	mov	r30, r0
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_U8SetPinValue+0x64>
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	2a 95       	dec	r18
 720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_U8SetPinValue+0x60>
 722:	80 95       	com	r24
 724:	90 81       	ld	r25, Z
 726:	89 23       	and	r24, r25
 728:	80 83       	st	Z, r24
                return NO_ERROR;
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	08 95       	ret
            }
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	08 95       	ret
                return NO_ERROR;
            } else {
                return ERROR;
            }
        } else {
            return ERROR;
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	08 95       	ret
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	08 95       	ret
                return NO_ERROR;
            } else if (config->value == DIO_PIN_LOW) {
                CLR_BIT(*writeRegisters[config->port], config->pin);
                return NO_ERROR;
            } else {
                return ERROR;
 73a:	81 e0       	ldi	r24, 0x01	; 1
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 73c:	08 95       	ret

0000073e <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 73e:	1f 92       	push	r1
 740:	0f 92       	push	r0
 742:	0f b6       	in	r0, 0x3f	; 63
 744:	0f 92       	push	r0
 746:	11 24       	eor	r1, r1
 748:	2f 93       	push	r18
 74a:	3f 93       	push	r19
 74c:	4f 93       	push	r20
 74e:	5f 93       	push	r21
 750:	6f 93       	push	r22
 752:	7f 93       	push	r23
 754:	8f 93       	push	r24
 756:	9f 93       	push	r25
 758:	af 93       	push	r26
 75a:	bf 93       	push	r27
 75c:	ef 93       	push	r30
 75e:	ff 93       	push	r31
	if(Action[0]!= NULL){
 760:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <Action>
 764:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <Action+0x1>
 768:	30 97       	sbiw	r30, 0x00	; 0
 76a:	09 f0       	breq	.+2      	; 0x76e <__vector_1+0x30>
		Action[0]();
 76c:	09 95       	icall
	}
}
 76e:	ff 91       	pop	r31
 770:	ef 91       	pop	r30
 772:	bf 91       	pop	r27
 774:	af 91       	pop	r26
 776:	9f 91       	pop	r25
 778:	8f 91       	pop	r24
 77a:	7f 91       	pop	r23
 77c:	6f 91       	pop	r22
 77e:	5f 91       	pop	r21
 780:	4f 91       	pop	r20
 782:	3f 91       	pop	r19
 784:	2f 91       	pop	r18
 786:	0f 90       	pop	r0
 788:	0f be       	out	0x3f, r0	; 63
 78a:	0f 90       	pop	r0
 78c:	1f 90       	pop	r1
 78e:	18 95       	reti

00000790 <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 790:	1f 92       	push	r1
 792:	0f 92       	push	r0
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	0f 92       	push	r0
 798:	11 24       	eor	r1, r1
 79a:	2f 93       	push	r18
 79c:	3f 93       	push	r19
 79e:	4f 93       	push	r20
 7a0:	5f 93       	push	r21
 7a2:	6f 93       	push	r22
 7a4:	7f 93       	push	r23
 7a6:	8f 93       	push	r24
 7a8:	9f 93       	push	r25
 7aa:	af 93       	push	r26
 7ac:	bf 93       	push	r27
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31
	if(Action[1]!= NULL){
 7b2:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <Action+0x2>
 7b6:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <Action+0x3>
 7ba:	30 97       	sbiw	r30, 0x00	; 0
 7bc:	09 f0       	breq	.+2      	; 0x7c0 <__vector_2+0x30>
		Action[1]();
 7be:	09 95       	icall
	}
}
 7c0:	ff 91       	pop	r31
 7c2:	ef 91       	pop	r30
 7c4:	bf 91       	pop	r27
 7c6:	af 91       	pop	r26
 7c8:	9f 91       	pop	r25
 7ca:	8f 91       	pop	r24
 7cc:	7f 91       	pop	r23
 7ce:	6f 91       	pop	r22
 7d0:	5f 91       	pop	r21
 7d2:	4f 91       	pop	r20
 7d4:	3f 91       	pop	r19
 7d6:	2f 91       	pop	r18
 7d8:	0f 90       	pop	r0
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	0f 90       	pop	r0
 7de:	1f 90       	pop	r1
 7e0:	18 95       	reti

000007e2 <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 7e2:	1f 92       	push	r1
 7e4:	0f 92       	push	r0
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	0f 92       	push	r0
 7ea:	11 24       	eor	r1, r1
 7ec:	2f 93       	push	r18
 7ee:	3f 93       	push	r19
 7f0:	4f 93       	push	r20
 7f2:	5f 93       	push	r21
 7f4:	6f 93       	push	r22
 7f6:	7f 93       	push	r23
 7f8:	8f 93       	push	r24
 7fa:	9f 93       	push	r25
 7fc:	af 93       	push	r26
 7fe:	bf 93       	push	r27
 800:	ef 93       	push	r30
 802:	ff 93       	push	r31
	if(Action[2]!= NULL){
 804:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <Action+0x4>
 808:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <Action+0x5>
 80c:	30 97       	sbiw	r30, 0x00	; 0
 80e:	09 f0       	breq	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
		Action[2]();
 810:	09 95       	icall
	}
}
 812:	ff 91       	pop	r31
 814:	ef 91       	pop	r30
 816:	bf 91       	pop	r27
 818:	af 91       	pop	r26
 81a:	9f 91       	pop	r25
 81c:	8f 91       	pop	r24
 81e:	7f 91       	pop	r23
 820:	6f 91       	pop	r22
 822:	5f 91       	pop	r21
 824:	4f 91       	pop	r20
 826:	3f 91       	pop	r19
 828:	2f 91       	pop	r18
 82a:	0f 90       	pop	r0
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	0f 90       	pop	r0
 830:	1f 90       	pop	r1
 832:	18 95       	reti

00000834 <GIE_enable>:
#include "GIE_interface.h"


// Enable Global Interrupts
void GIE_enable(){
    __asm__ __volatile__ ("sei" ::);
 834:	78 94       	sei
 836:	08 95       	ret

00000838 <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 838:	1f 92       	push	r1
 83a:	0f 92       	push	r0
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	0f 92       	push	r0
 840:	11 24       	eor	r1, r1
 842:	2f 93       	push	r18
 844:	3f 93       	push	r19
 846:	4f 93       	push	r20
 848:	5f 93       	push	r21
 84a:	6f 93       	push	r22
 84c:	7f 93       	push	r23
 84e:	8f 93       	push	r24
 850:	9f 93       	push	r25
 852:	af 93       	push	r26
 854:	bf 93       	push	r27
 856:	ef 93       	push	r30
 858:	ff 93       	push	r31
	if(Action_Spi != NULL){
 85a:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <Action_Spi>
 85e:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <Action_Spi+0x1>
 862:	30 97       	sbiw	r30, 0x00	; 0
 864:	11 f0       	breq	.+4      	; 0x86a <__stack+0xb>
		u8 reveivedData = SPI->SPDR;
 866:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 868:	09 95       	icall
	}
 86a:	ff 91       	pop	r31
 86c:	ef 91       	pop	r30
 86e:	bf 91       	pop	r27
 870:	af 91       	pop	r26
 872:	9f 91       	pop	r25
 874:	8f 91       	pop	r24
 876:	7f 91       	pop	r23
 878:	6f 91       	pop	r22
 87a:	5f 91       	pop	r21
 87c:	4f 91       	pop	r20
 87e:	3f 91       	pop	r19
 880:	2f 91       	pop	r18
 882:	0f 90       	pop	r0
 884:	0f be       	out	0x3f, r0	; 63
 886:	0f 90       	pop	r0
 888:	1f 90       	pop	r1
 88a:	18 95       	reti

0000088c <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 88c:	1f 92       	push	r1
 88e:	0f 92       	push	r0
 890:	0f b6       	in	r0, 0x3f	; 63
 892:	0f 92       	push	r0
 894:	11 24       	eor	r1, r1
 896:	2f 93       	push	r18
 898:	3f 93       	push	r19
 89a:	4f 93       	push	r20
 89c:	5f 93       	push	r21
 89e:	6f 93       	push	r22
 8a0:	7f 93       	push	r23
 8a2:	8f 93       	push	r24
 8a4:	9f 93       	push	r25
 8a6:	af 93       	push	r26
 8a8:	bf 93       	push	r27
 8aa:	ef 93       	push	r30
 8ac:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 8ae:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <Action_Timer>
 8b2:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <Action_Timer+0x1>
 8b6:	89 2b       	or	r24, r25
 8b8:	89 f1       	breq	.+98     	; 0x91c <__vector_11+0x90>
		counter++;
 8ba:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <counter.1685>
 8be:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <counter.1685+0x1>
 8c2:	a0 91 9e 00 	lds	r26, 0x009E	; 0x80009e <counter.1685+0x2>
 8c6:	b0 91 9f 00 	lds	r27, 0x009F	; 0x80009f <counter.1685+0x3>
 8ca:	01 96       	adiw	r24, 0x01	; 1
 8cc:	a1 1d       	adc	r26, r1
 8ce:	b1 1d       	adc	r27, r1
 8d0:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <counter.1685>
 8d4:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <counter.1685+0x1>
 8d8:	a0 93 9e 00 	sts	0x009E, r26	; 0x80009e <counter.1685+0x2>
 8dc:	b0 93 9f 00 	sts	0x009F, r27	; 0x80009f <counter.1685+0x3>
		if(counter == numOverflows){
 8e0:	40 91 a8 00 	lds	r20, 0x00A8	; 0x8000a8 <numOverflows>
 8e4:	50 91 a9 00 	lds	r21, 0x00A9	; 0x8000a9 <numOverflows+0x1>
 8e8:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <numOverflows+0x2>
 8ec:	70 91 ab 00 	lds	r23, 0x00AB	; 0x8000ab <numOverflows+0x3>
 8f0:	84 17       	cp	r24, r20
 8f2:	95 07       	cpc	r25, r21
 8f4:	a6 07       	cpc	r26, r22
 8f6:	b7 07       	cpc	r27, r23
 8f8:	89 f4       	brne	.+34     	; 0x91c <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 8fa:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <remainingCounts>
 8fe:	81 95       	neg	r24
 900:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 902:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <counter.1685>
 906:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <counter.1685+0x1>
 90a:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <counter.1685+0x2>
 90e:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <counter.1685+0x3>
			Action_Timer[0]();
 912:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <Action_Timer>
 916:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <Action_Timer+0x1>
 91a:	09 95       	icall
		}
		
	}
}
 91c:	ff 91       	pop	r31
 91e:	ef 91       	pop	r30
 920:	bf 91       	pop	r27
 922:	af 91       	pop	r26
 924:	9f 91       	pop	r25
 926:	8f 91       	pop	r24
 928:	7f 91       	pop	r23
 92a:	6f 91       	pop	r22
 92c:	5f 91       	pop	r21
 92e:	4f 91       	pop	r20
 930:	3f 91       	pop	r19
 932:	2f 91       	pop	r18
 934:	0f 90       	pop	r0
 936:	0f be       	out	0x3f, r0	; 63
 938:	0f 90       	pop	r0
 93a:	1f 90       	pop	r1
 93c:	18 95       	reti

0000093e <__vector_10>:

ISR(TIMER0_COMP_vect){
 93e:	1f 92       	push	r1
 940:	0f 92       	push	r0
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	0f 92       	push	r0
 946:	11 24       	eor	r1, r1
 948:	2f 93       	push	r18
 94a:	3f 93       	push	r19
 94c:	4f 93       	push	r20
 94e:	5f 93       	push	r21
 950:	6f 93       	push	r22
 952:	7f 93       	push	r23
 954:	8f 93       	push	r24
 956:	9f 93       	push	r25
 958:	af 93       	push	r26
 95a:	bf 93       	push	r27
 95c:	ef 93       	push	r30
 95e:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 960:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <Action_Timer+0x2>
 964:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <Action_Timer+0x3>
 968:	30 97       	sbiw	r30, 0x00	; 0
 96a:	09 f0       	breq	.+2      	; 0x96e <__vector_10+0x30>
		Action_Timer[1]();
 96c:	09 95       	icall
		
	}
}
 96e:	ff 91       	pop	r31
 970:	ef 91       	pop	r30
 972:	bf 91       	pop	r27
 974:	af 91       	pop	r26
 976:	9f 91       	pop	r25
 978:	8f 91       	pop	r24
 97a:	7f 91       	pop	r23
 97c:	6f 91       	pop	r22
 97e:	5f 91       	pop	r21
 980:	4f 91       	pop	r20
 982:	3f 91       	pop	r19
 984:	2f 91       	pop	r18
 986:	0f 90       	pop	r0
 988:	0f be       	out	0x3f, r0	; 63
 98a:	0f 90       	pop	r0
 98c:	1f 90       	pop	r1
 98e:	18 95       	reti

00000990 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 990:	1f 92       	push	r1
 992:	0f 92       	push	r0
 994:	0f b6       	in	r0, 0x3f	; 63
 996:	0f 92       	push	r0
 998:	11 24       	eor	r1, r1
 99a:	2f 93       	push	r18
 99c:	3f 93       	push	r19
 99e:	4f 93       	push	r20
 9a0:	5f 93       	push	r21
 9a2:	6f 93       	push	r22
 9a4:	7f 93       	push	r23
 9a6:	8f 93       	push	r24
 9a8:	9f 93       	push	r25
 9aa:	af 93       	push	r26
 9ac:	bf 93       	push	r27
 9ae:	cf 93       	push	r28
 9b0:	df 93       	push	r29
 9b2:	ef 93       	push	r30
 9b4:	ff 93       	push	r31
	Action_Timer[0]();
 9b6:	c0 eb       	ldi	r28, 0xB0	; 176
 9b8:	d0 e0       	ldi	r29, 0x00	; 0
 9ba:	e8 81       	ld	r30, Y
 9bc:	f9 81       	ldd	r31, Y+1	; 0x01
 9be:	09 95       	icall
	numOverflows++;
 9c0:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <numOverflows>
 9c4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <numOverflows+0x1>
 9c8:	a0 91 ba 00 	lds	r26, 0x00BA	; 0x8000ba <numOverflows+0x2>
 9cc:	b0 91 bb 00 	lds	r27, 0x00BB	; 0x8000bb <numOverflows+0x3>
 9d0:	01 96       	adiw	r24, 0x01	; 1
 9d2:	a1 1d       	adc	r26, r1
 9d4:	b1 1d       	adc	r27, r1
 9d6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <numOverflows>
 9da:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <numOverflows+0x1>
 9de:	a0 93 ba 00 	sts	0x00BA, r26	; 0x8000ba <numOverflows+0x2>
 9e2:	b0 93 bb 00 	sts	0x00BB, r27	; 0x8000bb <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 9e6:	e8 81       	ld	r30, Y
 9e8:	f9 81       	ldd	r31, Y+1	; 0x01
 9ea:	30 97       	sbiw	r30, 0x00	; 0
 9ec:	49 f1       	breq	.+82     	; 0xa40 <__vector_9+0xb0>
		counter++;
 9ee:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <counter.1744>
 9f2:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <counter.1744+0x1>
 9f6:	a0 91 ae 00 	lds	r26, 0x00AE	; 0x8000ae <counter.1744+0x2>
 9fa:	b0 91 af 00 	lds	r27, 0x00AF	; 0x8000af <counter.1744+0x3>
 9fe:	01 96       	adiw	r24, 0x01	; 1
 a00:	a1 1d       	adc	r26, r1
 a02:	b1 1d       	adc	r27, r1
 a04:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <counter.1744>
 a08:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <counter.1744+0x1>
 a0c:	a0 93 ae 00 	sts	0x00AE, r26	; 0x8000ae <counter.1744+0x2>
 a10:	b0 93 af 00 	sts	0x00AF, r27	; 0x8000af <counter.1744+0x3>
		if(counter == req_numOverflows){
 a14:	40 91 bc 00 	lds	r20, 0x00BC	; 0x8000bc <req_numOverflows>
 a18:	50 91 bd 00 	lds	r21, 0x00BD	; 0x8000bd <req_numOverflows+0x1>
 a1c:	60 91 be 00 	lds	r22, 0x00BE	; 0x8000be <req_numOverflows+0x2>
 a20:	70 91 bf 00 	lds	r23, 0x00BF	; 0x8000bf <req_numOverflows+0x3>
 a24:	84 17       	cp	r24, r20
 a26:	95 07       	cpc	r25, r21
 a28:	a6 07       	cpc	r26, r22
 a2a:	b7 07       	cpc	r27, r23
 a2c:	49 f4       	brne	.+18     	; 0xa40 <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 a2e:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <counter.1744>
 a32:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <counter.1744+0x1>
 a36:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <counter.1744+0x2>
 a3a:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <counter.1744+0x3>
			Action_Timer[0]();
 a3e:	09 95       	icall
		}
		
	}
}
 a40:	ff 91       	pop	r31
 a42:	ef 91       	pop	r30
 a44:	df 91       	pop	r29
 a46:	cf 91       	pop	r28
 a48:	bf 91       	pop	r27
 a4a:	af 91       	pop	r26
 a4c:	9f 91       	pop	r25
 a4e:	8f 91       	pop	r24
 a50:	7f 91       	pop	r23
 a52:	6f 91       	pop	r22
 a54:	5f 91       	pop	r21
 a56:	4f 91       	pop	r20
 a58:	3f 91       	pop	r19
 a5a:	2f 91       	pop	r18
 a5c:	0f 90       	pop	r0
 a5e:	0f be       	out	0x3f, r0	; 63
 a60:	0f 90       	pop	r0
 a62:	1f 90       	pop	r1
 a64:	18 95       	reti

00000a66 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 a66:	1f 92       	push	r1
 a68:	0f 92       	push	r0
 a6a:	0f b6       	in	r0, 0x3f	; 63
 a6c:	0f 92       	push	r0
 a6e:	11 24       	eor	r1, r1
 a70:	2f 93       	push	r18
 a72:	3f 93       	push	r19
 a74:	4f 93       	push	r20
 a76:	5f 93       	push	r21
 a78:	6f 93       	push	r22
 a7a:	7f 93       	push	r23
 a7c:	8f 93       	push	r24
 a7e:	9f 93       	push	r25
 a80:	af 93       	push	r26
 a82:	bf 93       	push	r27
 a84:	ef 93       	push	r30
 a86:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 a88:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <Action_Timer+0x2>
 a8c:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <Action_Timer+0x3>
 a90:	30 97       	sbiw	r30, 0x00	; 0
 a92:	09 f0       	breq	.+2      	; 0xa96 <__vector_7+0x30>
		Action_Timer[1]();
 a94:	09 95       	icall
	}
}
 a96:	ff 91       	pop	r31
 a98:	ef 91       	pop	r30
 a9a:	bf 91       	pop	r27
 a9c:	af 91       	pop	r26
 a9e:	9f 91       	pop	r25
 aa0:	8f 91       	pop	r24
 aa2:	7f 91       	pop	r23
 aa4:	6f 91       	pop	r22
 aa6:	5f 91       	pop	r21
 aa8:	4f 91       	pop	r20
 aaa:	3f 91       	pop	r19
 aac:	2f 91       	pop	r18
 aae:	0f 90       	pop	r0
 ab0:	0f be       	out	0x3f, r0	; 63
 ab2:	0f 90       	pop	r0
 ab4:	1f 90       	pop	r1
 ab6:	18 95       	reti

00000ab8 <__vector_6>:


ISR(TIMER1_CAPT_vect){
 ab8:	1f 92       	push	r1
 aba:	0f 92       	push	r0
 abc:	0f b6       	in	r0, 0x3f	; 63
 abe:	0f 92       	push	r0
 ac0:	11 24       	eor	r1, r1
 ac2:	2f 93       	push	r18
 ac4:	3f 93       	push	r19
 ac6:	4f 93       	push	r20
 ac8:	5f 93       	push	r21
 aca:	6f 93       	push	r22
 acc:	7f 93       	push	r23
 ace:	8f 93       	push	r24
 ad0:	9f 93       	push	r25
 ad2:	af 93       	push	r26
 ad4:	bf 93       	push	r27
 ad6:	ef 93       	push	r30
 ad8:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 ada:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <Action_Timer+0x6>
 ade:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <Action_Timer+0x7>
 ae2:	30 97       	sbiw	r30, 0x00	; 0
 ae4:	09 f0       	breq	.+2      	; 0xae8 <__vector_6+0x30>
			Action_Timer[3]();
 ae6:	09 95       	icall
			
			
		}
 ae8:	ff 91       	pop	r31
 aea:	ef 91       	pop	r30
 aec:	bf 91       	pop	r27
 aee:	af 91       	pop	r26
 af0:	9f 91       	pop	r25
 af2:	8f 91       	pop	r24
 af4:	7f 91       	pop	r23
 af6:	6f 91       	pop	r22
 af8:	5f 91       	pop	r21
 afa:	4f 91       	pop	r20
 afc:	3f 91       	pop	r19
 afe:	2f 91       	pop	r18
 b00:	0f 90       	pop	r0
 b02:	0f be       	out	0x3f, r0	; 63
 b04:	0f 90       	pop	r0
 b06:	1f 90       	pop	r1
 b08:	18 95       	reti

00000b0a <USART_Init>:

void UART_receiveByteAsynchCallBack(void (*ptrfn)(u8)) {
	// Enable UART receiver interrupt
	UCSRB |= (1 << RXCIE);
	//set callback
	Action_Uart[0] = ptrfn;
 b0a:	82 e0       	ldi	r24, 0x02	; 2
 b0c:	8b b9       	out	0x0b, r24	; 11
 b0e:	88 e1       	ldi	r24, 0x18	; 24
 b10:	8a b9       	out	0x0a, r24	; 10
 b12:	86 e8       	ldi	r24, 0x86	; 134
 b14:	80 bd       	out	0x20, r24	; 32
 b16:	10 bc       	out	0x20, r1	; 32
 b18:	87 e6       	ldi	r24, 0x67	; 103
 b1a:	89 b9       	out	0x09, r24	; 9
 b1c:	08 95       	ret

00000b1e <MUART_voidRecieveByteSynch>:
 b1e:	5f 9b       	sbis	0x0b, 7	; 11
 b20:	fe cf       	rjmp	.-4      	; 0xb1e <MUART_voidRecieveByteSynch>
 b22:	80 e5       	ldi	r24, 0x50	; 80
 b24:	93 ec       	ldi	r25, 0xC3	; 195
 b26:	5f 9b       	sbis	0x0b, 7	; 11
 b28:	02 c0       	rjmp	.+4      	; 0xb2e <MUART_voidRecieveByteSynch+0x10>
 b2a:	8c b1       	in	r24, 0x0c	; 12
 b2c:	08 95       	ret
 b2e:	01 97       	sbiw	r24, 0x01	; 1
 b30:	d1 f7       	brne	.-12     	; 0xb26 <MUART_voidRecieveByteSynch+0x8>
 b32:	80 e0       	ldi	r24, 0x00	; 0
 b34:	08 95       	ret

00000b36 <__vector_13>:
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 b36:	1f 92       	push	r1
 b38:	0f 92       	push	r0
 b3a:	0f b6       	in	r0, 0x3f	; 63
 b3c:	0f 92       	push	r0
 b3e:	11 24       	eor	r1, r1
 b40:	2f 93       	push	r18
 b42:	3f 93       	push	r19
 b44:	4f 93       	push	r20
 b46:	5f 93       	push	r21
 b48:	6f 93       	push	r22
 b4a:	7f 93       	push	r23
 b4c:	8f 93       	push	r24
 b4e:	9f 93       	push	r25
 b50:	af 93       	push	r26
 b52:	bf 93       	push	r27
 b54:	ef 93       	push	r30
 b56:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 b58:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 b5a:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <Action_Uart>
 b5e:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <Action_Uart+0x1>
 b62:	30 97       	sbiw	r30, 0x00	; 0
 b64:	09 f0       	breq	.+2      	; 0xb68 <__vector_13+0x32>
		Action_Uart[0](receivedData);
 b66:	09 95       	icall
	}
 b68:	ff 91       	pop	r31
 b6a:	ef 91       	pop	r30
 b6c:	bf 91       	pop	r27
 b6e:	af 91       	pop	r26
 b70:	9f 91       	pop	r25
 b72:	8f 91       	pop	r24
 b74:	7f 91       	pop	r23
 b76:	6f 91       	pop	r22
 b78:	5f 91       	pop	r21
 b7a:	4f 91       	pop	r20
 b7c:	3f 91       	pop	r19
 b7e:	2f 91       	pop	r18
 b80:	0f 90       	pop	r0
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	0f 90       	pop	r0
 b86:	1f 90       	pop	r1
 b88:	18 95       	reti

00000b8a <__udivmodsi4>:
 b8a:	a1 e2       	ldi	r26, 0x21	; 33
 b8c:	1a 2e       	mov	r1, r26
 b8e:	aa 1b       	sub	r26, r26
 b90:	bb 1b       	sub	r27, r27
 b92:	fd 01       	movw	r30, r26
 b94:	0d c0       	rjmp	.+26     	; 0xbb0 <__udivmodsi4_ep>

00000b96 <__udivmodsi4_loop>:
 b96:	aa 1f       	adc	r26, r26
 b98:	bb 1f       	adc	r27, r27
 b9a:	ee 1f       	adc	r30, r30
 b9c:	ff 1f       	adc	r31, r31
 b9e:	a2 17       	cp	r26, r18
 ba0:	b3 07       	cpc	r27, r19
 ba2:	e4 07       	cpc	r30, r20
 ba4:	f5 07       	cpc	r31, r21
 ba6:	20 f0       	brcs	.+8      	; 0xbb0 <__udivmodsi4_ep>
 ba8:	a2 1b       	sub	r26, r18
 baa:	b3 0b       	sbc	r27, r19
 bac:	e4 0b       	sbc	r30, r20
 bae:	f5 0b       	sbc	r31, r21

00000bb0 <__udivmodsi4_ep>:
 bb0:	66 1f       	adc	r22, r22
 bb2:	77 1f       	adc	r23, r23
 bb4:	88 1f       	adc	r24, r24
 bb6:	99 1f       	adc	r25, r25
 bb8:	1a 94       	dec	r1
 bba:	69 f7       	brne	.-38     	; 0xb96 <__udivmodsi4_loop>
 bbc:	60 95       	com	r22
 bbe:	70 95       	com	r23
 bc0:	80 95       	com	r24
 bc2:	90 95       	com	r25
 bc4:	9b 01       	movw	r18, r22
 bc6:	ac 01       	movw	r20, r24
 bc8:	bd 01       	movw	r22, r26
 bca:	cf 01       	movw	r24, r30
 bcc:	08 95       	ret

00000bce <__divmodsi4>:
 bce:	05 2e       	mov	r0, r21
 bd0:	97 fb       	bst	r25, 7
 bd2:	1e f4       	brtc	.+6      	; 0xbda <__divmodsi4+0xc>
 bd4:	00 94       	com	r0
 bd6:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__negsi2>
 bda:	57 fd       	sbrc	r21, 7
 bdc:	07 d0       	rcall	.+14     	; 0xbec <__divmodsi4_neg2>
 bde:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__udivmodsi4>
 be2:	07 fc       	sbrc	r0, 7
 be4:	03 d0       	rcall	.+6      	; 0xbec <__divmodsi4_neg2>
 be6:	4e f4       	brtc	.+18     	; 0xbfa <__divmodsi4_exit>
 be8:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <__negsi2>

00000bec <__divmodsi4_neg2>:
 bec:	50 95       	com	r21
 bee:	40 95       	com	r20
 bf0:	30 95       	com	r19
 bf2:	21 95       	neg	r18
 bf4:	3f 4f       	sbci	r19, 0xFF	; 255
 bf6:	4f 4f       	sbci	r20, 0xFF	; 255
 bf8:	5f 4f       	sbci	r21, 0xFF	; 255

00000bfa <__divmodsi4_exit>:
 bfa:	08 95       	ret

00000bfc <__negsi2>:
 bfc:	90 95       	com	r25
 bfe:	80 95       	com	r24
 c00:	70 95       	com	r23
 c02:	61 95       	neg	r22
 c04:	7f 4f       	sbci	r23, 0xFF	; 255
 c06:	8f 4f       	sbci	r24, 0xFF	; 255
 c08:	9f 4f       	sbci	r25, 0xFF	; 255
 c0a:	08 95       	ret

00000c0c <__umulhisi3>:
 c0c:	a2 9f       	mul	r26, r18
 c0e:	b0 01       	movw	r22, r0
 c10:	b3 9f       	mul	r27, r19
 c12:	c0 01       	movw	r24, r0
 c14:	a3 9f       	mul	r26, r19
 c16:	70 0d       	add	r23, r0
 c18:	81 1d       	adc	r24, r1
 c1a:	11 24       	eor	r1, r1
 c1c:	91 1d       	adc	r25, r1
 c1e:	b2 9f       	mul	r27, r18
 c20:	70 0d       	add	r23, r0
 c22:	81 1d       	adc	r24, r1
 c24:	11 24       	eor	r1, r1
 c26:	91 1d       	adc	r25, r1
 c28:	08 95       	ret

00000c2a <__muluhisi3>:
 c2a:	0e 94 06 06 	call	0xc0c	; 0xc0c <__umulhisi3>
 c2e:	a5 9f       	mul	r26, r21
 c30:	90 0d       	add	r25, r0
 c32:	b4 9f       	mul	r27, r20
 c34:	90 0d       	add	r25, r0
 c36:	a4 9f       	mul	r26, r20
 c38:	80 0d       	add	r24, r0
 c3a:	91 1d       	adc	r25, r1
 c3c:	11 24       	eor	r1, r1
 c3e:	08 95       	ret

00000c40 <do_rand>:
 c40:	8f 92       	push	r8
 c42:	9f 92       	push	r9
 c44:	af 92       	push	r10
 c46:	bf 92       	push	r11
 c48:	cf 92       	push	r12
 c4a:	df 92       	push	r13
 c4c:	ef 92       	push	r14
 c4e:	ff 92       	push	r15
 c50:	cf 93       	push	r28
 c52:	df 93       	push	r29
 c54:	ec 01       	movw	r28, r24
 c56:	68 81       	ld	r22, Y
 c58:	79 81       	ldd	r23, Y+1	; 0x01
 c5a:	8a 81       	ldd	r24, Y+2	; 0x02
 c5c:	9b 81       	ldd	r25, Y+3	; 0x03
 c5e:	61 15       	cp	r22, r1
 c60:	71 05       	cpc	r23, r1
 c62:	81 05       	cpc	r24, r1
 c64:	91 05       	cpc	r25, r1
 c66:	21 f4       	brne	.+8      	; 0xc70 <do_rand+0x30>
 c68:	64 e2       	ldi	r22, 0x24	; 36
 c6a:	79 ed       	ldi	r23, 0xD9	; 217
 c6c:	8b e5       	ldi	r24, 0x5B	; 91
 c6e:	97 e0       	ldi	r25, 0x07	; 7
 c70:	2d e1       	ldi	r18, 0x1D	; 29
 c72:	33 ef       	ldi	r19, 0xF3	; 243
 c74:	41 e0       	ldi	r20, 0x01	; 1
 c76:	50 e0       	ldi	r21, 0x00	; 0
 c78:	0e 94 e7 05 	call	0xbce	; 0xbce <__divmodsi4>
 c7c:	49 01       	movw	r8, r18
 c7e:	5a 01       	movw	r10, r20
 c80:	9b 01       	movw	r18, r22
 c82:	ac 01       	movw	r20, r24
 c84:	a7 ea       	ldi	r26, 0xA7	; 167
 c86:	b1 e4       	ldi	r27, 0x41	; 65
 c88:	0e 94 15 06 	call	0xc2a	; 0xc2a <__muluhisi3>
 c8c:	6b 01       	movw	r12, r22
 c8e:	7c 01       	movw	r14, r24
 c90:	ac ee       	ldi	r26, 0xEC	; 236
 c92:	b4 ef       	ldi	r27, 0xF4	; 244
 c94:	a5 01       	movw	r20, r10
 c96:	94 01       	movw	r18, r8
 c98:	0e 94 b4 06 	call	0xd68	; 0xd68 <__mulohisi3>
 c9c:	dc 01       	movw	r26, r24
 c9e:	cb 01       	movw	r24, r22
 ca0:	8c 0d       	add	r24, r12
 ca2:	9d 1d       	adc	r25, r13
 ca4:	ae 1d       	adc	r26, r14
 ca6:	bf 1d       	adc	r27, r15
 ca8:	b7 ff       	sbrs	r27, 7
 caa:	03 c0       	rjmp	.+6      	; 0xcb2 <do_rand+0x72>
 cac:	01 97       	sbiw	r24, 0x01	; 1
 cae:	a1 09       	sbc	r26, r1
 cb0:	b0 48       	sbci	r27, 0x80	; 128
 cb2:	88 83       	st	Y, r24
 cb4:	99 83       	std	Y+1, r25	; 0x01
 cb6:	aa 83       	std	Y+2, r26	; 0x02
 cb8:	bb 83       	std	Y+3, r27	; 0x03
 cba:	9f 77       	andi	r25, 0x7F	; 127
 cbc:	df 91       	pop	r29
 cbe:	cf 91       	pop	r28
 cc0:	ff 90       	pop	r15
 cc2:	ef 90       	pop	r14
 cc4:	df 90       	pop	r13
 cc6:	cf 90       	pop	r12
 cc8:	bf 90       	pop	r11
 cca:	af 90       	pop	r10
 ccc:	9f 90       	pop	r9
 cce:	8f 90       	pop	r8
 cd0:	08 95       	ret

00000cd2 <rand_r>:
 cd2:	0e 94 20 06 	call	0xc40	; 0xc40 <do_rand>
 cd6:	08 95       	ret

00000cd8 <rand>:
 cd8:	80 e6       	ldi	r24, 0x60	; 96
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	0e 94 20 06 	call	0xc40	; 0xc40 <do_rand>
 ce0:	08 95       	ret

00000ce2 <srand>:
 ce2:	a0 e0       	ldi	r26, 0x00	; 0
 ce4:	b0 e0       	ldi	r27, 0x00	; 0
 ce6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 cea:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
 cee:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
 cf2:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
 cf6:	08 95       	ret

00000cf8 <__itoa_ncheck>:
 cf8:	bb 27       	eor	r27, r27
 cfa:	4a 30       	cpi	r20, 0x0A	; 10
 cfc:	31 f4       	brne	.+12     	; 0xd0a <__itoa_ncheck+0x12>
 cfe:	99 23       	and	r25, r25
 d00:	22 f4       	brpl	.+8      	; 0xd0a <__itoa_ncheck+0x12>
 d02:	bd e2       	ldi	r27, 0x2D	; 45
 d04:	90 95       	com	r25
 d06:	81 95       	neg	r24
 d08:	9f 4f       	sbci	r25, 0xFF	; 255
 d0a:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__utoa_common>

00000d0e <__utoa_ncheck>:
 d0e:	bb 27       	eor	r27, r27

00000d10 <__utoa_common>:
 d10:	fb 01       	movw	r30, r22
 d12:	55 27       	eor	r21, r21
 d14:	aa 27       	eor	r26, r26
 d16:	88 0f       	add	r24, r24
 d18:	99 1f       	adc	r25, r25
 d1a:	aa 1f       	adc	r26, r26
 d1c:	a4 17       	cp	r26, r20
 d1e:	10 f0       	brcs	.+4      	; 0xd24 <__utoa_common+0x14>
 d20:	a4 1b       	sub	r26, r20
 d22:	83 95       	inc	r24
 d24:	50 51       	subi	r21, 0x10	; 16
 d26:	b9 f7       	brne	.-18     	; 0xd16 <__utoa_common+0x6>
 d28:	a0 5d       	subi	r26, 0xD0	; 208
 d2a:	aa 33       	cpi	r26, 0x3A	; 58
 d2c:	08 f0       	brcs	.+2      	; 0xd30 <__utoa_common+0x20>
 d2e:	a9 5d       	subi	r26, 0xD9	; 217
 d30:	a1 93       	st	Z+, r26
 d32:	00 97       	sbiw	r24, 0x00	; 0
 d34:	79 f7       	brne	.-34     	; 0xd14 <__utoa_common+0x4>
 d36:	b1 11       	cpse	r27, r1
 d38:	b1 93       	st	Z+, r27
 d3a:	11 92       	st	Z+, r1
 d3c:	cb 01       	movw	r24, r22
 d3e:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <strrev>

00000d42 <strrev>:
 d42:	dc 01       	movw	r26, r24
 d44:	fc 01       	movw	r30, r24
 d46:	67 2f       	mov	r22, r23
 d48:	71 91       	ld	r23, Z+
 d4a:	77 23       	and	r23, r23
 d4c:	e1 f7       	brne	.-8      	; 0xd46 <strrev+0x4>
 d4e:	32 97       	sbiw	r30, 0x02	; 2
 d50:	04 c0       	rjmp	.+8      	; 0xd5a <strrev+0x18>
 d52:	7c 91       	ld	r23, X
 d54:	6d 93       	st	X+, r22
 d56:	70 83       	st	Z, r23
 d58:	62 91       	ld	r22, -Z
 d5a:	ae 17       	cp	r26, r30
 d5c:	bf 07       	cpc	r27, r31
 d5e:	c8 f3       	brcs	.-14     	; 0xd52 <strrev+0x10>
 d60:	08 95       	ret

00000d62 <__mulshisi3>:
 d62:	b7 ff       	sbrs	r27, 7
 d64:	0c 94 15 06 	jmp	0xc2a	; 0xc2a <__muluhisi3>

00000d68 <__mulohisi3>:
 d68:	0e 94 15 06 	call	0xc2a	; 0xc2a <__muluhisi3>
 d6c:	82 1b       	sub	r24, r18
 d6e:	93 0b       	sbc	r25, r19
 d70:	08 95       	ret

00000d72 <_exit>:
 d72:	f8 94       	cli

00000d74 <__stop_program>:
 d74:	ff cf       	rjmp	.-2      	; 0xd74 <__stop_program>
