
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000b1a  00000bae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800098  00800098  00000be6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002de4  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000111b  00000000  00000000  00003d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017ea  00000000  00000000  00004e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008c4  00000000  00000000  00006628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001391  00000000  00000000  00006eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001fd7  00000000  00000000  0000827d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000a254  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_1>
   8:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_2>
   c:	0c 94 0f 04 	jmp	0x81e	; 0x81e <__vector_3>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__vector_6>
  1c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__vector_7>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 ba 04 	jmp	0x974	; 0x974 <__vector_9>
  28:	0c 94 91 04 	jmp	0x922	; 0x922 <__vector_10>
  2c:	0c 94 38 04 	jmp	0x870	; 0x870 <__vector_11>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	71 00       	.word	0x0071	; ????
  56:	8d 00       	.word	0x008d	; ????
  58:	73 00       	.word	0x0073	; ????
  5a:	75 00       	.word	0x0075	; ????
  5c:	77 00       	.word	0x0077	; ????
  5e:	79 00       	.word	0x0079	; ????
  60:	7b 00       	.word	0x007b	; ????
  62:	7d 00       	.word	0x007d	; ????
  64:	7f 00       	.word	0x007f	; ????
  66:	81 00       	.word	0x0081	; ????
  68:	83 00       	.word	0x0083	; ????
  6a:	85 00       	.word	0x0085	; ????
  6c:	8e 00       	.word	0x008e	; ????
  6e:	87 00       	.word	0x0087	; ????
  70:	89 00       	.word	0x0089	; ????
  72:	8b 00       	.word	0x008b	; ????

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ea e1       	ldi	r30, 0x1A	; 26
  88:	fb e0       	ldi	r31, 0x0B	; 11
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a8 39       	cpi	r26, 0x98	; 152
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	20 e0       	ldi	r18, 0x00	; 0
  98:	a8 e9       	ldi	r26, 0x98	; 152
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a4 3c       	cpi	r26, 0xC4	; 196
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  aa:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:
	//TIMER0 output pin OC0
	//DIO_Config oc0_bit = {DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT};
	//DIO_U8SetPinDirection(&oc0_bit);
	
	//GIE_enable();
	H_LCD_void_Init();
  b2:	0e 94 33 02 	call	0x466	; 0x466 <H_LCD_void_Init>
	//u32 dutyCycle = ((float)(g_timeHigh) / (g_timePeriod)) * 100;
	//H_LCD_void_sendIntNum(dutyCycle);
	//H_LCD_void_sendData('%');
	
	
	M_USART_void_Init();
  b6:	0e 94 77 05 	call	0xaee	; 0xaee <M_USART_void_Init>


	while (1) {
		
			u8 key = KEYPAD_getPressedKey();
  ba:	0e 94 8f 00 	call	0x11e	; 0x11e <KEYPAD_getPressedKey>
  be:	c8 2f       	mov	r28, r24
			UART_sendByte(key);
  c0:	0e 94 81 05 	call	0xb02	; 0xb02 <UART_sendByte>
			H_LCD_void_sendData(key);
  c4:	8c 2f       	mov	r24, r28
  c6:	0e 94 b8 02 	call	0x570	; 0x570 <H_LCD_void_sendData>
  ca:	f7 cf       	rjmp	.-18     	; 0xba <main+0x8>

000000cc <KEYPAD_4x4_adjustKeyNumber>:
* Update the keypad pressed button value with the correct one in keypad 4x4 shape
*/
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number)
{
	u8 keypad_button = 0;
	switch(button_number)
  cc:	48 2f       	mov	r20, r24
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	fa 01       	movw	r30, r20
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	e0 31       	cpi	r30, 0x10	; 16
  d6:	f1 05       	cpc	r31, r1
  d8:	08 f5       	brcc	.+66     	; 0x11c <KEYPAD_4x4_adjustKeyNumber+0x50>
  da:	e6 5d       	subi	r30, 0xD6	; 214
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__tablejump2__>
	{
		case 1: keypad_button = 7;
  e2:	87 e0       	ldi	r24, 0x07	; 7
  e4:	08 95       	ret
		break;
		case 2: keypad_button = 8;
		break;
		case 3: keypad_button = 9;
  e6:	89 e0       	ldi	r24, 0x09	; 9
		break;
  e8:	08 95       	ret
		case 4: keypad_button = '%'; // ASCII Code of %
  ea:	85 e2       	ldi	r24, 0x25	; 37
		break;
  ec:	08 95       	ret
		case 5: keypad_button = 4;
  ee:	84 e0       	ldi	r24, 0x04	; 4
		break;
  f0:	08 95       	ret
		case 6: keypad_button = 5;
  f2:	85 e0       	ldi	r24, 0x05	; 5
		break;
  f4:	08 95       	ret
		case 7: keypad_button = 6;
  f6:	86 e0       	ldi	r24, 0x06	; 6
		break;
  f8:	08 95       	ret
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
  fa:	8a e2       	ldi	r24, 0x2A	; 42
		break;
  fc:	08 95       	ret
		case 9: keypad_button = 1;
  fe:	81 e0       	ldi	r24, 0x01	; 1
		break;
 100:	08 95       	ret
		case 10: keypad_button = 2;
 102:	82 e0       	ldi	r24, 0x02	; 2
		break;
 104:	08 95       	ret
		case 11: keypad_button = 3;
 106:	83 e0       	ldi	r24, 0x03	; 3
		break;
 108:	08 95       	ret
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
 10a:	8d e2       	ldi	r24, 0x2D	; 45
		break;
 10c:	08 95       	ret
		case 13: keypad_button = 13;  /* ASCII of Enter */
		break;
		case 14: keypad_button = 0;
 10e:	80 e0       	ldi	r24, 0x00	; 0
		break;
 110:	08 95       	ret
		case 15: keypad_button = '='; /* ASCII Code of '=' */
 112:	8d e3       	ldi	r24, 0x3D	; 61
		break;
 114:	08 95       	ret
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
 116:	8b e2       	ldi	r24, 0x2B	; 43
		break;
 118:	08 95       	ret
	u8 keypad_button = 0;
	switch(button_number)
	{
		case 1: keypad_button = 7;
		break;
		case 2: keypad_button = 8;
 11a:	88 e0       	ldi	r24, 0x08	; 8
		break;
		default: keypad_button = button_number;
		break;
	}
	return keypad_button;
}
 11c:	08 95       	ret

0000011e <KEYPAD_getPressedKey>:
#include "Keypad_config.h"
#include "Keypad_private.h"



u8 KEYPAD_getPressedKey(){
 11e:	9f 92       	push	r9
 120:	af 92       	push	r10
 122:	bf 92       	push	r11
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	a1 97       	sbiw	r28, 0x21	; 33
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
	u8 col,row;
	u8 prevKey = 0; // Previous key state
	u8 currentKey = 0; // Current key state
 144:	19 82       	std	Y+1, r1	; 0x01
	// Configuration for the columns
	DIO_Config colPins[] = {
 146:	80 e1       	ldi	r24, 0x10	; 16
 148:	e0 e6       	ldi	r30, 0x60	; 96
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	de 01       	movw	r26, r28
 14e:	12 96       	adiw	r26, 0x02	; 2
 150:	01 90       	ld	r0, Z+
 152:	0d 92       	st	X+, r0
 154:	8a 95       	dec	r24
 156:	e1 f7       	brne	.-8      	; 0x150 <KEYPAD_getPressedKey+0x32>
		{COL2_PORT, COL2_PIN, DIO_PIN_INPUT, DIO_PIN_HIGH},
		{COL3_PORT, COL3_PIN, DIO_PIN_INPUT, DIO_PIN_HIGH},
		{COL4_PORT, COL4_PIN, DIO_PIN_INPUT, DIO_PIN_HIGH},
	};
	// Configuration for the rows
	DIO_Config rowPins[] = {
 158:	fe 01       	movw	r30, r28
 15a:	72 96       	adiw	r30, 0x12	; 18
 15c:	80 e1       	ldi	r24, 0x10	; 16
 15e:	df 01       	movw	r26, r30
 160:	1d 92       	st	X+, r1
 162:	8a 95       	dec	r24
 164:	e9 f7       	brne	.-6      	; 0x160 <KEYPAD_getPressedKey+0x42>
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	8a 8b       	std	Y+18, r24	; 0x12
 16a:	95 e0       	ldi	r25, 0x05	; 5
 16c:	9b 8b       	std	Y+19, r25	; 0x13
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	9c 8b       	std	Y+20, r25	; 0x14
 172:	8e 8b       	std	Y+22, r24	; 0x16
 174:	24 e0       	ldi	r18, 0x04	; 4
 176:	2f 8b       	std	Y+23, r18	; 0x17
 178:	98 8f       	std	Y+24, r25	; 0x18
 17a:	8a 8f       	std	Y+26, r24	; 0x1a
 17c:	23 e0       	ldi	r18, 0x03	; 3
 17e:	2b 8f       	std	Y+27, r18	; 0x1b
 180:	9c 8f       	std	Y+28, r25	; 0x1c
 182:	8e 8f       	std	Y+30, r24	; 0x1e
 184:	8f 8f       	std	Y+31, r24	; 0x1f
 186:	98 a3       	std	Y+32, r25	; 0x20
		{ROW3_PORT, ROW3_PIN, DIO_PIN_OUTPUT},
		{ROW4_PORT, ROW4_PIN, DIO_PIN_OUTPUT},
	};

	// Initialize the keypad pins
	for (u8 i = 0; i < 4; i++) {
 188:	d1 2c       	mov	r13, r1
 18a:	1b c0       	rjmp	.+54     	; 0x1c2 <KEYPAD_getPressedKey+0xa4>
		DIO_U8SetPinDirection(&colPins[i]);
 18c:	ed 2c       	mov	r14, r13
 18e:	f1 2c       	mov	r15, r1
 190:	ee 0c       	add	r14, r14
 192:	ff 1c       	adc	r15, r15
 194:	ee 0c       	add	r14, r14
 196:	ff 1c       	adc	r15, r15
 198:	02 e0       	ldi	r16, 0x02	; 2
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	0c 0f       	add	r16, r28
 19e:	1d 1f       	adc	r17, r29
 1a0:	0e 0d       	add	r16, r14
 1a2:	1f 1d       	adc	r17, r15
 1a4:	c8 01       	movw	r24, r16
 1a6:	0e 94 14 03 	call	0x628	; 0x628 <DIO_U8SetPinDirection>
		DIO_U8SetPinDirection(&rowPins[i]);
 1aa:	82 e1       	ldi	r24, 0x12	; 18
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	8c 0f       	add	r24, r28
 1b0:	9d 1f       	adc	r25, r29
 1b2:	8e 0d       	add	r24, r14
 1b4:	9f 1d       	adc	r25, r15
 1b6:	0e 94 14 03 	call	0x628	; 0x628 <DIO_U8SetPinDirection>
		DIO_U8SetPinValue(&colPins[i]);
 1ba:	c8 01       	movw	r24, r16
 1bc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_U8SetPinValue>
		{ROW3_PORT, ROW3_PIN, DIO_PIN_OUTPUT},
		{ROW4_PORT, ROW4_PIN, DIO_PIN_OUTPUT},
	};

	// Initialize the keypad pins
	for (u8 i = 0; i < 4; i++) {
 1c0:	d3 94       	inc	r13
 1c2:	b3 e0       	ldi	r27, 0x03	; 3
 1c4:	bd 15       	cp	r27, r13
 1c6:	10 f7       	brcc	.-60     	; 0x18c <KEYPAD_getPressedKey+0x6e>
 1c8:	91 2c       	mov	r9, r1
	}

	while(1)
	{
		/*for loop to scan all keypad columns*/
		for (row = 0 ; row < 4 ; row++)
 1ca:	a1 2c       	mov	r10, r1
 1cc:	58 c0       	rjmp	.+176    	; 0x27e <KEYPAD_getPressedKey+0x160>
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
 1ce:	ea 2c       	mov	r14, r10
 1d0:	f1 2c       	mov	r15, r1
 1d2:	67 01       	movw	r12, r14
 1d4:	cc 0c       	add	r12, r12
 1d6:	dd 1c       	adc	r13, r13
 1d8:	cc 0c       	add	r12, r12
 1da:	dd 1c       	adc	r13, r13
 1dc:	e1 e0       	ldi	r30, 0x01	; 1
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	ec 0f       	add	r30, r28
 1e2:	fd 1f       	adc	r31, r29
 1e4:	ec 0d       	add	r30, r12
 1e6:	fd 1d       	adc	r31, r13
 1e8:	14 8a       	std	Z+20, r1	; 0x14
			DIO_U8SetPinValue(&rowPins[row]);
 1ea:	82 e1       	ldi	r24, 0x12	; 18
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	8c 0f       	add	r24, r28
 1f0:	9d 1f       	adc	r25, r29
 1f2:	c8 0e       	add	r12, r24
 1f4:	d9 1e       	adc	r13, r25
 1f6:	c6 01       	movw	r24, r12
 1f8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_U8SetPinValue>
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 1fc:	b1 2c       	mov	r11, r1
 1fe:	2c c0       	rjmp	.+88     	; 0x258 <KEYPAD_getPressedKey+0x13a>
			{
				DIO_U8GetPinValue(&colPins[col], &currentKey);
 200:	0b 2d       	mov	r16, r11
 202:	10 e0       	ldi	r17, 0x00	; 0
 204:	00 0f       	add	r16, r16
 206:	11 1f       	adc	r17, r17
 208:	00 0f       	add	r16, r16
 20a:	11 1f       	adc	r17, r17
 20c:	a2 e0       	ldi	r26, 0x02	; 2
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	ac 0f       	add	r26, r28
 212:	bd 1f       	adc	r27, r29
 214:	0a 0f       	add	r16, r26
 216:	1b 1f       	adc	r17, r27
 218:	be 01       	movw	r22, r28
 21a:	6f 5f       	subi	r22, 0xFF	; 255
 21c:	7f 4f       	sbci	r23, 0xFF	; 255
 21e:	c8 01       	movw	r24, r16
 220:	0e 94 94 03 	call	0x728	; 0x728 <DIO_U8GetPinValue>

				/* Check current row pin value */
				if (DIO_PIN_LOW == currentKey && DIO_PIN_HIGH == prevKey) {
 224:	99 81       	ldd	r25, Y+1	; 0x01
 226:	91 11       	cpse	r25, r1
 228:	15 c0       	rjmp	.+42     	; 0x254 <KEYPAD_getPressedKey+0x136>
 22a:	b1 e0       	ldi	r27, 0x01	; 1
 22c:	9b 12       	cpse	r9, r27
 22e:	12 c0       	rjmp	.+36     	; 0x254 <KEYPAD_getPressedKey+0x136>
 230:	06 c0       	rjmp	.+12     	; 0x23e <KEYPAD_getPressedKey+0x120>
					/* Key is pressed, return the pressed button value */
					while (currentKey != DIO_PIN_HIGH) {
						DIO_U8GetPinValue(&colPins[col], &currentKey);
 232:	be 01       	movw	r22, r28
 234:	6f 5f       	subi	r22, 0xFF	; 255
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	c8 01       	movw	r24, r16
 23a:	0e 94 94 03 	call	0x728	; 0x728 <DIO_U8GetPinValue>
				DIO_U8GetPinValue(&colPins[col], &currentKey);

				/* Check current row pin value */
				if (DIO_PIN_LOW == currentKey && DIO_PIN_HIGH == prevKey) {
					/* Key is pressed, return the pressed button value */
					while (currentKey != DIO_PIN_HIGH) {
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	b9 f7       	brne	.-18     	; 0x232 <KEYPAD_getPressedKey+0x114>
						DIO_U8GetPinValue(&colPins[col], &currentKey);
					}
					return KEYPAD_4x4_adjustKeyNumber((col * KEYPAD_NUM_COLS) + row + 1);
 244:	bb 0c       	add	r11, r11
 246:	bb 0c       	add	r11, r11
 248:	8b 2d       	mov	r24, r11
 24a:	8a 0d       	add	r24, r10
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	0e 94 66 00 	call	0xcc	; 0xcc <KEYPAD_4x4_adjustKeyNumber>
 252:	1a c0       	rjmp	.+52     	; 0x288 <KEYPAD_getPressedKey+0x16a>
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
			DIO_U8SetPinValue(&rowPins[row]);
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 254:	b3 94       	inc	r11
						DIO_U8GetPinValue(&colPins[col], &currentKey);
					}
					return KEYPAD_4x4_adjustKeyNumber((col * KEYPAD_NUM_COLS) + row + 1);
				}

				prevKey = currentKey; // Update the previous key state
 256:	99 2e       	mov	r9, r25
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
			DIO_U8SetPinValue(&rowPins[row]);
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	8b 15       	cp	r24, r11
 25c:	88 f6       	brcc	.-94     	; 0x200 <KEYPAD_getPressedKey+0xe2>

				prevKey = currentKey; // Update the previous key state
				/*end of for loop*/
			}
			/*set current column pin HIGH again*/
			rowPins[row].value = DIO_PIN_HIGH;
 25e:	ee 0c       	add	r14, r14
 260:	ff 1c       	adc	r15, r15
 262:	ee 0c       	add	r14, r14
 264:	ff 1c       	adc	r15, r15
 266:	e1 e0       	ldi	r30, 0x01	; 1
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	ec 0f       	add	r30, r28
 26c:	fd 1f       	adc	r31, r29
 26e:	ee 0d       	add	r30, r14
 270:	ff 1d       	adc	r31, r15
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	84 8b       	std	Z+20, r24	; 0x14
			DIO_U8SetPinValue(&rowPins[row]);
 276:	c6 01       	movw	r24, r12
 278:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_U8SetPinValue>
	}

	while(1)
	{
		/*for loop to scan all keypad columns*/
		for (row = 0 ; row < 4 ; row++)
 27c:	a3 94       	inc	r10
 27e:	93 e0       	ldi	r25, 0x03	; 3
 280:	9a 15       	cp	r25, r10
 282:	08 f0       	brcs	.+2      	; 0x286 <KEYPAD_getPressedKey+0x168>
 284:	a4 cf       	rjmp	.-184    	; 0x1ce <KEYPAD_getPressedKey+0xb0>
 286:	a1 cf       	rjmp	.-190    	; 0x1ca <KEYPAD_getPressedKey+0xac>
			DIO_U8SetPinValue(&rowPins[row]);

		}
		/*end of for loop*/
	}
}
 288:	a1 96       	adiw	r28, 0x21	; 33
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	ff 90       	pop	r15
 29e:	ef 90       	pop	r14
 2a0:	df 90       	pop	r13
 2a2:	cf 90       	pop	r12
 2a4:	bf 90       	pop	r11
 2a6:	af 90       	pop	r10
 2a8:	9f 90       	pop	r9
 2aa:	08 95       	ret

000002ac <H_LCD_void_latchByte>:
	H_LCD_void_sendString(buff); // Display the binary string
}



static void H_LCD_void_latchByte(u8 copy_u8Byte){
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	64 97       	sbiw	r28, 0x14	; 20
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
 2c4:	08 2f       	mov	r16, r24
	DIO_Config dataPins[] = {
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	89 83       	std	Y+1, r24	; 0x01
 2ca:	1a 82       	std	Y+2, r1	; 0x02
 2cc:	8b 83       	std	Y+3, r24	; 0x03
 2ce:	04 fb       	bst	r16, 4
 2d0:	99 27       	eor	r25, r25
 2d2:	90 f9       	bld	r25, 0
 2d4:	9c 83       	std	Y+4, r25	; 0x04
 2d6:	8d 83       	std	Y+5, r24	; 0x05
 2d8:	8e 83       	std	Y+6, r24	; 0x06
 2da:	8f 83       	std	Y+7, r24	; 0x07
 2dc:	05 fb       	bst	r16, 5
 2de:	99 27       	eor	r25, r25
 2e0:	90 f9       	bld	r25, 0
 2e2:	98 87       	std	Y+8, r25	; 0x08
 2e4:	89 87       	std	Y+9, r24	; 0x09
 2e6:	92 e0       	ldi	r25, 0x02	; 2
 2e8:	9a 87       	std	Y+10, r25	; 0x0a
 2ea:	8b 87       	std	Y+11, r24	; 0x0b
 2ec:	06 fb       	bst	r16, 6
 2ee:	99 27       	eor	r25, r25
 2f0:	90 f9       	bld	r25, 0
 2f2:	9c 87       	std	Y+12, r25	; 0x0c
 2f4:	8d 87       	std	Y+13, r24	; 0x0d
 2f6:	94 e0       	ldi	r25, 0x04	; 4
 2f8:	9e 87       	std	Y+14, r25	; 0x0e
 2fa:	8f 87       	std	Y+15, r24	; 0x0f
 2fc:	80 2f       	mov	r24, r16
 2fe:	88 1f       	adc	r24, r24
 300:	88 27       	eor	r24, r24
 302:	88 1f       	adc	r24, r24
 304:	88 8b       	std	Y+16, r24	; 0x10
		{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 4)},//PD4 data bin
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 5)},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 6)},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 7)},//PD7 data bin
	};
	for (u8 i = 0; i < 4; i++) {
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	0f c0       	rjmp	.+30     	; 0x328 <H_LCD_void_latchByte+0x7c>
		DIO_U8SetPinValue(&dataPins[i]);
 30a:	81 2f       	mov	r24, r17
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	2c 0f       	add	r18, r28
 31c:	3d 1f       	adc	r19, r29
 31e:	82 0f       	add	r24, r18
 320:	93 1f       	adc	r25, r19
 322:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_U8SetPinValue>
		{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 4)},//PD4 data bin
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 5)},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 6)},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 7)},//PD7 data bin
	};
	for (u8 i = 0; i < 4; i++) {
 326:	1f 5f       	subi	r17, 0xFF	; 255
 328:	14 30       	cpi	r17, 0x04	; 4
 32a:	78 f3       	brcs	.-34     	; 0x30a <H_LCD_void_latchByte+0x5e>
		DIO_U8SetPinValue(&dataPins[i]);
	}

	DIO_Config enable;
	enable.port = LCD_EN_PORT;
 32c:	19 8a       	std	Y+17, r1	; 0x11
	enable.pin = LCD_EN_PIN;
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	8a 8b       	std	Y+18, r24	; 0x12
	enable.value = DIO_PIN_LOW;
 332:	1c 8a       	std	Y+20, r1	; 0x14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 334:	89 ef       	ldi	r24, 0xF9	; 249
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <H_LCD_void_latchByte+0x8c>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <H_LCD_void_latchByte+0x92>
 33e:	00 00       	nop
	_delay_ms(1); /* delay for processing */
	DIO_U8SetPinValue(&enable);
 340:	ce 01       	movw	r24, r28
 342:	41 96       	adiw	r24, 0x11	; 17
 344:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_U8SetPinValue>
 348:	e9 ef       	ldi	r30, 0xF9	; 249
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <H_LCD_void_latchByte+0xa0>
 350:	00 c0       	rjmp	.+0      	; 0x352 <H_LCD_void_latchByte+0xa6>
 352:	00 00       	nop
	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_HIGH;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	8c 8b       	std	Y+20, r24	; 0x14
	DIO_U8SetPinValue(&enable);
 358:	ce 01       	movw	r24, r28
 35a:	41 96       	adiw	r24, 0x11	; 17
 35c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_U8SetPinValue>
 360:	89 ef       	ldi	r24, 0xF9	; 249
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <H_LCD_void_latchByte+0xb8>
 368:	00 c0       	rjmp	.+0      	; 0x36a <H_LCD_void_latchByte+0xbe>
 36a:	00 00       	nop
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
 36c:	10 e0       	ldi	r17, 0x00	; 0
 36e:	1a c0       	rjmp	.+52     	; 0x3a4 <H_LCD_void_latchByte+0xf8>
		dataPins[i].value = GET_BIT(copy_u8Byte, i);
 370:	81 2f       	mov	r24, r17
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	20 2f       	mov	r18, r16
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	01 2e       	mov	r0, r17
 37a:	02 c0       	rjmp	.+4      	; 0x380 <H_LCD_void_latchByte+0xd4>
 37c:	35 95       	asr	r19
 37e:	27 95       	ror	r18
 380:	0a 94       	dec	r0
 382:	e2 f7       	brpl	.-8      	; 0x37c <H_LCD_void_latchByte+0xd0>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	e1 e0       	ldi	r30, 0x01	; 1
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	ec 0f       	add	r30, r28
 392:	fd 1f       	adc	r31, r29
 394:	8e 0f       	add	r24, r30
 396:	9f 1f       	adc	r25, r31
 398:	21 70       	andi	r18, 0x01	; 1
 39a:	fc 01       	movw	r30, r24
 39c:	23 83       	std	Z+3, r18	; 0x03
		DIO_U8SetPinValue(&dataPins[i]);
 39e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_U8SetPinValue>
	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_HIGH;
	DIO_U8SetPinValue(&enable);
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
 3a2:	1f 5f       	subi	r17, 0xFF	; 255
 3a4:	14 30       	cpi	r17, 0x04	; 4
 3a6:	20 f3       	brcs	.-56     	; 0x370 <H_LCD_void_latchByte+0xc4>
 3a8:	89 ef       	ldi	r24, 0xF9	; 249
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <H_LCD_void_latchByte+0x100>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <H_LCD_void_latchByte+0x106>
 3b2:	00 00       	nop
		dataPins[i].value = GET_BIT(copy_u8Byte, i);
		DIO_U8SetPinValue(&dataPins[i]);
	}

	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_LOW;
 3b4:	1c 8a       	std	Y+20, r1	; 0x14
	DIO_U8SetPinValue(&enable);
 3b6:	ce 01       	movw	r24, r28
 3b8:	41 96       	adiw	r24, 0x11	; 17
 3ba:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_U8SetPinValue>
 3be:	e9 ef       	ldi	r30, 0xF9	; 249
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <H_LCD_void_latchByte+0x116>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <H_LCD_void_latchByte+0x11c>
 3c8:	00 00       	nop
	_delay_ms(1); /* delay for processing*/


}
 3ca:	64 96       	adiw	r28, 0x14	; 20
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	08 95       	ret

000003e0 <H_LCD_void_sendCommand>:
}



void H_LCD_void_sendCommand(u8 copy_u8command)
{
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
 3ec:	28 97       	sbiw	r28, 0x08	; 8
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	de bf       	out	0x3e, r29	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	cd bf       	out	0x3d, r28	; 61
 3f8:	08 2f       	mov	r16, r24
	//set mode to command
	DIO_Config mode[] = {
 3fa:	88 e0       	ldi	r24, 0x08	; 8
 3fc:	e0 e7       	ldi	r30, 0x70	; 112
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	de 01       	movw	r26, r28
 402:	11 96       	adiw	r26, 0x01	; 1
 404:	01 90       	ld	r0, Z+
 406:	0d 92       	st	X+, r0
 408:	8a 95       	dec	r24
 40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_LOW},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 40c:	10 e0       	ldi	r17, 0x00	; 0
 40e:	15 c0       	rjmp	.+42     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		DIO_U8SetPinValue(&mode[i]);
 410:	81 2f       	mov	r24, r17
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	2c 0f       	add	r18, r28
 422:	3d 1f       	adc	r19, r29
 424:	82 0f       	add	r24, r18
 426:	93 1f       	adc	r25, r19
 428:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_U8SetPinValue>
 42c:	89 ef       	ldi	r24, 0xF9	; 249
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 436:	00 00       	nop
	DIO_Config mode[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_LOW},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 438:	1f 5f       	subi	r17, 0xFF	; 255
 43a:	12 30       	cpi	r17, 0x02	; 2
 43c:	48 f3       	brcs	.-46     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 43e:	89 ef       	ldi	r24, 0xF9	; 249
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 448:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */


	#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	H_LCD_void_latchByte(copy_u8command);
 44a:	80 2f       	mov	r24, r16
 44c:	0e 94 56 01 	call	0x2ac	; 0x2ac <H_LCD_void_latchByte>
	#else

	#endif

}
 450:	28 96       	adiw	r28, 0x08	; 8
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	f8 94       	cli
 456:	de bf       	out	0x3e, r29	; 62
 458:	0f be       	out	0x3f, r0	; 63
 45a:	cd bf       	out	0x3d, r28	; 61
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	08 95       	ret

00000466 <H_LCD_void_Init>:
#include "LCD_config.h"


void functionSet();

void H_LCD_void_Init(void){
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	68 97       	sbiw	r28, 0x18	; 24
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	f8 94       	cli
 476:	de bf       	out	0x3e, r29	; 62
 478:	0f be       	out	0x3f, r0	; 63
 47a:	cd bf       	out	0x3d, r28	; 61
	DIO_Config lcdInit[] = {
 47c:	fe 01       	movw	r30, r28
 47e:	31 96       	adiw	r30, 0x01	; 1
 480:	88 e0       	ldi	r24, 0x08	; 8
 482:	df 01       	movw	r26, r30
 484:	1d 92       	st	X+, r1
 486:	8a 95       	dec	r24
 488:	e9 f7       	brne	.-6      	; 0x484 <H_LCD_void_Init+0x1e>
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	8a 83       	std	Y+2, r24	; 0x02
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	8b 83       	std	Y+3, r24	; 0x03
 492:	92 e0       	ldi	r25, 0x02	; 2
 494:	9e 83       	std	Y+6, r25	; 0x06
 496:	8f 83       	std	Y+7, r24	; 0x07
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 498:	10 e0       	ldi	r17, 0x00	; 0
 49a:	0f c0       	rjmp	.+30     	; 0x4ba <H_LCD_void_Init+0x54>
		DIO_U8SetPinDirection(&lcdInit[i]);
 49c:	81 2f       	mov	r24, r17
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	2c 0f       	add	r18, r28
 4ae:	3d 1f       	adc	r19, r29
 4b0:	82 0f       	add	r24, r18
 4b2:	93 1f       	adc	r25, r19
 4b4:	0e 94 14 03 	call	0x628	; 0x628 <DIO_U8SetPinDirection>
	DIO_Config lcdInit[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 4b8:	1f 5f       	subi	r17, 0xFF	; 255
 4ba:	12 30       	cpi	r17, 0x02	; 2
 4bc:	78 f3       	brcs	.-34     	; 0x49c <H_LCD_void_Init+0x36>
		DIO_U8SetPinDirection(&lcdInit[i]);
	}

	#if (LCD_DATA_BITS_MODE == 4)
	DIO_Config dataPins[] = {
 4be:	fe 01       	movw	r30, r28
 4c0:	39 96       	adiw	r30, 0x09	; 9
 4c2:	80 e1       	ldi	r24, 0x10	; 16
 4c4:	df 01       	movw	r26, r30
 4c6:	1d 92       	st	X+, r1
 4c8:	8a 95       	dec	r24
 4ca:	e9 f7       	brne	.-6      	; 0x4c6 <H_LCD_void_Init+0x60>
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	89 87       	std	Y+9, r24	; 0x09
 4d0:	8b 87       	std	Y+11, r24	; 0x0b
 4d2:	8d 87       	std	Y+13, r24	; 0x0d
 4d4:	8e 87       	std	Y+14, r24	; 0x0e
 4d6:	8f 87       	std	Y+15, r24	; 0x0f
 4d8:	89 8b       	std	Y+17, r24	; 0x11
 4da:	92 e0       	ldi	r25, 0x02	; 2
 4dc:	9a 8b       	std	Y+18, r25	; 0x12
 4de:	8b 8b       	std	Y+19, r24	; 0x13
 4e0:	8d 8b       	std	Y+21, r24	; 0x15
 4e2:	94 e0       	ldi	r25, 0x04	; 4
 4e4:	9e 8b       	std	Y+22, r25	; 0x16
 4e6:	8f 8b       	std	Y+23, r24	; 0x17
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT},//PD7 data bin
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 4; i++) {
 4e8:	10 e0       	ldi	r17, 0x00	; 0
 4ea:	0f c0       	rjmp	.+30     	; 0x50a <H_LCD_void_Init+0xa4>
		DIO_U8SetPinDirection(&dataPins[i]);
 4ec:	81 2f       	mov	r24, r17
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	29 e0       	ldi	r18, 0x09	; 9
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	2c 0f       	add	r18, r28
 4fe:	3d 1f       	adc	r19, r29
 500:	82 0f       	add	r24, r18
 502:	93 1f       	adc	r25, r19
 504:	0e 94 14 03 	call	0x628	; 0x628 <DIO_U8SetPinDirection>
		{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT},//PD5 data bin
		{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT},//PD6 data bin
		{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT},//PD7 data bin
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 4; i++) {
 508:	1f 5f       	subi	r17, 0xFF	; 255
 50a:	14 30       	cpi	r17, 0x04	; 4
 50c:	78 f3       	brcs	.-34     	; 0x4ec <H_LCD_void_Init+0x86>
		DIO_U8SetPinDirection(&dataPins[i]);
	}

	//Function Set Corner Case
	//functionSet();
	H_LCD_void_sendCommand(LCD_GO_TO_HOME);
 50e:	82 e0       	ldi	r24, 0x02	; 2
 510:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <H_LCD_void_sendCommand>
 514:	89 ef       	ldi	r24, 0xF9	; 249
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <H_LCD_void_Init+0xb2>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <H_LCD_void_Init+0xb8>
 51e:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 520:	88 e2       	ldi	r24, 0x28	; 40
 522:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <H_LCD_void_sendCommand>
 526:	a9 ef       	ldi	r26, 0xF9	; 249
 528:	b0 e0       	ldi	r27, 0x00	; 0
 52a:	11 97       	sbiw	r26, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <H_LCD_void_Init+0xc4>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <H_LCD_void_Init+0xca>
 530:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x0F);
 532:	8f e0       	ldi	r24, 0x0F	; 15
 534:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <H_LCD_void_sendCommand>
 538:	89 ef       	ldi	r24, 0xF9	; 249
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <H_LCD_void_Init+0xd6>
 540:	00 c0       	rjmp	.+0      	; 0x542 <H_LCD_void_Init+0xdc>
 542:	00 00       	nop
	_delay_ms(1);
	H_LCD_void_sendCommand(0x01);
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <H_LCD_void_sendCommand>
 54a:	a3 ef       	ldi	r26, 0xF3	; 243
 54c:	b1 e0       	ldi	r27, 0x01	; 1
 54e:	11 97       	sbiw	r26, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <H_LCD_void_Init+0xe8>
 552:	00 c0       	rjmp	.+0      	; 0x554 <H_LCD_void_Init+0xee>
 554:	00 00       	nop
	_delay_ms(2);
	H_LCD_void_sendCommand(0x06);
 556:	86 e0       	ldi	r24, 0x06	; 6
 558:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <H_LCD_void_sendCommand>

	#elif (LCD_DATA_BITS_MODE == 8)

	#endif
}
 55c:	68 96       	adiw	r28, 0x18	; 24
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	08 95       	ret

00000570 <H_LCD_void_sendData>:
	#endif

}

void H_LCD_void_sendData(u8 copy_u8data )
{
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	28 97       	sbiw	r28, 0x08	; 8
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
 588:	08 2f       	mov	r16, r24
	DIO_Config mode[] = {
 58a:	88 e0       	ldi	r24, 0x08	; 8
 58c:	e8 e7       	ldi	r30, 0x78	; 120
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	de 01       	movw	r26, r28
 592:	11 96       	adiw	r26, 0x01	; 1
 594:	01 90       	ld	r0, Z+
 596:	0d 92       	st	X+, r0
 598:	8a 95       	dec	r24
 59a:	e1 f7       	brne	.-8      	; 0x594 <H_LCD_void_sendData+0x24>
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_HIGH},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 59c:	10 e0       	ldi	r17, 0x00	; 0
 59e:	15 c0       	rjmp	.+42     	; 0x5ca <H_LCD_void_sendData+0x5a>
		DIO_U8SetPinValue(&mode[i]);
 5a0:	81 2f       	mov	r24, r17
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	2c 0f       	add	r18, r28
 5b2:	3d 1f       	adc	r19, r29
 5b4:	82 0f       	add	r24, r18
 5b6:	93 1f       	adc	r25, r19
 5b8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <DIO_U8SetPinValue>
 5bc:	89 ef       	ldi	r24, 0xF9	; 249
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <H_LCD_void_sendData+0x50>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <H_LCD_void_sendData+0x56>
 5c6:	00 00       	nop
	DIO_Config mode[] = {
		{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_HIGH},//PA3 RS
		{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
 5c8:	1f 5f       	subi	r17, 0xFF	; 255
 5ca:	12 30       	cpi	r17, 0x02	; 2
 5cc:	48 f3       	brcs	.-46     	; 0x5a0 <H_LCD_void_sendData+0x30>
 5ce:	89 ef       	ldi	r24, 0xF9	; 249
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <H_LCD_void_sendData+0x62>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <H_LCD_void_sendData+0x68>
 5d8:	00 00       	nop
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */


	#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	H_LCD_void_latchByte(copy_u8data);
 5da:	80 2f       	mov	r24, r16
 5dc:	0e 94 56 01 	call	0x2ac	; 0x2ac <H_LCD_void_latchByte>
	#else

	#endif
}
 5e0:	28 96       	adiw	r28, 0x08	; 8
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	f8 94       	cli
 5e6:	de bf       	out	0x3e, r29	; 62
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	cd bf       	out	0x3d, r28	; 61
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	08 95       	ret

000005f6 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 5f6:	24 b1       	in	r18, 0x04	; 4
 5f8:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 5fa:	00 24       	eor	r0, r0
 5fc:	22 0f       	add	r18, r18
 5fe:	33 1f       	adc	r19, r19
 600:	00 1c       	adc	r0, r0
 602:	22 0f       	add	r18, r18
 604:	33 1f       	adc	r19, r19
 606:	00 1c       	adc	r0, r0
 608:	23 2f       	mov	r18, r19
 60a:	30 2d       	mov	r19, r0
 60c:	85 b1       	in	r24, 0x05	; 5
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 618:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <__data_end>
 61c:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <__data_end+0x1>
 620:	82 2b       	or	r24, r18
 622:	93 2b       	or	r25, r19
 624:	09 95       	icall
 626:	08 95       	ret

00000628 <DIO_U8SetPinDirection>:
        *writeRegisters[port] = ~(*writeRegisters[port]);
        return NO_ERROR;
    } else {
        return ERROR;
    }
}
 628:	dc 01       	movw	r26, r24
 62a:	ec 91       	ld	r30, X
 62c:	e4 30       	cpi	r30, 0x04	; 4
 62e:	a0 f5       	brcc	.+104    	; 0x698 <DIO_U8SetPinDirection+0x70>
 630:	11 96       	adiw	r26, 0x01	; 1
 632:	2c 91       	ld	r18, X
 634:	11 97       	sbiw	r26, 0x01	; 1
 636:	28 30       	cpi	r18, 0x08	; 8
 638:	88 f5       	brcc	.+98     	; 0x69c <DIO_U8SetPinDirection+0x74>
 63a:	12 96       	adiw	r26, 0x02	; 2
 63c:	8c 91       	ld	r24, X
 63e:	81 11       	cpse	r24, r1
 640:	15 c0       	rjmp	.+42     	; 0x66c <DIO_U8SetPinDirection+0x44>
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	ee 0f       	add	r30, r30
 646:	ff 1f       	adc	r31, r31
 648:	e0 57       	subi	r30, 0x70	; 112
 64a:	ff 4f       	sbci	r31, 0xFF	; 255
 64c:	01 90       	ld	r0, Z+
 64e:	f0 81       	ld	r31, Z
 650:	e0 2d       	mov	r30, r0
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_U8SetPinDirection+0x34>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	2a 95       	dec	r18
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_U8SetPinDirection+0x30>
 660:	80 95       	com	r24
 662:	90 81       	ld	r25, Z
 664:	89 23       	and	r24, r25
 666:	80 83       	st	Z, r24
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	08 95       	ret
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	c1 f4       	brne	.+48     	; 0x6a0 <DIO_U8SetPinDirection+0x78>
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	ee 0f       	add	r30, r30
 674:	ff 1f       	adc	r31, r31
 676:	e0 57       	subi	r30, 0x70	; 112
 678:	ff 4f       	sbci	r31, 0xFF	; 255
 67a:	01 90       	ld	r0, Z+
 67c:	f0 81       	ld	r31, Z
 67e:	e0 2d       	mov	r30, r0
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_U8SetPinDirection+0x62>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	2a 95       	dec	r18
 68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_U8SetPinDirection+0x5e>
 68e:	90 81       	ld	r25, Z
 690:	89 2b       	or	r24, r25
 692:	80 83       	st	Z, r24
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	08 95       	ret
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	08 95       	ret
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	08 95       	ret
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	08 95       	ret

000006a4 <DIO_U8SetPinValue>:
 6a4:	00 97       	sbiw	r24, 0x00	; 0
 6a6:	c1 f1       	breq	.+112    	; 0x718 <DIO_U8SetPinValue+0x74>
 6a8:	dc 01       	movw	r26, r24
 6aa:	ec 91       	ld	r30, X
 6ac:	e4 30       	cpi	r30, 0x04	; 4
 6ae:	b0 f5       	brcc	.+108    	; 0x71c <DIO_U8SetPinValue+0x78>
 6b0:	11 96       	adiw	r26, 0x01	; 1
 6b2:	2c 91       	ld	r18, X
 6b4:	11 97       	sbiw	r26, 0x01	; 1
 6b6:	28 30       	cpi	r18, 0x08	; 8
 6b8:	98 f5       	brcc	.+102    	; 0x720 <DIO_U8SetPinValue+0x7c>
 6ba:	13 96       	adiw	r26, 0x03	; 3
 6bc:	8c 91       	ld	r24, X
 6be:	81 30       	cpi	r24, 0x01	; 1
 6c0:	a1 f4       	brne	.+40     	; 0x6ea <DIO_U8SetPinValue+0x46>
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	ee 0f       	add	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	e8 57       	subi	r30, 0x78	; 120
 6ca:	ff 4f       	sbci	r31, 0xFF	; 255
 6cc:	01 90       	ld	r0, Z+
 6ce:	f0 81       	ld	r31, Z
 6d0:	e0 2d       	mov	r30, r0
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_U8SetPinValue+0x38>
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	2a 95       	dec	r18
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_U8SetPinValue+0x34>
 6e0:	90 81       	ld	r25, Z
 6e2:	89 2b       	or	r24, r25
 6e4:	80 83       	st	Z, r24
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	08 95       	ret
 6ea:	81 11       	cpse	r24, r1
 6ec:	1b c0       	rjmp	.+54     	; 0x724 <DIO_U8SetPinValue+0x80>
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	ee 0f       	add	r30, r30
 6f2:	ff 1f       	adc	r31, r31
 6f4:	e8 57       	subi	r30, 0x78	; 120
 6f6:	ff 4f       	sbci	r31, 0xFF	; 255
 6f8:	01 90       	ld	r0, Z+
 6fa:	f0 81       	ld	r31, Z
 6fc:	e0 2d       	mov	r30, r0
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_U8SetPinValue+0x64>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	2a 95       	dec	r18
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_U8SetPinValue+0x60>
 70c:	80 95       	com	r24
 70e:	90 81       	ld	r25, Z
 710:	89 23       	and	r24, r25
 712:	80 83       	st	Z, r24
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	08 95       	ret
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	08 95       	ret
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	08 95       	ret
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	08 95       	ret
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	08 95       	ret

00000728 <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(const DIO_Config* config, u8* value) {
    if (config != NULL && value != NULL) {
 728:	00 97       	sbiw	r24, 0x00	; 0
 72a:	f9 f0       	breq	.+62     	; 0x76a <DIO_U8GetPinValue+0x42>
 72c:	61 15       	cp	r22, r1
 72e:	71 05       	cpc	r23, r1
 730:	f1 f0       	breq	.+60     	; 0x76e <DIO_U8GetPinValue+0x46>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 732:	dc 01       	movw	r26, r24
 734:	ec 91       	ld	r30, X
 736:	e4 30       	cpi	r30, 0x04	; 4
 738:	e0 f4       	brcc	.+56     	; 0x772 <DIO_U8GetPinValue+0x4a>
 73a:	11 96       	adiw	r26, 0x01	; 1
 73c:	2c 91       	ld	r18, X
 73e:	28 30       	cpi	r18, 0x08	; 8
 740:	d0 f4       	brcc	.+52     	; 0x776 <DIO_U8GetPinValue+0x4e>
            *value = GET_BIT(*readRegisters[config->port], config->pin);
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	ee 0f       	add	r30, r30
 746:	ff 1f       	adc	r31, r31
 748:	e0 58       	subi	r30, 0x80	; 128
 74a:	ff 4f       	sbci	r31, 0xFF	; 255
 74c:	01 90       	ld	r0, Z+
 74e:	f0 81       	ld	r31, Z
 750:	e0 2d       	mov	r30, r0
 752:	80 81       	ld	r24, Z
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	02 c0       	rjmp	.+4      	; 0x75c <DIO_U8GetPinValue+0x34>
 758:	95 95       	asr	r25
 75a:	87 95       	ror	r24
 75c:	2a 95       	dec	r18
 75e:	e2 f7       	brpl	.-8      	; 0x758 <DIO_U8GetPinValue+0x30>
 760:	81 70       	andi	r24, 0x01	; 1
 762:	fb 01       	movw	r30, r22
 764:	80 83       	st	Z, r24
            return NO_ERROR;
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	08 95       	ret
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	08 95       	ret
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	08 95       	ret
    if (config != NULL && value != NULL) {
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
            *value = GET_BIT(*readRegisters[config->port], config->pin);
            return NO_ERROR;
        } else {
            return ERROR;
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	08 95       	ret
 776:	81 e0       	ldi	r24, 0x01	; 1
        }
    } else {
        return ERROR;
    }
}
 778:	08 95       	ret

0000077a <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 77a:	1f 92       	push	r1
 77c:	0f 92       	push	r0
 77e:	0f b6       	in	r0, 0x3f	; 63
 780:	0f 92       	push	r0
 782:	11 24       	eor	r1, r1
 784:	2f 93       	push	r18
 786:	3f 93       	push	r19
 788:	4f 93       	push	r20
 78a:	5f 93       	push	r21
 78c:	6f 93       	push	r22
 78e:	7f 93       	push	r23
 790:	8f 93       	push	r24
 792:	9f 93       	push	r25
 794:	af 93       	push	r26
 796:	bf 93       	push	r27
 798:	ef 93       	push	r30
 79a:	ff 93       	push	r31
	if(Action[0]!= NULL){
 79c:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <Action>
 7a0:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <Action+0x1>
 7a4:	30 97       	sbiw	r30, 0x00	; 0
 7a6:	09 f0       	breq	.+2      	; 0x7aa <__vector_1+0x30>
		Action[0]();
 7a8:	09 95       	icall
	}
}
 7aa:	ff 91       	pop	r31
 7ac:	ef 91       	pop	r30
 7ae:	bf 91       	pop	r27
 7b0:	af 91       	pop	r26
 7b2:	9f 91       	pop	r25
 7b4:	8f 91       	pop	r24
 7b6:	7f 91       	pop	r23
 7b8:	6f 91       	pop	r22
 7ba:	5f 91       	pop	r21
 7bc:	4f 91       	pop	r20
 7be:	3f 91       	pop	r19
 7c0:	2f 91       	pop	r18
 7c2:	0f 90       	pop	r0
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	0f 90       	pop	r0
 7c8:	1f 90       	pop	r1
 7ca:	18 95       	reti

000007cc <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 7cc:	1f 92       	push	r1
 7ce:	0f 92       	push	r0
 7d0:	0f b6       	in	r0, 0x3f	; 63
 7d2:	0f 92       	push	r0
 7d4:	11 24       	eor	r1, r1
 7d6:	2f 93       	push	r18
 7d8:	3f 93       	push	r19
 7da:	4f 93       	push	r20
 7dc:	5f 93       	push	r21
 7de:	6f 93       	push	r22
 7e0:	7f 93       	push	r23
 7e2:	8f 93       	push	r24
 7e4:	9f 93       	push	r25
 7e6:	af 93       	push	r26
 7e8:	bf 93       	push	r27
 7ea:	ef 93       	push	r30
 7ec:	ff 93       	push	r31
	if(Action[1]!= NULL){
 7ee:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <Action+0x2>
 7f2:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <Action+0x3>
 7f6:	30 97       	sbiw	r30, 0x00	; 0
 7f8:	09 f0       	breq	.+2      	; 0x7fc <__vector_2+0x30>
		Action[1]();
 7fa:	09 95       	icall
	}
}
 7fc:	ff 91       	pop	r31
 7fe:	ef 91       	pop	r30
 800:	bf 91       	pop	r27
 802:	af 91       	pop	r26
 804:	9f 91       	pop	r25
 806:	8f 91       	pop	r24
 808:	7f 91       	pop	r23
 80a:	6f 91       	pop	r22
 80c:	5f 91       	pop	r21
 80e:	4f 91       	pop	r20
 810:	3f 91       	pop	r19
 812:	2f 91       	pop	r18
 814:	0f 90       	pop	r0
 816:	0f be       	out	0x3f, r0	; 63
 818:	0f 90       	pop	r0
 81a:	1f 90       	pop	r1
 81c:	18 95       	reti

0000081e <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 81e:	1f 92       	push	r1
 820:	0f 92       	push	r0
 822:	0f b6       	in	r0, 0x3f	; 63
 824:	0f 92       	push	r0
 826:	11 24       	eor	r1, r1
 828:	2f 93       	push	r18
 82a:	3f 93       	push	r19
 82c:	4f 93       	push	r20
 82e:	5f 93       	push	r21
 830:	6f 93       	push	r22
 832:	7f 93       	push	r23
 834:	8f 93       	push	r24
 836:	9f 93       	push	r25
 838:	af 93       	push	r26
 83a:	bf 93       	push	r27
 83c:	ef 93       	push	r30
 83e:	ff 93       	push	r31
	if(Action[2]!= NULL){
 840:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <Action+0x4>
 844:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <Action+0x5>
 848:	30 97       	sbiw	r30, 0x00	; 0
 84a:	09 f0       	breq	.+2      	; 0x84e <__vector_3+0x30>
		Action[2]();
 84c:	09 95       	icall
	}
}
 84e:	ff 91       	pop	r31
 850:	ef 91       	pop	r30
 852:	bf 91       	pop	r27
 854:	af 91       	pop	r26
 856:	9f 91       	pop	r25
 858:	8f 91       	pop	r24
 85a:	7f 91       	pop	r23
 85c:	6f 91       	pop	r22
 85e:	5f 91       	pop	r21
 860:	4f 91       	pop	r20
 862:	3f 91       	pop	r19
 864:	2f 91       	pop	r18
 866:	0f 90       	pop	r0
 868:	0f be       	out	0x3f, r0	; 63
 86a:	0f 90       	pop	r0
 86c:	1f 90       	pop	r1
 86e:	18 95       	reti

00000870 <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 870:	1f 92       	push	r1
 872:	0f 92       	push	r0
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	0f 92       	push	r0
 878:	11 24       	eor	r1, r1
 87a:	2f 93       	push	r18
 87c:	3f 93       	push	r19
 87e:	4f 93       	push	r20
 880:	5f 93       	push	r21
 882:	6f 93       	push	r22
 884:	7f 93       	push	r23
 886:	8f 93       	push	r24
 888:	9f 93       	push	r25
 88a:	af 93       	push	r26
 88c:	bf 93       	push	r27
 88e:	ef 93       	push	r30
 890:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 892:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <Action_Timer>
 896:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <Action_Timer+0x1>
 89a:	89 2b       	or	r24, r25
 89c:	89 f1       	breq	.+98     	; 0x900 <__vector_11+0x90>
		counter++;
 89e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <counter.1685>
 8a2:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <counter.1685+0x1>
 8a6:	a0 91 a2 00 	lds	r26, 0x00A2	; 0x8000a2 <counter.1685+0x2>
 8aa:	b0 91 a3 00 	lds	r27, 0x00A3	; 0x8000a3 <counter.1685+0x3>
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	a1 1d       	adc	r26, r1
 8b2:	b1 1d       	adc	r27, r1
 8b4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <counter.1685>
 8b8:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <counter.1685+0x1>
 8bc:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <counter.1685+0x2>
 8c0:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <counter.1685+0x3>
		if(counter == numOverflows){
 8c4:	40 91 ac 00 	lds	r20, 0x00AC	; 0x8000ac <numOverflows>
 8c8:	50 91 ad 00 	lds	r21, 0x00AD	; 0x8000ad <numOverflows+0x1>
 8cc:	60 91 ae 00 	lds	r22, 0x00AE	; 0x8000ae <numOverflows+0x2>
 8d0:	70 91 af 00 	lds	r23, 0x00AF	; 0x8000af <numOverflows+0x3>
 8d4:	84 17       	cp	r24, r20
 8d6:	95 07       	cpc	r25, r21
 8d8:	a6 07       	cpc	r26, r22
 8da:	b7 07       	cpc	r27, r23
 8dc:	89 f4       	brne	.+34     	; 0x900 <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 8de:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <remainingCounts>
 8e2:	81 95       	neg	r24
 8e4:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 8e6:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <counter.1685>
 8ea:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <counter.1685+0x1>
 8ee:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <counter.1685+0x2>
 8f2:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <counter.1685+0x3>
			Action_Timer[0]();
 8f6:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <Action_Timer>
 8fa:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <Action_Timer+0x1>
 8fe:	09 95       	icall
		}
		
	}
}
 900:	ff 91       	pop	r31
 902:	ef 91       	pop	r30
 904:	bf 91       	pop	r27
 906:	af 91       	pop	r26
 908:	9f 91       	pop	r25
 90a:	8f 91       	pop	r24
 90c:	7f 91       	pop	r23
 90e:	6f 91       	pop	r22
 910:	5f 91       	pop	r21
 912:	4f 91       	pop	r20
 914:	3f 91       	pop	r19
 916:	2f 91       	pop	r18
 918:	0f 90       	pop	r0
 91a:	0f be       	out	0x3f, r0	; 63
 91c:	0f 90       	pop	r0
 91e:	1f 90       	pop	r1
 920:	18 95       	reti

00000922 <__vector_10>:

ISR(TIMER0_COMP_vect){
 922:	1f 92       	push	r1
 924:	0f 92       	push	r0
 926:	0f b6       	in	r0, 0x3f	; 63
 928:	0f 92       	push	r0
 92a:	11 24       	eor	r1, r1
 92c:	2f 93       	push	r18
 92e:	3f 93       	push	r19
 930:	4f 93       	push	r20
 932:	5f 93       	push	r21
 934:	6f 93       	push	r22
 936:	7f 93       	push	r23
 938:	8f 93       	push	r24
 93a:	9f 93       	push	r25
 93c:	af 93       	push	r26
 93e:	bf 93       	push	r27
 940:	ef 93       	push	r30
 942:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 944:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <Action_Timer+0x2>
 948:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <Action_Timer+0x3>
 94c:	30 97       	sbiw	r30, 0x00	; 0
 94e:	09 f0       	breq	.+2      	; 0x952 <__vector_10+0x30>
		Action_Timer[1]();
 950:	09 95       	icall
		
	}
}
 952:	ff 91       	pop	r31
 954:	ef 91       	pop	r30
 956:	bf 91       	pop	r27
 958:	af 91       	pop	r26
 95a:	9f 91       	pop	r25
 95c:	8f 91       	pop	r24
 95e:	7f 91       	pop	r23
 960:	6f 91       	pop	r22
 962:	5f 91       	pop	r21
 964:	4f 91       	pop	r20
 966:	3f 91       	pop	r19
 968:	2f 91       	pop	r18
 96a:	0f 90       	pop	r0
 96c:	0f be       	out	0x3f, r0	; 63
 96e:	0f 90       	pop	r0
 970:	1f 90       	pop	r1
 972:	18 95       	reti

00000974 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 974:	1f 92       	push	r1
 976:	0f 92       	push	r0
 978:	0f b6       	in	r0, 0x3f	; 63
 97a:	0f 92       	push	r0
 97c:	11 24       	eor	r1, r1
 97e:	2f 93       	push	r18
 980:	3f 93       	push	r19
 982:	4f 93       	push	r20
 984:	5f 93       	push	r21
 986:	6f 93       	push	r22
 988:	7f 93       	push	r23
 98a:	8f 93       	push	r24
 98c:	9f 93       	push	r25
 98e:	af 93       	push	r26
 990:	bf 93       	push	r27
 992:	cf 93       	push	r28
 994:	df 93       	push	r29
 996:	ef 93       	push	r30
 998:	ff 93       	push	r31
	Action_Timer[0]();
 99a:	c4 eb       	ldi	r28, 0xB4	; 180
 99c:	d0 e0       	ldi	r29, 0x00	; 0
 99e:	e8 81       	ld	r30, Y
 9a0:	f9 81       	ldd	r31, Y+1	; 0x01
 9a2:	09 95       	icall
	numOverflows++;
 9a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <numOverflows>
 9a8:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <numOverflows+0x1>
 9ac:	a0 91 be 00 	lds	r26, 0x00BE	; 0x8000be <numOverflows+0x2>
 9b0:	b0 91 bf 00 	lds	r27, 0x00BF	; 0x8000bf <numOverflows+0x3>
 9b4:	01 96       	adiw	r24, 0x01	; 1
 9b6:	a1 1d       	adc	r26, r1
 9b8:	b1 1d       	adc	r27, r1
 9ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <numOverflows>
 9be:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <numOverflows+0x1>
 9c2:	a0 93 be 00 	sts	0x00BE, r26	; 0x8000be <numOverflows+0x2>
 9c6:	b0 93 bf 00 	sts	0x00BF, r27	; 0x8000bf <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 9ca:	e8 81       	ld	r30, Y
 9cc:	f9 81       	ldd	r31, Y+1	; 0x01
 9ce:	30 97       	sbiw	r30, 0x00	; 0
 9d0:	49 f1       	breq	.+82     	; 0xa24 <__vector_9+0xb0>
		counter++;
 9d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <counter.1744>
 9d6:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <counter.1744+0x1>
 9da:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <counter.1744+0x2>
 9de:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <counter.1744+0x3>
 9e2:	01 96       	adiw	r24, 0x01	; 1
 9e4:	a1 1d       	adc	r26, r1
 9e6:	b1 1d       	adc	r27, r1
 9e8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <counter.1744>
 9ec:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <counter.1744+0x1>
 9f0:	a0 93 b2 00 	sts	0x00B2, r26	; 0x8000b2 <counter.1744+0x2>
 9f4:	b0 93 b3 00 	sts	0x00B3, r27	; 0x8000b3 <counter.1744+0x3>
		if(counter == req_numOverflows){
 9f8:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <req_numOverflows>
 9fc:	50 91 c1 00 	lds	r21, 0x00C1	; 0x8000c1 <req_numOverflows+0x1>
 a00:	60 91 c2 00 	lds	r22, 0x00C2	; 0x8000c2 <req_numOverflows+0x2>
 a04:	70 91 c3 00 	lds	r23, 0x00C3	; 0x8000c3 <req_numOverflows+0x3>
 a08:	84 17       	cp	r24, r20
 a0a:	95 07       	cpc	r25, r21
 a0c:	a6 07       	cpc	r26, r22
 a0e:	b7 07       	cpc	r27, r23
 a10:	49 f4       	brne	.+18     	; 0xa24 <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 a12:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <counter.1744>
 a16:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <counter.1744+0x1>
 a1a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <counter.1744+0x2>
 a1e:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <counter.1744+0x3>
			Action_Timer[0]();
 a22:	09 95       	icall
		}
		
	}
}
 a24:	ff 91       	pop	r31
 a26:	ef 91       	pop	r30
 a28:	df 91       	pop	r29
 a2a:	cf 91       	pop	r28
 a2c:	bf 91       	pop	r27
 a2e:	af 91       	pop	r26
 a30:	9f 91       	pop	r25
 a32:	8f 91       	pop	r24
 a34:	7f 91       	pop	r23
 a36:	6f 91       	pop	r22
 a38:	5f 91       	pop	r21
 a3a:	4f 91       	pop	r20
 a3c:	3f 91       	pop	r19
 a3e:	2f 91       	pop	r18
 a40:	0f 90       	pop	r0
 a42:	0f be       	out	0x3f, r0	; 63
 a44:	0f 90       	pop	r0
 a46:	1f 90       	pop	r1
 a48:	18 95       	reti

00000a4a <__vector_7>:

ISR(TIMER1_COMPA_vect){
 a4a:	1f 92       	push	r1
 a4c:	0f 92       	push	r0
 a4e:	0f b6       	in	r0, 0x3f	; 63
 a50:	0f 92       	push	r0
 a52:	11 24       	eor	r1, r1
 a54:	2f 93       	push	r18
 a56:	3f 93       	push	r19
 a58:	4f 93       	push	r20
 a5a:	5f 93       	push	r21
 a5c:	6f 93       	push	r22
 a5e:	7f 93       	push	r23
 a60:	8f 93       	push	r24
 a62:	9f 93       	push	r25
 a64:	af 93       	push	r26
 a66:	bf 93       	push	r27
 a68:	ef 93       	push	r30
 a6a:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 a6c:	e0 91 b6 00 	lds	r30, 0x00B6	; 0x8000b6 <Action_Timer+0x2>
 a70:	f0 91 b7 00 	lds	r31, 0x00B7	; 0x8000b7 <Action_Timer+0x3>
 a74:	30 97       	sbiw	r30, 0x00	; 0
 a76:	09 f0       	breq	.+2      	; 0xa7a <__vector_7+0x30>
		Action_Timer[1]();
 a78:	09 95       	icall
	}
}
 a7a:	ff 91       	pop	r31
 a7c:	ef 91       	pop	r30
 a7e:	bf 91       	pop	r27
 a80:	af 91       	pop	r26
 a82:	9f 91       	pop	r25
 a84:	8f 91       	pop	r24
 a86:	7f 91       	pop	r23
 a88:	6f 91       	pop	r22
 a8a:	5f 91       	pop	r21
 a8c:	4f 91       	pop	r20
 a8e:	3f 91       	pop	r19
 a90:	2f 91       	pop	r18
 a92:	0f 90       	pop	r0
 a94:	0f be       	out	0x3f, r0	; 63
 a96:	0f 90       	pop	r0
 a98:	1f 90       	pop	r1
 a9a:	18 95       	reti

00000a9c <__vector_6>:


ISR(TIMER1_CAPT_vect){
 a9c:	1f 92       	push	r1
 a9e:	0f 92       	push	r0
 aa0:	0f b6       	in	r0, 0x3f	; 63
 aa2:	0f 92       	push	r0
 aa4:	11 24       	eor	r1, r1
 aa6:	2f 93       	push	r18
 aa8:	3f 93       	push	r19
 aaa:	4f 93       	push	r20
 aac:	5f 93       	push	r21
 aae:	6f 93       	push	r22
 ab0:	7f 93       	push	r23
 ab2:	8f 93       	push	r24
 ab4:	9f 93       	push	r25
 ab6:	af 93       	push	r26
 ab8:	bf 93       	push	r27
 aba:	ef 93       	push	r30
 abc:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 abe:	e0 91 ba 00 	lds	r30, 0x00BA	; 0x8000ba <Action_Timer+0x6>
 ac2:	f0 91 bb 00 	lds	r31, 0x00BB	; 0x8000bb <Action_Timer+0x7>
 ac6:	30 97       	sbiw	r30, 0x00	; 0
 ac8:	09 f0       	breq	.+2      	; 0xacc <__vector_6+0x30>
			Action_Timer[3]();
 aca:	09 95       	icall
			
			
		}
 acc:	ff 91       	pop	r31
 ace:	ef 91       	pop	r30
 ad0:	bf 91       	pop	r27
 ad2:	af 91       	pop	r26
 ad4:	9f 91       	pop	r25
 ad6:	8f 91       	pop	r24
 ad8:	7f 91       	pop	r23
 ada:	6f 91       	pop	r22
 adc:	5f 91       	pop	r21
 ade:	4f 91       	pop	r20
 ae0:	3f 91       	pop	r19
 ae2:	2f 91       	pop	r18
 ae4:	0f 90       	pop	r0
 ae6:	0f be       	out	0x3f, r0	; 63
 ae8:	0f 90       	pop	r0
 aea:	1f 90       	pop	r1
 aec:	18 95       	reti

00000aee <M_USART_void_Init>:
void M_USART_void_Init(void){
	
	
	#if(USART_SPEED == USART_DOUBLE_SPEED)
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
 aee:	82 e0       	ldi	r24, 0x02	; 2
 af0:	8b b9       	out	0x0b, r24	; 11
	#endif
	
	/************************** UCSRB Description **************************
	Set each bit with corresponding value
	***********************************************************************/
	UCSRB = ( USART_RX_INTERRUPT << RXCIE ) | ( USART_TX_INTERRUPT << TXCIE ) | ( Receiver_Enable << RXEN ) | ( Transmitter_Enable << TXEN );
 af2:	88 e1       	ldi	r24, 0x18	; 24
 af4:	8a b9       	out	0x0a, r24	; 10
	* UPM1:0  = 00 Disable parity bit
	* USBS    = 0 One stop bit
	* UCSZ1:0 = 11 For 8-bit data mode
	* UCPOL   = 0 Used with the Synchronous operation only
	***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
 af6:	86 e8       	ldi	r24, 0x86	; 134
 af8:	80 bd       	out	0x20, r24	; 32
	
	/* Calculate the UBRR register value */
	u16 ubrr_value = (u16)(((F_CPU / (BAUD_RATE * 8UL))) - 1);

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
 afa:	10 bc       	out	0x20, r1	; 32
	UBRRL = ubrr_value;
 afc:	87 e6       	ldi	r24, 0x67	; 103
 afe:	89 b9       	out	0x09, r24	; 9
 b00:	08 95       	ret

00000b02 <UART_sendByte>:
{
	/*
	* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	* transmitting a new byte so wait until this flag is set to one
	*/
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
 b02:	5d 9b       	sbis	0x0b, 5	; 11
 b04:	fe cf       	rjmp	.-4      	; 0xb02 <UART_sendByte>

	/*
	* Put the required data in the UDR register and it also clear the UDRE flag as
	* the UDR register is not empty now
	*/
	UDR = data;
 b06:	8c b9       	out	0x0c, r24	; 12
 b08:	08 95       	ret

00000b0a <__tablejump2__>:
 b0a:	ee 0f       	add	r30, r30
 b0c:	ff 1f       	adc	r31, r31
 b0e:	05 90       	lpm	r0, Z+
 b10:	f4 91       	lpm	r31, Z
 b12:	e0 2d       	mov	r30, r0
 b14:	09 94       	ijmp

00000b16 <_exit>:
 b16:	f8 94       	cli

00000b18 <__stop_program>:
 b18:	ff cf       	rjmp	.-2      	; 0xb18 <__stop_program>
