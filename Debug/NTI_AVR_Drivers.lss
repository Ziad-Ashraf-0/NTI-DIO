
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000afc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00000afc  00000b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000053  008000ac  008000ac  00000bdc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000388  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033a8  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b3  00000000  00000000  00004378  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ae2  00000000  00000000  0000562b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000abc  00000000  00000000  00007110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000191c  00000000  00000000  00007bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002602  00000000  00000000  000094e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000baea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 29 03 	jmp	0x652	; 0x652 <__vector_1>
   8:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__vector_2>
   c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_6>
  1c:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_9>
  28:	0c 94 29 04 	jmp	0x852	; 0x852 <__vector_10>
  2c:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <__vector_11>
  30:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__vector_12>
  34:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac ea       	ldi	r26, 0xAC	; 172
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3f       	cpi	r26, 0xFF	; 255
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include <util/delay.h>


int main(void) {
	GIE_enable();
  92:	0e 94 a4 03 	call	0x748	; 0x748 <GIE_enable>
	USART_Init();
  96:	0e 94 0f 05 	call	0xa1e	; 0xa1e <USART_Init>
	H_LCD_void_Init();
  9a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <H_LCD_void_Init>
	//FingerPS_strTemplate(0x01, 0xF769);
	
		H_LCD_void_clearScreen();
  9e:	0e 94 4f 02 	call	0x49e	; 0x49e <H_LCD_void_clearScreen>
		
		u8 key = FingerPS_genImg();
  a2:	0e 94 63 00 	call	0xc6	; 0xc6 <FingerPS_genImg>
		H_LCD_void_sendHexNum(key);
  a6:	68 2f       	mov	r22, r24
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 53 02 	call	0x4a6	; 0x4a6 <H_LCD_void_sendHexNum>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	83 ed       	ldi	r24, 0xD3	; 211
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x26>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x30>
  c2:	00 00       	nop
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x32>

000000c6 <FingerPS_genImg>:
	return ret;
}


Error_FingerPS_t FingerPS_genImg(void)
{
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	2c 97       	sbiw	r28, 0x0c	; 12
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;

	u8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01, 0x00, 0x05};
  dc:	8c e0       	ldi	r24, 0x0C	; 12
  de:	ec e6       	ldi	r30, 0x6C	; 108
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	de 01       	movw	r26, r28
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	8a 95       	dec	r24
  ec:	e1 f7       	brne	.-8      	; 0xe6 <FingerPS_genImg+0x20>

	for(u8 i= 0; i<12; i++)
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	0a c0       	rjmp	.+20     	; 0x106 <FingerPS_genImg+0x40>
	{
		UART_sendByte(Frame_TX[i]);
  f2:	e1 e0       	ldi	r30, 0x01	; 1
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ec 0f       	add	r30, r28
  f8:	fd 1f       	adc	r31, r29
  fa:	e1 0f       	add	r30, r17
  fc:	f1 1d       	adc	r31, r1
  fe:	80 81       	ld	r24, Z
 100:	0e 94 19 05 	call	0xa32	; 0xa32 <UART_sendByte>
{
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;

	u8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01, 0x00, 0x05};

	for(u8 i= 0; i<12; i++)
 104:	1f 5f       	subi	r17, 0xFF	; 255
 106:	1c 30       	cpi	r17, 0x0C	; 12
 108:	a0 f3       	brcs	.-24     	; 0xf2 <FingerPS_genImg+0x2c>
	{
		UART_sendByte(Frame_TX[i]);
	}

	while(byte_no < 12);
 10a:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__data_end>
 10e:	8c 30       	cpi	r24, 0x0C	; 12
 110:	e0 f3       	brcs	.-8      	; 0x10a <FingerPS_genImg+0x44>
	ret= buffer[9];
 112:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <buffer+0x9>
	byte_no= 0;
 116:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__data_end>
	
	return ret;
}
 11a:	2c 96       	adiw	r28, 0x0c	; 12
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	08 95       	ret

0000012e <H_LCD_void_latchByte>:

	// Assuming you have an LCD display function called H_LCD_void_sendIntNum
	H_LCD_void_sendIntNum(integral); // Display the integral part
	H_LCD_void_sendString("."); // Display the decimal point
	H_LCD_void_sendIntNum(fractional); // Display the fractional part
}
 12e:	0f 93       	push	r16
 130:	1f 93       	push	r17
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	64 97       	sbiw	r28, 0x14	; 20
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
 146:	08 2f       	mov	r16, r24
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	89 83       	std	Y+1, r24	; 0x01
 14c:	1a 82       	std	Y+2, r1	; 0x02
 14e:	8b 83       	std	Y+3, r24	; 0x03
 150:	04 fb       	bst	r16, 4
 152:	99 27       	eor	r25, r25
 154:	90 f9       	bld	r25, 0
 156:	9c 83       	std	Y+4, r25	; 0x04
 158:	8d 83       	std	Y+5, r24	; 0x05
 15a:	8e 83       	std	Y+6, r24	; 0x06
 15c:	8f 83       	std	Y+7, r24	; 0x07
 15e:	05 fb       	bst	r16, 5
 160:	99 27       	eor	r25, r25
 162:	90 f9       	bld	r25, 0
 164:	98 87       	std	Y+8, r25	; 0x08
 166:	89 87       	std	Y+9, r24	; 0x09
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	9a 87       	std	Y+10, r25	; 0x0a
 16c:	8b 87       	std	Y+11, r24	; 0x0b
 16e:	06 fb       	bst	r16, 6
 170:	99 27       	eor	r25, r25
 172:	90 f9       	bld	r25, 0
 174:	9c 87       	std	Y+12, r25	; 0x0c
 176:	8d 87       	std	Y+13, r24	; 0x0d
 178:	94 e0       	ldi	r25, 0x04	; 4
 17a:	9e 87       	std	Y+14, r25	; 0x0e
 17c:	8f 87       	std	Y+15, r24	; 0x0f
 17e:	80 2f       	mov	r24, r16
 180:	88 1f       	adc	r24, r24
 182:	88 27       	eor	r24, r24
 184:	88 1f       	adc	r24, r24
 186:	88 8b       	std	Y+16, r24	; 0x10
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	0f c0       	rjmp	.+30     	; 0x1aa <H_LCD_void_latchByte+0x7c>
 18c:	81 2f       	mov	r24, r17
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	2c 0f       	add	r18, r28
 19e:	3d 1f       	adc	r19, r29
 1a0:	82 0f       	add	r24, r18
 1a2:	93 1f       	adc	r25, r19
 1a4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_U8SetPinValue>
 1a8:	1f 5f       	subi	r17, 0xFF	; 255
 1aa:	14 30       	cpi	r17, 0x04	; 4
 1ac:	78 f3       	brcs	.-34     	; 0x18c <H_LCD_void_latchByte+0x5e>
 1ae:	19 8a       	std	Y+17, r1	; 0x11
 1b0:	82 e0       	ldi	r24, 0x02	; 2
 1b2:	8a 8b       	std	Y+18, r24	; 0x12
 1b4:	1c 8a       	std	Y+20, r1	; 0x14
 1b6:	8f e9       	ldi	r24, 0x9F	; 159
 1b8:	9f e0       	ldi	r25, 0x0F	; 15
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <H_LCD_void_latchByte+0x8c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <H_LCD_void_latchByte+0x92>
 1c0:	00 00       	nop
 1c2:	ce 01       	movw	r24, r28
 1c4:	41 96       	adiw	r24, 0x11	; 17
 1c6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_U8SetPinValue>
 1ca:	ef e9       	ldi	r30, 0x9F	; 159
 1cc:	ff e0       	ldi	r31, 0x0F	; 15
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <H_LCD_void_latchByte+0xa0>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <H_LCD_void_latchByte+0xa6>
 1d4:	00 00       	nop
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	8c 8b       	std	Y+20, r24	; 0x14
 1da:	ce 01       	movw	r24, r28
 1dc:	41 96       	adiw	r24, 0x11	; 17
 1de:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_U8SetPinValue>
 1e2:	8f e9       	ldi	r24, 0x9F	; 159
 1e4:	9f e0       	ldi	r25, 0x0F	; 15
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <H_LCD_void_latchByte+0xb8>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <H_LCD_void_latchByte+0xbe>
 1ec:	00 00       	nop
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	1a c0       	rjmp	.+52     	; 0x226 <H_LCD_void_latchByte+0xf8>
 1f2:	81 2f       	mov	r24, r17
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	20 2f       	mov	r18, r16
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	01 2e       	mov	r0, r17
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <H_LCD_void_latchByte+0xd4>
 1fe:	35 95       	asr	r19
 200:	27 95       	ror	r18
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <H_LCD_void_latchByte+0xd0>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	e1 e0       	ldi	r30, 0x01	; 1
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	ec 0f       	add	r30, r28
 214:	fd 1f       	adc	r31, r29
 216:	8e 0f       	add	r24, r30
 218:	9f 1f       	adc	r25, r31
 21a:	21 70       	andi	r18, 0x01	; 1
 21c:	fc 01       	movw	r30, r24
 21e:	23 83       	std	Z+3, r18	; 0x03
 220:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_U8SetPinValue>
 224:	1f 5f       	subi	r17, 0xFF	; 255
 226:	14 30       	cpi	r17, 0x04	; 4
 228:	20 f3       	brcs	.-56     	; 0x1f2 <H_LCD_void_latchByte+0xc4>
 22a:	8f e9       	ldi	r24, 0x9F	; 159
 22c:	9f e0       	ldi	r25, 0x0F	; 15
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <H_LCD_void_latchByte+0x100>
 232:	00 c0       	rjmp	.+0      	; 0x234 <H_LCD_void_latchByte+0x106>
 234:	00 00       	nop
 236:	1c 8a       	std	Y+20, r1	; 0x14
 238:	ce 01       	movw	r24, r28
 23a:	41 96       	adiw	r24, 0x11	; 17
 23c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_U8SetPinValue>
 240:	ef e9       	ldi	r30, 0x9F	; 159
 242:	ff e0       	ldi	r31, 0x0F	; 15
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <H_LCD_void_latchByte+0x116>
 248:	00 c0       	rjmp	.+0      	; 0x24a <H_LCD_void_latchByte+0x11c>
 24a:	00 00       	nop
 24c:	64 96       	adiw	r28, 0x14	; 20
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	08 95       	ret

00000262 <H_LCD_void_sendCommand>:
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	28 97       	sbiw	r28, 0x08	; 8
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	08 2f       	mov	r16, r24
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	e4 e8       	ldi	r30, 0x84	; 132
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	de 01       	movw	r26, r28
 284:	11 96       	adiw	r26, 0x01	; 1
 286:	01 90       	ld	r0, Z+
 288:	0d 92       	st	X+, r0
 28a:	8a 95       	dec	r24
 28c:	e1 f7       	brne	.-8      	; 0x286 <H_LCD_void_sendCommand+0x24>
 28e:	10 e0       	ldi	r17, 0x00	; 0
 290:	15 c0       	rjmp	.+42     	; 0x2bc <H_LCD_void_sendCommand+0x5a>
 292:	81 2f       	mov	r24, r17
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	2c 0f       	add	r18, r28
 2a4:	3d 1f       	adc	r19, r29
 2a6:	82 0f       	add	r24, r18
 2a8:	93 1f       	adc	r25, r19
 2aa:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_U8SetPinValue>
 2ae:	8f e9       	ldi	r24, 0x9F	; 159
 2b0:	9f e0       	ldi	r25, 0x0F	; 15
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <H_LCD_void_sendCommand+0x50>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <H_LCD_void_sendCommand+0x56>
 2b8:	00 00       	nop
 2ba:	1f 5f       	subi	r17, 0xFF	; 255
 2bc:	12 30       	cpi	r17, 0x02	; 2
 2be:	48 f3       	brcs	.-46     	; 0x292 <H_LCD_void_sendCommand+0x30>
 2c0:	8f e9       	ldi	r24, 0x9F	; 159
 2c2:	9f e0       	ldi	r25, 0x0F	; 15
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <H_LCD_void_sendCommand+0x62>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <H_LCD_void_sendCommand+0x68>
 2ca:	00 00       	nop
 2cc:	80 2f       	mov	r24, r16
 2ce:	0e 94 97 00 	call	0x12e	; 0x12e <H_LCD_void_latchByte>
 2d2:	28 96       	adiw	r28, 0x08	; 8
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	08 95       	ret

000002e8 <H_LCD_void_Init>:
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	68 97       	sbiw	r28, 0x18	; 24
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	fe 01       	movw	r30, r28
 300:	31 96       	adiw	r30, 0x01	; 1
 302:	88 e0       	ldi	r24, 0x08	; 8
 304:	df 01       	movw	r26, r30
 306:	1d 92       	st	X+, r1
 308:	8a 95       	dec	r24
 30a:	e9 f7       	brne	.-6      	; 0x306 <H_LCD_void_Init+0x1e>
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	8a 83       	std	Y+2, r24	; 0x02
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	8b 83       	std	Y+3, r24	; 0x03
 314:	92 e0       	ldi	r25, 0x02	; 2
 316:	9e 83       	std	Y+6, r25	; 0x06
 318:	8f 83       	std	Y+7, r24	; 0x07
 31a:	10 e0       	ldi	r17, 0x00	; 0
 31c:	0f c0       	rjmp	.+30     	; 0x33c <H_LCD_void_Init+0x54>
 31e:	81 2f       	mov	r24, r17
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	2c 0f       	add	r18, r28
 330:	3d 1f       	adc	r19, r29
 332:	82 0f       	add	r24, r18
 334:	93 1f       	adc	r25, r19
 336:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_U8SetPinDirection>
 33a:	1f 5f       	subi	r17, 0xFF	; 255
 33c:	12 30       	cpi	r17, 0x02	; 2
 33e:	78 f3       	brcs	.-34     	; 0x31e <H_LCD_void_Init+0x36>
 340:	fe 01       	movw	r30, r28
 342:	39 96       	adiw	r30, 0x09	; 9
 344:	80 e1       	ldi	r24, 0x10	; 16
 346:	df 01       	movw	r26, r30
 348:	1d 92       	st	X+, r1
 34a:	8a 95       	dec	r24
 34c:	e9 f7       	brne	.-6      	; 0x348 <H_LCD_void_Init+0x60>
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	89 87       	std	Y+9, r24	; 0x09
 352:	8b 87       	std	Y+11, r24	; 0x0b
 354:	8d 87       	std	Y+13, r24	; 0x0d
 356:	8e 87       	std	Y+14, r24	; 0x0e
 358:	8f 87       	std	Y+15, r24	; 0x0f
 35a:	89 8b       	std	Y+17, r24	; 0x11
 35c:	92 e0       	ldi	r25, 0x02	; 2
 35e:	9a 8b       	std	Y+18, r25	; 0x12
 360:	8b 8b       	std	Y+19, r24	; 0x13
 362:	8d 8b       	std	Y+21, r24	; 0x15
 364:	94 e0       	ldi	r25, 0x04	; 4
 366:	9e 8b       	std	Y+22, r25	; 0x16
 368:	8f 8b       	std	Y+23, r24	; 0x17
 36a:	10 e0       	ldi	r17, 0x00	; 0
 36c:	0f c0       	rjmp	.+30     	; 0x38c <H_LCD_void_Init+0xa4>
 36e:	81 2f       	mov	r24, r17
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	29 e0       	ldi	r18, 0x09	; 9
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	2c 0f       	add	r18, r28
 380:	3d 1f       	adc	r19, r29
 382:	82 0f       	add	r24, r18
 384:	93 1f       	adc	r25, r19
 386:	0e 94 a9 02 	call	0x552	; 0x552 <DIO_U8SetPinDirection>
 38a:	1f 5f       	subi	r17, 0xFF	; 255
 38c:	14 30       	cpi	r17, 0x04	; 4
 38e:	78 f3       	brcs	.-34     	; 0x36e <H_LCD_void_Init+0x86>
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	0e 94 31 01 	call	0x262	; 0x262 <H_LCD_void_sendCommand>
 396:	8f e9       	ldi	r24, 0x9F	; 159
 398:	9f e0       	ldi	r25, 0x0F	; 15
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <H_LCD_void_Init+0xb2>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <H_LCD_void_Init+0xb8>
 3a0:	00 00       	nop
 3a2:	88 e2       	ldi	r24, 0x28	; 40
 3a4:	0e 94 31 01 	call	0x262	; 0x262 <H_LCD_void_sendCommand>
 3a8:	af e9       	ldi	r26, 0x9F	; 159
 3aa:	bf e0       	ldi	r27, 0x0F	; 15
 3ac:	11 97       	sbiw	r26, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <H_LCD_void_Init+0xc4>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <H_LCD_void_Init+0xca>
 3b2:	00 00       	nop
 3b4:	8f e0       	ldi	r24, 0x0F	; 15
 3b6:	0e 94 31 01 	call	0x262	; 0x262 <H_LCD_void_sendCommand>
 3ba:	8f e9       	ldi	r24, 0x9F	; 159
 3bc:	9f e0       	ldi	r25, 0x0F	; 15
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <H_LCD_void_Init+0xd6>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <H_LCD_void_Init+0xdc>
 3c4:	00 00       	nop
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 31 01 	call	0x262	; 0x262 <H_LCD_void_sendCommand>
 3cc:	af e3       	ldi	r26, 0x3F	; 63
 3ce:	bf e1       	ldi	r27, 0x1F	; 31
 3d0:	11 97       	sbiw	r26, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <H_LCD_void_Init+0xe8>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <H_LCD_void_Init+0xee>
 3d6:	00 00       	nop
 3d8:	86 e0       	ldi	r24, 0x06	; 6
 3da:	0e 94 31 01 	call	0x262	; 0x262 <H_LCD_void_sendCommand>
 3de:	68 96       	adiw	r28, 0x18	; 24
 3e0:	0f b6       	in	r0, 0x3f	; 63
 3e2:	f8 94       	cli
 3e4:	de bf       	out	0x3e, r29	; 62
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	cd bf       	out	0x3d, r28	; 61
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	08 95       	ret

000003f2 <H_LCD_void_sendData>:
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	cd b7       	in	r28, 0x3d	; 61
 3fc:	de b7       	in	r29, 0x3e	; 62
 3fe:	28 97       	sbiw	r28, 0x08	; 8
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	f8 94       	cli
 404:	de bf       	out	0x3e, r29	; 62
 406:	0f be       	out	0x3f, r0	; 63
 408:	cd bf       	out	0x3d, r28	; 61
 40a:	08 2f       	mov	r16, r24
 40c:	88 e0       	ldi	r24, 0x08	; 8
 40e:	ec e8       	ldi	r30, 0x8C	; 140
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	de 01       	movw	r26, r28
 414:	11 96       	adiw	r26, 0x01	; 1
 416:	01 90       	ld	r0, Z+
 418:	0d 92       	st	X+, r0
 41a:	8a 95       	dec	r24
 41c:	e1 f7       	brne	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	10 e0       	ldi	r17, 0x00	; 0
 420:	15 c0       	rjmp	.+42     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 422:	81 2f       	mov	r24, r17
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	2c 0f       	add	r18, r28
 434:	3d 1f       	adc	r19, r29
 436:	82 0f       	add	r24, r18
 438:	93 1f       	adc	r25, r19
 43a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <DIO_U8SetPinValue>
 43e:	8f e9       	ldi	r24, 0x9F	; 159
 440:	9f e0       	ldi	r25, 0x0F	; 15
 442:	01 97       	sbiw	r24, 0x01	; 1
 444:	f1 f7       	brne	.-4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 448:	00 00       	nop
 44a:	1f 5f       	subi	r17, 0xFF	; 255
 44c:	12 30       	cpi	r17, 0x02	; 2
 44e:	48 f3       	brcs	.-46     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 450:	8f e9       	ldi	r24, 0x9F	; 159
 452:	9f e0       	ldi	r25, 0x0F	; 15
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
 45c:	80 2f       	mov	r24, r16
 45e:	0e 94 97 00 	call	0x12e	; 0x12e <H_LCD_void_latchByte>
 462:	28 96       	adiw	r28, 0x08	; 8
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	f8 94       	cli
 468:	de bf       	out	0x3e, r29	; 62
 46a:	0f be       	out	0x3f, r0	; 63
 46c:	cd bf       	out	0x3d, r28	; 61
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	08 95       	ret

00000478 <H_LCD_void_sendString>:
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	8c 01       	movw	r16, r24
 480:	c0 e0       	ldi	r28, 0x00	; 0
 482:	03 c0       	rjmp	.+6      	; 0x48a <H_LCD_void_sendString+0x12>
 484:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <H_LCD_void_sendData>
 488:	cf 5f       	subi	r28, 0xFF	; 255
 48a:	f8 01       	movw	r30, r16
 48c:	ec 0f       	add	r30, r28
 48e:	f1 1d       	adc	r31, r1
 490:	80 81       	ld	r24, Z
 492:	81 11       	cpse	r24, r1
 494:	f7 cf       	rjmp	.-18     	; 0x484 <H_LCD_void_sendString+0xc>
 496:	cf 91       	pop	r28
 498:	1f 91       	pop	r17
 49a:	0f 91       	pop	r16
 49c:	08 95       	ret

0000049e <H_LCD_void_clearScreen>:
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 31 01 	call	0x262	; 0x262 <H_LCD_void_sendCommand>
 4a4:	08 95       	ret

000004a6 <H_LCD_void_sendHexNum>:

void H_LCD_void_sendHexNum(u32 copy_u32Num) {
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
 4ae:	60 97       	sbiw	r28, 0x10	; 16
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	dc 01       	movw	r26, r24
 4bc:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4be:	40 e1       	ldi	r20, 0x10	; 16
 4c0:	be 01       	movw	r22, r28
 4c2:	6f 5f       	subi	r22, 0xFF	; 255
 4c4:	7f 4f       	sbci	r23, 0xFF	; 255
 4c6:	0e 94 47 05 	call	0xa8e	; 0xa8e <__itoa_ncheck>
 s8 buff[16]; // String to hold the hexadecimal result
 itoa(copy_u32Num, buff, 16); // Convert to hexadecimal ASCII value (base 16)
 
 // Convert the string to uppercase by adding the ASCII difference
 for (u8 i = 0; buff[i]; i++) {
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0d c0       	rjmp	.+26     	; 0x4e8 <H_LCD_void_sendHexNum+0x42>
	 if (buff[i] >= 'a' && buff[i] <= 'f') {
 4ce:	4f e9       	ldi	r20, 0x9F	; 159
 4d0:	48 0f       	add	r20, r24
 4d2:	46 30       	cpi	r20, 0x06	; 6
 4d4:	40 f4       	brcc	.+16     	; 0x4e6 <H_LCD_void_sendHexNum+0x40>
		 buff[i] = (s8)(buff[i] - 32);
 4d6:	80 52       	subi	r24, 0x20	; 32
 4d8:	e1 e0       	ldi	r30, 0x01	; 1
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	ec 0f       	add	r30, r28
 4de:	fd 1f       	adc	r31, r29
 4e0:	e2 0f       	add	r30, r18
 4e2:	f3 1f       	adc	r31, r19
 4e4:	80 83       	st	Z, r24
void H_LCD_void_sendHexNum(u32 copy_u32Num) {
 s8 buff[16]; // String to hold the hexadecimal result
 itoa(copy_u32Num, buff, 16); // Convert to hexadecimal ASCII value (base 16)
 
 // Convert the string to uppercase by adding the ASCII difference
 for (u8 i = 0; buff[i]; i++) {
 4e6:	9f 5f       	subi	r25, 0xFF	; 255
 4e8:	29 2f       	mov	r18, r25
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	e1 e0       	ldi	r30, 0x01	; 1
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	ec 0f       	add	r30, r28
 4f2:	fd 1f       	adc	r31, r29
 4f4:	e2 0f       	add	r30, r18
 4f6:	f3 1f       	adc	r31, r19
 4f8:	80 81       	ld	r24, Z
 4fa:	81 11       	cpse	r24, r1
 4fc:	e8 cf       	rjmp	.-48     	; 0x4ce <H_LCD_void_sendHexNum+0x28>
	 if (buff[i] >= 'a' && buff[i] <= 'f') {
		 buff[i] = (s8)(buff[i] - 32);
	 }
 }

 H_LCD_void_sendString("0x"); // Display "0x" as a prefix for hexadecimal numbers
 4fe:	86 e9       	ldi	r24, 0x96	; 150
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 3c 02 	call	0x478	; 0x478 <H_LCD_void_sendString>
 H_LCD_void_sendString(buff); // Display the uppercase hexadecimal string
 506:	ce 01       	movw	r24, r28
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	0e 94 3c 02 	call	0x478	; 0x478 <H_LCD_void_sendString>
}
 50e:	60 96       	adiw	r28, 0x10	; 16
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 520:	24 b1       	in	r18, 0x04	; 4
 522:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 524:	00 24       	eor	r0, r0
 526:	22 0f       	add	r18, r18
 528:	33 1f       	adc	r19, r19
 52a:	00 1c       	adc	r0, r0
 52c:	22 0f       	add	r18, r18
 52e:	33 1f       	adc	r19, r19
 530:	00 1c       	adc	r0, r0
 532:	23 2f       	mov	r18, r19
 534:	30 2d       	mov	r19, r0
 536:	85 b1       	in	r24, 0x05	; 5
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 542:	e0 91 ad 00 	lds	r30, 0x00AD	; 0x8000ad <ADC_callBack>
 546:	f0 91 ae 00 	lds	r31, 0x00AE	; 0x8000ae <ADC_callBack+0x1>
 54a:	82 2b       	or	r24, r18
 54c:	93 2b       	or	r25, r19
 54e:	09 95       	icall
 550:	08 95       	ret

00000552 <DIO_U8SetPinDirection>:
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 552:	dc 01       	movw	r26, r24
 554:	ec 91       	ld	r30, X
 556:	e4 30       	cpi	r30, 0x04	; 4
 558:	a0 f5       	brcc	.+104    	; 0x5c2 <DIO_U8SetPinDirection+0x70>
 55a:	11 96       	adiw	r26, 0x01	; 1
 55c:	2c 91       	ld	r18, X
 55e:	11 97       	sbiw	r26, 0x01	; 1
 560:	28 30       	cpi	r18, 0x08	; 8
 562:	88 f5       	brcc	.+98     	; 0x5c6 <DIO_U8SetPinDirection+0x74>
 564:	12 96       	adiw	r26, 0x02	; 2
 566:	8c 91       	ld	r24, X
 568:	81 11       	cpse	r24, r1
 56a:	15 c0       	rjmp	.+42     	; 0x596 <DIO_U8SetPinDirection+0x44>
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	ee 0f       	add	r30, r30
 570:	ff 1f       	adc	r31, r31
 572:	ec 55       	subi	r30, 0x5C	; 92
 574:	ff 4f       	sbci	r31, 0xFF	; 255
 576:	01 90       	ld	r0, Z+
 578:	f0 81       	ld	r31, Z
 57a:	e0 2d       	mov	r30, r0
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_U8SetPinDirection+0x34>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	2a 95       	dec	r18
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_U8SetPinDirection+0x30>
 58a:	80 95       	com	r24
 58c:	90 81       	ld	r25, Z
 58e:	89 23       	and	r24, r25
 590:	80 83       	st	Z, r24
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	08 95       	ret
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	c1 f4       	brne	.+48     	; 0x5ca <DIO_U8SetPinDirection+0x78>
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	ee 0f       	add	r30, r30
 59e:	ff 1f       	adc	r31, r31
 5a0:	ec 55       	subi	r30, 0x5C	; 92
 5a2:	ff 4f       	sbci	r31, 0xFF	; 255
 5a4:	01 90       	ld	r0, Z+
 5a6:	f0 81       	ld	r31, Z
 5a8:	e0 2d       	mov	r30, r0
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <DIO_U8SetPinDirection+0x62>
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	2a 95       	dec	r18
 5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <DIO_U8SetPinDirection+0x5e>
 5b8:	90 81       	ld	r25, Z
 5ba:	89 2b       	or	r24, r25
 5bc:	80 83       	st	Z, r24
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	08 95       	ret
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	08 95       	ret
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	08 95       	ret
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	08 95       	ret

000005ce <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(const DIO_Config* config) {
    if (config != NULL) {
 5ce:	00 97       	sbiw	r24, 0x00	; 0
 5d0:	c1 f1       	breq	.+112    	; 0x642 <DIO_U8SetPinValue+0x74>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
 5d2:	dc 01       	movw	r26, r24
 5d4:	ec 91       	ld	r30, X
 5d6:	e4 30       	cpi	r30, 0x04	; 4
 5d8:	b0 f5       	brcc	.+108    	; 0x646 <DIO_U8SetPinValue+0x78>
 5da:	11 96       	adiw	r26, 0x01	; 1
 5dc:	2c 91       	ld	r18, X
 5de:	11 97       	sbiw	r26, 0x01	; 1
 5e0:	28 30       	cpi	r18, 0x08	; 8
 5e2:	98 f5       	brcc	.+102    	; 0x64a <DIO_U8SetPinValue+0x7c>
            if (config->value == DIO_PIN_HIGH) {
 5e4:	13 96       	adiw	r26, 0x03	; 3
 5e6:	8c 91       	ld	r24, X
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	a1 f4       	brne	.+40     	; 0x614 <DIO_U8SetPinValue+0x46>
                SET_BIT(*writeRegisters[config->port], config->pin);
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	ee 0f       	add	r30, r30
 5f0:	ff 1f       	adc	r31, r31
 5f2:	e4 56       	subi	r30, 0x64	; 100
 5f4:	ff 4f       	sbci	r31, 0xFF	; 255
 5f6:	01 90       	ld	r0, Z+
 5f8:	f0 81       	ld	r31, Z
 5fa:	e0 2d       	mov	r30, r0
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_U8SetPinValue+0x38>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	2a 95       	dec	r18
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_U8SetPinValue+0x34>
 60a:	90 81       	ld	r25, Z
 60c:	89 2b       	or	r24, r25
 60e:	80 83       	st	Z, r24
                return NO_ERROR;
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	08 95       	ret
            } else if (config->value == DIO_PIN_LOW) {
 614:	81 11       	cpse	r24, r1
 616:	1b c0       	rjmp	.+54     	; 0x64e <DIO_U8SetPinValue+0x80>
                CLR_BIT(*writeRegisters[config->port], config->pin);
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	ee 0f       	add	r30, r30
 61c:	ff 1f       	adc	r31, r31
 61e:	e4 56       	subi	r30, 0x64	; 100
 620:	ff 4f       	sbci	r31, 0xFF	; 255
 622:	01 90       	ld	r0, Z+
 624:	f0 81       	ld	r31, Z
 626:	e0 2d       	mov	r30, r0
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_U8SetPinValue+0x64>
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	2a 95       	dec	r18
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_U8SetPinValue+0x60>
 636:	80 95       	com	r24
 638:	90 81       	ld	r25, Z
 63a:	89 23       	and	r24, r25
 63c:	80 83       	st	Z, r24
                return NO_ERROR;
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	08 95       	ret
            }
        } else {
            return ERROR;
        }
    } else {
        return ERROR;
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	08 95       	ret
                return NO_ERROR;
            } else {
                return ERROR;
            }
        } else {
            return ERROR;
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	08 95       	ret
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	08 95       	ret
                return NO_ERROR;
            } else if (config->value == DIO_PIN_LOW) {
                CLR_BIT(*writeRegisters[config->port], config->pin);
                return NO_ERROR;
            } else {
                return ERROR;
 64e:	81 e0       	ldi	r24, 0x01	; 1
            return ERROR;
        }
    } else {
        return ERROR;
    }
}
 650:	08 95       	ret

00000652 <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	2f 93       	push	r18
 65e:	3f 93       	push	r19
 660:	4f 93       	push	r20
 662:	5f 93       	push	r21
 664:	6f 93       	push	r22
 666:	7f 93       	push	r23
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
 66c:	af 93       	push	r26
 66e:	bf 93       	push	r27
 670:	ef 93       	push	r30
 672:	ff 93       	push	r31
	if(Action[0]!= NULL){
 674:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <Action>
 678:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <Action+0x1>
 67c:	30 97       	sbiw	r30, 0x00	; 0
 67e:	09 f0       	breq	.+2      	; 0x682 <__vector_1+0x30>
		Action[0]();
 680:	09 95       	icall
	}
}
 682:	ff 91       	pop	r31
 684:	ef 91       	pop	r30
 686:	bf 91       	pop	r27
 688:	af 91       	pop	r26
 68a:	9f 91       	pop	r25
 68c:	8f 91       	pop	r24
 68e:	7f 91       	pop	r23
 690:	6f 91       	pop	r22
 692:	5f 91       	pop	r21
 694:	4f 91       	pop	r20
 696:	3f 91       	pop	r19
 698:	2f 91       	pop	r18
 69a:	0f 90       	pop	r0
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	0f 90       	pop	r0
 6a0:	1f 90       	pop	r1
 6a2:	18 95       	reti

000006a4 <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 6a4:	1f 92       	push	r1
 6a6:	0f 92       	push	r0
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	0f 92       	push	r0
 6ac:	11 24       	eor	r1, r1
 6ae:	2f 93       	push	r18
 6b0:	3f 93       	push	r19
 6b2:	4f 93       	push	r20
 6b4:	5f 93       	push	r21
 6b6:	6f 93       	push	r22
 6b8:	7f 93       	push	r23
 6ba:	8f 93       	push	r24
 6bc:	9f 93       	push	r25
 6be:	af 93       	push	r26
 6c0:	bf 93       	push	r27
 6c2:	ef 93       	push	r30
 6c4:	ff 93       	push	r31
	if(Action[1]!= NULL){
 6c6:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <Action+0x2>
 6ca:	f0 91 b2 00 	lds	r31, 0x00B2	; 0x8000b2 <Action+0x3>
 6ce:	30 97       	sbiw	r30, 0x00	; 0
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <__vector_2+0x30>
		Action[1]();
 6d2:	09 95       	icall
	}
}
 6d4:	ff 91       	pop	r31
 6d6:	ef 91       	pop	r30
 6d8:	bf 91       	pop	r27
 6da:	af 91       	pop	r26
 6dc:	9f 91       	pop	r25
 6de:	8f 91       	pop	r24
 6e0:	7f 91       	pop	r23
 6e2:	6f 91       	pop	r22
 6e4:	5f 91       	pop	r21
 6e6:	4f 91       	pop	r20
 6e8:	3f 91       	pop	r19
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 6f6:	1f 92       	push	r1
 6f8:	0f 92       	push	r0
 6fa:	0f b6       	in	r0, 0x3f	; 63
 6fc:	0f 92       	push	r0
 6fe:	11 24       	eor	r1, r1
 700:	2f 93       	push	r18
 702:	3f 93       	push	r19
 704:	4f 93       	push	r20
 706:	5f 93       	push	r21
 708:	6f 93       	push	r22
 70a:	7f 93       	push	r23
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
	if(Action[2]!= NULL){
 718:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <Action+0x4>
 71c:	f0 91 b4 00 	lds	r31, 0x00B4	; 0x8000b4 <Action+0x5>
 720:	30 97       	sbiw	r30, 0x00	; 0
 722:	09 f0       	breq	.+2      	; 0x726 <__vector_3+0x30>
		Action[2]();
 724:	09 95       	icall
	}
}
 726:	ff 91       	pop	r31
 728:	ef 91       	pop	r30
 72a:	bf 91       	pop	r27
 72c:	af 91       	pop	r26
 72e:	9f 91       	pop	r25
 730:	8f 91       	pop	r24
 732:	7f 91       	pop	r23
 734:	6f 91       	pop	r22
 736:	5f 91       	pop	r21
 738:	4f 91       	pop	r20
 73a:	3f 91       	pop	r19
 73c:	2f 91       	pop	r18
 73e:	0f 90       	pop	r0
 740:	0f be       	out	0x3f, r0	; 63
 742:	0f 90       	pop	r0
 744:	1f 90       	pop	r1
 746:	18 95       	reti

00000748 <GIE_enable>:
#include "GIE_interface.h"


// Enable Global Interrupts
void GIE_enable(){
    __asm__ __volatile__ ("sei" ::);
 748:	78 94       	sei
 74a:	08 95       	ret

0000074c <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 74c:	1f 92       	push	r1
 74e:	0f 92       	push	r0
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	0f 92       	push	r0
 754:	11 24       	eor	r1, r1
 756:	2f 93       	push	r18
 758:	3f 93       	push	r19
 75a:	4f 93       	push	r20
 75c:	5f 93       	push	r21
 75e:	6f 93       	push	r22
 760:	7f 93       	push	r23
 762:	8f 93       	push	r24
 764:	9f 93       	push	r25
 766:	af 93       	push	r26
 768:	bf 93       	push	r27
 76a:	ef 93       	push	r30
 76c:	ff 93       	push	r31
	if(Action_Spi != NULL){
 76e:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <Action_Spi>
 772:	f0 91 b6 00 	lds	r31, 0x00B6	; 0x8000b6 <Action_Spi+0x1>
 776:	30 97       	sbiw	r30, 0x00	; 0
 778:	11 f0       	breq	.+4      	; 0x77e <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 77a:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 77c:	09 95       	icall
	}
 77e:	ff 91       	pop	r31
 780:	ef 91       	pop	r30
 782:	bf 91       	pop	r27
 784:	af 91       	pop	r26
 786:	9f 91       	pop	r25
 788:	8f 91       	pop	r24
 78a:	7f 91       	pop	r23
 78c:	6f 91       	pop	r22
 78e:	5f 91       	pop	r21
 790:	4f 91       	pop	r20
 792:	3f 91       	pop	r19
 794:	2f 91       	pop	r18
 796:	0f 90       	pop	r0
 798:	0f be       	out	0x3f, r0	; 63
 79a:	0f 90       	pop	r0
 79c:	1f 90       	pop	r1
 79e:	18 95       	reti

000007a0 <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 7a0:	1f 92       	push	r1
 7a2:	0f 92       	push	r0
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	0f 92       	push	r0
 7a8:	11 24       	eor	r1, r1
 7aa:	2f 93       	push	r18
 7ac:	3f 93       	push	r19
 7ae:	4f 93       	push	r20
 7b0:	5f 93       	push	r21
 7b2:	6f 93       	push	r22
 7b4:	7f 93       	push	r23
 7b6:	8f 93       	push	r24
 7b8:	9f 93       	push	r25
 7ba:	af 93       	push	r26
 7bc:	bf 93       	push	r27
 7be:	ef 93       	push	r30
 7c0:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 7c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <Action_Timer>
 7c6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <Action_Timer+0x1>
 7ca:	89 2b       	or	r24, r25
 7cc:	89 f1       	breq	.+98     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
		counter++;
 7ce:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <counter.1685>
 7d2:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <counter.1685+0x1>
 7d6:	a0 91 b9 00 	lds	r26, 0x00B9	; 0x8000b9 <counter.1685+0x2>
 7da:	b0 91 ba 00 	lds	r27, 0x00BA	; 0x8000ba <counter.1685+0x3>
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	a1 1d       	adc	r26, r1
 7e2:	b1 1d       	adc	r27, r1
 7e4:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <counter.1685>
 7e8:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <counter.1685+0x1>
 7ec:	a0 93 b9 00 	sts	0x00B9, r26	; 0x8000b9 <counter.1685+0x2>
 7f0:	b0 93 ba 00 	sts	0x00BA, r27	; 0x8000ba <counter.1685+0x3>
		if(counter == numOverflows){
 7f4:	40 91 c3 00 	lds	r20, 0x00C3	; 0x8000c3 <numOverflows>
 7f8:	50 91 c4 00 	lds	r21, 0x00C4	; 0x8000c4 <numOverflows+0x1>
 7fc:	60 91 c5 00 	lds	r22, 0x00C5	; 0x8000c5 <numOverflows+0x2>
 800:	70 91 c6 00 	lds	r23, 0x00C6	; 0x8000c6 <numOverflows+0x3>
 804:	84 17       	cp	r24, r20
 806:	95 07       	cpc	r25, r21
 808:	a6 07       	cpc	r26, r22
 80a:	b7 07       	cpc	r27, r23
 80c:	89 f4       	brne	.+34     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
			TCNT0_REG = 256 - remainingCounts;
 80e:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <remainingCounts>
 812:	81 95       	neg	r24
 814:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 816:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <counter.1685>
 81a:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <counter.1685+0x1>
 81e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <counter.1685+0x2>
 822:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <counter.1685+0x3>
			Action_Timer[0]();
 826:	e0 91 bb 00 	lds	r30, 0x00BB	; 0x8000bb <Action_Timer>
 82a:	f0 91 bc 00 	lds	r31, 0x00BC	; 0x8000bc <Action_Timer+0x1>
 82e:	09 95       	icall
		}
		
	}
}
 830:	ff 91       	pop	r31
 832:	ef 91       	pop	r30
 834:	bf 91       	pop	r27
 836:	af 91       	pop	r26
 838:	9f 91       	pop	r25
 83a:	8f 91       	pop	r24
 83c:	7f 91       	pop	r23
 83e:	6f 91       	pop	r22
 840:	5f 91       	pop	r21
 842:	4f 91       	pop	r20
 844:	3f 91       	pop	r19
 846:	2f 91       	pop	r18
 848:	0f 90       	pop	r0
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	0f 90       	pop	r0
 84e:	1f 90       	pop	r1
 850:	18 95       	reti

00000852 <__vector_10>:

ISR(TIMER0_COMP_vect){
 852:	1f 92       	push	r1
 854:	0f 92       	push	r0
 856:	0f b6       	in	r0, 0x3f	; 63
 858:	0f 92       	push	r0
 85a:	11 24       	eor	r1, r1
 85c:	2f 93       	push	r18
 85e:	3f 93       	push	r19
 860:	4f 93       	push	r20
 862:	5f 93       	push	r21
 864:	6f 93       	push	r22
 866:	7f 93       	push	r23
 868:	8f 93       	push	r24
 86a:	9f 93       	push	r25
 86c:	af 93       	push	r26
 86e:	bf 93       	push	r27
 870:	ef 93       	push	r30
 872:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 874:	e0 91 bd 00 	lds	r30, 0x00BD	; 0x8000bd <Action_Timer+0x2>
 878:	f0 91 be 00 	lds	r31, 0x00BE	; 0x8000be <Action_Timer+0x3>
 87c:	30 97       	sbiw	r30, 0x00	; 0
 87e:	09 f0       	breq	.+2      	; 0x882 <__stack+0x23>
		Action_Timer[1]();
 880:	09 95       	icall
		
	}
}
 882:	ff 91       	pop	r31
 884:	ef 91       	pop	r30
 886:	bf 91       	pop	r27
 888:	af 91       	pop	r26
 88a:	9f 91       	pop	r25
 88c:	8f 91       	pop	r24
 88e:	7f 91       	pop	r23
 890:	6f 91       	pop	r22
 892:	5f 91       	pop	r21
 894:	4f 91       	pop	r20
 896:	3f 91       	pop	r19
 898:	2f 91       	pop	r18
 89a:	0f 90       	pop	r0
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	0f 90       	pop	r0
 8a0:	1f 90       	pop	r1
 8a2:	18 95       	reti

000008a4 <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 8a4:	1f 92       	push	r1
 8a6:	0f 92       	push	r0
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	0f 92       	push	r0
 8ac:	11 24       	eor	r1, r1
 8ae:	2f 93       	push	r18
 8b0:	3f 93       	push	r19
 8b2:	4f 93       	push	r20
 8b4:	5f 93       	push	r21
 8b6:	6f 93       	push	r22
 8b8:	7f 93       	push	r23
 8ba:	8f 93       	push	r24
 8bc:	9f 93       	push	r25
 8be:	af 93       	push	r26
 8c0:	bf 93       	push	r27
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	ef 93       	push	r30
 8c8:	ff 93       	push	r31
	Action_Timer[0]();
 8ca:	cb ec       	ldi	r28, 0xCB	; 203
 8cc:	d0 e0       	ldi	r29, 0x00	; 0
 8ce:	e8 81       	ld	r30, Y
 8d0:	f9 81       	ldd	r31, Y+1	; 0x01
 8d2:	09 95       	icall
	numOverflows++;
 8d4:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <numOverflows>
 8d8:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <numOverflows+0x1>
 8dc:	a0 91 d5 00 	lds	r26, 0x00D5	; 0x8000d5 <numOverflows+0x2>
 8e0:	b0 91 d6 00 	lds	r27, 0x00D6	; 0x8000d6 <numOverflows+0x3>
 8e4:	01 96       	adiw	r24, 0x01	; 1
 8e6:	a1 1d       	adc	r26, r1
 8e8:	b1 1d       	adc	r27, r1
 8ea:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <numOverflows>
 8ee:	90 93 d4 00 	sts	0x00D4, r25	; 0x8000d4 <numOverflows+0x1>
 8f2:	a0 93 d5 00 	sts	0x00D5, r26	; 0x8000d5 <numOverflows+0x2>
 8f6:	b0 93 d6 00 	sts	0x00D6, r27	; 0x8000d6 <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 8fa:	e8 81       	ld	r30, Y
 8fc:	f9 81       	ldd	r31, Y+1	; 0x01
 8fe:	30 97       	sbiw	r30, 0x00	; 0
 900:	49 f1       	breq	.+82     	; 0x954 <__vector_9+0xb0>
		counter++;
 902:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <counter.1744>
 906:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <counter.1744+0x1>
 90a:	a0 91 c9 00 	lds	r26, 0x00C9	; 0x8000c9 <counter.1744+0x2>
 90e:	b0 91 ca 00 	lds	r27, 0x00CA	; 0x8000ca <counter.1744+0x3>
 912:	01 96       	adiw	r24, 0x01	; 1
 914:	a1 1d       	adc	r26, r1
 916:	b1 1d       	adc	r27, r1
 918:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <counter.1744>
 91c:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <counter.1744+0x1>
 920:	a0 93 c9 00 	sts	0x00C9, r26	; 0x8000c9 <counter.1744+0x2>
 924:	b0 93 ca 00 	sts	0x00CA, r27	; 0x8000ca <counter.1744+0x3>
		if(counter == req_numOverflows){
 928:	40 91 d7 00 	lds	r20, 0x00D7	; 0x8000d7 <req_numOverflows>
 92c:	50 91 d8 00 	lds	r21, 0x00D8	; 0x8000d8 <req_numOverflows+0x1>
 930:	60 91 d9 00 	lds	r22, 0x00D9	; 0x8000d9 <req_numOverflows+0x2>
 934:	70 91 da 00 	lds	r23, 0x00DA	; 0x8000da <req_numOverflows+0x3>
 938:	84 17       	cp	r24, r20
 93a:	95 07       	cpc	r25, r21
 93c:	a6 07       	cpc	r26, r22
 93e:	b7 07       	cpc	r27, r23
 940:	49 f4       	brne	.+18     	; 0x954 <__vector_9+0xb0>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 942:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <counter.1744>
 946:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <counter.1744+0x1>
 94a:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <counter.1744+0x2>
 94e:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <counter.1744+0x3>
			Action_Timer[0]();
 952:	09 95       	icall
		}
		
	}
}
 954:	ff 91       	pop	r31
 956:	ef 91       	pop	r30
 958:	df 91       	pop	r29
 95a:	cf 91       	pop	r28
 95c:	bf 91       	pop	r27
 95e:	af 91       	pop	r26
 960:	9f 91       	pop	r25
 962:	8f 91       	pop	r24
 964:	7f 91       	pop	r23
 966:	6f 91       	pop	r22
 968:	5f 91       	pop	r21
 96a:	4f 91       	pop	r20
 96c:	3f 91       	pop	r19
 96e:	2f 91       	pop	r18
 970:	0f 90       	pop	r0
 972:	0f be       	out	0x3f, r0	; 63
 974:	0f 90       	pop	r0
 976:	1f 90       	pop	r1
 978:	18 95       	reti

0000097a <__vector_7>:

ISR(TIMER1_COMPA_vect){
 97a:	1f 92       	push	r1
 97c:	0f 92       	push	r0
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	0f 92       	push	r0
 982:	11 24       	eor	r1, r1
 984:	2f 93       	push	r18
 986:	3f 93       	push	r19
 988:	4f 93       	push	r20
 98a:	5f 93       	push	r21
 98c:	6f 93       	push	r22
 98e:	7f 93       	push	r23
 990:	8f 93       	push	r24
 992:	9f 93       	push	r25
 994:	af 93       	push	r26
 996:	bf 93       	push	r27
 998:	ef 93       	push	r30
 99a:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 99c:	e0 91 cd 00 	lds	r30, 0x00CD	; 0x8000cd <Action_Timer+0x2>
 9a0:	f0 91 ce 00 	lds	r31, 0x00CE	; 0x8000ce <Action_Timer+0x3>
 9a4:	30 97       	sbiw	r30, 0x00	; 0
 9a6:	09 f0       	breq	.+2      	; 0x9aa <__vector_7+0x30>
		Action_Timer[1]();
 9a8:	09 95       	icall
	}
}
 9aa:	ff 91       	pop	r31
 9ac:	ef 91       	pop	r30
 9ae:	bf 91       	pop	r27
 9b0:	af 91       	pop	r26
 9b2:	9f 91       	pop	r25
 9b4:	8f 91       	pop	r24
 9b6:	7f 91       	pop	r23
 9b8:	6f 91       	pop	r22
 9ba:	5f 91       	pop	r21
 9bc:	4f 91       	pop	r20
 9be:	3f 91       	pop	r19
 9c0:	2f 91       	pop	r18
 9c2:	0f 90       	pop	r0
 9c4:	0f be       	out	0x3f, r0	; 63
 9c6:	0f 90       	pop	r0
 9c8:	1f 90       	pop	r1
 9ca:	18 95       	reti

000009cc <__vector_6>:


ISR(TIMER1_CAPT_vect){
 9cc:	1f 92       	push	r1
 9ce:	0f 92       	push	r0
 9d0:	0f b6       	in	r0, 0x3f	; 63
 9d2:	0f 92       	push	r0
 9d4:	11 24       	eor	r1, r1
 9d6:	2f 93       	push	r18
 9d8:	3f 93       	push	r19
 9da:	4f 93       	push	r20
 9dc:	5f 93       	push	r21
 9de:	6f 93       	push	r22
 9e0:	7f 93       	push	r23
 9e2:	8f 93       	push	r24
 9e4:	9f 93       	push	r25
 9e6:	af 93       	push	r26
 9e8:	bf 93       	push	r27
 9ea:	ef 93       	push	r30
 9ec:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 9ee:	e0 91 d1 00 	lds	r30, 0x00D1	; 0x8000d1 <Action_Timer+0x6>
 9f2:	f0 91 d2 00 	lds	r31, 0x00D2	; 0x8000d2 <Action_Timer+0x7>
 9f6:	30 97       	sbiw	r30, 0x00	; 0
 9f8:	09 f0       	breq	.+2      	; 0x9fc <__vector_6+0x30>
			Action_Timer[3]();
 9fa:	09 95       	icall
			
			
		}
 9fc:	ff 91       	pop	r31
 9fe:	ef 91       	pop	r30
 a00:	bf 91       	pop	r27
 a02:	af 91       	pop	r26
 a04:	9f 91       	pop	r25
 a06:	8f 91       	pop	r24
 a08:	7f 91       	pop	r23
 a0a:	6f 91       	pop	r22
 a0c:	5f 91       	pop	r21
 a0e:	4f 91       	pop	r20
 a10:	3f 91       	pop	r19
 a12:	2f 91       	pop	r18
 a14:	0f 90       	pop	r0
 a16:	0f be       	out	0x3f, r0	; 63
 a18:	0f 90       	pop	r0
 a1a:	1f 90       	pop	r1
 a1c:	18 95       	reti

00000a1e <USART_Init>:

void UART_receiveByteAsynchCallBack(void (*ptrfn)(u8)) {
	// Enable UART receiver interrupt
	UCSRB |= (1 << RXCIE);
	//set callback
	Action_Uart[0] = ptrfn;
 a1e:	82 e0       	ldi	r24, 0x02	; 2
 a20:	8b b9       	out	0x0b, r24	; 11
 a22:	88 e1       	ldi	r24, 0x18	; 24
 a24:	8a b9       	out	0x0a, r24	; 10
 a26:	86 e8       	ldi	r24, 0x86	; 134
 a28:	80 bd       	out	0x20, r24	; 32
 a2a:	10 bc       	out	0x20, r1	; 32
 a2c:	81 e2       	ldi	r24, 0x21	; 33
 a2e:	89 b9       	out	0x09, r24	; 9
 a30:	08 95       	ret

00000a32 <UART_sendByte>:
 a32:	5d 9b       	sbis	0x0b, 5	; 11
 a34:	fe cf       	rjmp	.-4      	; 0xa32 <UART_sendByte>
 a36:	8c b9       	out	0x0c, r24	; 12
 a38:	08 95       	ret

00000a3a <__vector_13>:
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 a3a:	1f 92       	push	r1
 a3c:	0f 92       	push	r0
 a3e:	0f b6       	in	r0, 0x3f	; 63
 a40:	0f 92       	push	r0
 a42:	11 24       	eor	r1, r1
 a44:	2f 93       	push	r18
 a46:	3f 93       	push	r19
 a48:	4f 93       	push	r20
 a4a:	5f 93       	push	r21
 a4c:	6f 93       	push	r22
 a4e:	7f 93       	push	r23
 a50:	8f 93       	push	r24
 a52:	9f 93       	push	r25
 a54:	af 93       	push	r26
 a56:	bf 93       	push	r27
 a58:	ef 93       	push	r30
 a5a:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 a5c:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 a5e:	e0 91 db 00 	lds	r30, 0x00DB	; 0x8000db <Action_Uart>
 a62:	f0 91 dc 00 	lds	r31, 0x00DC	; 0x8000dc <Action_Uart+0x1>
 a66:	30 97       	sbiw	r30, 0x00	; 0
 a68:	09 f0       	breq	.+2      	; 0xa6c <__vector_13+0x32>
		Action_Uart[0](receivedData);
 a6a:	09 95       	icall
	}
 a6c:	ff 91       	pop	r31
 a6e:	ef 91       	pop	r30
 a70:	bf 91       	pop	r27
 a72:	af 91       	pop	r26
 a74:	9f 91       	pop	r25
 a76:	8f 91       	pop	r24
 a78:	7f 91       	pop	r23
 a7a:	6f 91       	pop	r22
 a7c:	5f 91       	pop	r21
 a7e:	4f 91       	pop	r20
 a80:	3f 91       	pop	r19
 a82:	2f 91       	pop	r18
 a84:	0f 90       	pop	r0
 a86:	0f be       	out	0x3f, r0	; 63
 a88:	0f 90       	pop	r0
 a8a:	1f 90       	pop	r1
 a8c:	18 95       	reti

00000a8e <__itoa_ncheck>:
 a8e:	bb 27       	eor	r27, r27
 a90:	4a 30       	cpi	r20, 0x0A	; 10
 a92:	31 f4       	brne	.+12     	; 0xaa0 <__itoa_ncheck+0x12>
 a94:	99 23       	and	r25, r25
 a96:	22 f4       	brpl	.+8      	; 0xaa0 <__itoa_ncheck+0x12>
 a98:	bd e2       	ldi	r27, 0x2D	; 45
 a9a:	90 95       	com	r25
 a9c:	81 95       	neg	r24
 a9e:	9f 4f       	sbci	r25, 0xFF	; 255
 aa0:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <__utoa_common>

00000aa4 <__utoa_ncheck>:
 aa4:	bb 27       	eor	r27, r27

00000aa6 <__utoa_common>:
 aa6:	fb 01       	movw	r30, r22
 aa8:	55 27       	eor	r21, r21
 aaa:	aa 27       	eor	r26, r26
 aac:	88 0f       	add	r24, r24
 aae:	99 1f       	adc	r25, r25
 ab0:	aa 1f       	adc	r26, r26
 ab2:	a4 17       	cp	r26, r20
 ab4:	10 f0       	brcs	.+4      	; 0xaba <__utoa_common+0x14>
 ab6:	a4 1b       	sub	r26, r20
 ab8:	83 95       	inc	r24
 aba:	50 51       	subi	r21, 0x10	; 16
 abc:	b9 f7       	brne	.-18     	; 0xaac <__utoa_common+0x6>
 abe:	a0 5d       	subi	r26, 0xD0	; 208
 ac0:	aa 33       	cpi	r26, 0x3A	; 58
 ac2:	08 f0       	brcs	.+2      	; 0xac6 <__utoa_common+0x20>
 ac4:	a9 5d       	subi	r26, 0xD9	; 217
 ac6:	a1 93       	st	Z+, r26
 ac8:	00 97       	sbiw	r24, 0x00	; 0
 aca:	79 f7       	brne	.-34     	; 0xaaa <__utoa_common+0x4>
 acc:	b1 11       	cpse	r27, r1
 ace:	b1 93       	st	Z+, r27
 ad0:	11 92       	st	Z+, r1
 ad2:	cb 01       	movw	r24, r22
 ad4:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <strrev>

00000ad8 <strrev>:
 ad8:	dc 01       	movw	r26, r24
 ada:	fc 01       	movw	r30, r24
 adc:	67 2f       	mov	r22, r23
 ade:	71 91       	ld	r23, Z+
 ae0:	77 23       	and	r23, r23
 ae2:	e1 f7       	brne	.-8      	; 0xadc <strrev+0x4>
 ae4:	32 97       	sbiw	r30, 0x02	; 2
 ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <strrev+0x18>
 ae8:	7c 91       	ld	r23, X
 aea:	6d 93       	st	X+, r22
 aec:	70 83       	st	Z, r23
 aee:	62 91       	ld	r22, -Z
 af0:	ae 17       	cp	r26, r30
 af2:	bf 07       	cpc	r27, r31
 af4:	c8 f3       	brcs	.-14     	; 0xae8 <strrev+0x10>
 af6:	08 95       	ret

00000af8 <_exit>:
 af8:	f8 94       	cli

00000afa <__stop_program>:
 afa:	ff cf       	rjmp	.-2      	; 0xafa <__stop_program>
