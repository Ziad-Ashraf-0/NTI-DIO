
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00000ac4  00000b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080010e  0080010e  00000c06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000236b  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9a  00000000  00000000  0000316f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001288  00000000  00000000  00003f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00005194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b63  00000000  00000000  000055d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017c9  00000000  00000000  0000613b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00007904  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_1>
   8:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__vector_2>
   c:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <__vector_3>
  10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  40:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_16>
  44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
  54:	30 01       	movw	r6, r0
  56:	4c 01       	movw	r8, r24
  58:	32 01       	movw	r6, r4
  5a:	34 01       	movw	r6, r8
  5c:	36 01       	movw	r6, r12
  5e:	38 01       	movw	r6, r16
  60:	3a 01       	movw	r6, r20
  62:	3c 01       	movw	r6, r24
  64:	3e 01       	movw	r6, r28
  66:	40 01       	movw	r8, r0
  68:	42 01       	movw	r8, r4
  6a:	44 01       	movw	r8, r8
  6c:	4d 01       	movw	r8, r26
  6e:	46 01       	movw	r8, r12
  70:	48 01       	movw	r8, r16
  72:	4a 01       	movw	r8, r20

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e4 ec       	ldi	r30, 0xC4	; 196
  88:	fa e0       	ldi	r31, 0x0A	; 10
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	ae 30       	cpi	r26, 0x0E	; 14
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	ae e0       	ldi	r26, 0x0E	; 14
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
  9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
  a0:	a6 31       	cpi	r26, 0x16	; 22
  a2:	b2 07       	cpc	r27, r18
  a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
  a6:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  aa:	0c 94 60 05 	jmp	0xac0	; 0xac0 <_exit>

000000ae <__bad_interrupt>:
  ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	83 ed       	ldi	r24, 0xD3	; 211
  b4:	90 e3       	ldi	r25, 0x30	; 48
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x4>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0xa>
  bc:	00 00       	nop

	// Define variables to store the user's input
	s32 enteredID = 0;
	s32 enteredPassword = 0;
	_delay_ms(50);
	H_LCD_void_Init();
  be:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <H_LCD_void_Init>
	//H_LCD_void_creatCustomChar(Character1,0);
	//H_LCD_void_displayCustomChar(0);
	
	
	// Display a message to enter the ID
	H_LCD_void_sendString("Enter ID: ");
  c2:	84 e9       	ldi	r24, 0x94	; 148
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 b2 03 	call	0x764	; 0x764 <H_LCD_void_sendString>

	// Get the user's input for ID using the keypad
	for (u8 i = 0; i < 4; i++) {
  ca:	c0 e0       	ldi	r28, 0x00	; 0


int main(void) {

	// Define variables to store the user's input
	s32 enteredID = 0;
  cc:	c1 2c       	mov	r12, r1
  ce:	d1 2c       	mov	r13, r1
  d0:	76 01       	movw	r14, r12
	
	// Display a message to enter the ID
	H_LCD_void_sendString("Enter ID: ");

	// Get the user's input for ID using the keypad
	for (u8 i = 0; i < 4; i++) {
  d2:	21 c0       	rjmp	.+66     	; 0x116 <main+0x64>
		u8 key = KEYPAD_getPressedKey();
  d4:	0e 94 4e 01 	call	0x29c	; 0x29c <KEYPAD_getPressedKey>
		H_LCD_void_sendIntNum(key);
  d8:	88 2e       	mov	r8, r24
  da:	91 2c       	mov	r9, r1
  dc:	a1 2c       	mov	r10, r1
  de:	b1 2c       	mov	r11, r1
  e0:	c5 01       	movw	r24, r10
  e2:	b4 01       	movw	r22, r8
  e4:	0e 94 c5 03 	call	0x78a	; 0x78a <H_LCD_void_sendIntNum>
		enteredID = enteredID * 10 + key;
  e8:	cc 0c       	add	r12, r12
  ea:	dd 1c       	adc	r13, r13
  ec:	ee 1c       	adc	r14, r14
  ee:	ff 1c       	adc	r15, r15
  f0:	d7 01       	movw	r26, r14
  f2:	c6 01       	movw	r24, r12
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	aa 1f       	adc	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	aa 1f       	adc	r26, r26
 102:	bb 1f       	adc	r27, r27
 104:	c8 0e       	add	r12, r24
 106:	d9 1e       	adc	r13, r25
 108:	ea 1e       	adc	r14, r26
 10a:	fb 1e       	adc	r15, r27
 10c:	c8 0c       	add	r12, r8
 10e:	d9 1c       	adc	r13, r9
 110:	ea 1c       	adc	r14, r10
 112:	fb 1c       	adc	r15, r11
	
	// Display a message to enter the ID
	H_LCD_void_sendString("Enter ID: ");

	// Get the user's input for ID using the keypad
	for (u8 i = 0; i < 4; i++) {
 114:	cf 5f       	subi	r28, 0xFF	; 255
 116:	c4 30       	cpi	r28, 0x04	; 4
 118:	e8 f2       	brcs	.-70     	; 0xd4 <main+0x22>
		u8 key = KEYPAD_getPressedKey();
		H_LCD_void_sendIntNum(key);
		enteredID = enteredID * 10 + key;
	}
	// Clear the LCD screen
	H_LCD_void_clearScreen();
 11a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <H_LCD_void_clearScreen>

	// Display a message to enter the password
	H_LCD_void_sendString("Enter Password: ");
 11e:	8f e9       	ldi	r24, 0x9F	; 159
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 b2 03 	call	0x764	; 0x764 <H_LCD_void_sendString>

	// Get the user's input for the password using the keypad and display '*' characters
	for (u8 i = 0; i < 4; i++) {
 126:	c0 e0       	ldi	r28, 0x00	; 0

int main(void) {

	// Define variables to store the user's input
	s32 enteredID = 0;
	s32 enteredPassword = 0;
 128:	81 2c       	mov	r8, r1
 12a:	91 2c       	mov	r9, r1
 12c:	54 01       	movw	r10, r8

	// Display a message to enter the password
	H_LCD_void_sendString("Enter Password: ");

	// Get the user's input for the password using the keypad and display '*' characters
	for (u8 i = 0; i < 4; i++) {
 12e:	1c c0       	rjmp	.+56     	; 0x168 <main+0xb6>
		u8 key = KEYPAD_getPressedKey();
 130:	0e 94 4e 01 	call	0x29c	; 0x29c <KEYPAD_getPressedKey>
		enteredPassword = enteredPassword * 10 + key;
 134:	88 0c       	add	r8, r8
 136:	99 1c       	adc	r9, r9
 138:	aa 1c       	adc	r10, r10
 13a:	bb 1c       	adc	r11, r11
 13c:	b5 01       	movw	r22, r10
 13e:	a4 01       	movw	r20, r8
 140:	44 0f       	add	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	66 1f       	adc	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	66 1f       	adc	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	84 0e       	add	r8, r20
 152:	95 1e       	adc	r9, r21
 154:	a6 1e       	adc	r10, r22
 156:	b7 1e       	adc	r11, r23
 158:	88 0e       	add	r8, r24
 15a:	91 1c       	adc	r9, r1
 15c:	a1 1c       	adc	r10, r1
 15e:	b1 1c       	adc	r11, r1
		H_LCD_void_sendData('*');
 160:	8a e2       	ldi	r24, 0x2A	; 42
 162:	0e 94 6f 03 	call	0x6de	; 0x6de <H_LCD_void_sendData>

	// Display a message to enter the password
	H_LCD_void_sendString("Enter Password: ");

	// Get the user's input for the password using the keypad and display '*' characters
	for (u8 i = 0; i < 4; i++) {
 166:	cf 5f       	subi	r28, 0xFF	; 255
 168:	c4 30       	cpi	r28, 0x04	; 4
 16a:	10 f3       	brcs	.-60     	; 0x130 <main+0x7e>
		u8 key = KEYPAD_getPressedKey();
		enteredPassword = enteredPassword * 10 + key;
		H_LCD_void_sendData('*');
	}
	
	H_LCD_void_clearScreen();
 16c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <H_LCD_void_clearScreen>
	// You can compare these values with the database as shown in the previous response.
	// The following code assumes that you have a database as mentioned earlier.

	int found = 0;
	u8 i;
	for (u8 i = 0; i < databaseSize; i++) {
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	23 c0       	rjmp	.+70     	; 0x1ba <main+0x108>
		if (enteredID == IDs[i] && enteredPassword == passwords[i]) {
 174:	82 2f       	mov	r24, r18
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	e2 51       	subi	r30, 0x12	; 18
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	40 81       	ld	r20, Z
 188:	51 81       	ldd	r21, Z+1	; 0x01
 18a:	62 81       	ldd	r22, Z+2	; 0x02
 18c:	73 81       	ldd	r23, Z+3	; 0x03
 18e:	c4 16       	cp	r12, r20
 190:	d5 06       	cpc	r13, r21
 192:	e6 06       	cpc	r14, r22
 194:	f7 06       	cpc	r15, r23
 196:	81 f4       	brne	.+32     	; 0x1b8 <main+0x106>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	fc 01       	movw	r30, r24
 1a2:	ea 51       	subi	r30, 0x1A	; 26
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	80 81       	ld	r24, Z
 1a8:	91 81       	ldd	r25, Z+1	; 0x01
 1aa:	a2 81       	ldd	r26, Z+2	; 0x02
 1ac:	b3 81       	ldd	r27, Z+3	; 0x03
 1ae:	88 16       	cp	r8, r24
 1b0:	99 06       	cpc	r9, r25
 1b2:	aa 06       	cpc	r10, r26
 1b4:	bb 06       	cpc	r11, r27
 1b6:	61 f0       	breq	.+24     	; 0x1d0 <main+0x11e>
	// You can compare these values with the database as shown in the previous response.
	// The following code assumes that you have a database as mentioned earlier.

	int found = 0;
	u8 i;
	for (u8 i = 0; i < databaseSize; i++) {
 1b8:	2f 5f       	subi	r18, 0xFF	; 255
 1ba:	82 2f       	mov	r24, r18
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	a0 e0       	ldi	r26, 0x00	; 0
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	02 97       	sbiw	r24, 0x02	; 2
 1c4:	a1 05       	cpc	r26, r1
 1c6:	b1 05       	cpc	r27, r1
 1c8:	ac f2       	brlt	.-86     	; 0x174 <main+0xc2>
	
	// At this point, 'enteredID' and 'enteredPassword' variables hold the user's input.
	// You can compare these values with the database as shown in the previous response.
	// The following code assumes that you have a database as mentioned earlier.

	int found = 0;
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <main+0x122>
	u8 i;
	for (u8 i = 0; i < databaseSize; i++) {
		if (enteredID == IDs[i] && enteredPassword == passwords[i]) {
			found = 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}

	// Display appropriate messages based on the comparison results
	if (found) {
 1d4:	89 2b       	or	r24, r25
 1d6:	f1 f0       	breq	.+60     	; 0x214 <main+0x162>
		H_LCD_void_sendString("Welcome, ");
 1d8:	80 eb       	ldi	r24, 0xB0	; 176
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 b2 03 	call	0x764	; 0x764 <H_LCD_void_sendString>
		H_LCD_void_sendString(names[i]);
 1e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e8:	0e 94 b2 03 	call	0x764	; 0x764 <H_LCD_void_sendString>
 1ec:	2d c0       	rjmp	.+90     	; 0x248 <main+0x196>
		} else {
		// Check if the ID is incorrect
		int incorrectID = 1;
		for (u8 i = 0; i < databaseSize; i++) {
			if (enteredID == IDs[i]) {
 1ee:	e8 2f       	mov	r30, r24
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	e2 51       	subi	r30, 0x12	; 18
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	40 81       	ld	r20, Z
 200:	51 81       	ldd	r21, Z+1	; 0x01
 202:	62 81       	ldd	r22, Z+2	; 0x02
 204:	73 81       	ldd	r23, Z+3	; 0x03
 206:	c4 16       	cp	r12, r20
 208:	d5 06       	cpc	r13, r21
 20a:	e6 06       	cpc	r14, r22
 20c:	f7 06       	cpc	r15, r23
 20e:	79 f0       	breq	.+30     	; 0x22e <main+0x17c>
		H_LCD_void_sendString("Welcome, ");
		H_LCD_void_sendString(names[i]);
		} else {
		// Check if the ID is incorrect
		int incorrectID = 1;
		for (u8 i = 0; i < databaseSize; i++) {
 210:	8f 5f       	subi	r24, 0xFF	; 255
 212:	01 c0       	rjmp	.+2      	; 0x216 <main+0x164>
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	48 2f       	mov	r20, r24
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	42 30       	cpi	r20, 0x02	; 2
 220:	51 05       	cpc	r21, r1
 222:	61 05       	cpc	r22, r1
 224:	71 05       	cpc	r23, r1
 226:	1c f3       	brlt	.-58     	; 0x1ee <main+0x13c>
	if (found) {
		H_LCD_void_sendString("Welcome, ");
		H_LCD_void_sendString(names[i]);
		} else {
		// Check if the ID is incorrect
		int incorrectID = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <main+0x180>
		for (u8 i = 0; i < databaseSize; i++) {
			if (enteredID == IDs[i]) {
				incorrectID = 0;
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
				break;
			}
		}

		if (incorrectID) {
 232:	89 2b       	or	r24, r25
 234:	29 f0       	breq	.+10     	; 0x240 <main+0x18e>
			H_LCD_void_sendString("Wrong ID");
 236:	8a eb       	ldi	r24, 0xBA	; 186
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 b2 03 	call	0x764	; 0x764 <H_LCD_void_sendString>
 23e:	04 c0       	rjmp	.+8      	; 0x248 <main+0x196>
			} else {
			H_LCD_void_sendString("Wrong Password");
 240:	83 ec       	ldi	r24, 0xC3	; 195
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 b2 03 	call	0x764	; 0x764 <H_LCD_void_sendString>
 248:	ff cf       	rjmp	.-2      	; 0x248 <main+0x196>

0000024a <KEYPAD_4x4_adjustKeyNumber>:
* Update the keypad pressed button value with the correct one in keypad 4x4 shape
*/
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number)
{
	u8 keypad_button = 0;
	switch(button_number)
 24a:	48 2f       	mov	r20, r24
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	fa 01       	movw	r30, r20
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	e0 31       	cpi	r30, 0x10	; 16
 254:	f1 05       	cpc	r31, r1
 256:	08 f5       	brcc	.+66     	; 0x29a <KEYPAD_4x4_adjustKeyNumber+0x50>
 258:	e6 5d       	subi	r30, 0xD6	; 214
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__tablejump2__>
	{
		case 1: keypad_button = 7;
 260:	87 e0       	ldi	r24, 0x07	; 7
 262:	08 95       	ret
		break;
		case 2: keypad_button = 8;
		break;
		case 3: keypad_button = 9;
 264:	89 e0       	ldi	r24, 0x09	; 9
		break;
 266:	08 95       	ret
		case 4: keypad_button = '%'; // ASCII Code of %
 268:	85 e2       	ldi	r24, 0x25	; 37
		break;
 26a:	08 95       	ret
		case 5: keypad_button = 4;
 26c:	84 e0       	ldi	r24, 0x04	; 4
		break;
 26e:	08 95       	ret
		case 6: keypad_button = 5;
 270:	85 e0       	ldi	r24, 0x05	; 5
		break;
 272:	08 95       	ret
		case 7: keypad_button = 6;
 274:	86 e0       	ldi	r24, 0x06	; 6
		break;
 276:	08 95       	ret
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
 278:	8a e2       	ldi	r24, 0x2A	; 42
		break;
 27a:	08 95       	ret
		case 9: keypad_button = 1;
 27c:	81 e0       	ldi	r24, 0x01	; 1
		break;
 27e:	08 95       	ret
		case 10: keypad_button = 2;
 280:	82 e0       	ldi	r24, 0x02	; 2
		break;
 282:	08 95       	ret
		case 11: keypad_button = 3;
 284:	83 e0       	ldi	r24, 0x03	; 3
		break;
 286:	08 95       	ret
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
 288:	8d e2       	ldi	r24, 0x2D	; 45
		break;
 28a:	08 95       	ret
		case 13: keypad_button = 13;  /* ASCII of Enter */
		break;
		case 14: keypad_button = 0;
 28c:	80 e0       	ldi	r24, 0x00	; 0
		break;
 28e:	08 95       	ret
		case 15: keypad_button = '='; /* ASCII Code of '=' */
 290:	8d e3       	ldi	r24, 0x3D	; 61
		break;
 292:	08 95       	ret
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
 294:	8b e2       	ldi	r24, 0x2B	; 43
		break;
 296:	08 95       	ret
	u8 keypad_button = 0;
	switch(button_number)
	{
		case 1: keypad_button = 7;
		break;
		case 2: keypad_button = 8;
 298:	88 e0       	ldi	r24, 0x08	; 8
		break;
		default: keypad_button = button_number;
		break;
	}
	return keypad_button;
}
 29a:	08 95       	ret

0000029c <KEYPAD_getPressedKey>:
* its corresponding functional number for 4x4 keypad
*/
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number);


u8 KEYPAD_getPressedKey(){
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	a1 97       	sbiw	r28, 0x21	; 33
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
	u8 col,row;
	DIO_Config colPins[] = {
 2c0:	80 e1       	ldi	r24, 0x10	; 16
 2c2:	e4 e6       	ldi	r30, 0x64	; 100
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	de 01       	movw	r26, r28
 2c8:	11 96       	adiw	r26, 0x01	; 1
 2ca:	01 90       	ld	r0, Z+
 2cc:	0d 92       	st	X+, r0
 2ce:	8a 95       	dec	r24
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <KEYPAD_getPressedKey+0x2e>
		{DIO_PORTD, DIO_PIN6, DIO_PIN_INPUT,DIO_PIN_HIGH},
		{DIO_PORTD, DIO_PIN5, DIO_PIN_INPUT,DIO_PIN_HIGH},
		{DIO_PORTD, DIO_PIN3, DIO_PIN_INPUT,DIO_PIN_HIGH},
	};

	DIO_Config rowPins[] = {
 2d2:	fe 01       	movw	r30, r28
 2d4:	71 96       	adiw	r30, 0x11	; 17
 2d6:	80 e1       	ldi	r24, 0x10	; 16
 2d8:	df 01       	movw	r26, r30
 2da:	1d 92       	st	X+, r1
 2dc:	8a 95       	dec	r24
 2de:	e9 f7       	brne	.-6      	; 0x2da <KEYPAD_getPressedKey+0x3e>
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	89 8b       	std	Y+17, r24	; 0x11
 2e4:	95 e0       	ldi	r25, 0x05	; 5
 2e6:	9a 8b       	std	Y+18, r25	; 0x12
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	9b 8b       	std	Y+19, r25	; 0x13
 2ec:	8d 8b       	std	Y+21, r24	; 0x15
 2ee:	24 e0       	ldi	r18, 0x04	; 4
 2f0:	2e 8b       	std	Y+22, r18	; 0x16
 2f2:	9f 8b       	std	Y+23, r25	; 0x17
 2f4:	89 8f       	std	Y+25, r24	; 0x19
 2f6:	23 e0       	ldi	r18, 0x03	; 3
 2f8:	2a 8f       	std	Y+26, r18	; 0x1a
 2fa:	9b 8f       	std	Y+27, r25	; 0x1b
 2fc:	8d 8f       	std	Y+29, r24	; 0x1d
 2fe:	8e 8f       	std	Y+30, r24	; 0x1e
 300:	9f 8f       	std	Y+31, r25	; 0x1f
		{DIO_PORTC, DIO_PIN3, DIO_PIN_OUTPUT},
		{DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT}
	};

	// Initialize the keypad pins
	for (u8 i = 0; i < 4; i++) {
 302:	d1 2c       	mov	r13, r1
 304:	1b c0       	rjmp	.+54     	; 0x33c <KEYPAD_getPressedKey+0xa0>
		DIO_U8SetPinDirection(&colPins[i]);
 306:	ed 2c       	mov	r14, r13
 308:	f1 2c       	mov	r15, r1
 30a:	ee 0c       	add	r14, r14
 30c:	ff 1c       	adc	r15, r15
 30e:	ee 0c       	add	r14, r14
 310:	ff 1c       	adc	r15, r15
 312:	01 e0       	ldi	r16, 0x01	; 1
 314:	10 e0       	ldi	r17, 0x00	; 0
 316:	0c 0f       	add	r16, r28
 318:	1d 1f       	adc	r17, r29
 31a:	0e 0d       	add	r16, r14
 31c:	1f 1d       	adc	r17, r15
 31e:	c8 01       	movw	r24, r16
 320:	0e 94 01 04 	call	0x802	; 0x802 <DIO_U8SetPinDirection>
		DIO_U8SetPinDirection(&rowPins[i]);
 324:	81 e1       	ldi	r24, 0x11	; 17
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	8c 0f       	add	r24, r28
 32a:	9d 1f       	adc	r25, r29
 32c:	8e 0d       	add	r24, r14
 32e:	9f 1d       	adc	r25, r15
 330:	0e 94 01 04 	call	0x802	; 0x802 <DIO_U8SetPinDirection>
		DIO_U8SetPinValue(&colPins[i]);
 334:	c8 01       	movw	r24, r16
 336:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_U8SetPinValue>
		{DIO_PORTC, DIO_PIN3, DIO_PIN_OUTPUT},
		{DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT}
	};

	// Initialize the keypad pins
	for (u8 i = 0; i < 4; i++) {
 33a:	d3 94       	inc	r13
 33c:	b3 e0       	ldi	r27, 0x03	; 3
 33e:	bd 15       	cp	r27, r13
 340:	10 f7       	brcc	.-60     	; 0x306 <KEYPAD_getPressedKey+0x6a>
	}

	while(1)
	{
		/*for loop to scan all keypad columns*/
		for (row = 0 ; row < 4 ; row++)
 342:	e1 2c       	mov	r14, r1
 344:	54 c0       	rjmp	.+168    	; 0x3ee <KEYPAD_getPressedKey+0x152>
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
 346:	ce 2c       	mov	r12, r14
 348:	d1 2c       	mov	r13, r1
 34a:	56 01       	movw	r10, r12
 34c:	aa 0c       	add	r10, r10
 34e:	bb 1c       	adc	r11, r11
 350:	aa 0c       	add	r10, r10
 352:	bb 1c       	adc	r11, r11
 354:	e1 e0       	ldi	r30, 0x01	; 1
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	ec 0f       	add	r30, r28
 35a:	fd 1f       	adc	r31, r29
 35c:	ea 0d       	add	r30, r10
 35e:	fb 1d       	adc	r31, r11
 360:	13 8a       	std	Z+19, r1	; 0x13
			DIO_U8SetPinValue(&rowPins[row]);
 362:	81 e1       	ldi	r24, 0x11	; 17
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	8c 0f       	add	r24, r28
 368:	9d 1f       	adc	r25, r29
 36a:	a8 0e       	add	r10, r24
 36c:	b9 1e       	adc	r11, r25
 36e:	c5 01       	movw	r24, r10
 370:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_U8SetPinValue>
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 374:	f1 2c       	mov	r15, r1
 376:	28 c0       	rjmp	.+80     	; 0x3c8 <KEYPAD_getPressedKey+0x12c>
			{
				u8 key;
				DIO_U8GetPinValue(&colPins[col], &key);
 378:	0f 2d       	mov	r16, r15
 37a:	10 e0       	ldi	r17, 0x00	; 0
 37c:	00 0f       	add	r16, r16
 37e:	11 1f       	adc	r17, r17
 380:	00 0f       	add	r16, r16
 382:	11 1f       	adc	r17, r17
 384:	a1 e0       	ldi	r26, 0x01	; 1
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	ac 0f       	add	r26, r28
 38a:	bd 1f       	adc	r27, r29
 38c:	0a 0f       	add	r16, r26
 38e:	1b 1f       	adc	r17, r27
 390:	be 01       	movw	r22, r28
 392:	6f 5d       	subi	r22, 0xDF	; 223
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	c8 01       	movw	r24, r16
 398:	0e 94 81 04 	call	0x902	; 0x902 <DIO_U8GetPinValue>
				/*check current row pin value*/
				if ( DIO_PIN_LOW == key )
 39c:	99 a1       	ldd	r25, Y+33	; 0x21
 39e:	91 11       	cpse	r25, r1
 3a0:	12 c0       	rjmp	.+36     	; 0x3c6 <KEYPAD_getPressedKey+0x12a>
 3a2:	06 c0       	rjmp	.+12     	; 0x3b0 <KEYPAD_getPressedKey+0x114>
				{
					/*return pressed button value*/
					while(key != DIO_PIN_HIGH){
						DIO_U8GetPinValue(&colPins[col], &key);
 3a4:	be 01       	movw	r22, r28
 3a6:	6f 5d       	subi	r22, 0xDF	; 223
 3a8:	7f 4f       	sbci	r23, 0xFF	; 255
 3aa:	c8 01       	movw	r24, r16
 3ac:	0e 94 81 04 	call	0x902	; 0x902 <DIO_U8GetPinValue>
				DIO_U8GetPinValue(&colPins[col], &key);
				/*check current row pin value*/
				if ( DIO_PIN_LOW == key )
				{
					/*return pressed button value*/
					while(key != DIO_PIN_HIGH){
 3b0:	89 a1       	ldd	r24, Y+33	; 0x21
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	b9 f7       	brne	.-18     	; 0x3a4 <KEYPAD_getPressedKey+0x108>
						DIO_U8GetPinValue(&colPins[col], &key);
					}
					return KEYPAD_4x4_adjustKeyNumber((col*KEYPAD_NUM_COLS)+row+1);
 3b6:	ff 0c       	add	r15, r15
 3b8:	ff 0c       	add	r15, r15
 3ba:	8f 2d       	mov	r24, r15
 3bc:	8e 0d       	add	r24, r14
 3be:	8f 5f       	subi	r24, 0xFF	; 255
 3c0:	0e 94 25 01 	call	0x24a	; 0x24a <KEYPAD_4x4_adjustKeyNumber>
 3c4:	19 c0       	rjmp	.+50     	; 0x3f8 <KEYPAD_getPressedKey+0x15c>
		{
			/*set current row pin low to test all col pins to find out which button has been pressed*/
			rowPins[row].value = DIO_PIN_LOW;
			DIO_U8SetPinValue(&rowPins[row]);
			/*for loop to scan and test all keypad row pins*/
			for (col = 0 ; col < 4 ; col++)
 3c6:	f3 94       	inc	r15
 3c8:	b3 e0       	ldi	r27, 0x03	; 3
 3ca:	bf 15       	cp	r27, r15
 3cc:	a8 f6       	brcc	.-86     	; 0x378 <KEYPAD_getPressedKey+0xdc>
					return KEYPAD_4x4_adjustKeyNumber((col*KEYPAD_NUM_COLS)+row+1);
				}
				/*end of for loop*/
			}
			/*set current column pin HIGH again*/
			rowPins[row].value = DIO_PIN_HIGH;
 3ce:	cc 0c       	add	r12, r12
 3d0:	dd 1c       	adc	r13, r13
 3d2:	cc 0c       	add	r12, r12
 3d4:	dd 1c       	adc	r13, r13
 3d6:	e1 e0       	ldi	r30, 0x01	; 1
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	ec 0f       	add	r30, r28
 3dc:	fd 1f       	adc	r31, r29
 3de:	ec 0d       	add	r30, r12
 3e0:	fd 1d       	adc	r31, r13
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	83 8b       	std	Z+19, r24	; 0x13
			DIO_U8SetPinValue(&rowPins[row]);
 3e6:	c5 01       	movw	r24, r10
 3e8:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_U8SetPinValue>
	}

	while(1)
	{
		/*for loop to scan all keypad columns*/
		for (row = 0 ; row < 4 ; row++)
 3ec:	e3 94       	inc	r14
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	8e 15       	cp	r24, r14
 3f2:	08 f0       	brcs	.+2      	; 0x3f6 <KEYPAD_getPressedKey+0x15a>
 3f4:	a8 cf       	rjmp	.-176    	; 0x346 <KEYPAD_getPressedKey+0xaa>
 3f6:	a5 cf       	rjmp	.-182    	; 0x342 <KEYPAD_getPressedKey+0xa6>

		}
		/*end of for loop*/

	}
}
 3f8:	a1 96       	adiw	r28, 0x21	; 33
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	bf 90       	pop	r11
 416:	af 90       	pop	r10
 418:	08 95       	ret

0000041a <H_LCD_void_latchByte>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode){

	H_LCD_void_sendCommand(0xc0);
	H_LCD_void_sendData(copy_u8charCode);

}
 41a:	0f 93       	push	r16
 41c:	1f 93       	push	r17
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
 426:	64 97       	sbiw	r28, 0x14	; 20
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	f8 94       	cli
 42c:	de bf       	out	0x3e, r29	; 62
 42e:	0f be       	out	0x3f, r0	; 63
 430:	cd bf       	out	0x3d, r28	; 61
 432:	08 2f       	mov	r16, r24
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	89 83       	std	Y+1, r24	; 0x01
 438:	1a 82       	std	Y+2, r1	; 0x02
 43a:	8b 83       	std	Y+3, r24	; 0x03
 43c:	04 fb       	bst	r16, 4
 43e:	99 27       	eor	r25, r25
 440:	90 f9       	bld	r25, 0
 442:	9c 83       	std	Y+4, r25	; 0x04
 444:	8d 83       	std	Y+5, r24	; 0x05
 446:	8e 83       	std	Y+6, r24	; 0x06
 448:	8f 83       	std	Y+7, r24	; 0x07
 44a:	05 fb       	bst	r16, 5
 44c:	99 27       	eor	r25, r25
 44e:	90 f9       	bld	r25, 0
 450:	98 87       	std	Y+8, r25	; 0x08
 452:	89 87       	std	Y+9, r24	; 0x09
 454:	92 e0       	ldi	r25, 0x02	; 2
 456:	9a 87       	std	Y+10, r25	; 0x0a
 458:	8b 87       	std	Y+11, r24	; 0x0b
 45a:	06 fb       	bst	r16, 6
 45c:	99 27       	eor	r25, r25
 45e:	90 f9       	bld	r25, 0
 460:	9c 87       	std	Y+12, r25	; 0x0c
 462:	8d 87       	std	Y+13, r24	; 0x0d
 464:	94 e0       	ldi	r25, 0x04	; 4
 466:	9e 87       	std	Y+14, r25	; 0x0e
 468:	8f 87       	std	Y+15, r24	; 0x0f
 46a:	80 2f       	mov	r24, r16
 46c:	88 1f       	adc	r24, r24
 46e:	88 27       	eor	r24, r24
 470:	88 1f       	adc	r24, r24
 472:	88 8b       	std	Y+16, r24	; 0x10
 474:	10 e0       	ldi	r17, 0x00	; 0
 476:	0f c0       	rjmp	.+30     	; 0x496 <H_LCD_void_latchByte+0x7c>
 478:	81 2f       	mov	r24, r17
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	2c 0f       	add	r18, r28
 48a:	3d 1f       	adc	r19, r29
 48c:	82 0f       	add	r24, r18
 48e:	93 1f       	adc	r25, r19
 490:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_U8SetPinValue>
 494:	1f 5f       	subi	r17, 0xFF	; 255
 496:	14 30       	cpi	r17, 0x04	; 4
 498:	78 f3       	brcs	.-34     	; 0x478 <H_LCD_void_latchByte+0x5e>
 49a:	19 8a       	std	Y+17, r1	; 0x11
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	8a 8b       	std	Y+18, r24	; 0x12
 4a0:	1c 8a       	std	Y+20, r1	; 0x14
 4a2:	89 ef       	ldi	r24, 0xF9	; 249
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <H_LCD_void_latchByte+0x8c>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <H_LCD_void_latchByte+0x92>
 4ac:	00 00       	nop
 4ae:	ce 01       	movw	r24, r28
 4b0:	41 96       	adiw	r24, 0x11	; 17
 4b2:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_U8SetPinValue>
 4b6:	e9 ef       	ldi	r30, 0xF9	; 249
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	31 97       	sbiw	r30, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <H_LCD_void_latchByte+0xa0>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <H_LCD_void_latchByte+0xa6>
 4c0:	00 00       	nop
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	8c 8b       	std	Y+20, r24	; 0x14
 4c6:	ce 01       	movw	r24, r28
 4c8:	41 96       	adiw	r24, 0x11	; 17
 4ca:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_U8SetPinValue>
 4ce:	89 ef       	ldi	r24, 0xF9	; 249
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <H_LCD_void_latchByte+0xb8>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <H_LCD_void_latchByte+0xbe>
 4d8:	00 00       	nop
 4da:	10 e0       	ldi	r17, 0x00	; 0
 4dc:	1a c0       	rjmp	.+52     	; 0x512 <H_LCD_void_latchByte+0xf8>
 4de:	81 2f       	mov	r24, r17
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	20 2f       	mov	r18, r16
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	01 2e       	mov	r0, r17
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <H_LCD_void_latchByte+0xd4>
 4ea:	35 95       	asr	r19
 4ec:	27 95       	ror	r18
 4ee:	0a 94       	dec	r0
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <H_LCD_void_latchByte+0xd0>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	e1 e0       	ldi	r30, 0x01	; 1
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	ec 0f       	add	r30, r28
 500:	fd 1f       	adc	r31, r29
 502:	8e 0f       	add	r24, r30
 504:	9f 1f       	adc	r25, r31
 506:	21 70       	andi	r18, 0x01	; 1
 508:	fc 01       	movw	r30, r24
 50a:	23 83       	std	Z+3, r18	; 0x03
 50c:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_U8SetPinValue>
 510:	1f 5f       	subi	r17, 0xFF	; 255
 512:	14 30       	cpi	r17, 0x04	; 4
 514:	20 f3       	brcs	.-56     	; 0x4de <H_LCD_void_latchByte+0xc4>
 516:	89 ef       	ldi	r24, 0xF9	; 249
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <H_LCD_void_latchByte+0x100>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <H_LCD_void_latchByte+0x106>
 520:	00 00       	nop
 522:	1c 8a       	std	Y+20, r1	; 0x14
 524:	ce 01       	movw	r24, r28
 526:	41 96       	adiw	r24, 0x11	; 17
 528:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_U8SetPinValue>
 52c:	e9 ef       	ldi	r30, 0xF9	; 249
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	31 97       	sbiw	r30, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <H_LCD_void_latchByte+0x116>
 534:	00 c0       	rjmp	.+0      	; 0x536 <H_LCD_void_latchByte+0x11c>
 536:	00 00       	nop
 538:	64 96       	adiw	r28, 0x14	; 20
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	f8 94       	cli
 53e:	de bf       	out	0x3e, r29	; 62
 540:	0f be       	out	0x3f, r0	; 63
 542:	cd bf       	out	0x3d, r28	; 61
 544:	df 91       	pop	r29
 546:	cf 91       	pop	r28
 548:	1f 91       	pop	r17
 54a:	0f 91       	pop	r16
 54c:	08 95       	ret

0000054e <H_LCD_void_sendCommand>:
 54e:	0f 93       	push	r16
 550:	1f 93       	push	r17
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	28 97       	sbiw	r28, 0x08	; 8
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	f8 94       	cli
 560:	de bf       	out	0x3e, r29	; 62
 562:	0f be       	out	0x3f, r0	; 63
 564:	cd bf       	out	0x3d, r28	; 61
 566:	08 2f       	mov	r16, r24
 568:	88 e0       	ldi	r24, 0x08	; 8
 56a:	e4 e7       	ldi	r30, 0x74	; 116
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	de 01       	movw	r26, r28
 570:	11 96       	adiw	r26, 0x01	; 1
 572:	01 90       	ld	r0, Z+
 574:	0d 92       	st	X+, r0
 576:	8a 95       	dec	r24
 578:	e1 f7       	brne	.-8      	; 0x572 <H_LCD_void_sendCommand+0x24>
 57a:	10 e0       	ldi	r17, 0x00	; 0
 57c:	15 c0       	rjmp	.+42     	; 0x5a8 <H_LCD_void_sendCommand+0x5a>
 57e:	81 2f       	mov	r24, r17
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	2c 0f       	add	r18, r28
 590:	3d 1f       	adc	r19, r29
 592:	82 0f       	add	r24, r18
 594:	93 1f       	adc	r25, r19
 596:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_U8SetPinValue>
 59a:	89 ef       	ldi	r24, 0xF9	; 249
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	f1 f7       	brne	.-4      	; 0x59e <H_LCD_void_sendCommand+0x50>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <H_LCD_void_sendCommand+0x56>
 5a4:	00 00       	nop
 5a6:	1f 5f       	subi	r17, 0xFF	; 255
 5a8:	12 30       	cpi	r17, 0x02	; 2
 5aa:	48 f3       	brcs	.-46     	; 0x57e <H_LCD_void_sendCommand+0x30>
 5ac:	89 ef       	ldi	r24, 0xF9	; 249
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <H_LCD_void_sendCommand+0x62>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <H_LCD_void_sendCommand+0x68>
 5b6:	00 00       	nop
 5b8:	80 2f       	mov	r24, r16
 5ba:	0e 94 0d 02 	call	0x41a	; 0x41a <H_LCD_void_latchByte>
 5be:	28 96       	adiw	r28, 0x08	; 8
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	08 95       	ret

000005d4 <H_LCD_void_Init>:
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	68 97       	sbiw	r28, 0x18	; 24
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	fe 01       	movw	r30, r28
 5ec:	31 96       	adiw	r30, 0x01	; 1
 5ee:	88 e0       	ldi	r24, 0x08	; 8
 5f0:	df 01       	movw	r26, r30
 5f2:	1d 92       	st	X+, r1
 5f4:	8a 95       	dec	r24
 5f6:	e9 f7       	brne	.-6      	; 0x5f2 <H_LCD_void_Init+0x1e>
 5f8:	83 e0       	ldi	r24, 0x03	; 3
 5fa:	8a 83       	std	Y+2, r24	; 0x02
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	8b 83       	std	Y+3, r24	; 0x03
 600:	92 e0       	ldi	r25, 0x02	; 2
 602:	9e 83       	std	Y+6, r25	; 0x06
 604:	8f 83       	std	Y+7, r24	; 0x07
 606:	10 e0       	ldi	r17, 0x00	; 0
 608:	0f c0       	rjmp	.+30     	; 0x628 <H_LCD_void_Init+0x54>
 60a:	81 2f       	mov	r24, r17
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	88 0f       	add	r24, r24
 610:	99 1f       	adc	r25, r25
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	2c 0f       	add	r18, r28
 61c:	3d 1f       	adc	r19, r29
 61e:	82 0f       	add	r24, r18
 620:	93 1f       	adc	r25, r19
 622:	0e 94 01 04 	call	0x802	; 0x802 <DIO_U8SetPinDirection>
 626:	1f 5f       	subi	r17, 0xFF	; 255
 628:	12 30       	cpi	r17, 0x02	; 2
 62a:	78 f3       	brcs	.-34     	; 0x60a <H_LCD_void_Init+0x36>
 62c:	fe 01       	movw	r30, r28
 62e:	39 96       	adiw	r30, 0x09	; 9
 630:	80 e1       	ldi	r24, 0x10	; 16
 632:	df 01       	movw	r26, r30
 634:	1d 92       	st	X+, r1
 636:	8a 95       	dec	r24
 638:	e9 f7       	brne	.-6      	; 0x634 <H_LCD_void_Init+0x60>
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	89 87       	std	Y+9, r24	; 0x09
 63e:	8b 87       	std	Y+11, r24	; 0x0b
 640:	8d 87       	std	Y+13, r24	; 0x0d
 642:	8e 87       	std	Y+14, r24	; 0x0e
 644:	8f 87       	std	Y+15, r24	; 0x0f
 646:	89 8b       	std	Y+17, r24	; 0x11
 648:	92 e0       	ldi	r25, 0x02	; 2
 64a:	9a 8b       	std	Y+18, r25	; 0x12
 64c:	8b 8b       	std	Y+19, r24	; 0x13
 64e:	8d 8b       	std	Y+21, r24	; 0x15
 650:	94 e0       	ldi	r25, 0x04	; 4
 652:	9e 8b       	std	Y+22, r25	; 0x16
 654:	8f 8b       	std	Y+23, r24	; 0x17
 656:	10 e0       	ldi	r17, 0x00	; 0
 658:	0f c0       	rjmp	.+30     	; 0x678 <H_LCD_void_Init+0xa4>
 65a:	81 2f       	mov	r24, r17
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	29 e0       	ldi	r18, 0x09	; 9
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	2c 0f       	add	r18, r28
 66c:	3d 1f       	adc	r19, r29
 66e:	82 0f       	add	r24, r18
 670:	93 1f       	adc	r25, r19
 672:	0e 94 01 04 	call	0x802	; 0x802 <DIO_U8SetPinDirection>
 676:	1f 5f       	subi	r17, 0xFF	; 255
 678:	14 30       	cpi	r17, 0x04	; 4
 67a:	78 f3       	brcs	.-34     	; 0x65a <H_LCD_void_Init+0x86>
 67c:	82 e0       	ldi	r24, 0x02	; 2
 67e:	0e 94 a7 02 	call	0x54e	; 0x54e <H_LCD_void_sendCommand>
 682:	89 ef       	ldi	r24, 0xF9	; 249
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	f1 f7       	brne	.-4      	; 0x686 <H_LCD_void_Init+0xb2>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <H_LCD_void_Init+0xb8>
 68c:	00 00       	nop
 68e:	88 e2       	ldi	r24, 0x28	; 40
 690:	0e 94 a7 02 	call	0x54e	; 0x54e <H_LCD_void_sendCommand>
 694:	a9 ef       	ldi	r26, 0xF9	; 249
 696:	b0 e0       	ldi	r27, 0x00	; 0
 698:	11 97       	sbiw	r26, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <H_LCD_void_Init+0xc4>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <H_LCD_void_Init+0xca>
 69e:	00 00       	nop
 6a0:	8f e0       	ldi	r24, 0x0F	; 15
 6a2:	0e 94 a7 02 	call	0x54e	; 0x54e <H_LCD_void_sendCommand>
 6a6:	89 ef       	ldi	r24, 0xF9	; 249
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <H_LCD_void_Init+0xd6>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <H_LCD_void_Init+0xdc>
 6b0:	00 00       	nop
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	0e 94 a7 02 	call	0x54e	; 0x54e <H_LCD_void_sendCommand>
 6b8:	a3 ef       	ldi	r26, 0xF3	; 243
 6ba:	b1 e0       	ldi	r27, 0x01	; 1
 6bc:	11 97       	sbiw	r26, 0x01	; 1
 6be:	f1 f7       	brne	.-4      	; 0x6bc <H_LCD_void_Init+0xe8>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <H_LCD_void_Init+0xee>
 6c2:	00 00       	nop
 6c4:	86 e0       	ldi	r24, 0x06	; 6
 6c6:	0e 94 a7 02 	call	0x54e	; 0x54e <H_LCD_void_sendCommand>
 6ca:	68 96       	adiw	r28, 0x18	; 24
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	f8 94       	cli
 6d0:	de bf       	out	0x3e, r29	; 62
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	cd bf       	out	0x3d, r28	; 61
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	1f 91       	pop	r17
 6dc:	08 95       	ret

000006de <H_LCD_void_sendData>:
 6de:	0f 93       	push	r16
 6e0:	1f 93       	push	r17
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
 6e6:	cd b7       	in	r28, 0x3d	; 61
 6e8:	de b7       	in	r29, 0x3e	; 62
 6ea:	28 97       	sbiw	r28, 0x08	; 8
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	f8 94       	cli
 6f0:	de bf       	out	0x3e, r29	; 62
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	cd bf       	out	0x3d, r28	; 61
 6f6:	08 2f       	mov	r16, r24
 6f8:	88 e0       	ldi	r24, 0x08	; 8
 6fa:	ec e7       	ldi	r30, 0x7C	; 124
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	de 01       	movw	r26, r28
 700:	11 96       	adiw	r26, 0x01	; 1
 702:	01 90       	ld	r0, Z+
 704:	0d 92       	st	X+, r0
 706:	8a 95       	dec	r24
 708:	e1 f7       	brne	.-8      	; 0x702 <H_LCD_void_sendData+0x24>
 70a:	10 e0       	ldi	r17, 0x00	; 0
 70c:	15 c0       	rjmp	.+42     	; 0x738 <H_LCD_void_sendData+0x5a>
 70e:	81 2f       	mov	r24, r17
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	21 e0       	ldi	r18, 0x01	; 1
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	2c 0f       	add	r18, r28
 720:	3d 1f       	adc	r19, r29
 722:	82 0f       	add	r24, r18
 724:	93 1f       	adc	r25, r19
 726:	0e 94 3f 04 	call	0x87e	; 0x87e <DIO_U8SetPinValue>
 72a:	89 ef       	ldi	r24, 0xF9	; 249
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	01 97       	sbiw	r24, 0x01	; 1
 730:	f1 f7       	brne	.-4      	; 0x72e <H_LCD_void_sendData+0x50>
 732:	00 c0       	rjmp	.+0      	; 0x734 <H_LCD_void_sendData+0x56>
 734:	00 00       	nop
 736:	1f 5f       	subi	r17, 0xFF	; 255
 738:	12 30       	cpi	r17, 0x02	; 2
 73a:	48 f3       	brcs	.-46     	; 0x70e <H_LCD_void_sendData+0x30>
 73c:	89 ef       	ldi	r24, 0xF9	; 249
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	f1 f7       	brne	.-4      	; 0x740 <H_LCD_void_sendData+0x62>
 744:	00 c0       	rjmp	.+0      	; 0x746 <H_LCD_void_sendData+0x68>
 746:	00 00       	nop
 748:	80 2f       	mov	r24, r16
 74a:	0e 94 0d 02 	call	0x41a	; 0x41a <H_LCD_void_latchByte>
 74e:	28 96       	adiw	r28, 0x08	; 8
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	f8 94       	cli
 754:	de bf       	out	0x3e, r29	; 62
 756:	0f be       	out	0x3f, r0	; 63
 758:	cd bf       	out	0x3d, r28	; 61
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	1f 91       	pop	r17
 760:	0f 91       	pop	r16
 762:	08 95       	ret

00000764 <H_LCD_void_sendString>:
 764:	0f 93       	push	r16
 766:	1f 93       	push	r17
 768:	cf 93       	push	r28
 76a:	8c 01       	movw	r16, r24
 76c:	c0 e0       	ldi	r28, 0x00	; 0
 76e:	03 c0       	rjmp	.+6      	; 0x776 <H_LCD_void_sendString+0x12>
 770:	0e 94 6f 03 	call	0x6de	; 0x6de <H_LCD_void_sendData>
 774:	cf 5f       	subi	r28, 0xFF	; 255
 776:	f8 01       	movw	r30, r16
 778:	ec 0f       	add	r30, r28
 77a:	f1 1d       	adc	r31, r1
 77c:	80 81       	ld	r24, Z
 77e:	81 11       	cpse	r24, r1
 780:	f7 cf       	rjmp	.-18     	; 0x770 <H_LCD_void_sendString+0xc>
 782:	cf 91       	pop	r28
 784:	1f 91       	pop	r17
 786:	0f 91       	pop	r16
 788:	08 95       	ret

0000078a <H_LCD_void_sendIntNum>:
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	cd b7       	in	r28, 0x3d	; 61
 790:	de b7       	in	r29, 0x3e	; 62
 792:	60 97       	sbiw	r28, 0x10	; 16
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	f8 94       	cli
 798:	de bf       	out	0x3e, r29	; 62
 79a:	0f be       	out	0x3f, r0	; 63
 79c:	cd bf       	out	0x3d, r28	; 61
 79e:	dc 01       	movw	r26, r24
 7a0:	cb 01       	movw	r24, r22
 7a2:	4a e0       	ldi	r20, 0x0A	; 10
 7a4:	be 01       	movw	r22, r28
 7a6:	6f 5f       	subi	r22, 0xFF	; 255
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	0e 94 2b 05 	call	0xa56	; 0xa56 <__itoa_ncheck>
 7ae:	ce 01       	movw	r24, r28
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	0e 94 b2 03 	call	0x764	; 0x764 <H_LCD_void_sendString>
 7b6:	60 96       	adiw	r28, 0x10	; 16
 7b8:	0f b6       	in	r0, 0x3f	; 63
 7ba:	f8 94       	cli
 7bc:	de bf       	out	0x3e, r29	; 62
 7be:	0f be       	out	0x3f, r0	; 63
 7c0:	cd bf       	out	0x3d, r28	; 61
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	08 95       	ret

000007c8 <H_LCD_void_clearScreen>:

void H_LCD_void_clearScreen(void){
	H_LCD_void_sendCommand(0x01);
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	0e 94 a7 02 	call	0x54e	; 0x54e <H_LCD_void_sendCommand>
 7ce:	08 95       	ret

000007d0 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 7d0:	24 b1       	in	r18, 0x04	; 4
 7d2:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 7d4:	00 24       	eor	r0, r0
 7d6:	22 0f       	add	r18, r18
 7d8:	33 1f       	adc	r19, r19
 7da:	00 1c       	adc	r0, r0
 7dc:	22 0f       	add	r18, r18
 7de:	33 1f       	adc	r19, r19
 7e0:	00 1c       	adc	r0, r0
 7e2:	23 2f       	mov	r18, r19
 7e4:	30 2d       	mov	r19, r0
 7e6:	85 b1       	in	r24, 0x05	; 5
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 7f2:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__data_end>
 7f6:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__data_end+0x1>
 7fa:	82 2b       	or	r24, r18
 7fc:	93 2b       	or	r25, r19
 7fe:	09 95       	icall
 800:	08 95       	ret

00000802 <DIO_U8SetPinDirection>:
 802:	dc 01       	movw	r26, r24
 804:	ec 91       	ld	r30, X
 806:	e4 30       	cpi	r30, 0x04	; 4
 808:	a0 f5       	brcc	.+104    	; 0x872 <__stack+0x13>
 80a:	11 96       	adiw	r26, 0x01	; 1
 80c:	2c 91       	ld	r18, X
 80e:	11 97       	sbiw	r26, 0x01	; 1
 810:	28 30       	cpi	r18, 0x08	; 8
 812:	88 f5       	brcc	.+98     	; 0x876 <__stack+0x17>
 814:	12 96       	adiw	r26, 0x02	; 2
 816:	8c 91       	ld	r24, X
 818:	81 11       	cpse	r24, r1
 81a:	15 c0       	rjmp	.+42     	; 0x846 <DIO_U8SetPinDirection+0x44>
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	ee 0f       	add	r30, r30
 820:	ff 1f       	adc	r31, r31
 822:	ea 5f       	subi	r30, 0xFA	; 250
 824:	fe 4f       	sbci	r31, 0xFE	; 254
 826:	01 90       	ld	r0, Z+
 828:	f0 81       	ld	r31, Z
 82a:	e0 2d       	mov	r30, r0
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	02 c0       	rjmp	.+4      	; 0x836 <DIO_U8SetPinDirection+0x34>
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	2a 95       	dec	r18
 838:	e2 f7       	brpl	.-8      	; 0x832 <DIO_U8SetPinDirection+0x30>
 83a:	80 95       	com	r24
 83c:	90 81       	ld	r25, Z
 83e:	89 23       	and	r24, r25
 840:	80 83       	st	Z, r24
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	08 95       	ret
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	c1 f4       	brne	.+48     	; 0x87a <__stack+0x1b>
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	ee 0f       	add	r30, r30
 84e:	ff 1f       	adc	r31, r31
 850:	ea 5f       	subi	r30, 0xFA	; 250
 852:	fe 4f       	sbci	r31, 0xFE	; 254
 854:	01 90       	ld	r0, Z+
 856:	f0 81       	ld	r31, Z
 858:	e0 2d       	mov	r30, r0
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	2a 95       	dec	r18
 866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
 868:	90 81       	ld	r25, Z
 86a:	89 2b       	or	r24, r25
 86c:	80 83       	st	Z, r24
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	08 95       	ret
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	08 95       	ret
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	08 95       	ret
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	08 95       	ret

0000087e <DIO_U8SetPinValue>:
 87e:	00 97       	sbiw	r24, 0x00	; 0
 880:	c1 f1       	breq	.+112    	; 0x8f2 <DIO_U8SetPinValue+0x74>
 882:	dc 01       	movw	r26, r24
 884:	ec 91       	ld	r30, X
 886:	e4 30       	cpi	r30, 0x04	; 4
 888:	b0 f5       	brcc	.+108    	; 0x8f6 <DIO_U8SetPinValue+0x78>
 88a:	11 96       	adiw	r26, 0x01	; 1
 88c:	2c 91       	ld	r18, X
 88e:	11 97       	sbiw	r26, 0x01	; 1
 890:	28 30       	cpi	r18, 0x08	; 8
 892:	98 f5       	brcc	.+102    	; 0x8fa <DIO_U8SetPinValue+0x7c>
 894:	13 96       	adiw	r26, 0x03	; 3
 896:	8c 91       	ld	r24, X
 898:	81 30       	cpi	r24, 0x01	; 1
 89a:	a1 f4       	brne	.+40     	; 0x8c4 <DIO_U8SetPinValue+0x46>
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	ee 0f       	add	r30, r30
 8a0:	ff 1f       	adc	r31, r31
 8a2:	e2 50       	subi	r30, 0x02	; 2
 8a4:	ff 4f       	sbci	r31, 0xFF	; 255
 8a6:	01 90       	ld	r0, Z+
 8a8:	f0 81       	ld	r31, Z
 8aa:	e0 2d       	mov	r30, r0
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <DIO_U8SetPinValue+0x38>
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	2a 95       	dec	r18
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <DIO_U8SetPinValue+0x34>
 8ba:	90 81       	ld	r25, Z
 8bc:	89 2b       	or	r24, r25
 8be:	80 83       	st	Z, r24
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	08 95       	ret
 8c4:	81 11       	cpse	r24, r1
 8c6:	1b c0       	rjmp	.+54     	; 0x8fe <DIO_U8SetPinValue+0x80>
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	ee 0f       	add	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	e2 50       	subi	r30, 0x02	; 2
 8d0:	ff 4f       	sbci	r31, 0xFF	; 255
 8d2:	01 90       	ld	r0, Z+
 8d4:	f0 81       	ld	r31, Z
 8d6:	e0 2d       	mov	r30, r0
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <DIO_U8SetPinValue+0x64>
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	2a 95       	dec	r18
 8e4:	e2 f7       	brpl	.-8      	; 0x8de <DIO_U8SetPinValue+0x60>
 8e6:	80 95       	com	r24
 8e8:	90 81       	ld	r25, Z
 8ea:	89 23       	and	r24, r25
 8ec:	80 83       	st	Z, r24
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	08 95       	ret
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	08 95       	ret
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	08 95       	ret
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	08 95       	ret
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	08 95       	ret

00000902 <DIO_U8GetPinValue>:
 902:	00 97       	sbiw	r24, 0x00	; 0
 904:	f9 f0       	breq	.+62     	; 0x944 <DIO_U8GetPinValue+0x42>
 906:	61 15       	cp	r22, r1
 908:	71 05       	cpc	r23, r1
 90a:	f1 f0       	breq	.+60     	; 0x948 <DIO_U8GetPinValue+0x46>
 90c:	dc 01       	movw	r26, r24
 90e:	ec 91       	ld	r30, X
 910:	e4 30       	cpi	r30, 0x04	; 4
 912:	e0 f4       	brcc	.+56     	; 0x94c <DIO_U8GetPinValue+0x4a>
 914:	11 96       	adiw	r26, 0x01	; 1
 916:	2c 91       	ld	r18, X
 918:	28 30       	cpi	r18, 0x08	; 8
 91a:	d0 f4       	brcc	.+52     	; 0x950 <DIO_U8GetPinValue+0x4e>
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	ee 0f       	add	r30, r30
 920:	ff 1f       	adc	r31, r31
 922:	ea 50       	subi	r30, 0x0A	; 10
 924:	ff 4f       	sbci	r31, 0xFF	; 255
 926:	01 90       	ld	r0, Z+
 928:	f0 81       	ld	r31, Z
 92a:	e0 2d       	mov	r30, r0
 92c:	80 81       	ld	r24, Z
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	02 c0       	rjmp	.+4      	; 0x936 <DIO_U8GetPinValue+0x34>
 932:	95 95       	asr	r25
 934:	87 95       	ror	r24
 936:	2a 95       	dec	r18
 938:	e2 f7       	brpl	.-8      	; 0x932 <DIO_U8GetPinValue+0x30>
 93a:	81 70       	andi	r24, 0x01	; 1
 93c:	fb 01       	movw	r30, r22
 93e:	80 83       	st	Z, r24
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	08 95       	ret
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	08 95       	ret
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	08 95       	ret
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	08 95       	ret
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	08 95       	ret

00000954 <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 954:	1f 92       	push	r1
 956:	0f 92       	push	r0
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	0f 92       	push	r0
 95c:	11 24       	eor	r1, r1
 95e:	2f 93       	push	r18
 960:	3f 93       	push	r19
 962:	4f 93       	push	r20
 964:	5f 93       	push	r21
 966:	6f 93       	push	r22
 968:	7f 93       	push	r23
 96a:	8f 93       	push	r24
 96c:	9f 93       	push	r25
 96e:	af 93       	push	r26
 970:	bf 93       	push	r27
 972:	ef 93       	push	r30
 974:	ff 93       	push	r31
	if(Action[0]!= NULL){
 976:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <Action>
 97a:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <Action+0x1>
 97e:	30 97       	sbiw	r30, 0x00	; 0
 980:	09 f0       	breq	.+2      	; 0x984 <__vector_1+0x30>
		Action[0]();
 982:	09 95       	icall
	}
}
 984:	ff 91       	pop	r31
 986:	ef 91       	pop	r30
 988:	bf 91       	pop	r27
 98a:	af 91       	pop	r26
 98c:	9f 91       	pop	r25
 98e:	8f 91       	pop	r24
 990:	7f 91       	pop	r23
 992:	6f 91       	pop	r22
 994:	5f 91       	pop	r21
 996:	4f 91       	pop	r20
 998:	3f 91       	pop	r19
 99a:	2f 91       	pop	r18
 99c:	0f 90       	pop	r0
 99e:	0f be       	out	0x3f, r0	; 63
 9a0:	0f 90       	pop	r0
 9a2:	1f 90       	pop	r1
 9a4:	18 95       	reti

000009a6 <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 9a6:	1f 92       	push	r1
 9a8:	0f 92       	push	r0
 9aa:	0f b6       	in	r0, 0x3f	; 63
 9ac:	0f 92       	push	r0
 9ae:	11 24       	eor	r1, r1
 9b0:	2f 93       	push	r18
 9b2:	3f 93       	push	r19
 9b4:	4f 93       	push	r20
 9b6:	5f 93       	push	r21
 9b8:	6f 93       	push	r22
 9ba:	7f 93       	push	r23
 9bc:	8f 93       	push	r24
 9be:	9f 93       	push	r25
 9c0:	af 93       	push	r26
 9c2:	bf 93       	push	r27
 9c4:	ef 93       	push	r30
 9c6:	ff 93       	push	r31
	if(Action[1]!= NULL){
 9c8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <Action+0x2>
 9cc:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <Action+0x3>
 9d0:	30 97       	sbiw	r30, 0x00	; 0
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <__vector_2+0x30>
		Action[1]();
 9d4:	09 95       	icall
	}
}
 9d6:	ff 91       	pop	r31
 9d8:	ef 91       	pop	r30
 9da:	bf 91       	pop	r27
 9dc:	af 91       	pop	r26
 9de:	9f 91       	pop	r25
 9e0:	8f 91       	pop	r24
 9e2:	7f 91       	pop	r23
 9e4:	6f 91       	pop	r22
 9e6:	5f 91       	pop	r21
 9e8:	4f 91       	pop	r20
 9ea:	3f 91       	pop	r19
 9ec:	2f 91       	pop	r18
 9ee:	0f 90       	pop	r0
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	0f 90       	pop	r0
 9f4:	1f 90       	pop	r1
 9f6:	18 95       	reti

000009f8 <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 9f8:	1f 92       	push	r1
 9fa:	0f 92       	push	r0
 9fc:	0f b6       	in	r0, 0x3f	; 63
 9fe:	0f 92       	push	r0
 a00:	11 24       	eor	r1, r1
 a02:	2f 93       	push	r18
 a04:	3f 93       	push	r19
 a06:	4f 93       	push	r20
 a08:	5f 93       	push	r21
 a0a:	6f 93       	push	r22
 a0c:	7f 93       	push	r23
 a0e:	8f 93       	push	r24
 a10:	9f 93       	push	r25
 a12:	af 93       	push	r26
 a14:	bf 93       	push	r27
 a16:	ef 93       	push	r30
 a18:	ff 93       	push	r31
	if(Action[2]!= NULL){
 a1a:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <Action+0x4>
 a1e:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <Action+0x5>
 a22:	30 97       	sbiw	r30, 0x00	; 0
 a24:	09 f0       	breq	.+2      	; 0xa28 <__vector_3+0x30>
		Action[2]();
 a26:	09 95       	icall
	}
}
 a28:	ff 91       	pop	r31
 a2a:	ef 91       	pop	r30
 a2c:	bf 91       	pop	r27
 a2e:	af 91       	pop	r26
 a30:	9f 91       	pop	r25
 a32:	8f 91       	pop	r24
 a34:	7f 91       	pop	r23
 a36:	6f 91       	pop	r22
 a38:	5f 91       	pop	r21
 a3a:	4f 91       	pop	r20
 a3c:	3f 91       	pop	r19
 a3e:	2f 91       	pop	r18
 a40:	0f 90       	pop	r0
 a42:	0f be       	out	0x3f, r0	; 63
 a44:	0f 90       	pop	r0
 a46:	1f 90       	pop	r1
 a48:	18 95       	reti

00000a4a <__tablejump2__>:
 a4a:	ee 0f       	add	r30, r30
 a4c:	ff 1f       	adc	r31, r31
 a4e:	05 90       	lpm	r0, Z+
 a50:	f4 91       	lpm	r31, Z
 a52:	e0 2d       	mov	r30, r0
 a54:	09 94       	ijmp

00000a56 <__itoa_ncheck>:
 a56:	bb 27       	eor	r27, r27
 a58:	4a 30       	cpi	r20, 0x0A	; 10
 a5a:	31 f4       	brne	.+12     	; 0xa68 <__itoa_ncheck+0x12>
 a5c:	99 23       	and	r25, r25
 a5e:	22 f4       	brpl	.+8      	; 0xa68 <__itoa_ncheck+0x12>
 a60:	bd e2       	ldi	r27, 0x2D	; 45
 a62:	90 95       	com	r25
 a64:	81 95       	neg	r24
 a66:	9f 4f       	sbci	r25, 0xFF	; 255
 a68:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <__utoa_common>

00000a6c <__utoa_ncheck>:
 a6c:	bb 27       	eor	r27, r27

00000a6e <__utoa_common>:
 a6e:	fb 01       	movw	r30, r22
 a70:	55 27       	eor	r21, r21
 a72:	aa 27       	eor	r26, r26
 a74:	88 0f       	add	r24, r24
 a76:	99 1f       	adc	r25, r25
 a78:	aa 1f       	adc	r26, r26
 a7a:	a4 17       	cp	r26, r20
 a7c:	10 f0       	brcs	.+4      	; 0xa82 <__utoa_common+0x14>
 a7e:	a4 1b       	sub	r26, r20
 a80:	83 95       	inc	r24
 a82:	50 51       	subi	r21, 0x10	; 16
 a84:	b9 f7       	brne	.-18     	; 0xa74 <__utoa_common+0x6>
 a86:	a0 5d       	subi	r26, 0xD0	; 208
 a88:	aa 33       	cpi	r26, 0x3A	; 58
 a8a:	08 f0       	brcs	.+2      	; 0xa8e <__utoa_common+0x20>
 a8c:	a9 5d       	subi	r26, 0xD9	; 217
 a8e:	a1 93       	st	Z+, r26
 a90:	00 97       	sbiw	r24, 0x00	; 0
 a92:	79 f7       	brne	.-34     	; 0xa72 <__utoa_common+0x4>
 a94:	b1 11       	cpse	r27, r1
 a96:	b1 93       	st	Z+, r27
 a98:	11 92       	st	Z+, r1
 a9a:	cb 01       	movw	r24, r22
 a9c:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <strrev>

00000aa0 <strrev>:
 aa0:	dc 01       	movw	r26, r24
 aa2:	fc 01       	movw	r30, r24
 aa4:	67 2f       	mov	r22, r23
 aa6:	71 91       	ld	r23, Z+
 aa8:	77 23       	and	r23, r23
 aaa:	e1 f7       	brne	.-8      	; 0xaa4 <strrev+0x4>
 aac:	32 97       	sbiw	r30, 0x02	; 2
 aae:	04 c0       	rjmp	.+8      	; 0xab8 <strrev+0x18>
 ab0:	7c 91       	ld	r23, X
 ab2:	6d 93       	st	X+, r22
 ab4:	70 83       	st	Z, r23
 ab6:	62 91       	ld	r22, -Z
 ab8:	ae 17       	cp	r26, r30
 aba:	bf 07       	cpc	r27, r31
 abc:	c8 f3       	brcs	.-14     	; 0xab0 <strrev+0x10>
 abe:	08 95       	ret

00000ac0 <_exit>:
 ac0:	f8 94       	cli

00000ac2 <__stop_program>:
 ac2:	ff cf       	rjmp	.-2      	; 0xac2 <__stop_program>
