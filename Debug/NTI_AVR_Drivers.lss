
NTI_AVR_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000063e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004e  00800060  00800060  0000063e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e0c  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e33  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ee1  00000000  00000000  0000356b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000788  00000000  00000000  0000444c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000105c  00000000  00000000  00004bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000118a  00000000  00000000  00005c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00006dba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_1>
   8:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <__vector_2>
   c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_6>
  1c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__vector_9>
  28:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_10>
  2c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_11>
  30:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_12>
  34:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>



int main(void) {
	GIE_enable();
  92:	0e 94 38 01 	call	0x270	; 0x270 <GIE_enable>
	USART_Init();
  96:	0e 94 a3 02 	call	0x546	; 0x546 <USART_Init>
	//FingerPS_strTemplate(0x01, 0xF769);
	FingerPS_searchFinger(0x01,0x0002,0x0005);
  9a:	45 e0       	ldi	r20, 0x05	; 5
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	62 e0       	ldi	r22, 0x02	; 2
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	0e 94 60 00 	call	0xc0	; 0xc0 <FingerPS_searchFinger>
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <main+0x16>

000000aa <receiveCallback>:
	//buffer[9] == 0 return SUCESS else return error code
	//clearBuffer()
	
	return buffer[9];

}
  aa:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	e9 2f       	mov	r30, r25
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	eb 56       	subi	r30, 0x6B	; 107
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	80 83       	st	Z, r24
  b8:	9f 5f       	subi	r25, 0xFF	; 255
  ba:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
  be:	08 95       	ret

000000c0 <FingerPS_searchFinger>:


u8 FingerPS_searchFinger(u8 bufferId, u16 startPage, u16 pageNum){
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	61 97       	sbiw	r28, 0x11	; 17
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
	u8 search[17]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x08, 0x04, bufferId, (startPage & 0xFF00) >> 8, startPage, (pageNum & 0xFF00) >> 8, pageNum, 0x01, 0x0D};
  d6:	9f ee       	ldi	r25, 0xEF	; 239
  d8:	99 83       	std	Y+1, r25	; 0x01
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	2a 83       	std	Y+2, r18	; 0x02
  de:	9f ef       	ldi	r25, 0xFF	; 255
  e0:	9b 83       	std	Y+3, r25	; 0x03
  e2:	9c 83       	std	Y+4, r25	; 0x04
  e4:	9d 83       	std	Y+5, r25	; 0x05
  e6:	9e 83       	std	Y+6, r25	; 0x06
  e8:	2f 83       	std	Y+7, r18	; 0x07
  ea:	18 86       	std	Y+8, r1	; 0x08
  ec:	98 e0       	ldi	r25, 0x08	; 8
  ee:	99 87       	std	Y+9, r25	; 0x09
  f0:	94 e0       	ldi	r25, 0x04	; 4
  f2:	9a 87       	std	Y+10, r25	; 0x0a
  f4:	8b 87       	std	Y+11, r24	; 0x0b
  f6:	7c 87       	std	Y+12, r23	; 0x0c
  f8:	6d 87       	std	Y+13, r22	; 0x0d
  fa:	5e 87       	std	Y+14, r21	; 0x0e
  fc:	4f 87       	std	Y+15, r20	; 0x0f
  fe:	28 8b       	std	Y+16, r18	; 0x10
 100:	8d e0       	ldi	r24, 0x0D	; 13
 102:	89 8b       	std	Y+17, r24	; 0x11
	for (u8 i = 0; i < 17; i++)
 104:	10 e0       	ldi	r17, 0x00	; 0
 106:	0a c0       	rjmp	.+20     	; 0x11c <FingerPS_searchFinger+0x5c>
	{
		UART_sendByte(search[i]);
 108:	e1 e0       	ldi	r30, 0x01	; 1
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	ec 0f       	add	r30, r28
 10e:	fd 1f       	adc	r31, r29
 110:	e1 0f       	add	r30, r17
 112:	f1 1d       	adc	r31, r1
 114:	80 81       	ld	r24, Z
 116:	0e 94 ad 02 	call	0x55a	; 0x55a <UART_sendByte>
}


u8 FingerPS_searchFinger(u8 bufferId, u16 startPage, u16 pageNum){
	u8 search[17]={0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x08, 0x04, bufferId, (startPage & 0xFF00) >> 8, startPage, (pageNum & 0xFF00) >> 8, pageNum, 0x01, 0x0D};
	for (u8 i = 0; i < 17; i++)
 11a:	1f 5f       	subi	r17, 0xFF	; 255
 11c:	11 31       	cpi	r17, 0x11	; 17
 11e:	a0 f3       	brcs	.-24     	; 0x108 <FingerPS_searchFinger+0x48>
	{
		UART_sendByte(search[i]);
	}
	UART_receiveByteAsynchCallBack(receiveCallback);
 120:	85 e5       	ldi	r24, 0x55	; 85
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 b1 02 	call	0x562	; 0x562 <UART_receiveByteAsynchCallBack>
	
	//_delay_ms(5);
	while(byte_no != 16);
 128:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12c:	80 31       	cpi	r24, 0x10	; 16
 12e:	e1 f7       	brne	.-8      	; 0x128 <FingerPS_searchFinger+0x68>
	//calc checksum
	//buffer[9] == 0 return SUCESS else return error code
	//clearBuffer();
	
	return buffer[9];
}
 130:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <buffer+0x9>
 134:	61 96       	adiw	r28, 0x11	; 17
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	08 95       	ret

00000148 <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
 148:	24 b1       	in	r18, 0x04	; 4
 14a:	30 e0       	ldi	r19, 0x00	; 0
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
 14c:	00 24       	eor	r0, r0
 14e:	22 0f       	add	r18, r18
 150:	33 1f       	adc	r19, r19
 152:	00 1c       	adc	r0, r0
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	00 1c       	adc	r0, r0
 15a:	23 2f       	mov	r18, r19
 15c:	30 2d       	mov	r19, r0
 15e:	85 b1       	in	r24, 0x05	; 5
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
    ADC_callBack(adcResult); // Call the user-defined callback function
 16a:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <ADC_callBack>
 16e:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <ADC_callBack+0x1>
 172:	82 2b       	or	r24, r18
 174:	93 2b       	or	r25, r19
 176:	09 95       	icall
 178:	08 95       	ret

0000017a <__vector_1>:
		break;
	}
}

//EXIT0 ISR
ISR(INT0_vect){
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	if(Action[0]!= NULL){
 19c:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <Action>
 1a0:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <Action+0x1>
 1a4:	30 97       	sbiw	r30, 0x00	; 0
 1a6:	09 f0       	breq	.+2      	; 0x1aa <__vector_1+0x30>
		Action[0]();
 1a8:	09 95       	icall
	}
}
 1aa:	ff 91       	pop	r31
 1ac:	ef 91       	pop	r30
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <__vector_2>:

//EXIT1 ISR
ISR(INT1_vect){
 1cc:	1f 92       	push	r1
 1ce:	0f 92       	push	r0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	0f 92       	push	r0
 1d4:	11 24       	eor	r1, r1
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
	if(Action[1]!= NULL){
 1ee:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <Action+0x2>
 1f2:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <Action+0x3>
 1f6:	30 97       	sbiw	r30, 0x00	; 0
 1f8:	09 f0       	breq	.+2      	; 0x1fc <__vector_2+0x30>
		Action[1]();
 1fa:	09 95       	icall
	}
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <__vector_3>:
//EXIT2 ISR
ISR(INT2_vect){
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	2f 93       	push	r18
 22a:	3f 93       	push	r19
 22c:	4f 93       	push	r20
 22e:	5f 93       	push	r21
 230:	6f 93       	push	r22
 232:	7f 93       	push	r23
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	af 93       	push	r26
 23a:	bf 93       	push	r27
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
	if(Action[2]!= NULL){
 240:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <Action+0x4>
 244:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <Action+0x5>
 248:	30 97       	sbiw	r30, 0x00	; 0
 24a:	09 f0       	breq	.+2      	; 0x24e <__vector_3+0x30>
		Action[2]();
 24c:	09 95       	icall
	}
}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <GIE_enable>:
#include "GIE_interface.h"


// Enable Global Interrupts
void GIE_enable(){
    __asm__ __volatile__ ("sei" ::);
 270:	78 94       	sei
 272:	08 95       	ret

00000274 <__vector_12>:
	// Start transmission
	SPI->SPDR = copy_u8Data;
}


ISR(SPI_STC_vect){
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
	if(Action_Spi != NULL){
 296:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <Action_Spi>
 29a:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <Action_Spi+0x1>
 29e:	30 97       	sbiw	r30, 0x00	; 0
 2a0:	11 f0       	breq	.+4      	; 0x2a6 <__vector_12+0x32>
		u8 reveivedData = SPI->SPDR;
 2a2:	8f b1       	in	r24, 0x0f	; 15
		Action_Spi(reveivedData);
 2a4:	09 95       	icall
	}
 2a6:	ff 91       	pop	r31
 2a8:	ef 91       	pop	r30
 2aa:	bf 91       	pop	r27
 2ac:	af 91       	pop	r26
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	7f 91       	pop	r23
 2b4:	6f 91       	pop	r22
 2b6:	5f 91       	pop	r21
 2b8:	4f 91       	pop	r20
 2ba:	3f 91       	pop	r19
 2bc:	2f 91       	pop	r18
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <__vector_11>:
TCNT = 256 - remaining counts
counter = 0
call back();
*/

ISR(TIMER0_OVF_vect){
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	2f 93       	push	r18
 2d4:	3f 93       	push	r19
 2d6:	4f 93       	push	r20
 2d8:	5f 93       	push	r21
 2da:	6f 93       	push	r22
 2dc:	7f 93       	push	r23
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
 2e2:	af 93       	push	r26
 2e4:	bf 93       	push	r27
 2e6:	ef 93       	push	r30
 2e8:	ff 93       	push	r31
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 2ea:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Action_Timer>
 2ee:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Action_Timer+0x1>
 2f2:	89 2b       	or	r24, r25
 2f4:	89 f1       	breq	.+98     	; 0x358 <__vector_11+0x90>
		counter++;
 2f6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <counter.1685>
 2fa:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <counter.1685+0x1>
 2fe:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <counter.1685+0x2>
 302:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <counter.1685+0x3>
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	a1 1d       	adc	r26, r1
 30a:	b1 1d       	adc	r27, r1
 30c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <counter.1685>
 310:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <counter.1685+0x1>
 314:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <counter.1685+0x2>
 318:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <counter.1685+0x3>
		if(counter == numOverflows){
 31c:	40 91 77 00 	lds	r20, 0x0077	; 0x800077 <numOverflows>
 320:	50 91 78 00 	lds	r21, 0x0078	; 0x800078 <numOverflows+0x1>
 324:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <numOverflows+0x2>
 328:	70 91 7a 00 	lds	r23, 0x007A	; 0x80007a <numOverflows+0x3>
 32c:	84 17       	cp	r24, r20
 32e:	95 07       	cpc	r25, r21
 330:	a6 07       	cpc	r26, r22
 332:	b7 07       	cpc	r27, r23
 334:	89 f4       	brne	.+34     	; 0x358 <__vector_11+0x90>
			TCNT0_REG = 256 - remainingCounts;
 336:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <remainingCounts>
 33a:	81 95       	neg	r24
 33c:	82 bf       	out	0x32, r24	; 50
			counter = 0;
 33e:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <counter.1685>
 342:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <counter.1685+0x1>
 346:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <counter.1685+0x2>
 34a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <counter.1685+0x3>
			Action_Timer[0]();
 34e:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <Action_Timer>
 352:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <Action_Timer+0x1>
 356:	09 95       	icall
		}
		
	}
}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	bf 91       	pop	r27
 35e:	af 91       	pop	r26
 360:	9f 91       	pop	r25
 362:	8f 91       	pop	r24
 364:	7f 91       	pop	r23
 366:	6f 91       	pop	r22
 368:	5f 91       	pop	r21
 36a:	4f 91       	pop	r20
 36c:	3f 91       	pop	r19
 36e:	2f 91       	pop	r18
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <__vector_10>:

ISR(TIMER0_COMP_vect){
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	2f 93       	push	r18
 386:	3f 93       	push	r19
 388:	4f 93       	push	r20
 38a:	5f 93       	push	r21
 38c:	6f 93       	push	r22
 38e:	7f 93       	push	r23
 390:	8f 93       	push	r24
 392:	9f 93       	push	r25
 394:	af 93       	push	r26
 396:	bf 93       	push	r27
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31

	if(Action_Timer[1]!= NULL){
 39c:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <Action_Timer+0x2>
 3a0:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <Action_Timer+0x3>
 3a4:	30 97       	sbiw	r30, 0x00	; 0
 3a6:	09 f0       	breq	.+2      	; 0x3aa <__vector_10+0x30>
		Action_Timer[1]();
 3a8:	09 95       	icall
		
	}
}
 3aa:	ff 91       	pop	r31
 3ac:	ef 91       	pop	r30
 3ae:	bf 91       	pop	r27
 3b0:	af 91       	pop	r26
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	7f 91       	pop	r23
 3b8:	6f 91       	pop	r22
 3ba:	5f 91       	pop	r21
 3bc:	4f 91       	pop	r20
 3be:	3f 91       	pop	r19
 3c0:	2f 91       	pop	r18
 3c2:	0f 90       	pop	r0
 3c4:	0f be       	out	0x3f, r0	; 63
 3c6:	0f 90       	pop	r0
 3c8:	1f 90       	pop	r1
 3ca:	18 95       	reti

000003cc <__vector_9>:
	
	freq = g_timePeriod * tickTime;
	return freq;
}

ISR(TIMER1_OVF_vect){
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	2f 93       	push	r18
 3d8:	3f 93       	push	r19
 3da:	4f 93       	push	r20
 3dc:	5f 93       	push	r21
 3de:	6f 93       	push	r22
 3e0:	7f 93       	push	r23
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	af 93       	push	r26
 3e8:	bf 93       	push	r27
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	Action_Timer[0]();
 3f2:	cf e7       	ldi	r28, 0x7F	; 127
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
 3f6:	e8 81       	ld	r30, Y
 3f8:	f9 81       	ldd	r31, Y+1	; 0x01
 3fa:	09 95       	icall
	numOverflows++;
 3fc:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <numOverflows>
 400:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <numOverflows+0x1>
 404:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <numOverflows+0x2>
 408:	b0 91 8a 00 	lds	r27, 0x008A	; 0x80008a <numOverflows+0x3>
 40c:	01 96       	adiw	r24, 0x01	; 1
 40e:	a1 1d       	adc	r26, r1
 410:	b1 1d       	adc	r27, r1
 412:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <numOverflows>
 416:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <numOverflows+0x1>
 41a:	a0 93 89 00 	sts	0x0089, r26	; 0x800089 <numOverflows+0x2>
 41e:	b0 93 8a 00 	sts	0x008A, r27	; 0x80008a <numOverflows+0x3>
	static u32 counter = 0;
	if(Action_Timer[0]!= NULL){
 422:	e8 81       	ld	r30, Y
 424:	f9 81       	ldd	r31, Y+1	; 0x01
 426:	30 97       	sbiw	r30, 0x00	; 0
 428:	49 f1       	breq	.+82     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
		counter++;
 42a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <counter.1744>
 42e:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <counter.1744+0x1>
 432:	a0 91 7d 00 	lds	r26, 0x007D	; 0x80007d <counter.1744+0x2>
 436:	b0 91 7e 00 	lds	r27, 0x007E	; 0x80007e <counter.1744+0x3>
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	a1 1d       	adc	r26, r1
 43e:	b1 1d       	adc	r27, r1
 440:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <counter.1744>
 444:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <counter.1744+0x1>
 448:	a0 93 7d 00 	sts	0x007D, r26	; 0x80007d <counter.1744+0x2>
 44c:	b0 93 7e 00 	sts	0x007E, r27	; 0x80007e <counter.1744+0x3>
		if(counter == req_numOverflows){
 450:	40 91 8b 00 	lds	r20, 0x008B	; 0x80008b <req_numOverflows>
 454:	50 91 8c 00 	lds	r21, 0x008C	; 0x80008c <req_numOverflows+0x1>
 458:	60 91 8d 00 	lds	r22, 0x008D	; 0x80008d <req_numOverflows+0x2>
 45c:	70 91 8e 00 	lds	r23, 0x008E	; 0x80008e <req_numOverflows+0x3>
 460:	84 17       	cp	r24, r20
 462:	95 07       	cpc	r25, r21
 464:	a6 07       	cpc	r26, r22
 466:	b7 07       	cpc	r27, r23
 468:	49 f4       	brne	.+18     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			//TIMER1_BASE-> = 256 - remainingCounts;
			counter = 0;
 46a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <counter.1744>
 46e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <counter.1744+0x1>
 472:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <counter.1744+0x2>
 476:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <counter.1744+0x3>
			Action_Timer[0]();
 47a:	09 95       	icall
		}
		
	}
}
 47c:	ff 91       	pop	r31
 47e:	ef 91       	pop	r30
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	bf 91       	pop	r27
 486:	af 91       	pop	r26
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	7f 91       	pop	r23
 48e:	6f 91       	pop	r22
 490:	5f 91       	pop	r21
 492:	4f 91       	pop	r20
 494:	3f 91       	pop	r19
 496:	2f 91       	pop	r18
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	2f 93       	push	r18
 4ae:	3f 93       	push	r19
 4b0:	4f 93       	push	r20
 4b2:	5f 93       	push	r21
 4b4:	6f 93       	push	r22
 4b6:	7f 93       	push	r23
 4b8:	8f 93       	push	r24
 4ba:	9f 93       	push	r25
 4bc:	af 93       	push	r26
 4be:	bf 93       	push	r27
 4c0:	ef 93       	push	r30
 4c2:	ff 93       	push	r31
	if(Action_Timer[1]!= NULL){
 4c4:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <Action_Timer+0x2>
 4c8:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <Action_Timer+0x3>
 4cc:	30 97       	sbiw	r30, 0x00	; 0
 4ce:	09 f0       	breq	.+2      	; 0x4d2 <__vector_7+0x30>
		Action_Timer[1]();
 4d0:	09 95       	icall
	}
}
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <__vector_6>:


ISR(TIMER1_CAPT_vect){
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	2f 93       	push	r18
 500:	3f 93       	push	r19
 502:	4f 93       	push	r20
 504:	5f 93       	push	r21
 506:	6f 93       	push	r22
 508:	7f 93       	push	r23
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	af 93       	push	r26
 510:	bf 93       	push	r27
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
		if(Action_Timer[3]!= NULL){
 516:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <Action_Timer+0x6>
 51a:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <Action_Timer+0x7>
 51e:	30 97       	sbiw	r30, 0x00	; 0
 520:	09 f0       	breq	.+2      	; 0x524 <__vector_6+0x30>
			Action_Timer[3]();
 522:	09 95       	icall
			
			
		}
 524:	ff 91       	pop	r31
 526:	ef 91       	pop	r30
 528:	bf 91       	pop	r27
 52a:	af 91       	pop	r26
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	7f 91       	pop	r23
 532:	6f 91       	pop	r22
 534:	5f 91       	pop	r21
 536:	4f 91       	pop	r20
 538:	3f 91       	pop	r19
 53a:	2f 91       	pop	r18
 53c:	0f 90       	pop	r0
 53e:	0f be       	out	0x3f, r0	; 63
 540:	0f 90       	pop	r0
 542:	1f 90       	pop	r1
 544:	18 95       	reti

00000546 <USART_Init>:
		Str[i] = MUART_voidRecieveByteSynch();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
}
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	8b b9       	out	0x0b, r24	; 11
 54a:	88 e1       	ldi	r24, 0x18	; 24
 54c:	8a b9       	out	0x0a, r24	; 10
 54e:	86 e8       	ldi	r24, 0x86	; 134
 550:	80 bd       	out	0x20, r24	; 32
 552:	10 bc       	out	0x20, r1	; 32
 554:	80 e1       	ldi	r24, 0x10	; 16
 556:	89 b9       	out	0x09, r24	; 9
 558:	08 95       	ret

0000055a <UART_sendByte>:
 55a:	5d 9b       	sbis	0x0b, 5	; 11
 55c:	fe cf       	rjmp	.-4      	; 0x55a <UART_sendByte>
 55e:	8c b9       	out	0x0c, r24	; 12
 560:	08 95       	ret

00000562 <UART_receiveByteAsynchCallBack>:

void UART_receiveByteAsynchCallBack(void (*ptrfn)(u8)) {
	// Enable UART receiver interrupt
	UCSRB |= (1 << RXCIE);
 562:	2a b1       	in	r18, 0x0a	; 10
 564:	20 68       	ori	r18, 0x80	; 128
 566:	2a b9       	out	0x0a, r18	; 10
	//set callback
	Action_Uart[0] = ptrfn;
 568:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <Action_Uart+0x1>
 56c:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <Action_Uart>
 570:	08 95       	ret

00000572 <__vector_13>:
}

// UART receive interrupt service routine
ISR(USART_RXC_vect) {
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	2f 93       	push	r18
 57e:	3f 93       	push	r19
 580:	4f 93       	push	r20
 582:	5f 93       	push	r21
 584:	6f 93       	push	r22
 586:	7f 93       	push	r23
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	af 93       	push	r26
 58e:	bf 93       	push	r27
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
	 u8 receivedData = UDR; // Read the received data
 594:	8c b1       	in	r24, 0x0c	; 12
	if(Action_Uart[0] != NULL){
 596:	e0 91 8f 00 	lds	r30, 0x008F	; 0x80008f <Action_Uart>
 59a:	f0 91 90 00 	lds	r31, 0x0090	; 0x800090 <Action_Uart+0x1>
 59e:	30 97       	sbiw	r30, 0x00	; 0
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <__vector_13+0x32>
		Action_Uart[0](receivedData);
 5a2:	09 95       	icall
	}
 5a4:	ff 91       	pop	r31
 5a6:	ef 91       	pop	r30
 5a8:	bf 91       	pop	r27
 5aa:	af 91       	pop	r26
 5ac:	9f 91       	pop	r25
 5ae:	8f 91       	pop	r24
 5b0:	7f 91       	pop	r23
 5b2:	6f 91       	pop	r22
 5b4:	5f 91       	pop	r21
 5b6:	4f 91       	pop	r20
 5b8:	3f 91       	pop	r19
 5ba:	2f 91       	pop	r18
 5bc:	0f 90       	pop	r0
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	0f 90       	pop	r0
 5c2:	1f 90       	pop	r1
 5c4:	18 95       	reti

000005c6 <_exit>:
 5c6:	f8 94       	cli

000005c8 <__stop_program>:
 5c8:	ff cf       	rjmp	.-2      	; 0x5c8 <__stop_program>
