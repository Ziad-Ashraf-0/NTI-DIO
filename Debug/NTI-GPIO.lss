
NTI-GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00001b68  00001bfc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000d0  008000d0  00001c6c  2**0
                  ALLOC
  3 .stab         00001b60  00000000  00000000  00001c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016e3  00000000  00000000  000037cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000515f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008a40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000095fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__vector_1>
       8:	0c 94 b7 06 	jmp	0xd6e	; 0xd6e <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <main>
      8a:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a3 0d 	jmp	0x1b46	; 0x1b46 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <EXTI_enable>:
// Array of three pointers to functions
void (*Action[3])(void) = {NULL, NULL, NULL};



void EXTI_enable(u8 Int_ID, u8 trigger){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <EXTI_enable+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <EXTI_enable+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02

	if(Int_ID < EXTI_INT1_ID){
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	87 30       	cpi	r24, 0x07	; 7
     b5a:	a0 f4       	brcc	.+40     	; 0xb84 <EXTI_enable+0x3e>
		SET_BIT(EXTI_BASE->GICR, Int_ID);
     b5c:	a4 e5       	ldi	r26, 0x54	; 84
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e4 e5       	ldi	r30, 0x54	; 84
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	87 81       	ldd	r24, Z+7	; 0x07
     b66:	48 2f       	mov	r20, r24
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <EXTI_enable+0x32>
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	2a 95       	dec	r18
     b7a:	e2 f7       	brpl	.-8      	; 0xb74 <EXTI_enable+0x2e>
     b7c:	84 2b       	or	r24, r20
     b7e:	17 96       	adiw	r26, 0x07	; 7
     b80:	8c 93       	st	X, r24
     b82:	17 97       	sbiw	r26, 0x07	; 7
	}

	switch (Int_ID)
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	28 2f       	mov	r18, r24
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	3c 83       	std	Y+4, r19	; 0x04
     b8c:	2b 83       	std	Y+3, r18	; 0x03
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	86 30       	cpi	r24, 0x06	; 6
     b94:	91 05       	cpc	r25, r1
     b96:	59 f0       	breq	.+22     	; 0xbae <EXTI_enable+0x68>
     b98:	2b 81       	ldd	r18, Y+3	; 0x03
     b9a:	3c 81       	ldd	r19, Y+4	; 0x04
     b9c:	27 30       	cpi	r18, 0x07	; 7
     b9e:	31 05       	cpc	r19, r1
     ba0:	c9 f0       	breq	.+50     	; 0xbd4 <EXTI_enable+0x8e>
     ba2:	8b 81       	ldd	r24, Y+3	; 0x03
     ba4:	9c 81       	ldd	r25, Y+4	; 0x04
     ba6:	85 30       	cpi	r24, 0x05	; 5
     ba8:	91 05       	cpc	r25, r1
     baa:	71 f1       	breq	.+92     	; 0xc08 <EXTI_enable+0xc2>
     bac:	48 c0       	rjmp	.+144    	; 0xc3e <EXTI_enable+0xf8>
	{
	case EXTI_INT0_ID:
		EXTI_BASE->MCUCR &= 0xFC;
     bae:	a4 e5       	ldi	r26, 0x54	; 84
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e4 e5       	ldi	r30, 0x54	; 84
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	81 81       	ldd	r24, Z+1	; 0x01
     bb8:	8c 7f       	andi	r24, 0xFC	; 252
     bba:	11 96       	adiw	r26, 0x01	; 1
     bbc:	8c 93       	st	X, r24
		EXTI_BASE->MCUCR |= trigger;
     bbe:	a4 e5       	ldi	r26, 0x54	; 84
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e4 e5       	ldi	r30, 0x54	; 84
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	91 81       	ldd	r25, Z+1	; 0x01
     bc8:	8a 81       	ldd	r24, Y+2	; 0x02
     bca:	89 2b       	or	r24, r25
     bcc:	11 96       	adiw	r26, 0x01	; 1
     bce:	8c 93       	st	X, r24
     bd0:	11 97       	sbiw	r26, 0x01	; 1
     bd2:	35 c0       	rjmp	.+106    	; 0xc3e <EXTI_enable+0xf8>
		break;
	case EXTI_INT1_ID:
		EXTI_BASE->MCUCR &= 0xF3;
     bd4:	a4 e5       	ldi	r26, 0x54	; 84
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	e4 e5       	ldi	r30, 0x54	; 84
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	81 81       	ldd	r24, Z+1	; 0x01
     bde:	83 7f       	andi	r24, 0xF3	; 243
     be0:	11 96       	adiw	r26, 0x01	; 1
     be2:	8c 93       	st	X, r24
		EXTI_BASE->MCUCR |= trigger << 2;
     be4:	a4 e5       	ldi	r26, 0x54	; 84
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	e4 e5       	ldi	r30, 0x54	; 84
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	81 81       	ldd	r24, Z+1	; 0x01
     bee:	28 2f       	mov	r18, r24
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	82 2b       	or	r24, r18
     c00:	11 96       	adiw	r26, 0x01	; 1
     c02:	8c 93       	st	X, r24
     c04:	11 97       	sbiw	r26, 0x01	; 1
     c06:	1b c0       	rjmp	.+54     	; 0xc3e <EXTI_enable+0xf8>
		break;
	case EXTI_INT2_ID:
		EXTI_BASE->MCUCSR &= 0xBF;
     c08:	a4 e5       	ldi	r26, 0x54	; 84
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e4 e5       	ldi	r30, 0x54	; 84
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	8f 7b       	andi	r24, 0xBF	; 191
     c14:	8c 93       	st	X, r24
		EXTI_BASE->MCUCSR |= trigger << 6;
     c16:	a4 e5       	ldi	r26, 0x54	; 84
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	e4 e5       	ldi	r30, 0x54	; 84
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	28 2f       	mov	r18, r24
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	00 24       	eor	r0, r0
     c2a:	96 95       	lsr	r25
     c2c:	87 95       	ror	r24
     c2e:	07 94       	ror	r0
     c30:	96 95       	lsr	r25
     c32:	87 95       	ror	r24
     c34:	07 94       	ror	r0
     c36:	98 2f       	mov	r25, r24
     c38:	80 2d       	mov	r24, r0
     c3a:	82 2b       	or	r24, r18
     c3c:	8c 93       	st	X, r24
		break;
	}

}
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <EXTI_disable>:

void EXTI_disable(u8 Int_ID)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	0f 92       	push	r0
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	89 83       	std	Y+1, r24	; 0x01
	if(Int_ID < EXTI_INT1_ID){
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	87 30       	cpi	r24, 0x07	; 7
     c5c:	b0 f4       	brcc	.+44     	; 0xc8a <EXTI_disable+0x3e>
		CLR_BIT(EXTI_BASE->GICR, Int_ID);
     c5e:	a4 e5       	ldi	r26, 0x54	; 84
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e4 e5       	ldi	r30, 0x54	; 84
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	87 81       	ldd	r24, Z+7	; 0x07
     c68:	48 2f       	mov	r20, r24
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	02 2e       	mov	r0, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <EXTI_disable+0x30>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	0a 94       	dec	r0
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <EXTI_disable+0x2c>
     c80:	80 95       	com	r24
     c82:	84 23       	and	r24, r20
     c84:	17 96       	adiw	r26, 0x07	; 7
     c86:	8c 93       	st	X, r24
     c88:	17 97       	sbiw	r26, 0x07	; 7
	}
}
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <EXTI_setCallBack>:

void EXTI_setCallBack(u8 Int_ID, void (*localPtr)(void))
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	00 d0       	rcall	.+0      	; 0xc98 <EXTI_setCallBack+0x6>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <EXTI_setCallBack+0x8>
     c9a:	0f 92       	push	r0
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	89 83       	std	Y+1, r24	; 0x01
     ca2:	7b 83       	std	Y+3, r23	; 0x03
     ca4:	6a 83       	std	Y+2, r22	; 0x02
	switch (Int_ID)
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	3d 83       	std	Y+5, r19	; 0x05
     cae:	2c 83       	std	Y+4, r18	; 0x04
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
     cb2:	9d 81       	ldd	r25, Y+5	; 0x05
     cb4:	86 30       	cpi	r24, 0x06	; 6
     cb6:	91 05       	cpc	r25, r1
     cb8:	59 f0       	breq	.+22     	; 0xcd0 <EXTI_setCallBack+0x3e>
     cba:	2c 81       	ldd	r18, Y+4	; 0x04
     cbc:	3d 81       	ldd	r19, Y+5	; 0x05
     cbe:	27 30       	cpi	r18, 0x07	; 7
     cc0:	31 05       	cpc	r19, r1
     cc2:	69 f0       	breq	.+26     	; 0xcde <EXTI_setCallBack+0x4c>
     cc4:	8c 81       	ldd	r24, Y+4	; 0x04
     cc6:	9d 81       	ldd	r25, Y+5	; 0x05
     cc8:	85 30       	cpi	r24, 0x05	; 5
     cca:	91 05       	cpc	r25, r1
     ccc:	79 f0       	breq	.+30     	; 0xcec <EXTI_setCallBack+0x5a>
     cce:	14 c0       	rjmp	.+40     	; 0xcf8 <EXTI_setCallBack+0x66>
	{
	case EXTI_INT0_ID:
		Action[0] = localPtr;
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	9b 81       	ldd	r25, Y+3	; 0x03
     cd4:	90 93 d1 00 	sts	0x00D1, r25
     cd8:	80 93 d0 00 	sts	0x00D0, r24
     cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <EXTI_setCallBack+0x66>
		break;
	case EXTI_INT1_ID:
		Action[1] = localPtr;
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	9b 81       	ldd	r25, Y+3	; 0x03
     ce2:	90 93 d3 00 	sts	0x00D3, r25
     ce6:	80 93 d2 00 	sts	0x00D2, r24
     cea:	06 c0       	rjmp	.+12     	; 0xcf8 <EXTI_setCallBack+0x66>
		break;
	case EXTI_INT2_ID:
		Action[2] = localPtr;
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	9b 81       	ldd	r25, Y+3	; 0x03
     cf0:	90 93 d5 00 	sts	0x00D5, r25
     cf4:	80 93 d4 00 	sts	0x00D4, r24
		break;
	}
}
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	0f 90       	pop	r0
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	08 95       	ret

00000d08 <__vector_1>:

void __vector_1 (void){
     d08:	1f 92       	push	r1
     d0a:	0f 92       	push	r0
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	0f 92       	push	r0
     d10:	11 24       	eor	r1, r1
     d12:	2f 93       	push	r18
     d14:	3f 93       	push	r19
     d16:	4f 93       	push	r20
     d18:	5f 93       	push	r21
     d1a:	6f 93       	push	r22
     d1c:	7f 93       	push	r23
     d1e:	8f 93       	push	r24
     d20:	9f 93       	push	r25
     d22:	af 93       	push	r26
     d24:	bf 93       	push	r27
     d26:	ef 93       	push	r30
     d28:	ff 93       	push	r31
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
	if(Action[0]!= NULL){
     d32:	80 91 d0 00 	lds	r24, 0x00D0
     d36:	90 91 d1 00 	lds	r25, 0x00D1
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	29 f0       	breq	.+10     	; 0xd48 <__vector_1+0x40>
		Action[0]();
     d3e:	e0 91 d0 00 	lds	r30, 0x00D0
     d42:	f0 91 d1 00 	lds	r31, 0x00D1
     d46:	09 95       	icall
	}
}
     d48:	cf 91       	pop	r28
     d4a:	df 91       	pop	r29
     d4c:	ff 91       	pop	r31
     d4e:	ef 91       	pop	r30
     d50:	bf 91       	pop	r27
     d52:	af 91       	pop	r26
     d54:	9f 91       	pop	r25
     d56:	8f 91       	pop	r24
     d58:	7f 91       	pop	r23
     d5a:	6f 91       	pop	r22
     d5c:	5f 91       	pop	r21
     d5e:	4f 91       	pop	r20
     d60:	3f 91       	pop	r19
     d62:	2f 91       	pop	r18
     d64:	0f 90       	pop	r0
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	0f 90       	pop	r0
     d6a:	1f 90       	pop	r1
     d6c:	18 95       	reti

00000d6e <__vector_2>:

void __vector_2 (void){
     d6e:	1f 92       	push	r1
     d70:	0f 92       	push	r0
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	0f 92       	push	r0
     d76:	11 24       	eor	r1, r1
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	if(Action[1]!= NULL){
     d98:	80 91 d2 00 	lds	r24, 0x00D2
     d9c:	90 91 d3 00 	lds	r25, 0x00D3
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	29 f0       	breq	.+10     	; 0xdae <__vector_2+0x40>
		Action[1]();
     da4:	e0 91 d2 00 	lds	r30, 0x00D2
     da8:	f0 91 d3 00 	lds	r31, 0x00D3
     dac:	09 95       	icall
	}
}
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	bf 91       	pop	r27
     db8:	af 91       	pop	r26
     dba:	9f 91       	pop	r25
     dbc:	8f 91       	pop	r24
     dbe:	7f 91       	pop	r23
     dc0:	6f 91       	pop	r22
     dc2:	5f 91       	pop	r21
     dc4:	4f 91       	pop	r20
     dc6:	3f 91       	pop	r19
     dc8:	2f 91       	pop	r18
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	0f 90       	pop	r0
     dd0:	1f 90       	pop	r1
     dd2:	18 95       	reti

00000dd4 <__vector_18>:

void __vector_18 (void){
     dd4:	1f 92       	push	r1
     dd6:	0f 92       	push	r0
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	0f 92       	push	r0
     ddc:	11 24       	eor	r1, r1
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	4f 93       	push	r20
     de4:	5f 93       	push	r21
     de6:	6f 93       	push	r22
     de8:	7f 93       	push	r23
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	af 93       	push	r26
     df0:	bf 93       	push	r27
     df2:	ef 93       	push	r30
     df4:	ff 93       	push	r31
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
	if(Action[2]!= NULL){
     dfe:	80 91 d4 00 	lds	r24, 0x00D4
     e02:	90 91 d5 00 	lds	r25, 0x00D5
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	29 f0       	breq	.+10     	; 0xe14 <__vector_18+0x40>
		Action[2]();
     e0a:	e0 91 d4 00 	lds	r30, 0x00D4
     e0e:	f0 91 d5 00 	lds	r31, 0x00D5
     e12:	09 95       	icall
	}
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	bf 91       	pop	r27
     e1e:	af 91       	pop	r26
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	7f 91       	pop	r23
     e26:	6f 91       	pop	r22
     e28:	5f 91       	pop	r21
     e2a:	4f 91       	pop	r20
     e2c:	3f 91       	pop	r19
     e2e:	2f 91       	pop	r18
     e30:	0f 90       	pop	r0
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0f 90       	pop	r0
     e36:	1f 90       	pop	r1
     e38:	18 95       	reti

00000e3a <DIO_U8SetPortDirection>:
/***********************************************************************************/
/* 							PUBLIC FUNCTIONS IMPLEMENTATION						   */
/***********************************************************************************/

u8 DIO_U8SetPortDirection (const DIO_Config* config)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <DIO_U8SetPortDirection+0x6>
     e40:	0f 92       	push	r0
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	9a 83       	std	Y+2, r25	; 0x02
     e48:	89 83       	std	Y+1, r24	; 0x01
	if (config->port <= DIO_PORTD)
     e4a:	e9 81       	ldd	r30, Y+1	; 0x01
     e4c:	fa 81       	ldd	r31, Y+2	; 0x02
     e4e:	80 81       	ld	r24, Z
     e50:	84 30       	cpi	r24, 0x04	; 4
     e52:	70 f5       	brcc	.+92     	; 0xeb0 <DIO_U8SetPortDirection+0x76>
	{
		if (config->pin == DIO_PORT_INPUT)
     e54:	e9 81       	ldd	r30, Y+1	; 0x01
     e56:	fa 81       	ldd	r31, Y+2	; 0x02
     e58:	81 81       	ldd	r24, Z+1	; 0x01
     e5a:	88 23       	and	r24, r24
     e5c:	81 f4       	brne	.+32     	; 0xe7e <DIO_U8SetPortDirection+0x44>
		{
			*directionRegisters[config->port] = DIO_PORT_INPUT;
     e5e:	e9 81       	ldd	r30, Y+1	; 0x01
     e60:	fa 81       	ldd	r31, Y+2	; 0x02
     e62:	80 81       	ld	r24, Z
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	fc 01       	movw	r30, r24
     e6e:	e8 59       	subi	r30, 0x98	; 152
     e70:	ff 4f       	sbci	r31, 0xFF	; 255
     e72:	01 90       	ld	r0, Z+
     e74:	f0 81       	ld	r31, Z
     e76:	e0 2d       	mov	r30, r0
     e78:	10 82       	st	Z, r1
			return NO_ERROR;
     e7a:	1b 82       	std	Y+3, r1	; 0x03
     e7c:	1b c0       	rjmp	.+54     	; 0xeb4 <DIO_U8SetPortDirection+0x7a>
		}
		else if (config->pin == DIO_PORT_OUTPUT)
     e7e:	e9 81       	ldd	r30, Y+1	; 0x01
     e80:	fa 81       	ldd	r31, Y+2	; 0x02
     e82:	81 81       	ldd	r24, Z+1	; 0x01
     e84:	8f 3f       	cpi	r24, 0xFF	; 255
     e86:	89 f4       	brne	.+34     	; 0xeaa <DIO_U8SetPortDirection+0x70>
		{
			*directionRegisters[config->port] = DIO_PORT_OUTPUT;
     e88:	e9 81       	ldd	r30, Y+1	; 0x01
     e8a:	fa 81       	ldd	r31, Y+2	; 0x02
     e8c:	80 81       	ld	r24, Z
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	fc 01       	movw	r30, r24
     e98:	e8 59       	subi	r30, 0x98	; 152
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	01 90       	ld	r0, Z+
     e9e:	f0 81       	ld	r31, Z
     ea0:	e0 2d       	mov	r30, r0
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	80 83       	st	Z, r24
			return NO_ERROR;
     ea6:	1b 82       	std	Y+3, r1	; 0x03
     ea8:	05 c0       	rjmp	.+10     	; 0xeb4 <DIO_U8SetPortDirection+0x7a>
		}
		else
		{
			return ERROR;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	8b 83       	std	Y+3, r24	; 0x03
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <DIO_U8SetPortDirection+0x7a>
		}
	}
	else
	{
		return ERROR;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	8b 83       	std	Y+3, r24	; 0x03
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <DIO_U8SetPinDirection>:

u8 DIO_U8SetPinDirection (const DIO_Config* config)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <DIO_U8SetPinDirection+0x6>
     ec8:	0f 92       	push	r0
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01
	if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7)
     ed2:	e9 81       	ldd	r30, Y+1	; 0x01
     ed4:	fa 81       	ldd	r31, Y+2	; 0x02
     ed6:	80 81       	ld	r24, Z
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	08 f0       	brcs	.+2      	; 0xede <DIO_U8SetPinDirection+0x1c>
     edc:	6c c0       	rjmp	.+216    	; 0xfb6 <DIO_U8SetPinDirection+0xf4>
     ede:	e9 81       	ldd	r30, Y+1	; 0x01
     ee0:	fa 81       	ldd	r31, Y+2	; 0x02
     ee2:	81 81       	ldd	r24, Z+1	; 0x01
     ee4:	88 30       	cpi	r24, 0x08	; 8
     ee6:	08 f0       	brcs	.+2      	; 0xeea <DIO_U8SetPinDirection+0x28>
     ee8:	66 c0       	rjmp	.+204    	; 0xfb6 <DIO_U8SetPinDirection+0xf4>
	{
		if (config->direction == DIO_PIN_INPUT)
     eea:	e9 81       	ldd	r30, Y+1	; 0x01
     eec:	fa 81       	ldd	r31, Y+2	; 0x02
     eee:	82 81       	ldd	r24, Z+2	; 0x02
     ef0:	88 23       	and	r24, r24
     ef2:	69 f5       	brne	.+90     	; 0xf4e <DIO_U8SetPinDirection+0x8c>
		{
			CLR_BIT( *directionRegisters[config->port], config->pin );
     ef4:	e9 81       	ldd	r30, Y+1	; 0x01
     ef6:	fa 81       	ldd	r31, Y+2	; 0x02
     ef8:	80 81       	ld	r24, Z
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	fc 01       	movw	r30, r24
     f04:	e8 59       	subi	r30, 0x98	; 152
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	a0 81       	ld	r26, Z
     f0a:	b1 81       	ldd	r27, Z+1	; 0x01
     f0c:	e9 81       	ldd	r30, Y+1	; 0x01
     f0e:	fa 81       	ldd	r31, Y+2	; 0x02
     f10:	80 81       	ld	r24, Z
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	fc 01       	movw	r30, r24
     f1c:	e8 59       	subi	r30, 0x98	; 152
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	01 90       	ld	r0, Z+
     f22:	f0 81       	ld	r31, Z
     f24:	e0 2d       	mov	r30, r0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	e9 81       	ldd	r30, Y+1	; 0x01
     f2c:	fa 81       	ldd	r31, Y+2	; 0x02
     f2e:	81 81       	ldd	r24, Z+1	; 0x01
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_U8SetPinDirection+0x7e>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_U8SetPinDirection+0x7a>
     f44:	80 95       	com	r24
     f46:	84 23       	and	r24, r20
     f48:	8c 93       	st	X, r24
			return NO_ERROR;
     f4a:	1b 82       	std	Y+3, r1	; 0x03
     f4c:	36 c0       	rjmp	.+108    	; 0xfba <DIO_U8SetPinDirection+0xf8>
		}
		else if (config->direction == DIO_PIN_OUTPUT)
     f4e:	e9 81       	ldd	r30, Y+1	; 0x01
     f50:	fa 81       	ldd	r31, Y+2	; 0x02
     f52:	82 81       	ldd	r24, Z+2	; 0x02
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	61 f5       	brne	.+88     	; 0xfb0 <DIO_U8SetPinDirection+0xee>
		{
			SET_BIT( *directionRegisters[config->port], config->pin );
     f58:	e9 81       	ldd	r30, Y+1	; 0x01
     f5a:	fa 81       	ldd	r31, Y+2	; 0x02
     f5c:	80 81       	ld	r24, Z
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	fc 01       	movw	r30, r24
     f68:	e8 59       	subi	r30, 0x98	; 152
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	a0 81       	ld	r26, Z
     f6e:	b1 81       	ldd	r27, Z+1	; 0x01
     f70:	e9 81       	ldd	r30, Y+1	; 0x01
     f72:	fa 81       	ldd	r31, Y+2	; 0x02
     f74:	80 81       	ld	r24, Z
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	fc 01       	movw	r30, r24
     f80:	e8 59       	subi	r30, 0x98	; 152
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	01 90       	ld	r0, Z+
     f86:	f0 81       	ld	r31, Z
     f88:	e0 2d       	mov	r30, r0
     f8a:	80 81       	ld	r24, Z
     f8c:	48 2f       	mov	r20, r24
     f8e:	e9 81       	ldd	r30, Y+1	; 0x01
     f90:	fa 81       	ldd	r31, Y+2	; 0x02
     f92:	81 81       	ldd	r24, Z+1	; 0x01
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_U8SetPinDirection+0xe2>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_U8SetPinDirection+0xde>
     fa8:	84 2b       	or	r24, r20
     faa:	8c 93       	st	X, r24
			return NO_ERROR;
     fac:	1b 82       	std	Y+3, r1	; 0x03
     fae:	05 c0       	rjmp	.+10     	; 0xfba <DIO_U8SetPinDirection+0xf8>
		}
		else
		{
			return ERROR;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	8b 83       	std	Y+3, r24	; 0x03
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_U8SetPinDirection+0xf8>
		}
	}
	else
	{
		return ERROR;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	8b 83       	std	Y+3, r24	; 0x03
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	0f 90       	pop	r0
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <DIO_U8SetPortValue>:

u8 DIO_U8SetPortValue(const DIO_Config* config) {
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <DIO_U8SetPortValue+0x6>
     fce:	0f 92       	push	r0
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
    if (config != NULL) {
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	d1 f0       	breq	.+52     	; 0x1014 <DIO_U8SetPortValue+0x4c>
        if (config->port <= DIO_PORTD) {
     fe0:	e9 81       	ldd	r30, Y+1	; 0x01
     fe2:	fa 81       	ldd	r31, Y+2	; 0x02
     fe4:	80 81       	ld	r24, Z
     fe6:	84 30       	cpi	r24, 0x04	; 4
     fe8:	90 f4       	brcc	.+36     	; 0x100e <DIO_U8SetPortValue+0x46>
            *writeRegisters[config->port] = config->value;
     fea:	e9 81       	ldd	r30, Y+1	; 0x01
     fec:	fa 81       	ldd	r31, Y+2	; 0x02
     fee:	80 81       	ld	r24, Z
     ff0:	88 2f       	mov	r24, r24
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	fc 01       	movw	r30, r24
     ffa:	e0 59       	subi	r30, 0x90	; 144
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	a0 81       	ld	r26, Z
    1000:	b1 81       	ldd	r27, Z+1	; 0x01
    1002:	e9 81       	ldd	r30, Y+1	; 0x01
    1004:	fa 81       	ldd	r31, Y+2	; 0x02
    1006:	83 81       	ldd	r24, Z+3	; 0x03
    1008:	8c 93       	st	X, r24
            return NO_ERROR;
    100a:	1b 82       	std	Y+3, r1	; 0x03
    100c:	05 c0       	rjmp	.+10     	; 0x1018 <DIO_U8SetPortValue+0x50>
        } else {
            return ERROR;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	8b 83       	std	Y+3, r24	; 0x03
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_U8SetPortValue+0x50>
        }
    } else {
        return ERROR;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	8b 83       	std	Y+3, r24	; 0x03
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(const DIO_Config* config) {
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <DIO_U8SetPinValue+0x6>
    102c:	0f 92       	push	r0
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	89 83       	std	Y+1, r24	; 0x01
    if (config != NULL) {
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	09 f4       	brne	.+2      	; 0x1040 <DIO_U8SetPinValue+0x1a>
    103e:	75 c0       	rjmp	.+234    	; 0x112a <DIO_U8SetPinValue+0x104>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
    1040:	e9 81       	ldd	r30, Y+1	; 0x01
    1042:	fa 81       	ldd	r31, Y+2	; 0x02
    1044:	80 81       	ld	r24, Z
    1046:	84 30       	cpi	r24, 0x04	; 4
    1048:	08 f0       	brcs	.+2      	; 0x104c <DIO_U8SetPinValue+0x26>
    104a:	6c c0       	rjmp	.+216    	; 0x1124 <DIO_U8SetPinValue+0xfe>
    104c:	e9 81       	ldd	r30, Y+1	; 0x01
    104e:	fa 81       	ldd	r31, Y+2	; 0x02
    1050:	81 81       	ldd	r24, Z+1	; 0x01
    1052:	88 30       	cpi	r24, 0x08	; 8
    1054:	08 f0       	brcs	.+2      	; 0x1058 <DIO_U8SetPinValue+0x32>
    1056:	66 c0       	rjmp	.+204    	; 0x1124 <DIO_U8SetPinValue+0xfe>
            if (config->value == DIO_PIN_HIGH) {
    1058:	e9 81       	ldd	r30, Y+1	; 0x01
    105a:	fa 81       	ldd	r31, Y+2	; 0x02
    105c:	83 81       	ldd	r24, Z+3	; 0x03
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	61 f5       	brne	.+88     	; 0x10ba <DIO_U8SetPinValue+0x94>
                SET_BIT(*writeRegisters[config->port], config->pin);
    1062:	e9 81       	ldd	r30, Y+1	; 0x01
    1064:	fa 81       	ldd	r31, Y+2	; 0x02
    1066:	80 81       	ld	r24, Z
    1068:	88 2f       	mov	r24, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	fc 01       	movw	r30, r24
    1072:	e0 59       	subi	r30, 0x90	; 144
    1074:	ff 4f       	sbci	r31, 0xFF	; 255
    1076:	a0 81       	ld	r26, Z
    1078:	b1 81       	ldd	r27, Z+1	; 0x01
    107a:	e9 81       	ldd	r30, Y+1	; 0x01
    107c:	fa 81       	ldd	r31, Y+2	; 0x02
    107e:	80 81       	ld	r24, Z
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	fc 01       	movw	r30, r24
    108a:	e0 59       	subi	r30, 0x90	; 144
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	01 90       	ld	r0, Z+
    1090:	f0 81       	ld	r31, Z
    1092:	e0 2d       	mov	r30, r0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	e9 81       	ldd	r30, Y+1	; 0x01
    109a:	fa 81       	ldd	r31, Y+2	; 0x02
    109c:	81 81       	ldd	r24, Z+1	; 0x01
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <DIO_U8SetPinValue+0x88>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <DIO_U8SetPinValue+0x84>
    10b2:	84 2b       	or	r24, r20
    10b4:	8c 93       	st	X, r24
                return NO_ERROR;
    10b6:	1b 82       	std	Y+3, r1	; 0x03
    10b8:	3a c0       	rjmp	.+116    	; 0x112e <DIO_U8SetPinValue+0x108>
            } else if (config->value == DIO_PIN_LOW) {
    10ba:	e9 81       	ldd	r30, Y+1	; 0x01
    10bc:	fa 81       	ldd	r31, Y+2	; 0x02
    10be:	83 81       	ldd	r24, Z+3	; 0x03
    10c0:	88 23       	and	r24, r24
    10c2:	69 f5       	brne	.+90     	; 0x111e <DIO_U8SetPinValue+0xf8>
                CLR_BIT(*writeRegisters[config->port], config->pin);
    10c4:	e9 81       	ldd	r30, Y+1	; 0x01
    10c6:	fa 81       	ldd	r31, Y+2	; 0x02
    10c8:	80 81       	ld	r24, Z
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	fc 01       	movw	r30, r24
    10d4:	e0 59       	subi	r30, 0x90	; 144
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	a0 81       	ld	r26, Z
    10da:	b1 81       	ldd	r27, Z+1	; 0x01
    10dc:	e9 81       	ldd	r30, Y+1	; 0x01
    10de:	fa 81       	ldd	r31, Y+2	; 0x02
    10e0:	80 81       	ld	r24, Z
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	fc 01       	movw	r30, r24
    10ec:	e0 59       	subi	r30, 0x90	; 144
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	01 90       	ld	r0, Z+
    10f2:	f0 81       	ld	r31, Z
    10f4:	e0 2d       	mov	r30, r0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	e9 81       	ldd	r30, Y+1	; 0x01
    10fc:	fa 81       	ldd	r31, Y+2	; 0x02
    10fe:	81 81       	ldd	r24, Z+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_U8SetPinValue+0xea>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_U8SetPinValue+0xe6>
    1114:	80 95       	com	r24
    1116:	84 23       	and	r24, r20
    1118:	8c 93       	st	X, r24
                return NO_ERROR;
    111a:	1b 82       	std	Y+3, r1	; 0x03
    111c:	08 c0       	rjmp	.+16     	; 0x112e <DIO_U8SetPinValue+0x108>
            } else {
                return ERROR;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	8b 83       	std	Y+3, r24	; 0x03
    1122:	05 c0       	rjmp	.+10     	; 0x112e <DIO_U8SetPinValue+0x108>
            }
        } else {
            return ERROR;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	8b 83       	std	Y+3, r24	; 0x03
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_U8SetPinValue+0x108>
        }
    } else {
        return ERROR;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	8b 83       	std	Y+3, r24	; 0x03
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <DIO_U8TogglePin>:

u8 DIO_U8TogglePin(const DIO_Config* config) {
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <DIO_U8TogglePin+0x6>
    1142:	0f 92       	push	r0
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
    if (config != NULL) {
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	9a 81       	ldd	r25, Y+2	; 0x02
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	c9 f1       	breq	.+114    	; 0x11c6 <DIO_U8TogglePin+0x8a>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
    1154:	e9 81       	ldd	r30, Y+1	; 0x01
    1156:	fa 81       	ldd	r31, Y+2	; 0x02
    1158:	80 81       	ld	r24, Z
    115a:	84 30       	cpi	r24, 0x04	; 4
    115c:	88 f5       	brcc	.+98     	; 0x11c0 <DIO_U8TogglePin+0x84>
    115e:	e9 81       	ldd	r30, Y+1	; 0x01
    1160:	fa 81       	ldd	r31, Y+2	; 0x02
    1162:	81 81       	ldd	r24, Z+1	; 0x01
    1164:	88 30       	cpi	r24, 0x08	; 8
    1166:	60 f5       	brcc	.+88     	; 0x11c0 <DIO_U8TogglePin+0x84>
            TOG_BIT(*writeRegisters[config->port], config->pin);
    1168:	e9 81       	ldd	r30, Y+1	; 0x01
    116a:	fa 81       	ldd	r31, Y+2	; 0x02
    116c:	80 81       	ld	r24, Z
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	fc 01       	movw	r30, r24
    1178:	e0 59       	subi	r30, 0x90	; 144
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	a0 81       	ld	r26, Z
    117e:	b1 81       	ldd	r27, Z+1	; 0x01
    1180:	e9 81       	ldd	r30, Y+1	; 0x01
    1182:	fa 81       	ldd	r31, Y+2	; 0x02
    1184:	80 81       	ld	r24, Z
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	fc 01       	movw	r30, r24
    1190:	e0 59       	subi	r30, 0x90	; 144
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	01 90       	ld	r0, Z+
    1196:	f0 81       	ld	r31, Z
    1198:	e0 2d       	mov	r30, r0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	e9 81       	ldd	r30, Y+1	; 0x01
    11a0:	fa 81       	ldd	r31, Y+2	; 0x02
    11a2:	81 81       	ldd	r24, Z+1	; 0x01
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_U8TogglePin+0x78>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <DIO_U8TogglePin+0x74>
    11b8:	84 27       	eor	r24, r20
    11ba:	8c 93       	st	X, r24
            return NO_ERROR;
    11bc:	1b 82       	std	Y+3, r1	; 0x03
    11be:	05 c0       	rjmp	.+10     	; 0x11ca <DIO_U8TogglePin+0x8e>
        } else {
            return ERROR;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	8b 83       	std	Y+3, r24	; 0x03
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_U8TogglePin+0x8e>
        }
    } else {
        return ERROR;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	8b 83       	std	Y+3, r24	; 0x03
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <DIO_U8TogglePort>:

u8 DIO_U8TogglePort(DIO_Port port) {
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <DIO_U8TogglePort+0x6>
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
    if (port <= DIO_PORTD) {
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	84 30       	cpi	r24, 0x04	; 4
    11e8:	d0 f4       	brcc	.+52     	; 0x121e <DIO_U8TogglePort+0x46>
        *writeRegisters[port] = ~(*writeRegisters[port]);
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	fc 01       	movw	r30, r24
    11f6:	e0 59       	subi	r30, 0x90	; 144
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	a0 81       	ld	r26, Z
    11fc:	b1 81       	ldd	r27, Z+1	; 0x01
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	88 2f       	mov	r24, r24
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	fc 01       	movw	r30, r24
    120a:	e0 59       	subi	r30, 0x90	; 144
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	01 90       	ld	r0, Z+
    1210:	f0 81       	ld	r31, Z
    1212:	e0 2d       	mov	r30, r0
    1214:	80 81       	ld	r24, Z
    1216:	80 95       	com	r24
    1218:	8c 93       	st	X, r24
        return NO_ERROR;
    121a:	1a 82       	std	Y+2, r1	; 0x02
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_U8TogglePort+0x4a>
    } else {
        return ERROR;
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	8a 83       	std	Y+2, r24	; 0x02
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(const DIO_Config* config, u8* value) {
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <DIO_U8GetPinValue+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <DIO_U8GetPinValue+0x8>
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	9a 83       	std	Y+2, r25	; 0x02
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	7c 83       	std	Y+4, r23	; 0x04
    1242:	6b 83       	std	Y+3, r22	; 0x03
    if (config != NULL && value != NULL) {
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	99 f1       	breq	.+102    	; 0x12b2 <DIO_U8GetPinValue+0x84>
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	79 f1       	breq	.+94     	; 0x12b2 <DIO_U8GetPinValue+0x84>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
    1254:	e9 81       	ldd	r30, Y+1	; 0x01
    1256:	fa 81       	ldd	r31, Y+2	; 0x02
    1258:	80 81       	ld	r24, Z
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	38 f5       	brcc	.+78     	; 0x12ac <DIO_U8GetPinValue+0x7e>
    125e:	e9 81       	ldd	r30, Y+1	; 0x01
    1260:	fa 81       	ldd	r31, Y+2	; 0x02
    1262:	81 81       	ldd	r24, Z+1	; 0x01
    1264:	88 30       	cpi	r24, 0x08	; 8
    1266:	10 f5       	brcc	.+68     	; 0x12ac <DIO_U8GetPinValue+0x7e>
            *value = GET_BIT(*readRegisters[config->port], config->pin);
    1268:	e9 81       	ldd	r30, Y+1	; 0x01
    126a:	fa 81       	ldd	r31, Y+2	; 0x02
    126c:	80 81       	ld	r24, Z
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	fc 01       	movw	r30, r24
    1278:	e8 58       	subi	r30, 0x88	; 136
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	01 90       	ld	r0, Z+
    127e:	f0 81       	ld	r31, Z
    1280:	e0 2d       	mov	r30, r0
    1282:	80 81       	ld	r24, Z
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	e9 81       	ldd	r30, Y+1	; 0x01
    128a:	fa 81       	ldd	r31, Y+2	; 0x02
    128c:	81 81       	ldd	r24, Z+1	; 0x01
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	a9 01       	movw	r20, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_U8GetPinValue+0x6c>
    1296:	55 95       	asr	r21
    1298:	47 95       	ror	r20
    129a:	8a 95       	dec	r24
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_U8GetPinValue+0x68>
    129e:	ca 01       	movw	r24, r20
    12a0:	81 70       	andi	r24, 0x01	; 1
    12a2:	eb 81       	ldd	r30, Y+3	; 0x03
    12a4:	fc 81       	ldd	r31, Y+4	; 0x04
    12a6:	80 83       	st	Z, r24
            return NO_ERROR;
    12a8:	1d 82       	std	Y+5, r1	; 0x05
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <DIO_U8GetPinValue+0x88>
        } else {
            return ERROR;
    12ac:	51 e0       	ldi	r21, 0x01	; 1
    12ae:	5d 83       	std	Y+5, r21	; 0x05
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_U8GetPinValue+0x88>
        }
    } else {
        return ERROR;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	8d 83       	std	Y+5, r24	; 0x05
    12b6:	8d 81       	ldd	r24, Y+5	; 0x05
    }
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <DIO_U8GetPortValue>:

u8 DIO_U8GetPortValue(DIO_Port port, u8* value) {
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <DIO_U8GetPortValue+0x6>
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <DIO_U8GetPortValue+0x8>
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	89 83       	std	Y+1, r24	; 0x01
    12d6:	7b 83       	std	Y+3, r23	; 0x03
    12d8:	6a 83       	std	Y+2, r22	; 0x02
    if (value != NULL) {
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	9b 81       	ldd	r25, Y+3	; 0x03
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	b9 f0       	breq	.+46     	; 0x1310 <DIO_U8GetPortValue+0x48>
        if (port <= DIO_PORTD) {
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	84 30       	cpi	r24, 0x04	; 4
    12e6:	88 f4       	brcc	.+34     	; 0x130a <DIO_U8GetPortValue+0x42>
            *value = *readRegisters[port];
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	88 2f       	mov	r24, r24
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	fc 01       	movw	r30, r24
    12f4:	e8 58       	subi	r30, 0x88	; 136
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	01 90       	ld	r0, Z+
    12fa:	f0 81       	ld	r31, Z
    12fc:	e0 2d       	mov	r30, r0
    12fe:	80 81       	ld	r24, Z
    1300:	ea 81       	ldd	r30, Y+2	; 0x02
    1302:	fb 81       	ldd	r31, Y+3	; 0x03
    1304:	80 83       	st	Z, r24
            return NO_ERROR;
    1306:	1c 82       	std	Y+4, r1	; 0x04
    1308:	05 c0       	rjmp	.+10     	; 0x1314 <DIO_U8GetPortValue+0x4c>
        } else {
            return ERROR;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	8c 83       	std	Y+4, r24	; 0x04
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_U8GetPortValue+0x4c>
        }
    } else {
        return ERROR;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	8c 83       	std	Y+4, r24	; 0x04
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    }
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <segment_Init>:
#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_Interface.h"

#include "segment.h"

void segment_Init() {
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	a1 97       	sbiw	r28, 0x21	; 33
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
        {DIO_PORTB, DIO_PIN4, DIO_PIN_OUTPUT},
        {DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT},
        {DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT},
        {DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT},
        {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT}
    };
    1338:	80 e2       	ldi	r24, 0x20	; 32
    133a:	fe 01       	movw	r30, r28
    133c:	32 96       	adiw	r30, 0x02	; 2
    133e:	df 01       	movw	r26, r30
    1340:	98 2f       	mov	r25, r24
    1342:	1d 92       	st	X+, r1
    1344:	9a 95       	dec	r25
    1346:	e9 f7       	brne	.-6      	; 0x1342 <segment_Init+0x1e>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	8a 83       	std	Y+2, r24	; 0x02
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	8c 83       	std	Y+4, r24	; 0x04
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	8e 83       	std	Y+6, r24	; 0x06
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	8f 83       	std	Y+7, r24	; 0x07
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	88 87       	std	Y+8, r24	; 0x08
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	8a 87       	std	Y+10, r24	; 0x0a
    1360:	82 e0       	ldi	r24, 0x02	; 2
    1362:	8b 87       	std	Y+11, r24	; 0x0b
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	8c 87       	std	Y+12, r24	; 0x0c
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	8e 87       	std	Y+14, r24	; 0x0e
    136c:	84 e0       	ldi	r24, 0x04	; 4
    136e:	8f 87       	std	Y+15, r24	; 0x0f
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	88 8b       	std	Y+16, r24	; 0x10
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	8a 8b       	std	Y+18, r24	; 0x12
    1378:	86 e0       	ldi	r24, 0x06	; 6
    137a:	8b 8b       	std	Y+19, r24	; 0x13
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	8c 8b       	std	Y+20, r24	; 0x14
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	8e 8b       	std	Y+22, r24	; 0x16
    1384:	85 e0       	ldi	r24, 0x05	; 5
    1386:	8f 8b       	std	Y+23, r24	; 0x17
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	88 8f       	std	Y+24, r24	; 0x18
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	8b 8f       	std	Y+27, r24	; 0x1b
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	8c 8f       	std	Y+28, r24	; 0x1c
    1394:	83 e0       	ldi	r24, 0x03	; 3
    1396:	8f 8f       	std	Y+31, r24	; 0x1f
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	88 a3       	std	Y+32, r24	; 0x20

    // Initialize the segment pins
    for (u8 i = 0; i < sizeof(segmentPins) / sizeof(segmentPins[0]); i++) {
    139c:	19 82       	std	Y+1, r1	; 0x01
    139e:	1f c0       	rjmp	.+62     	; 0x13de <segment_Init+0xba>
        DIO_U8SetPinDirection(&segmentPins[i]);
    13a0:	89 81       	ldd	r24, Y+1	; 0x01
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	9c 01       	movw	r18, r24
    13a8:	22 0f       	add	r18, r18
    13aa:	33 1f       	adc	r19, r19
    13ac:	22 0f       	add	r18, r18
    13ae:	33 1f       	adc	r19, r19
    13b0:	ce 01       	movw	r24, r28
    13b2:	02 96       	adiw	r24, 0x02	; 2
    13b4:	82 0f       	add	r24, r18
    13b6:	93 1f       	adc	r25, r19
    13b8:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_U8SetPinDirection>
        DIO_U8SetPinValue(&segmentPins[i]);
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9c 01       	movw	r18, r24
    13c4:	22 0f       	add	r18, r18
    13c6:	33 1f       	adc	r19, r19
    13c8:	22 0f       	add	r18, r18
    13ca:	33 1f       	adc	r19, r19
    13cc:	ce 01       	movw	r24, r28
    13ce:	02 96       	adiw	r24, 0x02	; 2
    13d0:	82 0f       	add	r24, r18
    13d2:	93 1f       	adc	r25, r19
    13d4:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_U8SetPinValue>
        {DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT},
        {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT}
    };

    // Initialize the segment pins
    for (u8 i = 0; i < sizeof(segmentPins) / sizeof(segmentPins[0]); i++) {
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	8f 5f       	subi	r24, 0xFF	; 255
    13dc:	89 83       	std	Y+1, r24	; 0x01
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	88 30       	cpi	r24, 0x08	; 8
    13e2:	f0 f2       	brcs	.-68     	; 0x13a0 <segment_Init+0x7c>
        DIO_U8SetPinDirection(&segmentPins[i]);
        DIO_U8SetPinValue(&segmentPins[i]);
    }
}
    13e4:	a1 96       	adiw	r28, 0x21	; 33
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	de bf       	out	0x3e, r29	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	cd bf       	out	0x3d, r28	; 61
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <segment_Num>:

void segment_Num(u8 num, u8 segmentNum) {
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	e3 97       	sbiw	r28, 0x33	; 51
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	88 a7       	std	Y+40, r24	; 0x28
    140c:	69 a7       	std	Y+41, r22	; 0x29
    DIO_Config clearPins[] = {
        {DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
        {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
        {DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
        {DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT, DIO_PIN_HIGH}
    };
    140e:	ae 01       	movw	r20, r28
    1410:	4c 5f       	subi	r20, 0xFC	; 252
    1412:	5f 4f       	sbci	r21, 0xFF	; 255
    1414:	5b a7       	std	Y+43, r21	; 0x2b
    1416:	4a a7       	std	Y+42, r20	; 0x2a
    1418:	80 e9       	ldi	r24, 0x90	; 144
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9d a7       	std	Y+45, r25	; 0x2d
    141e:	8c a7       	std	Y+44, r24	; 0x2c
    1420:	90 e1       	ldi	r25, 0x10	; 16
    1422:	9e a7       	std	Y+46, r25	; 0x2e
    1424:	ec a5       	ldd	r30, Y+44	; 0x2c
    1426:	fd a5       	ldd	r31, Y+45	; 0x2d
    1428:	00 80       	ld	r0, Z
    142a:	4c a5       	ldd	r20, Y+44	; 0x2c
    142c:	5d a5       	ldd	r21, Y+45	; 0x2d
    142e:	4f 5f       	subi	r20, 0xFF	; 255
    1430:	5f 4f       	sbci	r21, 0xFF	; 255
    1432:	5d a7       	std	Y+45, r21	; 0x2d
    1434:	4c a7       	std	Y+44, r20	; 0x2c
    1436:	ea a5       	ldd	r30, Y+42	; 0x2a
    1438:	fb a5       	ldd	r31, Y+43	; 0x2b
    143a:	00 82       	st	Z, r0
    143c:	4a a5       	ldd	r20, Y+42	; 0x2a
    143e:	5b a5       	ldd	r21, Y+43	; 0x2b
    1440:	4f 5f       	subi	r20, 0xFF	; 255
    1442:	5f 4f       	sbci	r21, 0xFF	; 255
    1444:	5b a7       	std	Y+43, r21	; 0x2b
    1446:	4a a7       	std	Y+42, r20	; 0x2a
    1448:	5e a5       	ldd	r21, Y+46	; 0x2e
    144a:	51 50       	subi	r21, 0x01	; 1
    144c:	5e a7       	std	Y+46, r21	; 0x2e
    144e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1450:	88 23       	and	r24, r24
    1452:	41 f7       	brne	.-48     	; 0x1424 <segment_Num+0x2e>

    for (u8 i = 0; i < sizeof(clearPins) / sizeof(clearPins[0]); i++) {
    1454:	1b 82       	std	Y+3, r1	; 0x03
    1456:	11 c0       	rjmp	.+34     	; 0x147a <segment_Num+0x84>
        DIO_U8SetPinValue(&clearPins[i]); // Set pin value to low
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9c 01       	movw	r18, r24
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	22 0f       	add	r18, r18
    1466:	33 1f       	adc	r19, r19
    1468:	ce 01       	movw	r24, r28
    146a:	04 96       	adiw	r24, 0x04	; 4
    146c:	82 0f       	add	r24, r18
    146e:	93 1f       	adc	r25, r19
    1470:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_U8SetPinValue>
        {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
        {DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
        {DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT, DIO_PIN_HIGH}
    };

    for (u8 i = 0; i < sizeof(clearPins) / sizeof(clearPins[0]); i++) {
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	8f 5f       	subi	r24, 0xFF	; 255
    1478:	8b 83       	std	Y+3, r24	; 0x03
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	84 30       	cpi	r24, 0x04	; 4
    147e:	60 f3       	brcs	.-40     	; 0x1458 <segment_Num+0x62>
    DIO_Config segmentPins[] = {
        {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT, DIO_PIN_LOW},
        {DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT, DIO_PIN_LOW},
        {DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT, DIO_PIN_LOW},
        {DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT, DIO_PIN_LOW}
    };
    1480:	fe 01       	movw	r30, r28
    1482:	74 96       	adiw	r30, 0x14	; 20
    1484:	f8 ab       	std	Y+48, r31	; 0x30
    1486:	ef a7       	std	Y+47, r30	; 0x2f
    1488:	40 e8       	ldi	r20, 0x80	; 128
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	5a ab       	std	Y+50, r21	; 0x32
    148e:	49 ab       	std	Y+49, r20	; 0x31
    1490:	50 e1       	ldi	r21, 0x10	; 16
    1492:	5b ab       	std	Y+51, r21	; 0x33
    1494:	e9 a9       	ldd	r30, Y+49	; 0x31
    1496:	fa a9       	ldd	r31, Y+50	; 0x32
    1498:	00 80       	ld	r0, Z
    149a:	49 a9       	ldd	r20, Y+49	; 0x31
    149c:	5a a9       	ldd	r21, Y+50	; 0x32
    149e:	4f 5f       	subi	r20, 0xFF	; 255
    14a0:	5f 4f       	sbci	r21, 0xFF	; 255
    14a2:	5a ab       	std	Y+50, r21	; 0x32
    14a4:	49 ab       	std	Y+49, r20	; 0x31
    14a6:	ef a5       	ldd	r30, Y+47	; 0x2f
    14a8:	f8 a9       	ldd	r31, Y+48	; 0x30
    14aa:	00 82       	st	Z, r0
    14ac:	4f a5       	ldd	r20, Y+47	; 0x2f
    14ae:	58 a9       	ldd	r21, Y+48	; 0x30
    14b0:	4f 5f       	subi	r20, 0xFF	; 255
    14b2:	5f 4f       	sbci	r21, 0xFF	; 255
    14b4:	58 ab       	std	Y+48, r21	; 0x30
    14b6:	4f a7       	std	Y+47, r20	; 0x2f
    14b8:	5b a9       	ldd	r21, Y+51	; 0x33
    14ba:	51 50       	subi	r21, 0x01	; 1
    14bc:	5b ab       	std	Y+51, r21	; 0x33
    14be:	8b a9       	ldd	r24, Y+51	; 0x33
    14c0:	88 23       	and	r24, r24
    14c2:	41 f7       	brne	.-48     	; 0x1494 <segment_Num+0x9e>

    if (segmentNum >= 1 && segmentNum <= 4) {
    14c4:	89 a5       	ldd	r24, Y+41	; 0x29
    14c6:	88 23       	and	r24, r24
    14c8:	c1 f0       	breq	.+48     	; 0x14fa <segment_Num+0x104>
    14ca:	89 a5       	ldd	r24, Y+41	; 0x29
    14cc:	85 30       	cpi	r24, 0x05	; 5
    14ce:	a8 f4       	brcc	.+42     	; 0x14fa <segment_Num+0x104>
        DIO_U8SetPinValue(&segmentPins[segmentNum - 1]); // Set segment pin value to high
    14d0:	89 a5       	ldd	r24, Y+41	; 0x29
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	82 1b       	sub	r24, r18
    14dc:	93 0b       	sbc	r25, r19
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	22 27       	eor	r18, r18
    14e8:	33 27       	eor	r19, r19
    14ea:	28 1b       	sub	r18, r24
    14ec:	39 0b       	sbc	r19, r25
    14ee:	ce 01       	movw	r24, r28
    14f0:	44 96       	adiw	r24, 0x14	; 20
    14f2:	82 0f       	add	r24, r18
    14f4:	93 1f       	adc	r25, r19
    14f6:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_U8SetPinValue>
    }

    DIO_Config displayPin;

    // Set the common configuration for the display pin
    displayPin.port = DIO_PORTB;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	8c a3       	std	Y+36, r24	; 0x24
    displayPin.direction = DIO_PIN_OUTPUT;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	8e a3       	std	Y+38, r24	; 0x26

    // Now, set pins PB0, PB1, PB2, and PB4 to display the number
    for (u8 i = 0; i < 4; i++) {
    1502:	1a 82       	std	Y+2, r1	; 0x02
    1504:	1a c0       	rjmp	.+52     	; 0x153a <segment_Num+0x144>
        displayPin.pin = i;
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	8d a3       	std	Y+37, r24	; 0x25
        // Set the pin value based on the number (num)
        u8 pinValue = (num & (1 << i)) ? DIO_PIN_HIGH : DIO_PIN_LOW;
    150a:	88 a5       	ldd	r24, Y+40	; 0x28
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	f9 01       	movw	r30, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <segment_Num+0x128>
    151a:	f5 95       	asr	r31
    151c:	e7 95       	ror	r30
    151e:	8a 95       	dec	r24
    1520:	e2 f7       	brpl	.-8      	; 0x151a <segment_Num+0x124>
    1522:	cf 01       	movw	r24, r30
    1524:	81 70       	andi	r24, 0x01	; 1
    1526:	89 83       	std	Y+1, r24	; 0x01

        // Call the function with the configured pin and its value
        displayPin.value = pinValue;
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	8f a3       	std	Y+39, r24	; 0x27
        DIO_U8SetPinValue(&displayPin);
    152c:	ce 01       	movw	r24, r28
    152e:	84 96       	adiw	r24, 0x24	; 36
    1530:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_U8SetPinValue>
    // Set the common configuration for the display pin
    displayPin.port = DIO_PORTB;
    displayPin.direction = DIO_PIN_OUTPUT;

    // Now, set pins PB0, PB1, PB2, and PB4 to display the number
    for (u8 i = 0; i < 4; i++) {
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	8f 5f       	subi	r24, 0xFF	; 255
    1538:	8a 83       	std	Y+2, r24	; 0x02
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	84 30       	cpi	r24, 0x04	; 4
    153e:	18 f3       	brcs	.-58     	; 0x1506 <segment_Num+0x110>
        displayPin.value = pinValue;
        DIO_U8SetPinValue(&displayPin);
    }


}
    1540:	e3 96       	adiw	r28, 0x33	; 51
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <KEYPAD_getPressedKey>:
//
//    // No key is pressed, return a default value (e.g., '\0' for no key)
//    return '\0';
//}

u8 KEYPAD_getPressedKey(void){
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	c4 55       	subi	r28, 0x54	; 84
    155c:	d0 40       	sbci	r29, 0x00	; 0
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
	char keymap[4][4] = {
	        {'1', '2', '3', '+'},
	        {'4', '5', '6', '-'},
	        {'7', '8', '9', '*'},
	        {'*', '0', '#', '/'}
	    };
    1568:	ce 01       	movw	r24, r28
    156a:	44 96       	adiw	r24, 0x14	; 20
    156c:	28 96       	adiw	r28, 0x08	; 8
    156e:	9f af       	std	Y+63, r25	; 0x3f
    1570:	8e af       	std	Y+62, r24	; 0x3e
    1572:	28 97       	sbiw	r28, 0x08	; 8
    1574:	e0 ec       	ldi	r30, 0xC0	; 192
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	2a 96       	adiw	r28, 0x0a	; 10
    157a:	ff af       	std	Y+63, r31	; 0x3f
    157c:	ee af       	std	Y+62, r30	; 0x3e
    157e:	2a 97       	sbiw	r28, 0x0a	; 10
    1580:	f0 e1       	ldi	r31, 0x10	; 16
    1582:	2b 96       	adiw	r28, 0x0b	; 11
    1584:	ff af       	std	Y+63, r31	; 0x3f
    1586:	2b 97       	sbiw	r28, 0x0b	; 11
    1588:	2a 96       	adiw	r28, 0x0a	; 10
    158a:	ee ad       	ldd	r30, Y+62	; 0x3e
    158c:	ff ad       	ldd	r31, Y+63	; 0x3f
    158e:	2a 97       	sbiw	r28, 0x0a	; 10
    1590:	00 80       	ld	r0, Z
    1592:	2a 96       	adiw	r28, 0x0a	; 10
    1594:	8e ad       	ldd	r24, Y+62	; 0x3e
    1596:	9f ad       	ldd	r25, Y+63	; 0x3f
    1598:	2a 97       	sbiw	r28, 0x0a	; 10
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	2a 96       	adiw	r28, 0x0a	; 10
    159e:	9f af       	std	Y+63, r25	; 0x3f
    15a0:	8e af       	std	Y+62, r24	; 0x3e
    15a2:	2a 97       	sbiw	r28, 0x0a	; 10
    15a4:	28 96       	adiw	r28, 0x08	; 8
    15a6:	ee ad       	ldd	r30, Y+62	; 0x3e
    15a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    15aa:	28 97       	sbiw	r28, 0x08	; 8
    15ac:	00 82       	st	Z, r0
    15ae:	28 96       	adiw	r28, 0x08	; 8
    15b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    15b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    15b4:	28 97       	sbiw	r28, 0x08	; 8
    15b6:	01 96       	adiw	r24, 0x01	; 1
    15b8:	28 96       	adiw	r28, 0x08	; 8
    15ba:	9f af       	std	Y+63, r25	; 0x3f
    15bc:	8e af       	std	Y+62, r24	; 0x3e
    15be:	28 97       	sbiw	r28, 0x08	; 8
    15c0:	2b 96       	adiw	r28, 0x0b	; 11
    15c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    15c4:	2b 97       	sbiw	r28, 0x0b	; 11
    15c6:	91 50       	subi	r25, 0x01	; 1
    15c8:	2b 96       	adiw	r28, 0x0b	; 11
    15ca:	9f af       	std	Y+63, r25	; 0x3f
    15cc:	2b 97       	sbiw	r28, 0x0b	; 11
    15ce:	2b 96       	adiw	r28, 0x0b	; 11
    15d0:	ef ad       	ldd	r30, Y+63	; 0x3f
    15d2:	2b 97       	sbiw	r28, 0x0b	; 11
    15d4:	ee 23       	and	r30, r30
    15d6:	c1 f6       	brne	.-80     	; 0x1588 <KEYPAD_getPressedKey+0x36>
    DIO_Config colPins[] = {
           {DIO_PORTD, DIO_PIN7, DIO_PIN_INPUT,DIO_PIN_HIGH},
           {DIO_PORTD, DIO_PIN6, DIO_PIN_INPUT,DIO_PIN_HIGH},
           {DIO_PORTD, DIO_PIN5, DIO_PIN_INPUT,DIO_PIN_HIGH},
           {DIO_PORTD, DIO_PIN3, DIO_PIN_INPUT,DIO_PIN_HIGH},
       };
    15d8:	ce 01       	movw	r24, r28
    15da:	84 96       	adiw	r24, 0x24	; 36
    15dc:	2d 96       	adiw	r28, 0x0d	; 13
    15de:	9f af       	std	Y+63, r25	; 0x3f
    15e0:	8e af       	std	Y+62, r24	; 0x3e
    15e2:	2d 97       	sbiw	r28, 0x0d	; 13
    15e4:	e0 eb       	ldi	r30, 0xB0	; 176
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	2f 96       	adiw	r28, 0x0f	; 15
    15ea:	ff af       	std	Y+63, r31	; 0x3f
    15ec:	ee af       	std	Y+62, r30	; 0x3e
    15ee:	2f 97       	sbiw	r28, 0x0f	; 15
    15f0:	f0 e1       	ldi	r31, 0x10	; 16
    15f2:	60 96       	adiw	r28, 0x10	; 16
    15f4:	ff af       	std	Y+63, r31	; 0x3f
    15f6:	60 97       	sbiw	r28, 0x10	; 16
    15f8:	2f 96       	adiw	r28, 0x0f	; 15
    15fa:	ee ad       	ldd	r30, Y+62	; 0x3e
    15fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    15fe:	2f 97       	sbiw	r28, 0x0f	; 15
    1600:	00 80       	ld	r0, Z
    1602:	2f 96       	adiw	r28, 0x0f	; 15
    1604:	8e ad       	ldd	r24, Y+62	; 0x3e
    1606:	9f ad       	ldd	r25, Y+63	; 0x3f
    1608:	2f 97       	sbiw	r28, 0x0f	; 15
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	2f 96       	adiw	r28, 0x0f	; 15
    160e:	9f af       	std	Y+63, r25	; 0x3f
    1610:	8e af       	std	Y+62, r24	; 0x3e
    1612:	2f 97       	sbiw	r28, 0x0f	; 15
    1614:	2d 96       	adiw	r28, 0x0d	; 13
    1616:	ee ad       	ldd	r30, Y+62	; 0x3e
    1618:	ff ad       	ldd	r31, Y+63	; 0x3f
    161a:	2d 97       	sbiw	r28, 0x0d	; 13
    161c:	00 82       	st	Z, r0
    161e:	2d 96       	adiw	r28, 0x0d	; 13
    1620:	8e ad       	ldd	r24, Y+62	; 0x3e
    1622:	9f ad       	ldd	r25, Y+63	; 0x3f
    1624:	2d 97       	sbiw	r28, 0x0d	; 13
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	2d 96       	adiw	r28, 0x0d	; 13
    162a:	9f af       	std	Y+63, r25	; 0x3f
    162c:	8e af       	std	Y+62, r24	; 0x3e
    162e:	2d 97       	sbiw	r28, 0x0d	; 13
    1630:	60 96       	adiw	r28, 0x10	; 16
    1632:	9f ad       	ldd	r25, Y+63	; 0x3f
    1634:	60 97       	sbiw	r28, 0x10	; 16
    1636:	91 50       	subi	r25, 0x01	; 1
    1638:	60 96       	adiw	r28, 0x10	; 16
    163a:	9f af       	std	Y+63, r25	; 0x3f
    163c:	60 97       	sbiw	r28, 0x10	; 16
    163e:	60 96       	adiw	r28, 0x10	; 16
    1640:	ef ad       	ldd	r30, Y+63	; 0x3f
    1642:	60 97       	sbiw	r28, 0x10	; 16
    1644:	ee 23       	and	r30, r30
    1646:	c1 f6       	brne	.-80     	; 0x15f8 <KEYPAD_getPressedKey+0xa6>
    DIO_Config rowPins[] = {
           {DIO_PORTC, DIO_PIN5, DIO_PIN_OUTPUT,DIO_PIN_HIGH},
           {DIO_PORTC, DIO_PIN4, DIO_PIN_OUTPUT,DIO_PIN_HIGH},
           {DIO_PORTC, DIO_PIN3, DIO_PIN_OUTPUT,DIO_PIN_HIGH},
           {DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT,DIO_PIN_HIGH}
       };
    1648:	ce 01       	movw	r24, r28
    164a:	c4 96       	adiw	r24, 0x34	; 52
    164c:	62 96       	adiw	r28, 0x12	; 18
    164e:	9f af       	std	Y+63, r25	; 0x3f
    1650:	8e af       	std	Y+62, r24	; 0x3e
    1652:	62 97       	sbiw	r28, 0x12	; 18
    1654:	e0 ea       	ldi	r30, 0xA0	; 160
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	64 96       	adiw	r28, 0x14	; 20
    165a:	ff af       	std	Y+63, r31	; 0x3f
    165c:	ee af       	std	Y+62, r30	; 0x3e
    165e:	64 97       	sbiw	r28, 0x14	; 20
    1660:	f0 e1       	ldi	r31, 0x10	; 16
    1662:	65 96       	adiw	r28, 0x15	; 21
    1664:	ff af       	std	Y+63, r31	; 0x3f
    1666:	65 97       	sbiw	r28, 0x15	; 21
    1668:	64 96       	adiw	r28, 0x14	; 20
    166a:	ee ad       	ldd	r30, Y+62	; 0x3e
    166c:	ff ad       	ldd	r31, Y+63	; 0x3f
    166e:	64 97       	sbiw	r28, 0x14	; 20
    1670:	00 80       	ld	r0, Z
    1672:	64 96       	adiw	r28, 0x14	; 20
    1674:	8e ad       	ldd	r24, Y+62	; 0x3e
    1676:	9f ad       	ldd	r25, Y+63	; 0x3f
    1678:	64 97       	sbiw	r28, 0x14	; 20
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	64 96       	adiw	r28, 0x14	; 20
    167e:	9f af       	std	Y+63, r25	; 0x3f
    1680:	8e af       	std	Y+62, r24	; 0x3e
    1682:	64 97       	sbiw	r28, 0x14	; 20
    1684:	62 96       	adiw	r28, 0x12	; 18
    1686:	ee ad       	ldd	r30, Y+62	; 0x3e
    1688:	ff ad       	ldd	r31, Y+63	; 0x3f
    168a:	62 97       	sbiw	r28, 0x12	; 18
    168c:	00 82       	st	Z, r0
    168e:	62 96       	adiw	r28, 0x12	; 18
    1690:	8e ad       	ldd	r24, Y+62	; 0x3e
    1692:	9f ad       	ldd	r25, Y+63	; 0x3f
    1694:	62 97       	sbiw	r28, 0x12	; 18
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	62 96       	adiw	r28, 0x12	; 18
    169a:	9f af       	std	Y+63, r25	; 0x3f
    169c:	8e af       	std	Y+62, r24	; 0x3e
    169e:	62 97       	sbiw	r28, 0x12	; 18
    16a0:	65 96       	adiw	r28, 0x15	; 21
    16a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    16a4:	65 97       	sbiw	r28, 0x15	; 21
    16a6:	91 50       	subi	r25, 0x01	; 1
    16a8:	65 96       	adiw	r28, 0x15	; 21
    16aa:	9f af       	std	Y+63, r25	; 0x3f
    16ac:	65 97       	sbiw	r28, 0x15	; 21
    16ae:	65 96       	adiw	r28, 0x15	; 21
    16b0:	ef ad       	ldd	r30, Y+63	; 0x3f
    16b2:	65 97       	sbiw	r28, 0x15	; 21
    16b4:	ee 23       	and	r30, r30
    16b6:	c1 f6       	brne	.-80     	; 0x1668 <KEYPAD_getPressedKey+0x116>

    // Initialize the keypad pins
    for (u8 i = 0; i < 4; i++) {
    16b8:	19 8a       	std	Y+17, r1	; 0x11
    16ba:	3b c0       	rjmp	.+118    	; 0x1732 <KEYPAD_getPressedKey+0x1e0>
        DIO_U8SetPinDirection(&colPins[i]);
    16bc:	89 89       	ldd	r24, Y+17	; 0x11
    16be:	88 2f       	mov	r24, r24
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	9c 01       	movw	r18, r24
    16c4:	22 0f       	add	r18, r18
    16c6:	33 1f       	adc	r19, r19
    16c8:	22 0f       	add	r18, r18
    16ca:	33 1f       	adc	r19, r19
    16cc:	ce 01       	movw	r24, r28
    16ce:	84 96       	adiw	r24, 0x24	; 36
    16d0:	82 0f       	add	r24, r18
    16d2:	93 1f       	adc	r25, r19
    16d4:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_U8SetPinDirection>
        DIO_U8SetPinDirection(&rowPins[i]);
    16d8:	89 89       	ldd	r24, Y+17	; 0x11
    16da:	88 2f       	mov	r24, r24
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9c 01       	movw	r18, r24
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	22 0f       	add	r18, r18
    16e6:	33 1f       	adc	r19, r19
    16e8:	ce 01       	movw	r24, r28
    16ea:	c4 96       	adiw	r24, 0x34	; 52
    16ec:	82 0f       	add	r24, r18
    16ee:	93 1f       	adc	r25, r19
    16f0:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_U8SetPinDirection>
        DIO_U8SetPinValue(&colPins[i]);
    16f4:	89 89       	ldd	r24, Y+17	; 0x11
    16f6:	88 2f       	mov	r24, r24
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9c 01       	movw	r18, r24
    16fc:	22 0f       	add	r18, r18
    16fe:	33 1f       	adc	r19, r19
    1700:	22 0f       	add	r18, r18
    1702:	33 1f       	adc	r19, r19
    1704:	ce 01       	movw	r24, r28
    1706:	84 96       	adiw	r24, 0x24	; 36
    1708:	82 0f       	add	r24, r18
    170a:	93 1f       	adc	r25, r19
    170c:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_U8SetPinValue>
        DIO_U8SetPinValue(&rowPins[i]);
    1710:	89 89       	ldd	r24, Y+17	; 0x11
    1712:	88 2f       	mov	r24, r24
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9c 01       	movw	r18, r24
    1718:	22 0f       	add	r18, r18
    171a:	33 1f       	adc	r19, r19
    171c:	22 0f       	add	r18, r18
    171e:	33 1f       	adc	r19, r19
    1720:	ce 01       	movw	r24, r28
    1722:	c4 96       	adiw	r24, 0x34	; 52
    1724:	82 0f       	add	r24, r18
    1726:	93 1f       	adc	r25, r19
    1728:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_U8SetPinValue>
           {DIO_PORTC, DIO_PIN3, DIO_PIN_OUTPUT,DIO_PIN_HIGH},
           {DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT,DIO_PIN_HIGH}
       };

    // Initialize the keypad pins
    for (u8 i = 0; i < 4; i++) {
    172c:	89 89       	ldd	r24, Y+17	; 0x11
    172e:	8f 5f       	subi	r24, 0xFF	; 255
    1730:	89 8b       	std	Y+17, r24	; 0x11
    1732:	89 89       	ldd	r24, Y+17	; 0x11
    1734:	84 30       	cpi	r24, 0x04	; 4
    1736:	10 f2       	brcs	.-124    	; 0x16bc <KEYPAD_getPressedKey+0x16a>
    }

    while(1)
    	{
    	/*for loop to scan all keypad columns*/
    		for (u8 i = 0 ; i < 4 ; i++)
    1738:	18 8a       	std	Y+16, r1	; 0x10
    173a:	e7 c0       	rjmp	.+462    	; 0x190a <KEYPAD_getPressedKey+0x3b8>
    		{
    			/*set current row pin low to test all col pins to find out which button has been pressed*/
    			rowPins[i].value = DIO_PIN_LOW;
    173c:	88 89       	ldd	r24, Y+16	; 0x10
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9c 01       	movw	r18, r24
    1744:	22 0f       	add	r18, r18
    1746:	33 1f       	adc	r19, r19
    1748:	22 0f       	add	r18, r18
    174a:	33 1f       	adc	r19, r19
    174c:	ce 01       	movw	r24, r28
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	82 0f       	add	r24, r18
    1752:	93 1f       	adc	r25, r19
    1754:	fc 01       	movw	r30, r24
    1756:	f6 96       	adiw	r30, 0x36	; 54
    1758:	10 82       	st	Z, r1
    			DIO_U8SetPinValue(&rowPins[i]);
    175a:	88 89       	ldd	r24, Y+16	; 0x10
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	9c 01       	movw	r18, r24
    1762:	22 0f       	add	r18, r18
    1764:	33 1f       	adc	r19, r19
    1766:	22 0f       	add	r18, r18
    1768:	33 1f       	adc	r19, r19
    176a:	ce 01       	movw	r24, r28
    176c:	c4 96       	adiw	r24, 0x34	; 52
    176e:	82 0f       	add	r24, r18
    1770:	93 1f       	adc	r25, r19
    1772:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_U8SetPinValue>

    			/*for loop to scan and test all keypad row pins*/
    			for (u8 j = 0 ; j < 4 ; j++)
    1776:	1f 86       	std	Y+15, r1	; 0x0f
    1778:	32 c0       	rjmp	.+100    	; 0x17de <KEYPAD_getPressedKey+0x28c>
    			{
    				u8 key;
    				DIO_U8GetPinValue(&colPins[i], &key);
    177a:	88 89       	ldd	r24, Y+16	; 0x10
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9c 01       	movw	r18, r24
    1782:	22 0f       	add	r18, r18
    1784:	33 1f       	adc	r19, r19
    1786:	22 0f       	add	r18, r18
    1788:	33 1f       	adc	r19, r19
    178a:	ce 01       	movw	r24, r28
    178c:	84 96       	adiw	r24, 0x24	; 36
    178e:	82 0f       	add	r24, r18
    1790:	93 1f       	adc	r25, r19
    1792:	9e 01       	movw	r18, r28
    1794:	2c 5b       	subi	r18, 0xBC	; 188
    1796:	3f 4f       	sbci	r19, 0xFF	; 255
    1798:	b9 01       	movw	r22, r18
    179a:	0e 94 17 09 	call	0x122e	; 0x122e <DIO_U8GetPinValue>
    				/*check current row pin value*/
    				if ( DIO_PIN_LOW == key )
    179e:	fe 01       	movw	r30, r28
    17a0:	ec 5b       	subi	r30, 0xBC	; 188
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 81       	ld	r24, Z
    17a6:	88 23       	and	r24, r24
    17a8:	b9 f4       	brne	.+46     	; 0x17d8 <KEYPAD_getPressedKey+0x286>
    				{
    					/*return pressed button value*/
    					//return KEYPAD_4x4_adjustKeyNumber((j*KEYPAD_NUM_COLS)+i+1);
    					return keymap[i][j];
    17aa:	88 89       	ldd	r24, Y+16	; 0x10
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17b2:	48 2f       	mov	r20, r24
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	22 0f       	add	r18, r18
    17b8:	33 1f       	adc	r19, r19
    17ba:	22 0f       	add	r18, r18
    17bc:	33 1f       	adc	r19, r19
    17be:	ce 01       	movw	r24, r28
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	82 0f       	add	r24, r18
    17c4:	93 1f       	adc	r25, r19
    17c6:	84 0f       	add	r24, r20
    17c8:	95 1f       	adc	r25, r21
    17ca:	fc 01       	movw	r30, r24
    17cc:	73 96       	adiw	r30, 0x13	; 19
    17ce:	80 81       	ld	r24, Z
    17d0:	26 96       	adiw	r28, 0x06	; 6
    17d2:	8f af       	std	Y+63, r24	; 0x3f
    17d4:	26 97       	sbiw	r28, 0x06	; 6
    17d6:	a0 c0       	rjmp	.+320    	; 0x1918 <KEYPAD_getPressedKey+0x3c6>
    			/*set current row pin low to test all col pins to find out which button has been pressed*/
    			rowPins[i].value = DIO_PIN_LOW;
    			DIO_U8SetPinValue(&rowPins[i]);

    			/*for loop to scan and test all keypad row pins*/
    			for (u8 j = 0 ; j < 4 ; j++)
    17d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17da:	8f 5f       	subi	r24, 0xFF	; 255
    17dc:	8f 87       	std	Y+15, r24	; 0x0f
    17de:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e0:	84 30       	cpi	r24, 0x04	; 4
    17e2:	58 f2       	brcs	.-106    	; 0x177a <KEYPAD_getPressedKey+0x228>
    					return keymap[i][j];
    				}
    			}/*end of for loop*/

    			/*set current column pin HIGH again*/
    			rowPins[i].value = DIO_PIN_HIGH;
    17e4:	88 89       	ldd	r24, Y+16	; 0x10
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	9c 01       	movw	r18, r24
    17ec:	22 0f       	add	r18, r18
    17ee:	33 1f       	adc	r19, r19
    17f0:	22 0f       	add	r18, r18
    17f2:	33 1f       	adc	r19, r19
    17f4:	ce 01       	movw	r24, r28
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	82 0f       	add	r24, r18
    17fa:	93 1f       	adc	r25, r19
    17fc:	fc 01       	movw	r30, r24
    17fe:	f6 96       	adiw	r30, 0x36	; 54
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	80 83       	st	Z, r24
    			DIO_U8SetPinValue(&rowPins[i]);
    1804:	88 89       	ldd	r24, Y+16	; 0x10
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	9c 01       	movw	r18, r24
    180c:	22 0f       	add	r18, r18
    180e:	33 1f       	adc	r19, r19
    1810:	22 0f       	add	r18, r18
    1812:	33 1f       	adc	r19, r19
    1814:	ce 01       	movw	r24, r28
    1816:	c4 96       	adiw	r24, 0x34	; 52
    1818:	82 0f       	add	r24, r18
    181a:	93 1f       	adc	r25, r19
    181c:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_U8SetPinValue>
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a0 ea       	ldi	r26, 0xA0	; 160
    1826:	b1 e4       	ldi	r27, 0x41	; 65
    1828:	8b 87       	std	Y+11, r24	; 0x0b
    182a:	9c 87       	std	Y+12, r25	; 0x0c
    182c:	ad 87       	std	Y+13, r26	; 0x0d
    182e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1830:	6b 85       	ldd	r22, Y+11	; 0x0b
    1832:	7c 85       	ldd	r23, Y+12	; 0x0c
    1834:	8d 85       	ldd	r24, Y+13	; 0x0d
    1836:	9e 85       	ldd	r25, Y+14	; 0x0e
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	4a e7       	ldi	r20, 0x7A	; 122
    183e:	53 e4       	ldi	r21, 0x43	; 67
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	8f 83       	std	Y+7, r24	; 0x07
    184a:	98 87       	std	Y+8, r25	; 0x08
    184c:	a9 87       	std	Y+9, r26	; 0x09
    184e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1850:	6f 81       	ldd	r22, Y+7	; 0x07
    1852:	78 85       	ldd	r23, Y+8	; 0x08
    1854:	89 85       	ldd	r24, Y+9	; 0x09
    1856:	9a 85       	ldd	r25, Y+10	; 0x0a
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5f e3       	ldi	r21, 0x3F	; 63
    1860:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1864:	88 23       	and	r24, r24
    1866:	2c f4       	brge	.+10     	; 0x1872 <KEYPAD_getPressedKey+0x320>
		__ticks = 1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9e 83       	std	Y+6, r25	; 0x06
    186e:	8d 83       	std	Y+5, r24	; 0x05
    1870:	3f c0       	rjmp	.+126    	; 0x18f0 <KEYPAD_getPressedKey+0x39e>
	else if (__tmp > 65535)
    1872:	6f 81       	ldd	r22, Y+7	; 0x07
    1874:	78 85       	ldd	r23, Y+8	; 0x08
    1876:	89 85       	ldd	r24, Y+9	; 0x09
    1878:	9a 85       	ldd	r25, Y+10	; 0x0a
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	3f ef       	ldi	r19, 0xFF	; 255
    187e:	4f e7       	ldi	r20, 0x7F	; 127
    1880:	57 e4       	ldi	r21, 0x47	; 71
    1882:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1886:	18 16       	cp	r1, r24
    1888:	4c f5       	brge	.+82     	; 0x18dc <KEYPAD_getPressedKey+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188a:	6b 85       	ldd	r22, Y+11	; 0x0b
    188c:	7c 85       	ldd	r23, Y+12	; 0x0c
    188e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1890:	9e 85       	ldd	r25, Y+14	; 0x0e
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	9e 83       	std	Y+6, r25	; 0x06
    18b0:	8d 83       	std	Y+5, r24	; 0x05
    18b2:	0f c0       	rjmp	.+30     	; 0x18d2 <KEYPAD_getPressedKey+0x380>
    18b4:	89 e1       	ldi	r24, 0x19	; 25
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9c 83       	std	Y+4, r25	; 0x04
    18ba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	9c 81       	ldd	r25, Y+4	; 0x04
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <KEYPAD_getPressedKey+0x36e>
    18c4:	9c 83       	std	Y+4, r25	; 0x04
    18c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	69 f7       	brne	.-38     	; 0x18b4 <KEYPAD_getPressedKey+0x362>
    18da:	14 c0       	rjmp	.+40     	; 0x1904 <KEYPAD_getPressedKey+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18dc:	6f 81       	ldd	r22, Y+7	; 0x07
    18de:	78 85       	ldd	r23, Y+8	; 0x08
    18e0:	89 85       	ldd	r24, Y+9	; 0x09
    18e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	8d 83       	std	Y+5, r24	; 0x05
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	9e 81       	ldd	r25, Y+6	; 0x06
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <KEYPAD_getPressedKey+0x3aa>
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01
    }

    while(1)
    	{
    	/*for loop to scan all keypad columns*/
    		for (u8 i = 0 ; i < 4 ; i++)
    1904:	88 89       	ldd	r24, Y+16	; 0x10
    1906:	8f 5f       	subi	r24, 0xFF	; 255
    1908:	88 8b       	std	Y+16, r24	; 0x10
    190a:	88 89       	ldd	r24, Y+16	; 0x10
    190c:	84 30       	cpi	r24, 0x04	; 4
    190e:	08 f4       	brcc	.+2      	; 0x1912 <KEYPAD_getPressedKey+0x3c0>
    1910:	15 cf       	rjmp	.-470    	; 0x173c <KEYPAD_getPressedKey+0x1ea>
    			/*set current column pin HIGH again*/
    			rowPins[i].value = DIO_PIN_HIGH;
    			DIO_U8SetPinValue(&rowPins[i]);
    			_delay_ms(20);
    		}/*end of for loop*/
    		return 0;
    1912:	26 96       	adiw	r28, 0x06	; 6
    1914:	1f ae       	std	Y+63, r1	; 0x3f
    1916:	26 97       	sbiw	r28, 0x06	; 6
    1918:	26 96       	adiw	r28, 0x06	; 6
    191a:	8f ad       	ldd	r24, Y+63	; 0x3f
    191c:	26 97       	sbiw	r28, 0x06	; 6
    	}

}
    191e:	cc 5a       	subi	r28, 0xAC	; 172
    1920:	df 4f       	sbci	r29, 0xFF	; 255
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	00 d0       	rcall	.+0      	; 0x1938 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1938:	00 d0       	rcall	.+0      	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x8>
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	8a 83       	std	Y+2, r24	; 0x02
	u8 keypad_button = 0;
    1940:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	3c 83       	std	Y+4, r19	; 0x04
    194a:	2b 83       	std	Y+3, r18	; 0x03
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	9c 81       	ldd	r25, Y+4	; 0x04
    1950:	88 30       	cpi	r24, 0x08	; 8
    1952:	91 05       	cpc	r25, r1
    1954:	09 f4       	brne	.+2      	; 0x1958 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1956:	70 c0       	rjmp	.+224    	; 0x1a38 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1958:	2b 81       	ldd	r18, Y+3	; 0x03
    195a:	3c 81       	ldd	r19, Y+4	; 0x04
    195c:	29 30       	cpi	r18, 0x09	; 9
    195e:	31 05       	cpc	r19, r1
    1960:	5c f5       	brge	.+86     	; 0x19b8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	9c 81       	ldd	r25, Y+4	; 0x04
    1966:	84 30       	cpi	r24, 0x04	; 4
    1968:	91 05       	cpc	r25, r1
    196a:	09 f4       	brne	.+2      	; 0x196e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    196c:	59 c0       	rjmp	.+178    	; 0x1a20 <KEYPAD_4x4_adjustKeyNumber+0xee>
    196e:	2b 81       	ldd	r18, Y+3	; 0x03
    1970:	3c 81       	ldd	r19, Y+4	; 0x04
    1972:	25 30       	cpi	r18, 0x05	; 5
    1974:	31 05       	cpc	r19, r1
    1976:	9c f4       	brge	.+38     	; 0x199e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	91 05       	cpc	r25, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1982:	48 c0       	rjmp	.+144    	; 0x1a14 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1984:	2b 81       	ldd	r18, Y+3	; 0x03
    1986:	3c 81       	ldd	r19, Y+4	; 0x04
    1988:	23 30       	cpi	r18, 0x03	; 3
    198a:	31 05       	cpc	r19, r1
    198c:	0c f0       	brlt	.+2      	; 0x1990 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    198e:	45 c0       	rjmp	.+138    	; 0x1a1a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	91 05       	cpc	r25, r1
    1998:	09 f4       	brne	.+2      	; 0x199c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    199a:	39 c0       	rjmp	.+114    	; 0x1a0e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    199c:	67 c0       	rjmp	.+206    	; 0x1a6c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    199e:	2b 81       	ldd	r18, Y+3	; 0x03
    19a0:	3c 81       	ldd	r19, Y+4	; 0x04
    19a2:	26 30       	cpi	r18, 0x06	; 6
    19a4:	31 05       	cpc	r19, r1
    19a6:	09 f4       	brne	.+2      	; 0x19aa <KEYPAD_4x4_adjustKeyNumber+0x78>
    19a8:	41 c0       	rjmp	.+130    	; 0x1a2c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	87 30       	cpi	r24, 0x07	; 7
    19b0:	91 05       	cpc	r25, r1
    19b2:	0c f0       	brlt	.+2      	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    19b4:	3e c0       	rjmp	.+124    	; 0x1a32 <KEYPAD_4x4_adjustKeyNumber+0x100>
    19b6:	37 c0       	rjmp	.+110    	; 0x1a26 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    19b8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ba:	3c 81       	ldd	r19, Y+4	; 0x04
    19bc:	2c 30       	cpi	r18, 0x0C	; 12
    19be:	31 05       	cpc	r19, r1
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <KEYPAD_4x4_adjustKeyNumber+0x92>
    19c2:	46 c0       	rjmp	.+140    	; 0x1a50 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	8d 30       	cpi	r24, 0x0D	; 13
    19ca:	91 05       	cpc	r25, r1
    19cc:	5c f4       	brge	.+22     	; 0x19e4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    19ce:	2b 81       	ldd	r18, Y+3	; 0x03
    19d0:	3c 81       	ldd	r19, Y+4	; 0x04
    19d2:	2a 30       	cpi	r18, 0x0A	; 10
    19d4:	31 05       	cpc	r19, r1
    19d6:	b1 f1       	breq	.+108    	; 0x1a44 <KEYPAD_4x4_adjustKeyNumber+0x112>
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	8b 30       	cpi	r24, 0x0B	; 11
    19de:	91 05       	cpc	r25, r1
    19e0:	a4 f5       	brge	.+104    	; 0x1a4a <KEYPAD_4x4_adjustKeyNumber+0x118>
    19e2:	2d c0       	rjmp	.+90     	; 0x1a3e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    19e4:	2b 81       	ldd	r18, Y+3	; 0x03
    19e6:	3c 81       	ldd	r19, Y+4	; 0x04
    19e8:	2e 30       	cpi	r18, 0x0E	; 14
    19ea:	31 05       	cpc	r19, r1
    19ec:	b9 f1       	breq	.+110    	; 0x1a5c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	8e 30       	cpi	r24, 0x0E	; 14
    19f4:	91 05       	cpc	r25, r1
    19f6:	7c f1       	brlt	.+94     	; 0x1a56 <KEYPAD_4x4_adjustKeyNumber+0x124>
    19f8:	2b 81       	ldd	r18, Y+3	; 0x03
    19fa:	3c 81       	ldd	r19, Y+4	; 0x04
    19fc:	2f 30       	cpi	r18, 0x0F	; 15
    19fe:	31 05       	cpc	r19, r1
    1a00:	79 f1       	breq	.+94     	; 0x1a60 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	80 31       	cpi	r24, 0x10	; 16
    1a08:	91 05       	cpc	r25, r1
    1a0a:	69 f1       	breq	.+90     	; 0x1a66 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1a0c:	2f c0       	rjmp	.+94     	; 0x1a6c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1a0e:	87 e0       	ldi	r24, 0x07	; 7
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	2e c0       	rjmp	.+92     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1a14:	88 e0       	ldi	r24, 0x08	; 8
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	2b c0       	rjmp	.+86     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1a1a:	89 e0       	ldi	r24, 0x09	; 9
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	28 c0       	rjmp	.+80     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1a20:	85 e2       	ldi	r24, 0x25	; 37
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	25 c0       	rjmp	.+74     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1a26:	84 e0       	ldi	r24, 0x04	; 4
    1a28:	89 83       	std	Y+1, r24	; 0x01
    1a2a:	22 c0       	rjmp	.+68     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1a2c:	85 e0       	ldi	r24, 0x05	; 5
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	1f c0       	rjmp	.+62     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1a32:	86 e0       	ldi	r24, 0x06	; 6
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	1c c0       	rjmp	.+56     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1a38:	8a e2       	ldi	r24, 0x2A	; 42
    1a3a:	89 83       	std	Y+1, r24	; 0x01
    1a3c:	19 c0       	rjmp	.+50     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	16 c0       	rjmp	.+44     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	13 c0       	rjmp	.+38     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1a4a:	83 e0       	ldi	r24, 0x03	; 3
    1a4c:	89 83       	std	Y+1, r24	; 0x01
    1a4e:	10 c0       	rjmp	.+32     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1a50:	8d e2       	ldi	r24, 0x2D	; 45
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	0d c0       	rjmp	.+26     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1a56:	8d e0       	ldi	r24, 0x0D	; 13
    1a58:	89 83       	std	Y+1, r24	; 0x01
    1a5a:	0a c0       	rjmp	.+20     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1a5c:	19 82       	std	Y+1, r1	; 0x01
    1a5e:	08 c0       	rjmp	.+16     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1a60:	8d e3       	ldi	r24, 0x3D	; 61
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	05 c0       	rjmp	.+10     	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1a66:	8b e2       	ldi	r24, 0x2B	; 43
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <testCallback>:
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>


void testCallback(void){
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <testCallback+0x6>
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <testCallback+0x8>
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
	DIO_Config pinTest;
	pinTest.port= DIO_PORTA;
    1a8c:	19 82       	std	Y+1, r1	; 0x01
	pinTest.direction= DIO_PIN_OUTPUT;
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	8b 83       	std	Y+3, r24	; 0x03
	pinTest.pin= DIO_PIN6;
    1a92:	86 e0       	ldi	r24, 0x06	; 6
    1a94:	8a 83       	std	Y+2, r24	; 0x02
	pinTest.value= DIO_PIN_HIGH;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	8c 83       	std	Y+4, r24	; 0x04
	DIO_U8SetPinDirection(&pinTest);
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_U8SetPinDirection>
	DIO_U8SetPinValue(&pinTest);
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_U8SetPinValue>
}
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <main>:

int main(void) {
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <main+0x6>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <main+0x8>
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
	DIO_Config pinTest;
	pinTest.port= DIO_PORTD;
    1ac4:	83 e0       	ldi	r24, 0x03	; 3
    1ac6:	89 83       	std	Y+1, r24	; 0x01
	pinTest.direction= DIO_PIN_INPUT;
    1ac8:	1b 82       	std	Y+3, r1	; 0x03
	pinTest.pin= DIO_PIN3;
    1aca:	83 e0       	ldi	r24, 0x03	; 3
    1acc:	8a 83       	std	Y+2, r24	; 0x02
	DIO_U8SetPinDirection(&pinTest);
    1ace:	ce 01       	movw	r24, r28
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	0e 94 61 07 	call	0xec2	; 0xec2 <DIO_U8SetPinDirection>
	DIO_U8SetPinValue(&pinTest);
    1ad6:	ce 01       	movw	r24, r28
    1ad8:	01 96       	adiw	r24, 0x01	; 1
    1ada:	0e 94 13 08 	call	0x1026	; 0x1026 <DIO_U8SetPinValue>
	// Enable global interrupts
	sei();
    1ade:	78 94       	sei
	EXTI_enable(EXTI_INT1_ID,FALLING_EDGE);
    1ae0:	87 e0       	ldi	r24, 0x07	; 7
    1ae2:	62 e0       	ldi	r22, 0x02	; 2
    1ae4:	0e 94 a3 05 	call	0xb46	; 0xb46 <EXTI_enable>
	EXTI_setCallBack(EXTI_INT1_ID,testCallback);
    1ae8:	20 e4       	ldi	r18, 0x40	; 64
    1aea:	3d e0       	ldi	r19, 0x0D	; 13
    1aec:	87 e0       	ldi	r24, 0x07	; 7
    1aee:	b9 01       	movw	r22, r18
    1af0:	0e 94 49 06 	call	0xc92	; 0xc92 <EXTI_setCallBack>
    1af4:	ff cf       	rjmp	.-2      	; 0x1af4 <main+0x3c>

00001af6 <__prologue_saves__>:
    1af6:	2f 92       	push	r2
    1af8:	3f 92       	push	r3
    1afa:	4f 92       	push	r4
    1afc:	5f 92       	push	r5
    1afe:	6f 92       	push	r6
    1b00:	7f 92       	push	r7
    1b02:	8f 92       	push	r8
    1b04:	9f 92       	push	r9
    1b06:	af 92       	push	r10
    1b08:	bf 92       	push	r11
    1b0a:	cf 92       	push	r12
    1b0c:	df 92       	push	r13
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	ca 1b       	sub	r28, r26
    1b20:	db 0b       	sbc	r29, r27
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	09 94       	ijmp

00001b2e <__epilogue_restores__>:
    1b2e:	2a 88       	ldd	r2, Y+18	; 0x12
    1b30:	39 88       	ldd	r3, Y+17	; 0x11
    1b32:	48 88       	ldd	r4, Y+16	; 0x10
    1b34:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b36:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b38:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b40:	b9 84       	ldd	r11, Y+9	; 0x09
    1b42:	c8 84       	ldd	r12, Y+8	; 0x08
    1b44:	df 80       	ldd	r13, Y+7	; 0x07
    1b46:	ee 80       	ldd	r14, Y+6	; 0x06
    1b48:	fd 80       	ldd	r15, Y+5	; 0x05
    1b4a:	0c 81       	ldd	r16, Y+4	; 0x04
    1b4c:	1b 81       	ldd	r17, Y+3	; 0x03
    1b4e:	aa 81       	ldd	r26, Y+2	; 0x02
    1b50:	b9 81       	ldd	r27, Y+1	; 0x01
    1b52:	ce 0f       	add	r28, r30
    1b54:	d1 1d       	adc	r29, r1
    1b56:	0f b6       	in	r0, 0x3f	; 63
    1b58:	f8 94       	cli
    1b5a:	de bf       	out	0x3e, r29	; 62
    1b5c:	0f be       	out	0x3f, r0	; 63
    1b5e:	cd bf       	out	0x3d, r28	; 61
    1b60:	ed 01       	movw	r28, r26
    1b62:	08 95       	ret

00001b64 <_exit>:
    1b64:	f8 94       	cli

00001b66 <__stop_program>:
    1b66:	ff cf       	rjmp	.-2      	; 0x1b66 <__stop_program>
