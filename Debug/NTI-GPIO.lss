
NTI-GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00003dfc  00003e90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000e6  008000e6  00003f16  2**0
                  ALLOC
  3 .stab         00003e1c  00000000  00000000  00003f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000026dd  00000000  00000000  00007d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a411  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a551  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a6c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c30a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000dfa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e104  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e391  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000eb5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__vector_1>
       8:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3f       	cpi	r26, 0xF2	; 242
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 1b 	call	0x3796	; 0x3796 <main>
      8a:	0c 94 fc 1e 	jmp	0x3df8	; 0x3df8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9c 1e 	jmp	0x3d38	; 0x3d38 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9c 1e 	jmp	0x3d38	; 0x3d38 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 90 1e 	jmp	0x3d20	; 0x3d20 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_enable>:

#include "GIE_interface.h"


// Enable Global Interrupts
void GIE_enable(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    __asm__ __volatile__ ("sei" ::);
     b4e:	78 94       	sei
}
     b50:	cf 91       	pop	r28
     b52:	df 91       	pop	r29
     b54:	08 95       	ret

00000b56 <GIE_disable>:

// Disable Global Interrupts
void GIE_disable(){
     b56:	df 93       	push	r29
     b58:	cf 93       	push	r28
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
    __asm__ __volatile__ ("cli" ::);
     b5e:	f8 94       	cli
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <EXTI_enable>:
// Array of three pointers to functions
void (*Action[3])(void) = {NULL, NULL, NULL};



void EXTI_enable(u8 Int_ID, u8 trigger){
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <EXTI_enable+0x6>
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <EXTI_enable+0x8>
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	6a 83       	std	Y+2, r22	; 0x02

	if(Int_ID <= EXTI_INT1_ID){
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	88 30       	cpi	r24, 0x08	; 8
     b7a:	a0 f4       	brcc	.+40     	; 0xba4 <EXTI_enable+0x3e>
		SET_BIT(EXTI_BASE->GICR, Int_ID);
     b7c:	a4 e5       	ldi	r26, 0x54	; 84
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e4 e5       	ldi	r30, 0x54	; 84
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	87 81       	ldd	r24, Z+7	; 0x07
     b86:	48 2f       	mov	r20, r24
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <EXTI_enable+0x32>
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	2a 95       	dec	r18
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <EXTI_enable+0x2e>
     b9c:	84 2b       	or	r24, r20
     b9e:	17 96       	adiw	r26, 0x07	; 7
     ba0:	8c 93       	st	X, r24
     ba2:	17 97       	sbiw	r26, 0x07	; 7
	}

	switch (Int_ID)
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	3c 83       	std	Y+4, r19	; 0x04
     bac:	2b 83       	std	Y+3, r18	; 0x03
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	9c 81       	ldd	r25, Y+4	; 0x04
     bb2:	86 30       	cpi	r24, 0x06	; 6
     bb4:	91 05       	cpc	r25, r1
     bb6:	59 f0       	breq	.+22     	; 0xbce <EXTI_enable+0x68>
     bb8:	2b 81       	ldd	r18, Y+3	; 0x03
     bba:	3c 81       	ldd	r19, Y+4	; 0x04
     bbc:	27 30       	cpi	r18, 0x07	; 7
     bbe:	31 05       	cpc	r19, r1
     bc0:	c9 f0       	breq	.+50     	; 0xbf4 <EXTI_enable+0x8e>
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	85 30       	cpi	r24, 0x05	; 5
     bc8:	91 05       	cpc	r25, r1
     bca:	71 f1       	breq	.+92     	; 0xc28 <EXTI_enable+0xc2>
     bcc:	48 c0       	rjmp	.+144    	; 0xc5e <EXTI_enable+0xf8>
	{
	case EXTI_INT0_ID:
		EXTI_BASE->MCUCR &= 0xFC;
     bce:	a4 e5       	ldi	r26, 0x54	; 84
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e4 e5       	ldi	r30, 0x54	; 84
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	81 81       	ldd	r24, Z+1	; 0x01
     bd8:	8c 7f       	andi	r24, 0xFC	; 252
     bda:	11 96       	adiw	r26, 0x01	; 1
     bdc:	8c 93       	st	X, r24
		EXTI_BASE->MCUCR |= trigger;
     bde:	a4 e5       	ldi	r26, 0x54	; 84
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e4 e5       	ldi	r30, 0x54	; 84
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	89 2b       	or	r24, r25
     bec:	11 96       	adiw	r26, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	11 97       	sbiw	r26, 0x01	; 1
     bf2:	35 c0       	rjmp	.+106    	; 0xc5e <EXTI_enable+0xf8>
		break;
	case EXTI_INT1_ID:
		EXTI_BASE->MCUCR &= 0xF3;
     bf4:	a4 e5       	ldi	r26, 0x54	; 84
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e4 e5       	ldi	r30, 0x54	; 84
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	81 81       	ldd	r24, Z+1	; 0x01
     bfe:	83 7f       	andi	r24, 0xF3	; 243
     c00:	11 96       	adiw	r26, 0x01	; 1
     c02:	8c 93       	st	X, r24
		EXTI_BASE->MCUCR |= trigger << 2;
     c04:	a4 e5       	ldi	r26, 0x54	; 84
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e4 e5       	ldi	r30, 0x54	; 84
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	81 81       	ldd	r24, Z+1	; 0x01
     c0e:	28 2f       	mov	r18, r24
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	82 2b       	or	r24, r18
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	8c 93       	st	X, r24
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	1b c0       	rjmp	.+54     	; 0xc5e <EXTI_enable+0xf8>
		break;
	case EXTI_INT2_ID:
		EXTI_BASE->MCUCSR &= 0xBF;
     c28:	a4 e5       	ldi	r26, 0x54	; 84
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e4 e5       	ldi	r30, 0x54	; 84
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	8f 7b       	andi	r24, 0xBF	; 191
     c34:	8c 93       	st	X, r24
		EXTI_BASE->MCUCSR |= trigger << 6;
     c36:	a4 e5       	ldi	r26, 0x54	; 84
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e4 e5       	ldi	r30, 0x54	; 84
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	28 2f       	mov	r18, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	00 24       	eor	r0, r0
     c4a:	96 95       	lsr	r25
     c4c:	87 95       	ror	r24
     c4e:	07 94       	ror	r0
     c50:	96 95       	lsr	r25
     c52:	87 95       	ror	r24
     c54:	07 94       	ror	r0
     c56:	98 2f       	mov	r25, r24
     c58:	80 2d       	mov	r24, r0
     c5a:	82 2b       	or	r24, r18
     c5c:	8c 93       	st	X, r24
		break;
	}

}
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <EXTI_disable>:

void EXTI_disable(u8 Int_ID)
{
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	0f 92       	push	r0
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	89 83       	std	Y+1, r24	; 0x01
	if(Int_ID <= EXTI_INT1_ID){
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	88 30       	cpi	r24, 0x08	; 8
     c7c:	b0 f4       	brcc	.+44     	; 0xcaa <EXTI_disable+0x3e>
		CLR_BIT(EXTI_BASE->GICR, Int_ID);
     c7e:	a4 e5       	ldi	r26, 0x54	; 84
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e4 e5       	ldi	r30, 0x54	; 84
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	87 81       	ldd	r24, Z+7	; 0x07
     c88:	48 2f       	mov	r20, r24
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <EXTI_disable+0x30>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <EXTI_disable+0x2c>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	17 96       	adiw	r26, 0x07	; 7
     ca6:	8c 93       	st	X, r24
     ca8:	17 97       	sbiw	r26, 0x07	; 7
	}
}
     caa:	0f 90       	pop	r0
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <EXTI_setCallBack>:

void EXTI_setCallBack(u8 Int_ID, void (*localPtr)(void))
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <EXTI_setCallBack+0x6>
     cb8:	00 d0       	rcall	.+0      	; 0xcba <EXTI_setCallBack+0x8>
     cba:	0f 92       	push	r0
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	7b 83       	std	Y+3, r23	; 0x03
     cc4:	6a 83       	std	Y+2, r22	; 0x02
	switch (Int_ID)
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	3d 83       	std	Y+5, r19	; 0x05
     cce:	2c 83       	std	Y+4, r18	; 0x04
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	9d 81       	ldd	r25, Y+5	; 0x05
     cd4:	86 30       	cpi	r24, 0x06	; 6
     cd6:	91 05       	cpc	r25, r1
     cd8:	59 f0       	breq	.+22     	; 0xcf0 <EXTI_setCallBack+0x3e>
     cda:	2c 81       	ldd	r18, Y+4	; 0x04
     cdc:	3d 81       	ldd	r19, Y+5	; 0x05
     cde:	27 30       	cpi	r18, 0x07	; 7
     ce0:	31 05       	cpc	r19, r1
     ce2:	69 f0       	breq	.+26     	; 0xcfe <EXTI_setCallBack+0x4c>
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	9d 81       	ldd	r25, Y+5	; 0x05
     ce8:	85 30       	cpi	r24, 0x05	; 5
     cea:	91 05       	cpc	r25, r1
     cec:	79 f0       	breq	.+30     	; 0xd0c <EXTI_setCallBack+0x5a>
     cee:	14 c0       	rjmp	.+40     	; 0xd18 <EXTI_setCallBack+0x66>
	{
	case EXTI_INT0_ID:
		Action[0] = localPtr;
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	90 93 e7 00 	sts	0x00E7, r25
     cf8:	80 93 e6 00 	sts	0x00E6, r24
     cfc:	0d c0       	rjmp	.+26     	; 0xd18 <EXTI_setCallBack+0x66>
		break;
	case EXTI_INT1_ID:
		Action[1] = localPtr;
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	90 93 e9 00 	sts	0x00E9, r25
     d06:	80 93 e8 00 	sts	0x00E8, r24
     d0a:	06 c0       	rjmp	.+12     	; 0xd18 <EXTI_setCallBack+0x66>
		break;
	case EXTI_INT2_ID:
		Action[2] = localPtr;
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	9b 81       	ldd	r25, Y+3	; 0x03
     d10:	90 93 eb 00 	sts	0x00EB, r25
     d14:	80 93 ea 00 	sts	0x00EA, r24
		break;
	}
}
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <__vector_1>:

//EXIT0 ISR
void __vector_1 (void){
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
	if(Action[0]!= NULL){
     d52:	80 91 e6 00 	lds	r24, 0x00E6
     d56:	90 91 e7 00 	lds	r25, 0x00E7
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	29 f0       	breq	.+10     	; 0xd68 <__vector_1+0x40>
		Action[0]();
     d5e:	e0 91 e6 00 	lds	r30, 0x00E6
     d62:	f0 91 e7 00 	lds	r31, 0x00E7
     d66:	09 95       	icall
	}
}
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	7f 91       	pop	r23
     d7a:	6f 91       	pop	r22
     d7c:	5f 91       	pop	r21
     d7e:	4f 91       	pop	r20
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <__vector_2>:

//EXIT1 ISR
void __vector_2 (void){
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	2f 93       	push	r18
     d9a:	3f 93       	push	r19
     d9c:	4f 93       	push	r20
     d9e:	5f 93       	push	r21
     da0:	6f 93       	push	r22
     da2:	7f 93       	push	r23
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
     da8:	af 93       	push	r26
     daa:	bf 93       	push	r27
     dac:	ef 93       	push	r30
     dae:	ff 93       	push	r31
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
	if(Action[1]!= NULL){
     db8:	80 91 e8 00 	lds	r24, 0x00E8
     dbc:	90 91 e9 00 	lds	r25, 0x00E9
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	29 f0       	breq	.+10     	; 0xdce <__vector_2+0x40>
		Action[1]();
     dc4:	e0 91 e8 00 	lds	r30, 0x00E8
     dc8:	f0 91 e9 00 	lds	r31, 0x00E9
     dcc:	09 95       	icall
	}
}
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	7f 91       	pop	r23
     de0:	6f 91       	pop	r22
     de2:	5f 91       	pop	r21
     de4:	4f 91       	pop	r20
     de6:	3f 91       	pop	r19
     de8:	2f 91       	pop	r18
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <__vector_18>:

//EXIT2 ISR
void __vector_18 (void){
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	2f 93       	push	r18
     e00:	3f 93       	push	r19
     e02:	4f 93       	push	r20
     e04:	5f 93       	push	r21
     e06:	6f 93       	push	r22
     e08:	7f 93       	push	r23
     e0a:	8f 93       	push	r24
     e0c:	9f 93       	push	r25
     e0e:	af 93       	push	r26
     e10:	bf 93       	push	r27
     e12:	ef 93       	push	r30
     e14:	ff 93       	push	r31
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	if(Action[2]!= NULL){
     e1e:	80 91 ea 00 	lds	r24, 0x00EA
     e22:	90 91 eb 00 	lds	r25, 0x00EB
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	29 f0       	breq	.+10     	; 0xe34 <__vector_18+0x40>
		Action[2]();
     e2a:	e0 91 ea 00 	lds	r30, 0x00EA
     e2e:	f0 91 eb 00 	lds	r31, 0x00EB
     e32:	09 95       	icall
	}
}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	ff 91       	pop	r31
     e3a:	ef 91       	pop	r30
     e3c:	bf 91       	pop	r27
     e3e:	af 91       	pop	r26
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	7f 91       	pop	r23
     e46:	6f 91       	pop	r22
     e48:	5f 91       	pop	r21
     e4a:	4f 91       	pop	r20
     e4c:	3f 91       	pop	r19
     e4e:	2f 91       	pop	r18
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <DIO_U8SetPortDirection>:
/***********************************************************************************/
/* 							PUBLIC FUNCTIONS IMPLEMENTATION						   */
/***********************************************************************************/

u8 DIO_U8SetPortDirection (const DIO_Config* config)
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <DIO_U8SetPortDirection+0x6>
     e60:	0f 92       	push	r0
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
	if (config->port <= DIO_PORTD)
     e6a:	e9 81       	ldd	r30, Y+1	; 0x01
     e6c:	fa 81       	ldd	r31, Y+2	; 0x02
     e6e:	80 81       	ld	r24, Z
     e70:	84 30       	cpi	r24, 0x04	; 4
     e72:	70 f5       	brcc	.+92     	; 0xed0 <DIO_U8SetPortDirection+0x76>
	{
		if (config->pin == DIO_PORT_INPUT)
     e74:	e9 81       	ldd	r30, Y+1	; 0x01
     e76:	fa 81       	ldd	r31, Y+2	; 0x02
     e78:	81 81       	ldd	r24, Z+1	; 0x01
     e7a:	88 23       	and	r24, r24
     e7c:	81 f4       	brne	.+32     	; 0xe9e <DIO_U8SetPortDirection+0x44>
		{
			*directionRegisters[config->port] = DIO_PORT_INPUT;
     e7e:	e9 81       	ldd	r30, Y+1	; 0x01
     e80:	fa 81       	ldd	r31, Y+2	; 0x02
     e82:	80 81       	ld	r24, Z
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	fc 01       	movw	r30, r24
     e8e:	e8 59       	subi	r30, 0x98	; 152
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	01 90       	ld	r0, Z+
     e94:	f0 81       	ld	r31, Z
     e96:	e0 2d       	mov	r30, r0
     e98:	10 82       	st	Z, r1
			return NO_ERROR;
     e9a:	1b 82       	std	Y+3, r1	; 0x03
     e9c:	1b c0       	rjmp	.+54     	; 0xed4 <DIO_U8SetPortDirection+0x7a>
		}
		else if (config->pin == DIO_PORT_OUTPUT)
     e9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ea0:	fa 81       	ldd	r31, Y+2	; 0x02
     ea2:	81 81       	ldd	r24, Z+1	; 0x01
     ea4:	8f 3f       	cpi	r24, 0xFF	; 255
     ea6:	89 f4       	brne	.+34     	; 0xeca <DIO_U8SetPortDirection+0x70>
		{
			*directionRegisters[config->port] = DIO_PORT_OUTPUT;
     ea8:	e9 81       	ldd	r30, Y+1	; 0x01
     eaa:	fa 81       	ldd	r31, Y+2	; 0x02
     eac:	80 81       	ld	r24, Z
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	fc 01       	movw	r30, r24
     eb8:	e8 59       	subi	r30, 0x98	; 152
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	01 90       	ld	r0, Z+
     ebe:	f0 81       	ld	r31, Z
     ec0:	e0 2d       	mov	r30, r0
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	80 83       	st	Z, r24
			return NO_ERROR;
     ec6:	1b 82       	std	Y+3, r1	; 0x03
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <DIO_U8SetPortDirection+0x7a>
		}
		else
		{
			return ERROR;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_U8SetPortDirection+0x7a>
		}
	}
	else
	{
		return ERROR;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	8b 83       	std	Y+3, r24	; 0x03
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <DIO_U8SetPinDirection>:

u8 DIO_U8SetPinDirection (const DIO_Config* config)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <DIO_U8SetPinDirection+0x6>
     ee8:	0f 92       	push	r0
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	9a 83       	std	Y+2, r25	; 0x02
     ef0:	89 83       	std	Y+1, r24	; 0x01
	if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7)
     ef2:	e9 81       	ldd	r30, Y+1	; 0x01
     ef4:	fa 81       	ldd	r31, Y+2	; 0x02
     ef6:	80 81       	ld	r24, Z
     ef8:	84 30       	cpi	r24, 0x04	; 4
     efa:	08 f0       	brcs	.+2      	; 0xefe <DIO_U8SetPinDirection+0x1c>
     efc:	6c c0       	rjmp	.+216    	; 0xfd6 <DIO_U8SetPinDirection+0xf4>
     efe:	e9 81       	ldd	r30, Y+1	; 0x01
     f00:	fa 81       	ldd	r31, Y+2	; 0x02
     f02:	81 81       	ldd	r24, Z+1	; 0x01
     f04:	88 30       	cpi	r24, 0x08	; 8
     f06:	08 f0       	brcs	.+2      	; 0xf0a <DIO_U8SetPinDirection+0x28>
     f08:	66 c0       	rjmp	.+204    	; 0xfd6 <DIO_U8SetPinDirection+0xf4>
	{
		if (config->direction == DIO_PIN_INPUT)
     f0a:	e9 81       	ldd	r30, Y+1	; 0x01
     f0c:	fa 81       	ldd	r31, Y+2	; 0x02
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	88 23       	and	r24, r24
     f12:	69 f5       	brne	.+90     	; 0xf6e <DIO_U8SetPinDirection+0x8c>
		{
			CLR_BIT( *directionRegisters[config->port], config->pin );
     f14:	e9 81       	ldd	r30, Y+1	; 0x01
     f16:	fa 81       	ldd	r31, Y+2	; 0x02
     f18:	80 81       	ld	r24, Z
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	fc 01       	movw	r30, r24
     f24:	e8 59       	subi	r30, 0x98	; 152
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	a0 81       	ld	r26, Z
     f2a:	b1 81       	ldd	r27, Z+1	; 0x01
     f2c:	e9 81       	ldd	r30, Y+1	; 0x01
     f2e:	fa 81       	ldd	r31, Y+2	; 0x02
     f30:	80 81       	ld	r24, Z
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	fc 01       	movw	r30, r24
     f3c:	e8 59       	subi	r30, 0x98	; 152
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	01 90       	ld	r0, Z+
     f42:	f0 81       	ld	r31, Z
     f44:	e0 2d       	mov	r30, r0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	e9 81       	ldd	r30, Y+1	; 0x01
     f4c:	fa 81       	ldd	r31, Y+2	; 0x02
     f4e:	81 81       	ldd	r24, Z+1	; 0x01
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_U8SetPinDirection+0x7e>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_U8SetPinDirection+0x7a>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
			return NO_ERROR;
     f6a:	1b 82       	std	Y+3, r1	; 0x03
     f6c:	36 c0       	rjmp	.+108    	; 0xfda <DIO_U8SetPinDirection+0xf8>
		}
		else if (config->direction == DIO_PIN_OUTPUT)
     f6e:	e9 81       	ldd	r30, Y+1	; 0x01
     f70:	fa 81       	ldd	r31, Y+2	; 0x02
     f72:	82 81       	ldd	r24, Z+2	; 0x02
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	61 f5       	brne	.+88     	; 0xfd0 <DIO_U8SetPinDirection+0xee>
		{
			SET_BIT( *directionRegisters[config->port], config->pin );
     f78:	e9 81       	ldd	r30, Y+1	; 0x01
     f7a:	fa 81       	ldd	r31, Y+2	; 0x02
     f7c:	80 81       	ld	r24, Z
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	fc 01       	movw	r30, r24
     f88:	e8 59       	subi	r30, 0x98	; 152
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	a0 81       	ld	r26, Z
     f8e:	b1 81       	ldd	r27, Z+1	; 0x01
     f90:	e9 81       	ldd	r30, Y+1	; 0x01
     f92:	fa 81       	ldd	r31, Y+2	; 0x02
     f94:	80 81       	ld	r24, Z
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	fc 01       	movw	r30, r24
     fa0:	e8 59       	subi	r30, 0x98	; 152
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	01 90       	ld	r0, Z+
     fa6:	f0 81       	ld	r31, Z
     fa8:	e0 2d       	mov	r30, r0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	e9 81       	ldd	r30, Y+1	; 0x01
     fb0:	fa 81       	ldd	r31, Y+2	; 0x02
     fb2:	81 81       	ldd	r24, Z+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_U8SetPinDirection+0xe2>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_U8SetPinDirection+0xde>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
			return NO_ERROR;
     fcc:	1b 82       	std	Y+3, r1	; 0x03
     fce:	05 c0       	rjmp	.+10     	; 0xfda <DIO_U8SetPinDirection+0xf8>
		}
		else
		{
			return ERROR;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_U8SetPinDirection+0xf8>
		}
	}
	else
	{
		return ERROR;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	8b 83       	std	Y+3, r24	; 0x03
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <DIO_U8SetPortValue>:

u8 DIO_U8SetPortValue(const DIO_Config* config) {
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <DIO_U8SetPortValue+0x6>
     fee:	0f 92       	push	r0
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
    if (config != NULL) {
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	d1 f0       	breq	.+52     	; 0x1034 <DIO_U8SetPortValue+0x4c>
        if (config->port <= DIO_PORTD) {
    1000:	e9 81       	ldd	r30, Y+1	; 0x01
    1002:	fa 81       	ldd	r31, Y+2	; 0x02
    1004:	80 81       	ld	r24, Z
    1006:	84 30       	cpi	r24, 0x04	; 4
    1008:	90 f4       	brcc	.+36     	; 0x102e <DIO_U8SetPortValue+0x46>
            *writeRegisters[config->port] = config->value;
    100a:	e9 81       	ldd	r30, Y+1	; 0x01
    100c:	fa 81       	ldd	r31, Y+2	; 0x02
    100e:	80 81       	ld	r24, Z
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	fc 01       	movw	r30, r24
    101a:	e0 59       	subi	r30, 0x90	; 144
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	a0 81       	ld	r26, Z
    1020:	b1 81       	ldd	r27, Z+1	; 0x01
    1022:	e9 81       	ldd	r30, Y+1	; 0x01
    1024:	fa 81       	ldd	r31, Y+2	; 0x02
    1026:	83 81       	ldd	r24, Z+3	; 0x03
    1028:	8c 93       	st	X, r24
            return NO_ERROR;
    102a:	1b 82       	std	Y+3, r1	; 0x03
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <DIO_U8SetPortValue+0x50>
        } else {
            return ERROR;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	8b 83       	std	Y+3, r24	; 0x03
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_U8SetPortValue+0x50>
        }
    } else {
        return ERROR;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	8b 83       	std	Y+3, r24	; 0x03
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(const DIO_Config* config) {
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <DIO_U8SetPinValue+0x6>
    104c:	0f 92       	push	r0
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	89 83       	std	Y+1, r24	; 0x01
    if (config != NULL) {
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	09 f4       	brne	.+2      	; 0x1060 <DIO_U8SetPinValue+0x1a>
    105e:	75 c0       	rjmp	.+234    	; 0x114a <DIO_U8SetPinValue+0x104>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
    1060:	e9 81       	ldd	r30, Y+1	; 0x01
    1062:	fa 81       	ldd	r31, Y+2	; 0x02
    1064:	80 81       	ld	r24, Z
    1066:	84 30       	cpi	r24, 0x04	; 4
    1068:	08 f0       	brcs	.+2      	; 0x106c <DIO_U8SetPinValue+0x26>
    106a:	6c c0       	rjmp	.+216    	; 0x1144 <DIO_U8SetPinValue+0xfe>
    106c:	e9 81       	ldd	r30, Y+1	; 0x01
    106e:	fa 81       	ldd	r31, Y+2	; 0x02
    1070:	81 81       	ldd	r24, Z+1	; 0x01
    1072:	88 30       	cpi	r24, 0x08	; 8
    1074:	08 f0       	brcs	.+2      	; 0x1078 <DIO_U8SetPinValue+0x32>
    1076:	66 c0       	rjmp	.+204    	; 0x1144 <DIO_U8SetPinValue+0xfe>
            if (config->value == DIO_PIN_HIGH) {
    1078:	e9 81       	ldd	r30, Y+1	; 0x01
    107a:	fa 81       	ldd	r31, Y+2	; 0x02
    107c:	83 81       	ldd	r24, Z+3	; 0x03
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	61 f5       	brne	.+88     	; 0x10da <DIO_U8SetPinValue+0x94>
                SET_BIT(*writeRegisters[config->port], config->pin);
    1082:	e9 81       	ldd	r30, Y+1	; 0x01
    1084:	fa 81       	ldd	r31, Y+2	; 0x02
    1086:	80 81       	ld	r24, Z
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	fc 01       	movw	r30, r24
    1092:	e0 59       	subi	r30, 0x90	; 144
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	a0 81       	ld	r26, Z
    1098:	b1 81       	ldd	r27, Z+1	; 0x01
    109a:	e9 81       	ldd	r30, Y+1	; 0x01
    109c:	fa 81       	ldd	r31, Y+2	; 0x02
    109e:	80 81       	ld	r24, Z
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	fc 01       	movw	r30, r24
    10aa:	e0 59       	subi	r30, 0x90	; 144
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	01 90       	ld	r0, Z+
    10b0:	f0 81       	ld	r31, Z
    10b2:	e0 2d       	mov	r30, r0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ba:	fa 81       	ldd	r31, Y+2	; 0x02
    10bc:	81 81       	ldd	r24, Z+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_U8SetPinValue+0x88>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_U8SetPinValue+0x84>
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
                return NO_ERROR;
    10d6:	1b 82       	std	Y+3, r1	; 0x03
    10d8:	3a c0       	rjmp	.+116    	; 0x114e <DIO_U8SetPinValue+0x108>
            } else if (config->value == DIO_PIN_LOW) {
    10da:	e9 81       	ldd	r30, Y+1	; 0x01
    10dc:	fa 81       	ldd	r31, Y+2	; 0x02
    10de:	83 81       	ldd	r24, Z+3	; 0x03
    10e0:	88 23       	and	r24, r24
    10e2:	69 f5       	brne	.+90     	; 0x113e <DIO_U8SetPinValue+0xf8>
                CLR_BIT(*writeRegisters[config->port], config->pin);
    10e4:	e9 81       	ldd	r30, Y+1	; 0x01
    10e6:	fa 81       	ldd	r31, Y+2	; 0x02
    10e8:	80 81       	ld	r24, Z
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	fc 01       	movw	r30, r24
    10f4:	e0 59       	subi	r30, 0x90	; 144
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	a0 81       	ld	r26, Z
    10fa:	b1 81       	ldd	r27, Z+1	; 0x01
    10fc:	e9 81       	ldd	r30, Y+1	; 0x01
    10fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1100:	80 81       	ld	r24, Z
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	fc 01       	movw	r30, r24
    110c:	e0 59       	subi	r30, 0x90	; 144
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	01 90       	ld	r0, Z+
    1112:	f0 81       	ld	r31, Z
    1114:	e0 2d       	mov	r30, r0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	e9 81       	ldd	r30, Y+1	; 0x01
    111c:	fa 81       	ldd	r31, Y+2	; 0x02
    111e:	81 81       	ldd	r24, Z+1	; 0x01
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_U8SetPinValue+0xea>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_U8SetPinValue+0xe6>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
                return NO_ERROR;
    113a:	1b 82       	std	Y+3, r1	; 0x03
    113c:	08 c0       	rjmp	.+16     	; 0x114e <DIO_U8SetPinValue+0x108>
            } else {
                return ERROR;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	8b 83       	std	Y+3, r24	; 0x03
    1142:	05 c0       	rjmp	.+10     	; 0x114e <DIO_U8SetPinValue+0x108>
            }
        } else {
            return ERROR;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	8b 83       	std	Y+3, r24	; 0x03
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_U8SetPinValue+0x108>
        }
    } else {
        return ERROR;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	8b 83       	std	Y+3, r24	; 0x03
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <DIO_U8TogglePin>:

u8 DIO_U8TogglePin(const DIO_Config* config) {
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <DIO_U8TogglePin+0x6>
    1162:	0f 92       	push	r0
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
    if (config != NULL) {
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	c9 f1       	breq	.+114    	; 0x11e6 <DIO_U8TogglePin+0x8a>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
    1174:	e9 81       	ldd	r30, Y+1	; 0x01
    1176:	fa 81       	ldd	r31, Y+2	; 0x02
    1178:	80 81       	ld	r24, Z
    117a:	84 30       	cpi	r24, 0x04	; 4
    117c:	88 f5       	brcc	.+98     	; 0x11e0 <DIO_U8TogglePin+0x84>
    117e:	e9 81       	ldd	r30, Y+1	; 0x01
    1180:	fa 81       	ldd	r31, Y+2	; 0x02
    1182:	81 81       	ldd	r24, Z+1	; 0x01
    1184:	88 30       	cpi	r24, 0x08	; 8
    1186:	60 f5       	brcc	.+88     	; 0x11e0 <DIO_U8TogglePin+0x84>
            TOG_BIT(*writeRegisters[config->port], config->pin);
    1188:	e9 81       	ldd	r30, Y+1	; 0x01
    118a:	fa 81       	ldd	r31, Y+2	; 0x02
    118c:	80 81       	ld	r24, Z
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	fc 01       	movw	r30, r24
    1198:	e0 59       	subi	r30, 0x90	; 144
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	a0 81       	ld	r26, Z
    119e:	b1 81       	ldd	r27, Z+1	; 0x01
    11a0:	e9 81       	ldd	r30, Y+1	; 0x01
    11a2:	fa 81       	ldd	r31, Y+2	; 0x02
    11a4:	80 81       	ld	r24, Z
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	fc 01       	movw	r30, r24
    11b0:	e0 59       	subi	r30, 0x90	; 144
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	01 90       	ld	r0, Z+
    11b6:	f0 81       	ld	r31, Z
    11b8:	e0 2d       	mov	r30, r0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	e9 81       	ldd	r30, Y+1	; 0x01
    11c0:	fa 81       	ldd	r31, Y+2	; 0x02
    11c2:	81 81       	ldd	r24, Z+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_U8TogglePin+0x78>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_U8TogglePin+0x74>
    11d8:	84 27       	eor	r24, r20
    11da:	8c 93       	st	X, r24
            return NO_ERROR;
    11dc:	1b 82       	std	Y+3, r1	; 0x03
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <DIO_U8TogglePin+0x8e>
        } else {
            return ERROR;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_U8TogglePin+0x8e>
        }
    } else {
        return ERROR;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	8b 83       	std	Y+3, r24	; 0x03
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <DIO_U8TogglePort>:

u8 DIO_U8TogglePort(DIO_Port port) {
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <DIO_U8TogglePort+0x6>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01
    if (port <= DIO_PORTD) {
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	84 30       	cpi	r24, 0x04	; 4
    1208:	d0 f4       	brcc	.+52     	; 0x123e <DIO_U8TogglePort+0x46>
        *writeRegisters[port] = ~(*writeRegisters[port]);
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	fc 01       	movw	r30, r24
    1216:	e0 59       	subi	r30, 0x90	; 144
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	a0 81       	ld	r26, Z
    121c:	b1 81       	ldd	r27, Z+1	; 0x01
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	fc 01       	movw	r30, r24
    122a:	e0 59       	subi	r30, 0x90	; 144
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	01 90       	ld	r0, Z+
    1230:	f0 81       	ld	r31, Z
    1232:	e0 2d       	mov	r30, r0
    1234:	80 81       	ld	r24, Z
    1236:	80 95       	com	r24
    1238:	8c 93       	st	X, r24
        return NO_ERROR;
    123a:	1a 82       	std	Y+2, r1	; 0x02
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_U8TogglePort+0x4a>
    } else {
        return ERROR;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	8a 83       	std	Y+2, r24	; 0x02
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(const DIO_Config* config, u8* value) {
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <DIO_U8GetPinValue+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <DIO_U8GetPinValue+0x8>
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	9a 83       	std	Y+2, r25	; 0x02
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	7c 83       	std	Y+4, r23	; 0x04
    1262:	6b 83       	std	Y+3, r22	; 0x03
    if (config != NULL && value != NULL) {
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	9a 81       	ldd	r25, Y+2	; 0x02
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	99 f1       	breq	.+102    	; 0x12d2 <DIO_U8GetPinValue+0x84>
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	79 f1       	breq	.+94     	; 0x12d2 <DIO_U8GetPinValue+0x84>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	80 81       	ld	r24, Z
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	38 f5       	brcc	.+78     	; 0x12cc <DIO_U8GetPinValue+0x7e>
    127e:	e9 81       	ldd	r30, Y+1	; 0x01
    1280:	fa 81       	ldd	r31, Y+2	; 0x02
    1282:	81 81       	ldd	r24, Z+1	; 0x01
    1284:	88 30       	cpi	r24, 0x08	; 8
    1286:	10 f5       	brcc	.+68     	; 0x12cc <DIO_U8GetPinValue+0x7e>
            *value = GET_BIT(*readRegisters[config->port], config->pin);
    1288:	e9 81       	ldd	r30, Y+1	; 0x01
    128a:	fa 81       	ldd	r31, Y+2	; 0x02
    128c:	80 81       	ld	r24, Z
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	fc 01       	movw	r30, r24
    1298:	e8 58       	subi	r30, 0x88	; 136
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	01 90       	ld	r0, Z+
    129e:	f0 81       	ld	r31, Z
    12a0:	e0 2d       	mov	r30, r0
    12a2:	80 81       	ld	r24, Z
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	e9 81       	ldd	r30, Y+1	; 0x01
    12aa:	fa 81       	ldd	r31, Y+2	; 0x02
    12ac:	81 81       	ldd	r24, Z+1	; 0x01
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a9 01       	movw	r20, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_U8GetPinValue+0x6c>
    12b6:	55 95       	asr	r21
    12b8:	47 95       	ror	r20
    12ba:	8a 95       	dec	r24
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_U8GetPinValue+0x68>
    12be:	ca 01       	movw	r24, r20
    12c0:	81 70       	andi	r24, 0x01	; 1
    12c2:	eb 81       	ldd	r30, Y+3	; 0x03
    12c4:	fc 81       	ldd	r31, Y+4	; 0x04
    12c6:	80 83       	st	Z, r24
            return NO_ERROR;
    12c8:	1d 82       	std	Y+5, r1	; 0x05
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <DIO_U8GetPinValue+0x88>
        } else {
            return ERROR;
    12cc:	51 e0       	ldi	r21, 0x01	; 1
    12ce:	5d 83       	std	Y+5, r21	; 0x05
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_U8GetPinValue+0x88>
        }
    } else {
        return ERROR;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    }
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <DIO_U8GetPortValue>:

u8 DIO_U8GetPortValue(DIO_Port port, u8* value) {
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <DIO_U8GetPortValue+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <DIO_U8GetPortValue+0x8>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	7b 83       	std	Y+3, r23	; 0x03
    12f8:	6a 83       	std	Y+2, r22	; 0x02
    if (value != NULL) {
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	b9 f0       	breq	.+46     	; 0x1330 <DIO_U8GetPortValue+0x48>
        if (port <= DIO_PORTD) {
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	88 f4       	brcc	.+34     	; 0x132a <DIO_U8GetPortValue+0x42>
            *value = *readRegisters[port];
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	fc 01       	movw	r30, r24
    1314:	e8 58       	subi	r30, 0x88	; 136
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	01 90       	ld	r0, Z+
    131a:	f0 81       	ld	r31, Z
    131c:	e0 2d       	mov	r30, r0
    131e:	80 81       	ld	r24, Z
    1320:	ea 81       	ldd	r30, Y+2	; 0x02
    1322:	fb 81       	ldd	r31, Y+3	; 0x03
    1324:	80 83       	st	Z, r24
            return NO_ERROR;
    1326:	1c 82       	std	Y+4, r1	; 0x04
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <DIO_U8GetPortValue+0x4c>
        } else {
            return ERROR;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	8c 83       	std	Y+4, r24	; 0x04
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_U8GetPortValue+0x4c>
        }
    } else {
        return ERROR;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	8c 83       	std	Y+4, r24	; 0x04
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    }
}
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <ADC_Init>:


void (*ADC_callBack)(u16 value) = NULL; // Function pointer for ADC interrupt callback

// Function to initialize the ADC module with the given configuration
void ADC_Init(const ADC_config *config) {
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <ADC_Init+0x6>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9a 83       	std	Y+2, r25	; 0x02
    1350:	89 83       	std	Y+1, r24	; 0x01
    /* ADMUX Register Bits Description: */

    // Clear the ADMUX register
    ADC_BASE->ADMUX = 0;
    1352:	e4 e2       	ldi	r30, 0x24	; 36
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	13 82       	std	Z+3, r1	; 0x03

    // Clear the ADEN bit in ADCSRA to disable the ADC
    CLR_BIT(ADC_BASE->ADCSRA, ADEN);
    1358:	a4 e2       	ldi	r26, 0x24	; 36
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e4 e2       	ldi	r30, 0x24	; 36
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	8f 77       	andi	r24, 0x7F	; 127
    1364:	12 96       	adiw	r26, 0x02	; 2
    1366:	8c 93       	st	X, r24

    // Configure ADMUX with reference selection, adjustment, and channel
    ADC_BASE->ADMUX = (config->ref << 6) | (config->adj << 5) | (config->channel);
    1368:	a4 e2       	ldi	r26, 0x24	; 36
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e9 81       	ldd	r30, Y+1	; 0x01
    136e:	fa 81       	ldd	r31, Y+2	; 0x02
    1370:	80 81       	ld	r24, Z
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	00 24       	eor	r0, r0
    1378:	96 95       	lsr	r25
    137a:	87 95       	ror	r24
    137c:	07 94       	ror	r0
    137e:	96 95       	lsr	r25
    1380:	87 95       	ror	r24
    1382:	07 94       	ror	r0
    1384:	98 2f       	mov	r25, r24
    1386:	80 2d       	mov	r24, r0
    1388:	28 2f       	mov	r18, r24
    138a:	e9 81       	ldd	r30, Y+1	; 0x01
    138c:	fa 81       	ldd	r31, Y+2	; 0x02
    138e:	81 81       	ldd	r24, Z+1	; 0x01
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	82 95       	swap	r24
    139a:	92 95       	swap	r25
    139c:	90 7f       	andi	r25, 0xF0	; 240
    139e:	98 27       	eor	r25, r24
    13a0:	80 7f       	andi	r24, 0xF0	; 240
    13a2:	98 27       	eor	r25, r24
    13a4:	92 2f       	mov	r25, r18
    13a6:	98 2b       	or	r25, r24
    13a8:	e9 81       	ldd	r30, Y+1	; 0x01
    13aa:	fa 81       	ldd	r31, Y+2	; 0x02
    13ac:	82 81       	ldd	r24, Z+2	; 0x02
    13ae:	89 2b       	or	r24, r25
    13b0:	13 96       	adiw	r26, 0x03	; 3
    13b2:	8c 93       	st	X, r24

    // Configure SFIOR with special control options
    ADC_BASE->SFIOR = config->sfiorControl;
    13b4:	a4 e2       	ldi	r26, 0x24	; 36
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ba:	fa 81       	ldd	r31, Y+2	; 0x02
    13bc:	84 81       	ldd	r24, Z+4	; 0x04
    13be:	9c 96       	adiw	r26, 0x2c	; 44
    13c0:	8c 93       	st	X, r24

    /* ADCSRA Register Bits Description:
     * ADEN = 1 Enable ADC
     */
    ADC_BASE->ADCSRA = (1 << ADEN) | config->adcsraPre;
    13c2:	a4 e2       	ldi	r26, 0x24	; 36
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e9 81       	ldd	r30, Y+1	; 0x01
    13c8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ca:	83 81       	ldd	r24, Z+3	; 0x03
    13cc:	80 68       	ori	r24, 0x80	; 128
    13ce:	12 96       	adiw	r26, 0x02	; 2
    13d0:	8c 93       	st	X, r24
    13d2:	12 97       	sbiw	r26, 0x02	; 2
}
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <ADC_getDigitalValueAsynchCallBack>:

// Function to initiate an asynchronous ADC conversion with a callback function
void ADC_getDigitalValueAsynchCallBack(u8 channel_num, void (*localPtr)(void)) {
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <ADC_getDigitalValueAsynchCallBack+0x6>
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	7b 83       	std	Y+3, r23	; 0x03
    13ee:	6a 83       	std	Y+2, r22	; 0x02
    // ADIE = 1 Enable ADC interrupt
    SET_BIT(ADC_BASE->ADCSRA, ADIE);
    13f0:	a4 e2       	ldi	r26, 0x24	; 36
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e4 e2       	ldi	r30, 0x24	; 36
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	88 60       	ori	r24, 0x08	; 8
    13fc:	12 96       	adiw	r26, 0x02	; 2
    13fe:	8c 93       	st	X, r24

    // Set the callback function
    ADC_callBack = localPtr;
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	9b 81       	ldd	r25, Y+3	; 0x03
    1404:	90 93 ed 00 	sts	0x00ED, r25
    1408:	80 93 ec 00 	sts	0x00EC, r24

    channel_num &= 0x07; // Input channel number must be from 0 to 7
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	87 70       	andi	r24, 0x07	; 7
    1410:	89 83       	std	Y+1, r24	; 0x01

    // Clear the first 5 bits in ADMUX (channel number MUX4:0 bits) before setting the required channel
    ADC_BASE->ADMUX &= 0xE0;
    1412:	a4 e2       	ldi	r26, 0x24	; 36
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e4 e2       	ldi	r30, 0x24	; 36
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	83 81       	ldd	r24, Z+3	; 0x03
    141c:	80 7e       	andi	r24, 0xE0	; 224
    141e:	13 96       	adiw	r26, 0x03	; 3
    1420:	8c 93       	st	X, r24

    // Choose the correct channel by setting the channel number in MUX4:0 bits
    ADC_BASE->ADMUX = ADC_BASE->ADMUX | channel_num;
    1422:	a4 e2       	ldi	r26, 0x24	; 36
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e4 e2       	ldi	r30, 0x24	; 36
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	93 81       	ldd	r25, Z+3	; 0x03
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	89 2b       	or	r24, r25
    1430:	13 96       	adiw	r26, 0x03	; 3
    1432:	8c 93       	st	X, r24

    // Start conversion by writing '1' to ADSC
    SET_BIT(ADC_BASE->ADCSRA, ADSC);
    1434:	a4 e2       	ldi	r26, 0x24	; 36
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e4 e2       	ldi	r30, 0x24	; 36
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	80 64       	ori	r24, 0x40	; 64
    1440:	12 96       	adiw	r26, 0x02	; 2
    1442:	8c 93       	st	X, r24
    1444:	12 97       	sbiw	r26, 0x02	; 2
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <ADC_getDigitalValueSynchNonBlocking>:

// Function to perform a synchronous non-blocking ADC conversion
u16 ADC_getDigitalValueSynchNonBlocking(u8 channel_num) {
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	62 97       	sbiw	r28, 0x12	; 18
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	8a 8b       	std	Y+18, r24	; 0x12
    static u8 flag = 0;
    u8 time_out = 50;
    1468:	82 e3       	ldi	r24, 0x32	; 50
    146a:	89 8b       	std	Y+17, r24	; 0x11
    u16 value;

    channel_num &= 0x07; // Input channel number must be from 0 to 7
    146c:	8a 89       	ldd	r24, Y+18	; 0x12
    146e:	87 70       	andi	r24, 0x07	; 7
    1470:	8a 8b       	std	Y+18, r24	; 0x12

    // Clear the first 5 bits in ADMUX (channel number MUX4:0 bits) before setting the required channel
    ADC_BASE->ADMUX &= 0xE0;
    1472:	a4 e2       	ldi	r26, 0x24	; 36
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e4 e2       	ldi	r30, 0x24	; 36
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	83 81       	ldd	r24, Z+3	; 0x03
    147c:	80 7e       	andi	r24, 0xE0	; 224
    147e:	13 96       	adiw	r26, 0x03	; 3
    1480:	8c 93       	st	X, r24

    // Choose the correct channel by setting the channel number in MUX4:0 bits
    ADC_BASE->ADMUX = ADC_BASE->ADMUX | channel_num;
    1482:	a4 e2       	ldi	r26, 0x24	; 36
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e4 e2       	ldi	r30, 0x24	; 36
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	93 81       	ldd	r25, Z+3	; 0x03
    148c:	8a 89       	ldd	r24, Y+18	; 0x12
    148e:	89 2b       	or	r24, r25
    1490:	13 96       	adiw	r26, 0x03	; 3
    1492:	8c 93       	st	X, r24
    1494:	13 97       	sbiw	r26, 0x03	; 3

    // Start Conversion if flag is zero
    if (!flag) {
    1496:	80 91 ee 00 	lds	r24, 0x00EE
    149a:	88 23       	and	r24, r24
    149c:	09 f0       	breq	.+2      	; 0x14a0 <ADC_getDigitalValueSynchNonBlocking+0x4e>
    149e:	85 c0       	rjmp	.+266    	; 0x15aa <ADC_getDigitalValueSynchNonBlocking+0x158>
        flag = 1;
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	80 93 ee 00 	sts	0x00EE, r24
        SET_BIT(ADC_BASE->ADCSRA, ADSC);
    14a6:	a4 e2       	ldi	r26, 0x24	; 36
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e4 e2       	ldi	r30, 0x24	; 36
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	82 81       	ldd	r24, Z+2	; 0x02
    14b0:	80 64       	ori	r24, 0x40	; 64
    14b2:	12 96       	adiw	r26, 0x02	; 2
    14b4:	8c 93       	st	X, r24
    14b6:	12 97       	sbiw	r26, 0x02	; 2
    14b8:	78 c0       	rjmp	.+240    	; 0x15aa <ADC_getDigitalValueSynchNonBlocking+0x158>
    }

    // Poll the ADC until the value is ready
    while (GET_BIT(ADC_BASE->ADCSRA, ADIF) == LOW_VAL) {
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a0 e8       	ldi	r26, 0x80	; 128
    14c0:	bf e3       	ldi	r27, 0x3F	; 63
    14c2:	8b 87       	std	Y+11, r24	; 0x0b
    14c4:	9c 87       	std	Y+12, r25	; 0x0c
    14c6:	ad 87       	std	Y+13, r26	; 0x0d
    14c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    14cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4a e7       	ldi	r20, 0x7A	; 122
    14d8:	53 e4       	ldi	r21, 0x43	; 67
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8f 83       	std	Y+7, r24	; 0x07
    14e4:	98 87       	std	Y+8, r25	; 0x08
    14e6:	a9 87       	std	Y+9, r26	; 0x09
    14e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ea:	6f 81       	ldd	r22, Y+7	; 0x07
    14ec:	78 85       	ldd	r23, Y+8	; 0x08
    14ee:	89 85       	ldd	r24, Y+9	; 0x09
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5f e3       	ldi	r21, 0x3F	; 63
    14fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14fe:	88 23       	and	r24, r24
    1500:	2c f4       	brge	.+10     	; 0x150c <ADC_getDigitalValueSynchNonBlocking+0xba>
		__ticks = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	3f c0       	rjmp	.+126    	; 0x158a <ADC_getDigitalValueSynchNonBlocking+0x138>
	else if (__tmp > 65535)
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1520:	18 16       	cp	r1, r24
    1522:	4c f5       	brge	.+82     	; 0x1576 <ADC_getDigitalValueSynchNonBlocking+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1524:	6b 85       	ldd	r22, Y+11	; 0x0b
    1526:	7c 85       	ldd	r23, Y+12	; 0x0c
    1528:	8d 85       	ldd	r24, Y+13	; 0x0d
    152a:	9e 85       	ldd	r25, Y+14	; 0x0e
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	0f c0       	rjmp	.+30     	; 0x156c <ADC_getDigitalValueSynchNonBlocking+0x11a>
    154e:	89 e1       	ldi	r24, 0x19	; 25
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9c 83       	std	Y+4, r25	; 0x04
    1554:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <ADC_getDigitalValueSynchNonBlocking+0x108>
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	69 f7       	brne	.-38     	; 0x154e <ADC_getDigitalValueSynchNonBlocking+0xfc>
    1574:	14 c0       	rjmp	.+40     	; 0x159e <ADC_getDigitalValueSynchNonBlocking+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	78 85       	ldd	r23, Y+8	; 0x08
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <ADC_getDigitalValueSynchNonBlocking+0x144>
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(1);
        if (time_out == 0) {
    159e:	89 89       	ldd	r24, Y+17	; 0x11
    15a0:	88 23       	and	r24, r24
    15a2:	79 f0       	breq	.+30     	; 0x15c2 <ADC_getDigitalValueSynchNonBlocking+0x170>
            break;
        }
        time_out--;
    15a4:	89 89       	ldd	r24, Y+17	; 0x11
    15a6:	81 50       	subi	r24, 0x01	; 1
    15a8:	89 8b       	std	Y+17, r24	; 0x11
        flag = 1;
        SET_BIT(ADC_BASE->ADCSRA, ADSC);
    }

    // Poll the ADC until the value is ready
    while (GET_BIT(ADC_BASE->ADCSRA, ADIF) == LOW_VAL) {
    15aa:	e4 e2       	ldi	r30, 0x24	; 36
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	82 95       	swap	r24
    15b2:	8f 70       	andi	r24, 0x0F	; 15
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	81 70       	andi	r24, 0x01	; 1
    15ba:	90 70       	andi	r25, 0x00	; 0
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	09 f4       	brne	.+2      	; 0x15c2 <ADC_getDigitalValueSynchNonBlocking+0x170>
    15c0:	7c cf       	rjmp	.-264    	; 0x14ba <ADC_getDigitalValueSynchNonBlocking+0x68>
        }
        time_out--;
    }

    // Clear the Interrupt Flag Manually
    SET_BIT(ADC_BASE->ADCSRA, ADIF);
    15c2:	a4 e2       	ldi	r26, 0x24	; 36
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e4 e2       	ldi	r30, 0x24	; 36
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	82 81       	ldd	r24, Z+2	; 0x02
    15cc:	80 61       	ori	r24, 0x10	; 16
    15ce:	12 96       	adiw	r26, 0x02	; 2
    15d0:	8c 93       	st	X, r24
    15d2:	12 97       	sbiw	r26, 0x02	; 2

    value = ADC_BASE->ADCL;
    15d4:	e4 e2       	ldi	r30, 0x24	; 36
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	88 2f       	mov	r24, r24
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	98 8b       	std	Y+16, r25	; 0x10
    15e0:	8f 87       	std	Y+15, r24	; 0x0f
    value = (value >> 6) | (ADC_BASE->ADCH << 2);
    15e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e4:	98 89       	ldd	r25, Y+16	; 0x10
    15e6:	9c 01       	movw	r18, r24
    15e8:	00 24       	eor	r0, r0
    15ea:	22 0f       	add	r18, r18
    15ec:	33 1f       	adc	r19, r19
    15ee:	00 1c       	adc	r0, r0
    15f0:	22 0f       	add	r18, r18
    15f2:	33 1f       	adc	r19, r19
    15f4:	00 1c       	adc	r0, r0
    15f6:	23 2f       	mov	r18, r19
    15f8:	30 2d       	mov	r19, r0
    15fa:	e4 e2       	ldi	r30, 0x24	; 36
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	81 81       	ldd	r24, Z+1	; 0x01
    1600:	88 2f       	mov	r24, r24
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	82 2b       	or	r24, r18
    160e:	93 2b       	or	r25, r19
    1610:	98 8b       	std	Y+16, r25	; 0x10
    1612:	8f 87       	std	Y+15, r24	; 0x0f

    flag = 0;
    1614:	10 92 ee 00 	sts	0x00EE, r1
    return value;
    1618:	8f 85       	ldd	r24, Y+15	; 0x0f
    161a:	98 89       	ldd	r25, Y+16	; 0x10
}
    161c:	62 96       	adiw	r28, 0x12	; 18
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <__vector_16>:

// ADC Interrupt Service Routine
void __vector_16(void) {
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	00 d0       	rcall	.+0      	; 0x1634 <__vector_16+0x6>
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    /* Read ADC Data after conversion complete */
	u16 adcResult;
    adcResult = ADC_BASE->ADCL;
    1638:	e4 e2       	ldi	r30, 0x24	; 36
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	88 2f       	mov	r24, r24
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	89 83       	std	Y+1, r24	; 0x01
    adcResult = (adcResult >> 6) | (ADC_BASE->ADCH << 2);
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	9c 01       	movw	r18, r24
    164c:	00 24       	eor	r0, r0
    164e:	22 0f       	add	r18, r18
    1650:	33 1f       	adc	r19, r19
    1652:	00 1c       	adc	r0, r0
    1654:	22 0f       	add	r18, r18
    1656:	33 1f       	adc	r19, r19
    1658:	00 1c       	adc	r0, r0
    165a:	23 2f       	mov	r18, r19
    165c:	30 2d       	mov	r19, r0
    165e:	e4 e2       	ldi	r30, 0x24	; 36
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	81 81       	ldd	r24, Z+1	; 0x01
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	82 2b       	or	r24, r18
    1672:	93 2b       	or	r25, r19
    1674:	9a 83       	std	Y+2, r25	; 0x02
    1676:	89 83       	std	Y+1, r24	; 0x01
    ADC_callBack(adcResult); // Call the user-defined callback function
    1678:	e0 91 ec 00 	lds	r30, 0x00EC
    167c:	f0 91 ed 00 	lds	r31, 0x00ED
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	9a 81       	ldd	r25, Y+2	; 0x02
    1684:	09 95       	icall
}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <segment_Init>:
#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_Interface.h"

#include "segment.h"

void segment_Init() {
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	a1 97       	sbiw	r28, 0x21	; 33
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
        {DIO_PORTB, DIO_PIN4, DIO_PIN_OUTPUT},
        {DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT},
        {DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT},
        {DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT},
        {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT}
    };
    16a4:	80 e2       	ldi	r24, 0x20	; 32
    16a6:	fe 01       	movw	r30, r28
    16a8:	32 96       	adiw	r30, 0x02	; 2
    16aa:	df 01       	movw	r26, r30
    16ac:	98 2f       	mov	r25, r24
    16ae:	1d 92       	st	X+, r1
    16b0:	9a 95       	dec	r25
    16b2:	e9 f7       	brne	.-6      	; 0x16ae <segment_Init+0x1e>
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	8a 83       	std	Y+2, r24	; 0x02
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	8c 83       	std	Y+4, r24	; 0x04
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	8e 83       	std	Y+6, r24	; 0x06
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	8f 83       	std	Y+7, r24	; 0x07
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	88 87       	std	Y+8, r24	; 0x08
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	8a 87       	std	Y+10, r24	; 0x0a
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	8b 87       	std	Y+11, r24	; 0x0b
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	8c 87       	std	Y+12, r24	; 0x0c
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	8e 87       	std	Y+14, r24	; 0x0e
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	8f 87       	std	Y+15, r24	; 0x0f
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	88 8b       	std	Y+16, r24	; 0x10
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	8a 8b       	std	Y+18, r24	; 0x12
    16e4:	86 e0       	ldi	r24, 0x06	; 6
    16e6:	8b 8b       	std	Y+19, r24	; 0x13
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	8c 8b       	std	Y+20, r24	; 0x14
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	8e 8b       	std	Y+22, r24	; 0x16
    16f0:	85 e0       	ldi	r24, 0x05	; 5
    16f2:	8f 8b       	std	Y+23, r24	; 0x17
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	88 8f       	std	Y+24, r24	; 0x18
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	8b 8f       	std	Y+27, r24	; 0x1b
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	8c 8f       	std	Y+28, r24	; 0x1c
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	8f 8f       	std	Y+31, r24	; 0x1f
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	88 a3       	std	Y+32, r24	; 0x20

    // Initialize the segment pins
    for (u8 i = 0; i < 8; i++) {
    1708:	19 82       	std	Y+1, r1	; 0x01
    170a:	11 c0       	rjmp	.+34     	; 0x172e <segment_Init+0x9e>
        DIO_U8SetPinDirection(&segmentPins[i]);
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9c 01       	movw	r18, r24
    1714:	22 0f       	add	r18, r18
    1716:	33 1f       	adc	r19, r19
    1718:	22 0f       	add	r18, r18
    171a:	33 1f       	adc	r19, r19
    171c:	ce 01       	movw	r24, r28
    171e:	02 96       	adiw	r24, 0x02	; 2
    1720:	82 0f       	add	r24, r18
    1722:	93 1f       	adc	r25, r19
    1724:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
        {DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT},
        {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT}
    };

    // Initialize the segment pins
    for (u8 i = 0; i < 8; i++) {
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	8f 5f       	subi	r24, 0xFF	; 255
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	88 30       	cpi	r24, 0x08	; 8
    1732:	60 f3       	brcs	.-40     	; 0x170c <segment_Init+0x7c>
        DIO_U8SetPinDirection(&segmentPins[i]);
    }
}
    1734:	a1 96       	adiw	r28, 0x21	; 33
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <segment_Num>:

void segment_Num(u8 num, u8 segmentNum) {
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	c4 54       	subi	r28, 0x44	; 68
    1750:	d0 40       	sbci	r29, 0x00	; 0
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	8c ab       	std	Y+52, r24	; 0x34
    175e:	6d ab       	std	Y+53, r22	; 0x35
	DIO_Config clearPins[] = {
	    {DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
	    {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
	    {DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
	    {DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT, DIO_PIN_HIGH}
	};
    1760:	ae 01       	movw	r20, r28
    1762:	4c 5f       	subi	r20, 0xFC	; 252
    1764:	5f 4f       	sbci	r21, 0xFF	; 255
    1766:	5f ab       	std	Y+55, r21	; 0x37
    1768:	4e ab       	std	Y+54, r20	; 0x36
    176a:	80 ea       	ldi	r24, 0xA0	; 160
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	99 af       	std	Y+57, r25	; 0x39
    1770:	88 af       	std	Y+56, r24	; 0x38
    1772:	90 e1       	ldi	r25, 0x10	; 16
    1774:	9a af       	std	Y+58, r25	; 0x3a
    1776:	e8 ad       	ldd	r30, Y+56	; 0x38
    1778:	f9 ad       	ldd	r31, Y+57	; 0x39
    177a:	00 80       	ld	r0, Z
    177c:	48 ad       	ldd	r20, Y+56	; 0x38
    177e:	59 ad       	ldd	r21, Y+57	; 0x39
    1780:	4f 5f       	subi	r20, 0xFF	; 255
    1782:	5f 4f       	sbci	r21, 0xFF	; 255
    1784:	59 af       	std	Y+57, r21	; 0x39
    1786:	48 af       	std	Y+56, r20	; 0x38
    1788:	ee a9       	ldd	r30, Y+54	; 0x36
    178a:	ff a9       	ldd	r31, Y+55	; 0x37
    178c:	00 82       	st	Z, r0
    178e:	4e a9       	ldd	r20, Y+54	; 0x36
    1790:	5f a9       	ldd	r21, Y+55	; 0x37
    1792:	4f 5f       	subi	r20, 0xFF	; 255
    1794:	5f 4f       	sbci	r21, 0xFF	; 255
    1796:	5f ab       	std	Y+55, r21	; 0x37
    1798:	4e ab       	std	Y+54, r20	; 0x36
    179a:	5a ad       	ldd	r21, Y+58	; 0x3a
    179c:	51 50       	subi	r21, 0x01	; 1
    179e:	5a af       	std	Y+58, r21	; 0x3a
    17a0:	8a ad       	ldd	r24, Y+58	; 0x3a
    17a2:	88 23       	and	r24, r24
    17a4:	41 f7       	brne	.-48     	; 0x1776 <segment_Num+0x30>

	for (u8 i = 0; i < 4; i++) {
    17a6:	1b 82       	std	Y+3, r1	; 0x03
    17a8:	11 c0       	rjmp	.+34     	; 0x17cc <segment_Num+0x86>
	    DIO_U8SetPinValue(&clearPins[i]); // Set pin value to low
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9c 01       	movw	r18, r24
    17b2:	22 0f       	add	r18, r18
    17b4:	33 1f       	adc	r19, r19
    17b6:	22 0f       	add	r18, r18
    17b8:	33 1f       	adc	r19, r19
    17ba:	ce 01       	movw	r24, r28
    17bc:	04 96       	adiw	r24, 0x04	; 4
    17be:	82 0f       	add	r24, r18
    17c0:	93 1f       	adc	r25, r19
    17c2:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
	    {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
	    {DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
	    {DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT, DIO_PIN_HIGH}
	};

	for (u8 i = 0; i < 4; i++) {
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	8f 5f       	subi	r24, 0xFF	; 255
    17ca:	8b 83       	std	Y+3, r24	; 0x03
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	84 30       	cpi	r24, 0x04	; 4
    17d0:	60 f3       	brcs	.-40     	; 0x17aa <segment_Num+0x64>
	DIO_Config segmentPins[] = {
	    {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT, DIO_PIN_LOW},
	    {DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT, DIO_PIN_LOW},
	    {DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT, DIO_PIN_LOW},
	    {DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT, DIO_PIN_LOW}
	};
    17d2:	fe 01       	movw	r30, r28
    17d4:	74 96       	adiw	r30, 0x14	; 20
    17d6:	fc af       	std	Y+60, r31	; 0x3c
    17d8:	eb af       	std	Y+59, r30	; 0x3b
    17da:	40 e9       	ldi	r20, 0x90	; 144
    17dc:	50 e0       	ldi	r21, 0x00	; 0
    17de:	5e af       	std	Y+62, r21	; 0x3e
    17e0:	4d af       	std	Y+61, r20	; 0x3d
    17e2:	50 e1       	ldi	r21, 0x10	; 16
    17e4:	5f af       	std	Y+63, r21	; 0x3f
    17e6:	ed ad       	ldd	r30, Y+61	; 0x3d
    17e8:	fe ad       	ldd	r31, Y+62	; 0x3e
    17ea:	00 80       	ld	r0, Z
    17ec:	4d ad       	ldd	r20, Y+61	; 0x3d
    17ee:	5e ad       	ldd	r21, Y+62	; 0x3e
    17f0:	4f 5f       	subi	r20, 0xFF	; 255
    17f2:	5f 4f       	sbci	r21, 0xFF	; 255
    17f4:	5e af       	std	Y+62, r21	; 0x3e
    17f6:	4d af       	std	Y+61, r20	; 0x3d
    17f8:	eb ad       	ldd	r30, Y+59	; 0x3b
    17fa:	fc ad       	ldd	r31, Y+60	; 0x3c
    17fc:	00 82       	st	Z, r0
    17fe:	4b ad       	ldd	r20, Y+59	; 0x3b
    1800:	5c ad       	ldd	r21, Y+60	; 0x3c
    1802:	4f 5f       	subi	r20, 0xFF	; 255
    1804:	5f 4f       	sbci	r21, 0xFF	; 255
    1806:	5c af       	std	Y+60, r21	; 0x3c
    1808:	4b af       	std	Y+59, r20	; 0x3b
    180a:	5f ad       	ldd	r21, Y+63	; 0x3f
    180c:	51 50       	subi	r21, 0x01	; 1
    180e:	5f af       	std	Y+63, r21	; 0x3f
    1810:	8f ad       	ldd	r24, Y+63	; 0x3f
    1812:	88 23       	and	r24, r24
    1814:	41 f7       	brne	.-48     	; 0x17e6 <segment_Num+0xa0>

	if (segmentNum >= 1 && segmentNum <= 4) {
    1816:	8d a9       	ldd	r24, Y+53	; 0x35
    1818:	88 23       	and	r24, r24
    181a:	c1 f0       	breq	.+48     	; 0x184c <segment_Num+0x106>
    181c:	8d a9       	ldd	r24, Y+53	; 0x35
    181e:	85 30       	cpi	r24, 0x05	; 5
    1820:	a8 f4       	brcc	.+42     	; 0x184c <segment_Num+0x106>
	    DIO_U8SetPinValue(&segmentPins[segmentNum - 1]); // Set segment pin value to high
    1822:	8d a9       	ldd	r24, Y+53	; 0x35
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	82 1b       	sub	r24, r18
    182e:	93 0b       	sbc	r25, r19
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	22 27       	eor	r18, r18
    183a:	33 27       	eor	r19, r19
    183c:	28 1b       	sub	r18, r24
    183e:	39 0b       	sbc	r19, r25
    1840:	ce 01       	movw	r24, r28
    1842:	44 96       	adiw	r24, 0x14	; 20
    1844:	82 0f       	add	r24, r18
    1846:	93 1f       	adc	r25, r19
    1848:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
	DIO_Config displayPins[] = {
	    {DIO_PORTB, DIO_PIN0, DIO_PIN_OUTPUT, DIO_PIN_LOW}, // Pin 0
	    {DIO_PORTB, DIO_PIN1, DIO_PIN_OUTPUT, DIO_PIN_LOW}, // Pin 1
	    {DIO_PORTB, DIO_PIN2, DIO_PIN_OUTPUT, DIO_PIN_LOW}, // Pin 2
	    {DIO_PORTB, DIO_PIN4, DIO_PIN_OUTPUT, DIO_PIN_LOW}  // Pin 4
	};
    184c:	fe 01       	movw	r30, r28
    184e:	b4 96       	adiw	r30, 0x24	; 36
    1850:	22 96       	adiw	r28, 0x02	; 2
    1852:	ff af       	std	Y+63, r31	; 0x3f
    1854:	ee af       	std	Y+62, r30	; 0x3e
    1856:	22 97       	sbiw	r28, 0x02	; 2
    1858:	40 e8       	ldi	r20, 0x80	; 128
    185a:	50 e0       	ldi	r21, 0x00	; 0
    185c:	24 96       	adiw	r28, 0x04	; 4
    185e:	5f af       	std	Y+63, r21	; 0x3f
    1860:	4e af       	std	Y+62, r20	; 0x3e
    1862:	24 97       	sbiw	r28, 0x04	; 4
    1864:	50 e1       	ldi	r21, 0x10	; 16
    1866:	25 96       	adiw	r28, 0x05	; 5
    1868:	5f af       	std	Y+63, r21	; 0x3f
    186a:	25 97       	sbiw	r28, 0x05	; 5
    186c:	24 96       	adiw	r28, 0x04	; 4
    186e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1870:	ff ad       	ldd	r31, Y+63	; 0x3f
    1872:	24 97       	sbiw	r28, 0x04	; 4
    1874:	00 80       	ld	r0, Z
    1876:	24 96       	adiw	r28, 0x04	; 4
    1878:	4e ad       	ldd	r20, Y+62	; 0x3e
    187a:	5f ad       	ldd	r21, Y+63	; 0x3f
    187c:	24 97       	sbiw	r28, 0x04	; 4
    187e:	4f 5f       	subi	r20, 0xFF	; 255
    1880:	5f 4f       	sbci	r21, 0xFF	; 255
    1882:	24 96       	adiw	r28, 0x04	; 4
    1884:	5f af       	std	Y+63, r21	; 0x3f
    1886:	4e af       	std	Y+62, r20	; 0x3e
    1888:	24 97       	sbiw	r28, 0x04	; 4
    188a:	22 96       	adiw	r28, 0x02	; 2
    188c:	ee ad       	ldd	r30, Y+62	; 0x3e
    188e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1890:	22 97       	sbiw	r28, 0x02	; 2
    1892:	00 82       	st	Z, r0
    1894:	22 96       	adiw	r28, 0x02	; 2
    1896:	4e ad       	ldd	r20, Y+62	; 0x3e
    1898:	5f ad       	ldd	r21, Y+63	; 0x3f
    189a:	22 97       	sbiw	r28, 0x02	; 2
    189c:	4f 5f       	subi	r20, 0xFF	; 255
    189e:	5f 4f       	sbci	r21, 0xFF	; 255
    18a0:	22 96       	adiw	r28, 0x02	; 2
    18a2:	5f af       	std	Y+63, r21	; 0x3f
    18a4:	4e af       	std	Y+62, r20	; 0x3e
    18a6:	22 97       	sbiw	r28, 0x02	; 2
    18a8:	25 96       	adiw	r28, 0x05	; 5
    18aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    18ac:	25 97       	sbiw	r28, 0x05	; 5
    18ae:	51 50       	subi	r21, 0x01	; 1
    18b0:	25 96       	adiw	r28, 0x05	; 5
    18b2:	5f af       	std	Y+63, r21	; 0x3f
    18b4:	25 97       	sbiw	r28, 0x05	; 5
    18b6:	25 96       	adiw	r28, 0x05	; 5
    18b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    18ba:	25 97       	sbiw	r28, 0x05	; 5
    18bc:	88 23       	and	r24, r24
    18be:	b1 f6       	brne	.-84     	; 0x186c <segment_Num+0x126>

	// Set the common configuration for the display pins
	for (u8 i = 0; i < 4; i++) {
    18c0:	1a 82       	std	Y+2, r1	; 0x02
    18c2:	30 c0       	rjmp	.+96     	; 0x1924 <segment_Num+0x1de>
	    // Set the pin value based on the number (num)
	    u8 pinValue = (num & (1 << i)) ? DIO_PIN_HIGH : DIO_PIN_LOW;
    18c4:	8c a9       	ldd	r24, Y+52	; 0x34
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	f9 01       	movw	r30, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <segment_Num+0x192>
    18d4:	f5 95       	asr	r31
    18d6:	e7 95       	ror	r30
    18d8:	8a 95       	dec	r24
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <segment_Num+0x18e>
    18dc:	cf 01       	movw	r24, r30
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	89 83       	std	Y+1, r24	; 0x01

	    // Set the pin value for each digit based on the binary representation
	    displayPins[i].value = pinValue;
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	88 2f       	mov	r24, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9c 01       	movw	r18, r24
    18ea:	22 0f       	add	r18, r18
    18ec:	33 1f       	adc	r19, r19
    18ee:	22 0f       	add	r18, r18
    18f0:	33 1f       	adc	r19, r19
    18f2:	ce 01       	movw	r24, r28
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	82 0f       	add	r24, r18
    18f8:	93 1f       	adc	r25, r19
    18fa:	fc 01       	movw	r30, r24
    18fc:	b6 96       	adiw	r30, 0x26	; 38
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	80 83       	st	Z, r24
	    DIO_U8SetPinValue(&displayPins[i]);
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9c 01       	movw	r18, r24
    190a:	22 0f       	add	r18, r18
    190c:	33 1f       	adc	r19, r19
    190e:	22 0f       	add	r18, r18
    1910:	33 1f       	adc	r19, r19
    1912:	ce 01       	movw	r24, r28
    1914:	84 96       	adiw	r24, 0x24	; 36
    1916:	82 0f       	add	r24, r18
    1918:	93 1f       	adc	r25, r19
    191a:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
	    {DIO_PORTB, DIO_PIN2, DIO_PIN_OUTPUT, DIO_PIN_LOW}, // Pin 2
	    {DIO_PORTB, DIO_PIN4, DIO_PIN_OUTPUT, DIO_PIN_LOW}  // Pin 4
	};

	// Set the common configuration for the display pins
	for (u8 i = 0; i < 4; i++) {
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	8f 5f       	subi	r24, 0xFF	; 255
    1922:	8a 83       	std	Y+2, r24	; 0x02
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	84 30       	cpi	r24, 0x04	; 4
    1928:	68 f2       	brcs	.-102    	; 0x18c4 <segment_Num+0x17e>
	    displayPins[i].value = pinValue;
	    DIO_U8SetPinValue(&displayPins[i]);
	}


}
    192a:	cc 5b       	subi	r28, 0xBC	; 188
    192c:	df 4f       	sbci	r29, 0xFF	; 255
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	de bf       	out	0x3e, r29	; 62
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	cd bf       	out	0x3d, r28	; 61
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <H_LCD_void_Init>:
#include "LCD_config.h"


void functionSet();

void H_LCD_void_Init(void){
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	c4 54       	subi	r28, 0x44	; 68
    1948:	d0 40       	sbci	r29, 0x00	; 0
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
	DIO_Config lcdInit[] = {
			{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT},//PA3 RS
			{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT},//PA2 EN
	};
    1954:	88 e0       	ldi	r24, 0x08	; 8
    1956:	fe 01       	movw	r30, r28
    1958:	bd 96       	adiw	r30, 0x2d	; 45
    195a:	df 01       	movw	r26, r30
    195c:	98 2f       	mov	r25, r24
    195e:	1d 92       	st	X+, r1
    1960:	9a 95       	dec	r25
    1962:	e9 f7       	brne	.-6      	; 0x195e <H_LCD_void_Init+0x20>
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	8e a7       	std	Y+46, r24	; 0x2e
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	8f a7       	std	Y+47, r24	; 0x2f
    196c:	82 e0       	ldi	r24, 0x02	; 2
    196e:	8a ab       	std	Y+50, r24	; 0x32
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	8b ab       	std	Y+51, r24	; 0x33
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
    1974:	1c a6       	std	Y+44, r1	; 0x2c
    1976:	11 c0       	rjmp	.+34     	; 0x199a <H_LCD_void_Init+0x5c>
		DIO_U8SetPinDirection(&lcdInit[i]);
    1978:	8c a5       	ldd	r24, Y+44	; 0x2c
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9c 01       	movw	r18, r24
    1980:	22 0f       	add	r18, r18
    1982:	33 1f       	adc	r19, r19
    1984:	22 0f       	add	r18, r18
    1986:	33 1f       	adc	r19, r19
    1988:	ce 01       	movw	r24, r28
    198a:	8d 96       	adiw	r24, 0x2d	; 45
    198c:	82 0f       	add	r24, r18
    198e:	93 1f       	adc	r25, r19
    1990:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
	DIO_Config lcdInit[] = {
			{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT},//PA3 RS
			{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
    1994:	8c a5       	ldd	r24, Y+44	; 0x2c
    1996:	8f 5f       	subi	r24, 0xFF	; 255
    1998:	8c a7       	std	Y+44, r24	; 0x2c
    199a:	8c a5       	ldd	r24, Y+44	; 0x2c
    199c:	82 30       	cpi	r24, 0x02	; 2
    199e:	60 f3       	brcs	.-40     	; 0x1978 <H_LCD_void_Init+0x3a>
	DIO_Config dataPins[] = {
			{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT},//PD4 data bin
			{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT},//PD5 data bin
			{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT},//PD6 data bin
			{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT},//PD7 data bin
	};
    19a0:	80 e1       	ldi	r24, 0x10	; 16
    19a2:	fe 01       	movw	r30, r28
    19a4:	f5 96       	adiw	r30, 0x35	; 53
    19a6:	df 01       	movw	r26, r30
    19a8:	98 2f       	mov	r25, r24
    19aa:	1d 92       	st	X+, r1
    19ac:	9a 95       	dec	r25
    19ae:	e9 f7       	brne	.-6      	; 0x19aa <H_LCD_void_Init+0x6c>
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	8d ab       	std	Y+53, r24	; 0x35
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	8f ab       	std	Y+55, r24	; 0x37
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	89 af       	std	Y+57, r24	; 0x39
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	8a af       	std	Y+58, r24	; 0x3a
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	8b af       	std	Y+59, r24	; 0x3b
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	8d af       	std	Y+61, r24	; 0x3d
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	8e af       	std	Y+62, r24	; 0x3e
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	8f af       	std	Y+63, r24	; 0x3f
    19d0:	fe 01       	movw	r30, r28
    19d2:	ef 5b       	subi	r30, 0xBF	; 191
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	80 83       	st	Z, r24
    19da:	fe 01       	movw	r30, r28
    19dc:	ee 5b       	subi	r30, 0xBE	; 190
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	84 e0       	ldi	r24, 0x04	; 4
    19e2:	80 83       	st	Z, r24
    19e4:	fe 01       	movw	r30, r28
    19e6:	ed 5b       	subi	r30, 0xBD	; 189
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	80 83       	st	Z, r24
	// Initialize RS EN pins
	for (u8 i = 0; i < 4; i++) {
    19ee:	1b a6       	std	Y+43, r1	; 0x2b
    19f0:	11 c0       	rjmp	.+34     	; 0x1a14 <H_LCD_void_Init+0xd6>
		DIO_U8SetPinDirection(&dataPins[i]);
    19f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9c 01       	movw	r18, r24
    19fa:	22 0f       	add	r18, r18
    19fc:	33 1f       	adc	r19, r19
    19fe:	22 0f       	add	r18, r18
    1a00:	33 1f       	adc	r19, r19
    1a02:	ce 01       	movw	r24, r28
    1a04:	c5 96       	adiw	r24, 0x35	; 53
    1a06:	82 0f       	add	r24, r18
    1a08:	93 1f       	adc	r25, r19
    1a0a:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
			{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT},//PD5 data bin
			{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT},//PD6 data bin
			{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT},//PD7 data bin
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 4; i++) {
    1a0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	8b a7       	std	Y+43, r24	; 0x2b
    1a14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a16:	84 30       	cpi	r24, 0x04	; 4
    1a18:	60 f3       	brcs	.-40     	; 0x19f2 <H_LCD_void_Init+0xb4>
		DIO_U8SetPinDirection(&dataPins[i]);
	}

	//Function Set Corner Case
	functionSet();
    1a1a:	0e 94 ae 11 	call	0x235c	; 0x235c <functionSet>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e8       	ldi	r26, 0x80	; 128
    1a24:	bf e3       	ldi	r27, 0x3F	; 63
    1a26:	8f a3       	std	Y+39, r24	; 0x27
    1a28:	98 a7       	std	Y+40, r25	; 0x28
    1a2a:	a9 a7       	std	Y+41, r26	; 0x29
    1a2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a30:	78 a5       	ldd	r23, Y+40	; 0x28
    1a32:	89 a5       	ldd	r24, Y+41	; 0x29
    1a34:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a e7       	ldi	r20, 0x7A	; 122
    1a3c:	53 e4       	ldi	r21, 0x43	; 67
    1a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8b a3       	std	Y+35, r24	; 0x23
    1a48:	9c a3       	std	Y+36, r25	; 0x24
    1a4a:	ad a3       	std	Y+37, r26	; 0x25
    1a4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a50:	7c a1       	ldd	r23, Y+36	; 0x24
    1a52:	8d a1       	ldd	r24, Y+37	; 0x25
    1a54:	9e a1       	ldd	r25, Y+38	; 0x26
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	2c f4       	brge	.+10     	; 0x1a70 <H_LCD_void_Init+0x132>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9a a3       	std	Y+34, r25	; 0x22
    1a6c:	89 a3       	std	Y+33, r24	; 0x21
    1a6e:	3f c0       	rjmp	.+126    	; 0x1aee <H_LCD_void_Init+0x1b0>
	else if (__tmp > 65535)
    1a70:	6b a1       	ldd	r22, Y+35	; 0x23
    1a72:	7c a1       	ldd	r23, Y+36	; 0x24
    1a74:	8d a1       	ldd	r24, Y+37	; 0x25
    1a76:	9e a1       	ldd	r25, Y+38	; 0x26
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	3f ef       	ldi	r19, 0xFF	; 255
    1a7c:	4f e7       	ldi	r20, 0x7F	; 127
    1a7e:	57 e4       	ldi	r21, 0x47	; 71
    1a80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a84:	18 16       	cp	r1, r24
    1a86:	4c f5       	brge	.+82     	; 0x1ada <H_LCD_void_Init+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a88:	6f a1       	ldd	r22, Y+39	; 0x27
    1a8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e2       	ldi	r20, 0x20	; 32
    1a96:	51 e4       	ldi	r21, 0x41	; 65
    1a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	cd 01       	movw	r24, r26
    1aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	9a a3       	std	Y+34, r25	; 0x22
    1aae:	89 a3       	std	Y+33, r24	; 0x21
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <H_LCD_void_Init+0x192>
    1ab2:	89 e1       	ldi	r24, 0x19	; 25
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	98 a3       	std	Y+32, r25	; 0x20
    1ab8:	8f 8f       	std	Y+31, r24	; 0x1f
    1aba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1abc:	98 a1       	ldd	r25, Y+32	; 0x20
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <H_LCD_void_Init+0x180>
    1ac2:	98 a3       	std	Y+32, r25	; 0x20
    1ac4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	9a a3       	std	Y+34, r25	; 0x22
    1ace:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	69 f7       	brne	.-38     	; 0x1ab2 <H_LCD_void_Init+0x174>
    1ad8:	14 c0       	rjmp	.+40     	; 0x1b02 <H_LCD_void_Init+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ada:	6b a1       	ldd	r22, Y+35	; 0x23
    1adc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ade:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9a a3       	std	Y+34, r25	; 0x22
    1aec:	89 a3       	std	Y+33, r24	; 0x21
    1aee:	89 a1       	ldd	r24, Y+33	; 0x21
    1af0:	9a a1       	ldd	r25, Y+34	; 0x22
    1af2:	9e 8f       	std	Y+30, r25	; 0x1e
    1af4:	8d 8f       	std	Y+29, r24	; 0x1d
    1af6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1af8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <H_LCD_void_Init+0x1bc>
    1afe:	9e 8f       	std	Y+30, r25	; 0x1e
    1b00:	8d 8f       	std	Y+29, r24	; 0x1d
	//H_LCD_void_sendCommand(0x02);
	//	_delay_ms(1);
	//	H_LCD_void_sendCommand(0x28);
	_delay_ms(1);
	H_LCD_void_sendCommand(0x0F);
    1b02:	8f e0       	ldi	r24, 0x0F	; 15
    1b04:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <H_LCD_void_sendCommand>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a0 e8       	ldi	r26, 0x80	; 128
    1b0e:	bf e3       	ldi	r27, 0x3F	; 63
    1b10:	89 8f       	std	Y+25, r24	; 0x19
    1b12:	9a 8f       	std	Y+26, r25	; 0x1a
    1b14:	ab 8f       	std	Y+27, r26	; 0x1b
    1b16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a e7       	ldi	r20, 0x7A	; 122
    1b26:	53 e4       	ldi	r21, 0x43	; 67
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	8d 8b       	std	Y+21, r24	; 0x15
    1b32:	9e 8b       	std	Y+22, r25	; 0x16
    1b34:	af 8b       	std	Y+23, r26	; 0x17
    1b36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b38:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <H_LCD_void_Init+0x21c>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9c 8b       	std	Y+20, r25	; 0x14
    1b56:	8b 8b       	std	Y+19, r24	; 0x13
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <H_LCD_void_Init+0x29a>
	else if (__tmp > 65535)
    1b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b60:	98 8d       	ldd	r25, Y+24	; 0x18
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <H_LCD_void_Init+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	69 8d       	ldd	r22, Y+25	; 0x19
    1b74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	9c 8b       	std	Y+20, r25	; 0x14
    1b98:	8b 8b       	std	Y+19, r24	; 0x13
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <H_LCD_void_Init+0x27c>
    1b9c:	89 e1       	ldi	r24, 0x19	; 25
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9a 8b       	std	Y+18, r25	; 0x12
    1ba2:	89 8b       	std	Y+17, r24	; 0x11
    1ba4:	89 89       	ldd	r24, Y+17	; 0x11
    1ba6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <H_LCD_void_Init+0x26a>
    1bac:	9a 8b       	std	Y+18, r25	; 0x12
    1bae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	9c 8b       	std	Y+20, r25	; 0x14
    1bb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <H_LCD_void_Init+0x25e>
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <H_LCD_void_Init+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bca:	98 8d       	ldd	r25, Y+24	; 0x18
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9c 8b       	std	Y+20, r25	; 0x14
    1bd6:	8b 8b       	std	Y+19, r24	; 0x13
    1bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bda:	9c 89       	ldd	r25, Y+20	; 0x14
    1bdc:	98 8b       	std	Y+16, r25	; 0x10
    1bde:	8f 87       	std	Y+15, r24	; 0x0f
    1be0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be2:	98 89       	ldd	r25, Y+16	; 0x10
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <H_LCD_void_Init+0x2a6>
    1be8:	98 8b       	std	Y+16, r25	; 0x10
    1bea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	H_LCD_void_sendCommand(0x01);
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <H_LCD_void_sendCommand>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	a0 e0       	ldi	r26, 0x00	; 0
    1bf8:	b0 e4       	ldi	r27, 0x40	; 64
    1bfa:	8b 87       	std	Y+11, r24	; 0x0b
    1bfc:	9c 87       	std	Y+12, r25	; 0x0c
    1bfe:	ad 87       	std	Y+13, r26	; 0x0d
    1c00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	4a e7       	ldi	r20, 0x7A	; 122
    1c10:	53 e4       	ldi	r21, 0x43	; 67
    1c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	8f 83       	std	Y+7, r24	; 0x07
    1c1c:	98 87       	std	Y+8, r25	; 0x08
    1c1e:	a9 87       	std	Y+9, r26	; 0x09
    1c20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c22:	6f 81       	ldd	r22, Y+7	; 0x07
    1c24:	78 85       	ldd	r23, Y+8	; 0x08
    1c26:	89 85       	ldd	r24, Y+9	; 0x09
    1c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e8       	ldi	r20, 0x80	; 128
    1c30:	5f e3       	ldi	r21, 0x3F	; 63
    1c32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c36:	88 23       	and	r24, r24
    1c38:	2c f4       	brge	.+10     	; 0x1c44 <H_LCD_void_Init+0x306>
		__ticks = 1;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9e 83       	std	Y+6, r25	; 0x06
    1c40:	8d 83       	std	Y+5, r24	; 0x05
    1c42:	3f c0       	rjmp	.+126    	; 0x1cc2 <H_LCD_void_Init+0x384>
	else if (__tmp > 65535)
    1c44:	6f 81       	ldd	r22, Y+7	; 0x07
    1c46:	78 85       	ldd	r23, Y+8	; 0x08
    1c48:	89 85       	ldd	r24, Y+9	; 0x09
    1c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	3f ef       	ldi	r19, 0xFF	; 255
    1c50:	4f e7       	ldi	r20, 0x7F	; 127
    1c52:	57 e4       	ldi	r21, 0x47	; 71
    1c54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c58:	18 16       	cp	r1, r24
    1c5a:	4c f5       	brge	.+82     	; 0x1cae <H_LCD_void_Init+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e2       	ldi	r20, 0x20	; 32
    1c6a:	51 e4       	ldi	r21, 0x41	; 65
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	9e 83       	std	Y+6, r25	; 0x06
    1c82:	8d 83       	std	Y+5, r24	; 0x05
    1c84:	0f c0       	rjmp	.+30     	; 0x1ca4 <H_LCD_void_Init+0x366>
    1c86:	89 e1       	ldi	r24, 0x19	; 25
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9c 83       	std	Y+4, r25	; 0x04
    1c8c:	8b 83       	std	Y+3, r24	; 0x03
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	01 97       	sbiw	r24, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <H_LCD_void_Init+0x354>
    1c96:	9c 83       	std	Y+4, r25	; 0x04
    1c98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	69 f7       	brne	.-38     	; 0x1c86 <H_LCD_void_Init+0x348>
    1cac:	14 c0       	rjmp	.+40     	; 0x1cd6 <H_LCD_void_Init+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9e 83       	std	Y+6, r25	; 0x06
    1cc0:	8d 83       	std	Y+5, r24	; 0x05
    1cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc6:	9a 83       	std	Y+2, r25	; 0x02
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cce:	01 97       	sbiw	r24, 0x01	; 1
    1cd0:	f1 f7       	brne	.-4      	; 0x1cce <H_LCD_void_Init+0x390>
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	H_LCD_void_sendCommand(0x06);
    1cd6:	86 e0       	ldi	r24, 0x06	; 6
    1cd8:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <H_LCD_void_sendCommand>

#elif (LCD_DATA_BITS_MODE == 8)

#endif
}
    1cdc:	cc 5b       	subi	r28, 0xBC	; 188
    1cde:	df 4f       	sbci	r29, 0xFF	; 255
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	f8 94       	cli
    1ce4:	de bf       	out	0x3e, r29	; 62
    1ce6:	0f be       	out	0x3f, r0	; 63
    1ce8:	cd bf       	out	0x3d, r28	; 61
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <H_LCD_void_sendCommand>:



void H_LCD_void_sendCommand(u8 copy_u8command)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	ab 97       	sbiw	r28, 0x2b	; 43
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	8e a3       	std	Y+38, r24	; 0x26
	//set mode to command
	DIO_Config mode[] = {
			{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_LOW},//PA3 RS
			{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
    1d06:	ce 01       	movw	r24, r28
    1d08:	4e 96       	adiw	r24, 0x1e	; 30
    1d0a:	98 a7       	std	Y+40, r25	; 0x28
    1d0c:	8f a3       	std	Y+39, r24	; 0x27
    1d0e:	e0 eb       	ldi	r30, 0xB0	; 176
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	fa a7       	std	Y+42, r31	; 0x2a
    1d14:	e9 a7       	std	Y+41, r30	; 0x29
    1d16:	f8 e0       	ldi	r31, 0x08	; 8
    1d18:	fb a7       	std	Y+43, r31	; 0x2b
    1d1a:	e9 a5       	ldd	r30, Y+41	; 0x29
    1d1c:	fa a5       	ldd	r31, Y+42	; 0x2a
    1d1e:	00 80       	ld	r0, Z
    1d20:	89 a5       	ldd	r24, Y+41	; 0x29
    1d22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d24:	01 96       	adiw	r24, 0x01	; 1
    1d26:	9a a7       	std	Y+42, r25	; 0x2a
    1d28:	89 a7       	std	Y+41, r24	; 0x29
    1d2a:	ef a1       	ldd	r30, Y+39	; 0x27
    1d2c:	f8 a5       	ldd	r31, Y+40	; 0x28
    1d2e:	00 82       	st	Z, r0
    1d30:	8f a1       	ldd	r24, Y+39	; 0x27
    1d32:	98 a5       	ldd	r25, Y+40	; 0x28
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	98 a7       	std	Y+40, r25	; 0x28
    1d38:	8f a3       	std	Y+39, r24	; 0x27
    1d3a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d3c:	91 50       	subi	r25, 0x01	; 1
    1d3e:	9b a7       	std	Y+43, r25	; 0x2b
    1d40:	eb a5       	ldd	r30, Y+43	; 0x2b
    1d42:	ee 23       	and	r30, r30
    1d44:	51 f7       	brne	.-44     	; 0x1d1a <H_LCD_void_sendCommand+0x2a>
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
    1d46:	1d 8e       	std	Y+29, r1	; 0x1d
    1d48:	83 c0       	rjmp	.+262    	; 0x1e50 <H_LCD_void_sendCommand+0x160>
		DIO_U8SetPinValue(&mode[i]);
    1d4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9c 01       	movw	r18, r24
    1d52:	22 0f       	add	r18, r18
    1d54:	33 1f       	adc	r19, r19
    1d56:	22 0f       	add	r18, r18
    1d58:	33 1f       	adc	r19, r19
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	4e 96       	adiw	r24, 0x1e	; 30
    1d5e:	82 0f       	add	r24, r18
    1d60:	93 1f       	adc	r25, r19
    1d62:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a0 e8       	ldi	r26, 0x80	; 128
    1d6c:	bf e3       	ldi	r27, 0x3F	; 63
    1d6e:	89 8f       	std	Y+25, r24	; 0x19
    1d70:	9a 8f       	std	Y+26, r25	; 0x1a
    1d72:	ab 8f       	std	Y+27, r26	; 0x1b
    1d74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d76:	69 8d       	ldd	r22, Y+25	; 0x19
    1d78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	4a e7       	ldi	r20, 0x7A	; 122
    1d84:	53 e4       	ldi	r21, 0x43	; 67
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	8d 8b       	std	Y+21, r24	; 0x15
    1d90:	9e 8b       	std	Y+22, r25	; 0x16
    1d92:	af 8b       	std	Y+23, r26	; 0x17
    1d94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d96:	6d 89       	ldd	r22, Y+21	; 0x15
    1d98:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e8       	ldi	r20, 0x80	; 128
    1da4:	5f e3       	ldi	r21, 0x3F	; 63
    1da6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1daa:	88 23       	and	r24, r24
    1dac:	2c f4       	brge	.+10     	; 0x1db8 <H_LCD_void_sendCommand+0xc8>
		__ticks = 1;
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9c 8b       	std	Y+20, r25	; 0x14
    1db4:	8b 8b       	std	Y+19, r24	; 0x13
    1db6:	3f c0       	rjmp	.+126    	; 0x1e36 <H_LCD_void_sendCommand+0x146>
	else if (__tmp > 65535)
    1db8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dba:	7e 89       	ldd	r23, Y+22	; 0x16
    1dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	3f ef       	ldi	r19, 0xFF	; 255
    1dc4:	4f e7       	ldi	r20, 0x7F	; 127
    1dc6:	57 e4       	ldi	r21, 0x47	; 71
    1dc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dcc:	18 16       	cp	r1, r24
    1dce:	4c f5       	brge	.+82     	; 0x1e22 <H_LCD_void_sendCommand+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e2       	ldi	r20, 0x20	; 32
    1dde:	51 e4       	ldi	r21, 0x41	; 65
    1de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	9c 8b       	std	Y+20, r25	; 0x14
    1df6:	8b 8b       	std	Y+19, r24	; 0x13
    1df8:	0f c0       	rjmp	.+30     	; 0x1e18 <H_LCD_void_sendCommand+0x128>
    1dfa:	89 e1       	ldi	r24, 0x19	; 25
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9a 8b       	std	Y+18, r25	; 0x12
    1e00:	89 8b       	std	Y+17, r24	; 0x11
    1e02:	89 89       	ldd	r24, Y+17	; 0x11
    1e04:	9a 89       	ldd	r25, Y+18	; 0x12
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <H_LCD_void_sendCommand+0x116>
    1e0a:	9a 8b       	std	Y+18, r25	; 0x12
    1e0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e10:	9c 89       	ldd	r25, Y+20	; 0x14
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	9c 8b       	std	Y+20, r25	; 0x14
    1e16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e18:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	69 f7       	brne	.-38     	; 0x1dfa <H_LCD_void_sendCommand+0x10a>
    1e20:	14 c0       	rjmp	.+40     	; 0x1e4a <H_LCD_void_sendCommand+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e22:	6d 89       	ldd	r22, Y+21	; 0x15
    1e24:	7e 89       	ldd	r23, Y+22	; 0x16
    1e26:	8f 89       	ldd	r24, Y+23	; 0x17
    1e28:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9c 8b       	std	Y+20, r25	; 0x14
    1e34:	8b 8b       	std	Y+19, r24	; 0x13
    1e36:	8b 89       	ldd	r24, Y+19	; 0x13
    1e38:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3a:	98 8b       	std	Y+16, r25	; 0x10
    1e3c:	8f 87       	std	Y+15, r24	; 0x0f
    1e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e40:	98 89       	ldd	r25, Y+16	; 0x10
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <H_LCD_void_sendCommand+0x152>
    1e46:	98 8b       	std	Y+16, r25	; 0x10
    1e48:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_Config mode[] = {
			{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_LOW},//PA3 RS
			{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
    1e4a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e4c:	8f 5f       	subi	r24, 0xFF	; 255
    1e4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e52:	82 30       	cpi	r24, 0x02	; 2
    1e54:	08 f4       	brcc	.+2      	; 0x1e58 <H_LCD_void_sendCommand+0x168>
    1e56:	79 cf       	rjmp	.-270    	; 0x1d4a <H_LCD_void_sendCommand+0x5a>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	a0 e8       	ldi	r26, 0x80	; 128
    1e5e:	bf e3       	ldi	r27, 0x3F	; 63
    1e60:	8b 87       	std	Y+11, r24	; 0x0b
    1e62:	9c 87       	std	Y+12, r25	; 0x0c
    1e64:	ad 87       	std	Y+13, r26	; 0x0d
    1e66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a e7       	ldi	r20, 0x7A	; 122
    1e76:	53 e4       	ldi	r21, 0x43	; 67
    1e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	8f 83       	std	Y+7, r24	; 0x07
    1e82:	98 87       	std	Y+8, r25	; 0x08
    1e84:	a9 87       	std	Y+9, r26	; 0x09
    1e86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e88:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8a:	78 85       	ldd	r23, Y+8	; 0x08
    1e8c:	89 85       	ldd	r24, Y+9	; 0x09
    1e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e8       	ldi	r20, 0x80	; 128
    1e96:	5f e3       	ldi	r21, 0x3F	; 63
    1e98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9c:	88 23       	and	r24, r24
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <H_LCD_void_sendCommand+0x1ba>
		__ticks = 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	3f c0       	rjmp	.+126    	; 0x1f28 <H_LCD_void_sendCommand+0x238>
	else if (__tmp > 65535)
    1eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    1eac:	78 85       	ldd	r23, Y+8	; 0x08
    1eae:	89 85       	ldd	r24, Y+9	; 0x09
    1eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	3f ef       	ldi	r19, 0xFF	; 255
    1eb6:	4f e7       	ldi	r20, 0x7F	; 127
    1eb8:	57 e4       	ldi	r21, 0x47	; 71
    1eba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ebe:	18 16       	cp	r1, r24
    1ec0:	4c f5       	brge	.+82     	; 0x1f14 <H_LCD_void_sendCommand+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e2       	ldi	r20, 0x20	; 32
    1ed0:	51 e4       	ldi	r21, 0x41	; 65
    1ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
    1eea:	0f c0       	rjmp	.+30     	; 0x1f0a <H_LCD_void_sendCommand+0x21a>
    1eec:	89 e1       	ldi	r24, 0x19	; 25
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9c 83       	std	Y+4, r25	; 0x04
    1ef2:	8b 83       	std	Y+3, r24	; 0x03
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <H_LCD_void_sendCommand+0x208>
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f00:	8d 81       	ldd	r24, Y+5	; 0x05
    1f02:	9e 81       	ldd	r25, Y+6	; 0x06
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	69 f7       	brne	.-38     	; 0x1eec <H_LCD_void_sendCommand+0x1fc>
    1f12:	14 c0       	rjmp	.+40     	; 0x1f3c <H_LCD_void_sendCommand+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f14:	6f 81       	ldd	r22, Y+7	; 0x07
    1f16:	78 85       	ldd	r23, Y+8	; 0x08
    1f18:	89 85       	ldd	r24, Y+9	; 0x09
    1f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9e 83       	std	Y+6, r25	; 0x06
    1f26:	8d 83       	std	Y+5, r24	; 0x05
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2c:	9a 83       	std	Y+2, r25	; 0x02
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	9a 81       	ldd	r25, Y+2	; 0x02
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <H_LCD_void_sendCommand+0x244>
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */


#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	H_LCD_void_latchByte(copy_u8command);
    1f3c:	8e a1       	ldd	r24, Y+38	; 0x26
    1f3e:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_LCD_void_latchByte>
#else

#endif

}
    1f42:	ab 96       	adiw	r28, 0x2b	; 43
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <H_LCD_void_sendData>:

void H_LCD_void_sendData(u8 copy_u8data )
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	ab 97       	sbiw	r28, 0x2b	; 43
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	8e a3       	std	Y+38, r24	; 0x26
	DIO_Config mode[] = {
			{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_HIGH},//PA3 RS
			{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	4e 96       	adiw	r24, 0x1e	; 30
    1f6e:	98 a7       	std	Y+40, r25	; 0x28
    1f70:	8f a3       	std	Y+39, r24	; 0x27
    1f72:	e8 eb       	ldi	r30, 0xB8	; 184
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	fa a7       	std	Y+42, r31	; 0x2a
    1f78:	e9 a7       	std	Y+41, r30	; 0x29
    1f7a:	f8 e0       	ldi	r31, 0x08	; 8
    1f7c:	fb a7       	std	Y+43, r31	; 0x2b
    1f7e:	e9 a5       	ldd	r30, Y+41	; 0x29
    1f80:	fa a5       	ldd	r31, Y+42	; 0x2a
    1f82:	00 80       	ld	r0, Z
    1f84:	89 a5       	ldd	r24, Y+41	; 0x29
    1f86:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f88:	01 96       	adiw	r24, 0x01	; 1
    1f8a:	9a a7       	std	Y+42, r25	; 0x2a
    1f8c:	89 a7       	std	Y+41, r24	; 0x29
    1f8e:	ef a1       	ldd	r30, Y+39	; 0x27
    1f90:	f8 a5       	ldd	r31, Y+40	; 0x28
    1f92:	00 82       	st	Z, r0
    1f94:	8f a1       	ldd	r24, Y+39	; 0x27
    1f96:	98 a5       	ldd	r25, Y+40	; 0x28
    1f98:	01 96       	adiw	r24, 0x01	; 1
    1f9a:	98 a7       	std	Y+40, r25	; 0x28
    1f9c:	8f a3       	std	Y+39, r24	; 0x27
    1f9e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1fa0:	91 50       	subi	r25, 0x01	; 1
    1fa2:	9b a7       	std	Y+43, r25	; 0x2b
    1fa4:	eb a5       	ldd	r30, Y+43	; 0x2b
    1fa6:	ee 23       	and	r30, r30
    1fa8:	51 f7       	brne	.-44     	; 0x1f7e <H_LCD_void_sendData+0x2a>
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
    1faa:	1d 8e       	std	Y+29, r1	; 0x1d
    1fac:	83 c0       	rjmp	.+262    	; 0x20b4 <H_LCD_void_sendData+0x160>
		DIO_U8SetPinValue(&mode[i]);
    1fae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9c 01       	movw	r18, r24
    1fb6:	22 0f       	add	r18, r18
    1fb8:	33 1f       	adc	r19, r19
    1fba:	22 0f       	add	r18, r18
    1fbc:	33 1f       	adc	r19, r19
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	4e 96       	adiw	r24, 0x1e	; 30
    1fc2:	82 0f       	add	r24, r18
    1fc4:	93 1f       	adc	r25, r19
    1fc6:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	a0 e8       	ldi	r26, 0x80	; 128
    1fd0:	bf e3       	ldi	r27, 0x3F	; 63
    1fd2:	89 8f       	std	Y+25, r24	; 0x19
    1fd4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fda:	69 8d       	ldd	r22, Y+25	; 0x19
    1fdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4a e7       	ldi	r20, 0x7A	; 122
    1fe8:	53 e4       	ldi	r21, 0x43	; 67
    1fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	8d 8b       	std	Y+21, r24	; 0x15
    1ff4:	9e 8b       	std	Y+22, r25	; 0x16
    1ff6:	af 8b       	std	Y+23, r26	; 0x17
    1ff8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    2000:	98 8d       	ldd	r25, Y+24	; 0x18
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e8       	ldi	r20, 0x80	; 128
    2008:	5f e3       	ldi	r21, 0x3F	; 63
    200a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    200e:	88 23       	and	r24, r24
    2010:	2c f4       	brge	.+10     	; 0x201c <H_LCD_void_sendData+0xc8>
		__ticks = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	9c 8b       	std	Y+20, r25	; 0x14
    2018:	8b 8b       	std	Y+19, r24	; 0x13
    201a:	3f c0       	rjmp	.+126    	; 0x209a <H_LCD_void_sendData+0x146>
	else if (__tmp > 65535)
    201c:	6d 89       	ldd	r22, Y+21	; 0x15
    201e:	7e 89       	ldd	r23, Y+22	; 0x16
    2020:	8f 89       	ldd	r24, Y+23	; 0x17
    2022:	98 8d       	ldd	r25, Y+24	; 0x18
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	3f ef       	ldi	r19, 0xFF	; 255
    2028:	4f e7       	ldi	r20, 0x7F	; 127
    202a:	57 e4       	ldi	r21, 0x47	; 71
    202c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2030:	18 16       	cp	r1, r24
    2032:	4c f5       	brge	.+82     	; 0x2086 <H_LCD_void_sendData+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2034:	69 8d       	ldd	r22, Y+25	; 0x19
    2036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9c 8b       	std	Y+20, r25	; 0x14
    205a:	8b 8b       	std	Y+19, r24	; 0x13
    205c:	0f c0       	rjmp	.+30     	; 0x207c <H_LCD_void_sendData+0x128>
    205e:	89 e1       	ldi	r24, 0x19	; 25
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9a 8b       	std	Y+18, r25	; 0x12
    2064:	89 8b       	std	Y+17, r24	; 0x11
    2066:	89 89       	ldd	r24, Y+17	; 0x11
    2068:	9a 89       	ldd	r25, Y+18	; 0x12
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <H_LCD_void_sendData+0x116>
    206e:	9a 8b       	std	Y+18, r25	; 0x12
    2070:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	9c 8b       	std	Y+20, r25	; 0x14
    207a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8b 89       	ldd	r24, Y+19	; 0x13
    207e:	9c 89       	ldd	r25, Y+20	; 0x14
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <H_LCD_void_sendData+0x10a>
    2084:	14 c0       	rjmp	.+40     	; 0x20ae <H_LCD_void_sendData+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	6d 89       	ldd	r22, Y+21	; 0x15
    2088:	7e 89       	ldd	r23, Y+22	; 0x16
    208a:	8f 89       	ldd	r24, Y+23	; 0x17
    208c:	98 8d       	ldd	r25, Y+24	; 0x18
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9c 8b       	std	Y+20, r25	; 0x14
    2098:	8b 8b       	std	Y+19, r24	; 0x13
    209a:	8b 89       	ldd	r24, Y+19	; 0x13
    209c:	9c 89       	ldd	r25, Y+20	; 0x14
    209e:	98 8b       	std	Y+16, r25	; 0x10
    20a0:	8f 87       	std	Y+15, r24	; 0x0f
    20a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a4:	98 89       	ldd	r25, Y+16	; 0x10
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <H_LCD_void_sendData+0x152>
    20aa:	98 8b       	std	Y+16, r25	; 0x10
    20ac:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_Config mode[] = {
			{LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT, DIO_PIN_HIGH},//PA3 RS
			{LCD_EN_PORT, LCD_EN_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PA2 EN
	};
	// Initialize RS EN pins
	for (u8 i = 0; i < 2; i++) {
    20ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20b0:	8f 5f       	subi	r24, 0xFF	; 255
    20b2:	8d 8f       	std	Y+29, r24	; 0x1d
    20b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20b6:	82 30       	cpi	r24, 0x02	; 2
    20b8:	08 f4       	brcc	.+2      	; 0x20bc <H_LCD_void_sendData+0x168>
    20ba:	79 cf       	rjmp	.-270    	; 0x1fae <H_LCD_void_sendData+0x5a>
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	a0 e8       	ldi	r26, 0x80	; 128
    20c2:	bf e3       	ldi	r27, 0x3F	; 63
    20c4:	8b 87       	std	Y+11, r24	; 0x0b
    20c6:	9c 87       	std	Y+12, r25	; 0x0c
    20c8:	ad 87       	std	Y+13, r26	; 0x0d
    20ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	4a e7       	ldi	r20, 0x7A	; 122
    20da:	53 e4       	ldi	r21, 0x43	; 67
    20dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	8f 83       	std	Y+7, r24	; 0x07
    20e6:	98 87       	std	Y+8, r25	; 0x08
    20e8:	a9 87       	std	Y+9, r26	; 0x09
    20ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ec:	6f 81       	ldd	r22, Y+7	; 0x07
    20ee:	78 85       	ldd	r23, Y+8	; 0x08
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	40 e8       	ldi	r20, 0x80	; 128
    20fa:	5f e3       	ldi	r21, 0x3F	; 63
    20fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2100:	88 23       	and	r24, r24
    2102:	2c f4       	brge	.+10     	; 0x210e <H_LCD_void_sendData+0x1ba>
		__ticks = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9e 83       	std	Y+6, r25	; 0x06
    210a:	8d 83       	std	Y+5, r24	; 0x05
    210c:	3f c0       	rjmp	.+126    	; 0x218c <H_LCD_void_sendData+0x238>
	else if (__tmp > 65535)
    210e:	6f 81       	ldd	r22, Y+7	; 0x07
    2110:	78 85       	ldd	r23, Y+8	; 0x08
    2112:	89 85       	ldd	r24, Y+9	; 0x09
    2114:	9a 85       	ldd	r25, Y+10	; 0x0a
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	3f ef       	ldi	r19, 0xFF	; 255
    211a:	4f e7       	ldi	r20, 0x7F	; 127
    211c:	57 e4       	ldi	r21, 0x47	; 71
    211e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2122:	18 16       	cp	r1, r24
    2124:	4c f5       	brge	.+82     	; 0x2178 <H_LCD_void_sendData+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2126:	6b 85       	ldd	r22, Y+11	; 0x0b
    2128:	7c 85       	ldd	r23, Y+12	; 0x0c
    212a:	8d 85       	ldd	r24, Y+13	; 0x0d
    212c:	9e 85       	ldd	r25, Y+14	; 0x0e
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e2       	ldi	r20, 0x20	; 32
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	8d 83       	std	Y+5, r24	; 0x05
    214e:	0f c0       	rjmp	.+30     	; 0x216e <H_LCD_void_sendData+0x21a>
    2150:	89 e1       	ldi	r24, 0x19	; 25
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	8b 83       	std	Y+3, r24	; 0x03
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <H_LCD_void_sendData+0x208>
    2160:	9c 83       	std	Y+4, r25	; 0x04
    2162:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	9e 83       	std	Y+6, r25	; 0x06
    216c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	9e 81       	ldd	r25, Y+6	; 0x06
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	69 f7       	brne	.-38     	; 0x2150 <H_LCD_void_sendData+0x1fc>
    2176:	14 c0       	rjmp	.+40     	; 0x21a0 <H_LCD_void_sendData+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
    218c:	8d 81       	ldd	r24, Y+5	; 0x05
    218e:	9e 81       	ldd	r25, Y+6	; 0x06
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	01 97       	sbiw	r24, 0x01	; 1
    219a:	f1 f7       	brne	.-4      	; 0x2198 <H_LCD_void_sendData+0x244>
    219c:	9a 83       	std	Y+2, r25	; 0x02
    219e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */


#if (LCD_DATA_BITS_MODE == 4)
	/* out the last 4 bits of the required command to the data bus D4 --> D7 */
	H_LCD_void_latchByte(copy_u8data);
    21a0:	8e a1       	ldd	r24, Y+38	; 0x26
    21a2:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <H_LCD_void_latchByte>
#else

#endif
}
    21a6:	ab 96       	adiw	r28, 0x2b	; 43
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <H_LCD_void_sendString>:


void H_LCD_void_sendString(const s8 * pstr){
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	00 d0       	rcall	.+0      	; 0x21be <H_LCD_void_sendString+0x6>
    21be:	0f 92       	push	r0
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	9b 83       	std	Y+3, r25	; 0x03
    21c6:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    21c8:	19 82       	std	Y+1, r1	; 0x01
    21ca:	0e c0       	rjmp	.+28     	; 0x21e8 <H_LCD_void_sendString+0x30>
	while(pstr[i] != '\0')
	{
		H_LCD_void_sendData(pstr[i]);
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	fc 01       	movw	r30, r24
    21d8:	e2 0f       	add	r30, r18
    21da:	f3 1f       	adc	r31, r19
    21dc:	80 81       	ld	r24, Z
    21de:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <H_LCD_void_sendData>
		i++;
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	8f 5f       	subi	r24, 0xFF	; 255
    21e6:	89 83       	std	Y+1, r24	; 0x01
}


void H_LCD_void_sendString(const s8 * pstr){
	u8 i = 0;
	while(pstr[i] != '\0')
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	9b 81       	ldd	r25, Y+3	; 0x03
    21f2:	fc 01       	movw	r30, r24
    21f4:	e2 0f       	add	r30, r18
    21f6:	f3 1f       	adc	r31, r19
    21f8:	80 81       	ld	r24, Z
    21fa:	88 23       	and	r24, r24
    21fc:	39 f7       	brne	.-50     	; 0x21cc <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[i]);
		i++;
	}
}
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_s32Num){
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
    2212:	64 97       	sbiw	r28, 0x14	; 20
    2214:	0f b6       	in	r0, 0x3f	; 63
    2216:	f8 94       	cli
    2218:	de bf       	out	0x3e, r29	; 62
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	cd bf       	out	0x3d, r28	; 61
    221e:	69 8b       	std	Y+17, r22	; 0x11
    2220:	7a 8b       	std	Y+18, r23	; 0x12
    2222:	8b 8b       	std	Y+19, r24	; 0x13
    2224:	9c 8b       	std	Y+20, r25	; 0x14
	s8 buff[16]; /* String to hold the ascii result */
	itoa(copy_s32Num,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2226:	89 89       	ldd	r24, Y+17	; 0x11
    2228:	9a 89       	ldd	r25, Y+18	; 0x12
    222a:	9e 01       	movw	r18, r28
    222c:	2f 5f       	subi	r18, 0xFF	; 255
    222e:	3f 4f       	sbci	r19, 0xFF	; 255
    2230:	b9 01       	movw	r22, r18
    2232:	4a e0       	ldi	r20, 0x0A	; 10
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	0e 94 b7 1e 	call	0x3d6e	; 0x3d6e <itoa>
	H_LCD_void_sendString(buff); /* Display the string */
    223a:	ce 01       	movw	r24, r28
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <H_LCD_void_sendString>
}
    2242:	64 96       	adiw	r28, 0x14	; 20
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <H_LCD_void_gotoXY>:

void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col){
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	00 d0       	rcall	.+0      	; 0x225a <H_LCD_void_gotoXY+0x6>
    225a:	00 d0       	rcall	.+0      	; 0x225c <H_LCD_void_gotoXY+0x8>
    225c:	0f 92       	push	r0
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	8a 83       	std	Y+2, r24	; 0x02
    2264:	6b 83       	std	Y+3, r22	; 0x03
	u8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(copy_u8Row)
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	3d 83       	std	Y+5, r19	; 0x05
    226e:	2c 83       	std	Y+4, r18	; 0x04
    2270:	8c 81       	ldd	r24, Y+4	; 0x04
    2272:	9d 81       	ldd	r25, Y+5	; 0x05
    2274:	81 30       	cpi	r24, 0x01	; 1
    2276:	91 05       	cpc	r25, r1
    2278:	c1 f0       	breq	.+48     	; 0x22aa <H_LCD_void_gotoXY+0x56>
    227a:	2c 81       	ldd	r18, Y+4	; 0x04
    227c:	3d 81       	ldd	r19, Y+5	; 0x05
    227e:	22 30       	cpi	r18, 0x02	; 2
    2280:	31 05       	cpc	r19, r1
    2282:	2c f4       	brge	.+10     	; 0x228e <H_LCD_void_gotoXY+0x3a>
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	9d 81       	ldd	r25, Y+5	; 0x05
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	61 f0       	breq	.+24     	; 0x22a4 <H_LCD_void_gotoXY+0x50>
    228c:	19 c0       	rjmp	.+50     	; 0x22c0 <H_LCD_void_gotoXY+0x6c>
    228e:	2c 81       	ldd	r18, Y+4	; 0x04
    2290:	3d 81       	ldd	r19, Y+5	; 0x05
    2292:	22 30       	cpi	r18, 0x02	; 2
    2294:	31 05       	cpc	r19, r1
    2296:	69 f0       	breq	.+26     	; 0x22b2 <H_LCD_void_gotoXY+0x5e>
    2298:	8c 81       	ldd	r24, Y+4	; 0x04
    229a:	9d 81       	ldd	r25, Y+5	; 0x05
    229c:	83 30       	cpi	r24, 0x03	; 3
    229e:	91 05       	cpc	r25, r1
    22a0:	61 f0       	breq	.+24     	; 0x22ba <H_LCD_void_gotoXY+0x66>
    22a2:	0e c0       	rjmp	.+28     	; 0x22c0 <H_LCD_void_gotoXY+0x6c>
	{
	case 0:
		lcd_memory_address=copy_u8Col;
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	0b c0       	rjmp	.+22     	; 0x22c0 <H_LCD_void_gotoXY+0x6c>
		break;
	case 1:
		lcd_memory_address=copy_u8Col+0x40;
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	80 5c       	subi	r24, 0xC0	; 192
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	07 c0       	rjmp	.+14     	; 0x22c0 <H_LCD_void_gotoXY+0x6c>
		break;
	case 2:
		lcd_memory_address=copy_u8Col+0x10;
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	80 5f       	subi	r24, 0xF0	; 240
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	03 c0       	rjmp	.+6      	; 0x22c0 <H_LCD_void_gotoXY+0x6c>
		break;
	case 3:
		lcd_memory_address=copy_u8Col+0x50;
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	80 5b       	subi	r24, 0xB0	; 176
    22be:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	H_LCD_void_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	80 68       	ori	r24, 0x80	; 128
    22c4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <H_LCD_void_sendCommand>
}
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <H_LCD_void_creatCustomChar>:


void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode){
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	00 d0       	rcall	.+0      	; 0x22de <H_LCD_void_creatCustomChar+0x6>
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <H_LCD_void_creatCustomChar+0x8>
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	9b 83       	std	Y+3, r25	; 0x03
    22e6:	8a 83       	std	Y+2, r24	; 0x02
    22e8:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char i;
	if(copy_u8charCode<8)
    22ea:	8c 81       	ldd	r24, Y+4	; 0x04
    22ec:	88 30       	cpi	r24, 0x08	; 8
    22ee:	f8 f4       	brcc	.+62     	; 0x232e <H_LCD_void_creatCustomChar+0x56>
	{
		H_LCD_void_sendCommand(0x40 + (copy_u8charCode*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
    22f0:	8c 81       	ldd	r24, Y+4	; 0x04
    22f2:	88 2f       	mov	r24, r24
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	08 96       	adiw	r24, 0x08	; 8
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <H_LCD_void_sendCommand>
		for(i=0;i<8;i++){	/* Write 8 byte for generation of 1 character */
    2308:	19 82       	std	Y+1, r1	; 0x01
    230a:	0e c0       	rjmp	.+28     	; 0x2328 <H_LCD_void_creatCustomChar+0x50>
			H_LCD_void_sendData(ArrPattern[i]);
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	9b 81       	ldd	r25, Y+3	; 0x03
    2316:	fc 01       	movw	r30, r24
    2318:	e2 0f       	add	r30, r18
    231a:	f3 1f       	adc	r31, r19
    231c:	80 81       	ld	r24, Z
    231e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <H_LCD_void_sendData>
void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode){
	unsigned char i;
	if(copy_u8charCode<8)
	{
		H_LCD_void_sendCommand(0x40 + (copy_u8charCode*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++){	/* Write 8 byte for generation of 1 character */
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	8f 5f       	subi	r24, 0xFF	; 255
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	89 81       	ldd	r24, Y+1	; 0x01
    232a:	88 30       	cpi	r24, 0x08	; 8
    232c:	78 f3       	brcs	.-34     	; 0x230c <H_LCD_void_creatCustomChar+0x34>
			H_LCD_void_sendData(ArrPattern[i]);
		}
	}
}
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <H_LCD_void_displayCustomChar>:


void H_LCD_void_displayCustomChar(u8 copy_u8charCode){
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	0f 92       	push	r0
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
    2346:	89 83       	std	Y+1, r24	; 0x01

	H_LCD_void_sendCommand(0xc0);
    2348:	80 ec       	ldi	r24, 0xC0	; 192
    234a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <H_LCD_void_sendCommand>
	H_LCD_void_sendData(copy_u8charCode);
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <H_LCD_void_sendData>

}
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <functionSet>:



void functionSet(){
    235c:	0f 93       	push	r16
    235e:	1f 93       	push	r17
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	ce 57       	subi	r28, 0x7E	; 126
    236a:	d0 40       	sbci	r29, 0x00	; 0
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	de bf       	out	0x3e, r29	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	cd bf       	out	0x3d, r28	; 61
	DIO_Config dataPins[] = {
			{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,DIO_PIN_LOW},//PD4 data bin
			{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PD5 data bin
			{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,DIO_PIN_LOW},//PD6 data bin
			{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,DIO_PIN_LOW},//PD7 data bin
	};
    2376:	ce 01       	movw	r24, r28
    2378:	8a 59       	subi	r24, 0x9A	; 154
    237a:	9f 4f       	sbci	r25, 0xFF	; 255
    237c:	ec 96       	adiw	r28, 0x3c	; 60
    237e:	9f af       	std	Y+63, r25	; 0x3f
    2380:	8e af       	std	Y+62, r24	; 0x3e
    2382:	ec 97       	sbiw	r28, 0x3c	; 60
    2384:	80 ec       	ldi	r24, 0xC0	; 192
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	ee 96       	adiw	r28, 0x3e	; 62
    238a:	9f af       	std	Y+63, r25	; 0x3f
    238c:	8e af       	std	Y+62, r24	; 0x3e
    238e:	ee 97       	sbiw	r28, 0x3e	; 62
    2390:	90 e1       	ldi	r25, 0x10	; 16
    2392:	ef 96       	adiw	r28, 0x3f	; 63
    2394:	9f af       	std	Y+63, r25	; 0x3f
    2396:	ef 97       	sbiw	r28, 0x3f	; 63
    2398:	ee 96       	adiw	r28, 0x3e	; 62
    239a:	ee ad       	ldd	r30, Y+62	; 0x3e
    239c:	ff ad       	ldd	r31, Y+63	; 0x3f
    239e:	ee 97       	sbiw	r28, 0x3e	; 62
    23a0:	00 80       	ld	r0, Z
    23a2:	ee 96       	adiw	r28, 0x3e	; 62
    23a4:	8e ad       	ldd	r24, Y+62	; 0x3e
    23a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    23a8:	ee 97       	sbiw	r28, 0x3e	; 62
    23aa:	01 96       	adiw	r24, 0x01	; 1
    23ac:	ee 96       	adiw	r28, 0x3e	; 62
    23ae:	9f af       	std	Y+63, r25	; 0x3f
    23b0:	8e af       	std	Y+62, r24	; 0x3e
    23b2:	ee 97       	sbiw	r28, 0x3e	; 62
    23b4:	ec 96       	adiw	r28, 0x3c	; 60
    23b6:	ee ad       	ldd	r30, Y+62	; 0x3e
    23b8:	ff ad       	ldd	r31, Y+63	; 0x3f
    23ba:	ec 97       	sbiw	r28, 0x3c	; 60
    23bc:	00 82       	st	Z, r0
    23be:	ec 96       	adiw	r28, 0x3c	; 60
    23c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    23c2:	9f ad       	ldd	r25, Y+63	; 0x3f
    23c4:	ec 97       	sbiw	r28, 0x3c	; 60
    23c6:	01 96       	adiw	r24, 0x01	; 1
    23c8:	ec 96       	adiw	r28, 0x3c	; 60
    23ca:	9f af       	std	Y+63, r25	; 0x3f
    23cc:	8e af       	std	Y+62, r24	; 0x3e
    23ce:	ec 97       	sbiw	r28, 0x3c	; 60
    23d0:	ef 96       	adiw	r28, 0x3f	; 63
    23d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    23d4:	ef 97       	sbiw	r28, 0x3f	; 63
    23d6:	91 50       	subi	r25, 0x01	; 1
    23d8:	ef 96       	adiw	r28, 0x3f	; 63
    23da:	9f af       	std	Y+63, r25	; 0x3f
    23dc:	ef 97       	sbiw	r28, 0x3f	; 63
    23de:	ef 96       	adiw	r28, 0x3f	; 63
    23e0:	ef ad       	ldd	r30, Y+63	; 0x3f
    23e2:	ef 97       	sbiw	r28, 0x3f	; 63
    23e4:	ee 23       	and	r30, r30
    23e6:	c1 f6       	brne	.-80     	; 0x2398 <functionSet+0x3c>
	for (u8 i = 0; i < 4; i++) {
    23e8:	fe 01       	movw	r30, r28
    23ea:	eb 59       	subi	r30, 0x9B	; 155
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	10 82       	st	Z, r1
    23f0:	1b c0       	rjmp	.+54     	; 0x2428 <functionSet+0xcc>
		DIO_U8SetPinValue(&dataPins[i]);
    23f2:	fe 01       	movw	r30, r28
    23f4:	eb 59       	subi	r30, 0x9B	; 155
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	88 2f       	mov	r24, r24
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	9c 01       	movw	r18, r24
    2400:	22 0f       	add	r18, r18
    2402:	33 1f       	adc	r19, r19
    2404:	22 0f       	add	r18, r18
    2406:	33 1f       	adc	r19, r19
    2408:	ce 01       	movw	r24, r28
    240a:	8a 59       	subi	r24, 0x9A	; 154
    240c:	9f 4f       	sbci	r25, 0xFF	; 255
    240e:	82 0f       	add	r24, r18
    2410:	93 1f       	adc	r25, r19
    2412:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
			{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,DIO_PIN_LOW},//PD4 data bin
			{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,DIO_PIN_HIGH},//PD5 data bin
			{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,DIO_PIN_LOW},//PD6 data bin
			{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,DIO_PIN_LOW},//PD7 data bin
	};
	for (u8 i = 0; i < 4; i++) {
    2416:	de 01       	movw	r26, r28
    2418:	ab 59       	subi	r26, 0x9B	; 155
    241a:	bf 4f       	sbci	r27, 0xFF	; 255
    241c:	fe 01       	movw	r30, r28
    241e:	eb 59       	subi	r30, 0x9B	; 155
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	80 81       	ld	r24, Z
    2424:	8f 5f       	subi	r24, 0xFF	; 255
    2426:	8c 93       	st	X, r24
    2428:	fe 01       	movw	r30, r28
    242a:	eb 59       	subi	r30, 0x9B	; 155
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	80 81       	ld	r24, Z
    2430:	84 30       	cpi	r24, 0x04	; 4
    2432:	f8 f2       	brcs	.-66     	; 0x23f2 <functionSet+0x96>
		DIO_U8SetPinValue(&dataPins[i]);
	}

	DIO_Config enable;
	enable.port = LCD_EN_PORT;
    2434:	fe 01       	movw	r30, r28
    2436:	ea 58       	subi	r30, 0x8A	; 138
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	10 82       	st	Z, r1
	enable.pin = LCD_EN_PIN;
    243c:	fe 01       	movw	r30, r28
    243e:	ea 58       	subi	r30, 0x8A	; 138
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	82 e0       	ldi	r24, 0x02	; 2
    2444:	81 83       	std	Z+1, r24	; 0x01
	enable.value = DIO_PIN_LOW;
    2446:	fe 01       	movw	r30, r28
    2448:	ea 58       	subi	r30, 0x8A	; 138
    244a:	ff 4f       	sbci	r31, 0xFF	; 255
    244c:	13 82       	std	Z+3, r1	; 0x03
    244e:	fe 01       	movw	r30, r28
    2450:	e1 5a       	subi	r30, 0xA1	; 161
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	a0 e8       	ldi	r26, 0x80	; 128
    245a:	bf e3       	ldi	r27, 0x3F	; 63
    245c:	80 83       	st	Z, r24
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	a2 83       	std	Z+2, r26	; 0x02
    2462:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2464:	8e 01       	movw	r16, r28
    2466:	05 5a       	subi	r16, 0xA5	; 165
    2468:	1f 4f       	sbci	r17, 0xFF	; 255
    246a:	fe 01       	movw	r30, r28
    246c:	e1 5a       	subi	r30, 0xA1	; 161
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	60 81       	ld	r22, Z
    2472:	71 81       	ldd	r23, Z+1	; 0x01
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	4a e7       	ldi	r20, 0x7A	; 122
    247e:	53 e4       	ldi	r21, 0x43	; 67
    2480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	f8 01       	movw	r30, r16
    248a:	80 83       	st	Z, r24
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	a2 83       	std	Z+2, r26	; 0x02
    2490:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2492:	fe 01       	movw	r30, r28
    2494:	e5 5a       	subi	r30, 0xA5	; 165
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e8       	ldi	r20, 0x80	; 128
    24a6:	5f e3       	ldi	r21, 0x3F	; 63
    24a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ac:	88 23       	and	r24, r24
    24ae:	44 f4       	brge	.+16     	; 0x24c0 <functionSet+0x164>
		__ticks = 1;
    24b0:	fe 01       	movw	r30, r28
    24b2:	e7 5a       	subi	r30, 0xA7	; 167
    24b4:	ff 4f       	sbci	r31, 0xFF	; 255
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	80 83       	st	Z, r24
    24be:	64 c0       	rjmp	.+200    	; 0x2588 <functionSet+0x22c>
	else if (__tmp > 65535)
    24c0:	fe 01       	movw	r30, r28
    24c2:	e5 5a       	subi	r30, 0xA5	; 165
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	60 81       	ld	r22, Z
    24c8:	71 81       	ldd	r23, Z+1	; 0x01
    24ca:	82 81       	ldd	r24, Z+2	; 0x02
    24cc:	93 81       	ldd	r25, Z+3	; 0x03
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	3f ef       	ldi	r19, 0xFF	; 255
    24d2:	4f e7       	ldi	r20, 0x7F	; 127
    24d4:	57 e4       	ldi	r21, 0x47	; 71
    24d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24da:	18 16       	cp	r1, r24
    24dc:	0c f0       	brlt	.+2      	; 0x24e0 <functionSet+0x184>
    24de:	43 c0       	rjmp	.+134    	; 0x2566 <functionSet+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e0:	fe 01       	movw	r30, r28
    24e2:	e1 5a       	subi	r30, 0xA1	; 161
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	60 81       	ld	r22, Z
    24e8:	71 81       	ldd	r23, Z+1	; 0x01
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	93 81       	ldd	r25, Z+3	; 0x03
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	40 e2       	ldi	r20, 0x20	; 32
    24f4:	51 e4       	ldi	r21, 0x41	; 65
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	8e 01       	movw	r16, r28
    2500:	07 5a       	subi	r16, 0xA7	; 167
    2502:	1f 4f       	sbci	r17, 0xFF	; 255
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
    2510:	f8 01       	movw	r30, r16
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	80 83       	st	Z, r24
    2516:	1f c0       	rjmp	.+62     	; 0x2556 <functionSet+0x1fa>
    2518:	fe 01       	movw	r30, r28
    251a:	e9 5a       	subi	r30, 0xA9	; 169
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	89 e1       	ldi	r24, 0x19	; 25
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	80 83       	st	Z, r24
    2526:	fe 01       	movw	r30, r28
    2528:	e9 5a       	subi	r30, 0xA9	; 169
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	80 81       	ld	r24, Z
    252e:	91 81       	ldd	r25, Z+1	; 0x01
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <functionSet+0x1d4>
    2534:	fe 01       	movw	r30, r28
    2536:	e9 5a       	subi	r30, 0xA9	; 169
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	91 83       	std	Z+1, r25	; 0x01
    253c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	de 01       	movw	r26, r28
    2540:	a7 5a       	subi	r26, 0xA7	; 167
    2542:	bf 4f       	sbci	r27, 0xFF	; 255
    2544:	fe 01       	movw	r30, r28
    2546:	e7 5a       	subi	r30, 0xA7	; 167
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	80 81       	ld	r24, Z
    254c:	91 81       	ldd	r25, Z+1	; 0x01
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	11 96       	adiw	r26, 0x01	; 1
    2552:	9c 93       	st	X, r25
    2554:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2556:	fe 01       	movw	r30, r28
    2558:	e7 5a       	subi	r30, 0xA7	; 167
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	91 81       	ldd	r25, Z+1	; 0x01
    2560:	00 97       	sbiw	r24, 0x00	; 0
    2562:	d1 f6       	brne	.-76     	; 0x2518 <functionSet+0x1bc>
    2564:	27 c0       	rjmp	.+78     	; 0x25b4 <functionSet+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2566:	8e 01       	movw	r16, r28
    2568:	07 5a       	subi	r16, 0xA7	; 167
    256a:	1f 4f       	sbci	r17, 0xFF	; 255
    256c:	fe 01       	movw	r30, r28
    256e:	e5 5a       	subi	r30, 0xA5	; 165
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	60 81       	ld	r22, Z
    2574:	71 81       	ldd	r23, Z+1	; 0x01
    2576:	82 81       	ldd	r24, Z+2	; 0x02
    2578:	93 81       	ldd	r25, Z+3	; 0x03
    257a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	f8 01       	movw	r30, r16
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	80 83       	st	Z, r24
    2588:	de 01       	movw	r26, r28
    258a:	ab 5a       	subi	r26, 0xAB	; 171
    258c:	bf 4f       	sbci	r27, 0xFF	; 255
    258e:	fe 01       	movw	r30, r28
    2590:	e7 5a       	subi	r30, 0xA7	; 167
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	8d 93       	st	X+, r24
    259a:	9c 93       	st	X, r25
    259c:	fe 01       	movw	r30, r28
    259e:	eb 5a       	subi	r30, 0xAB	; 171
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <functionSet+0x24a>
    25aa:	fe 01       	movw	r30, r28
    25ac:	eb 5a       	subi	r30, 0xAB	; 171
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	91 83       	std	Z+1, r25	; 0x01
    25b2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing*/
	DIO_U8SetPinValue(&enable);
    25b4:	ce 01       	movw	r24, r28
    25b6:	8a 58       	subi	r24, 0x8A	; 138
    25b8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ba:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    25be:	fe 01       	movw	r30, r28
    25c0:	ef 5a       	subi	r30, 0xAF	; 175
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	a0 e8       	ldi	r26, 0x80	; 128
    25ca:	bf e3       	ldi	r27, 0x3F	; 63
    25cc:	80 83       	st	Z, r24
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	a2 83       	std	Z+2, r26	; 0x02
    25d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d4:	8e 01       	movw	r16, r28
    25d6:	03 5b       	subi	r16, 0xB3	; 179
    25d8:	1f 4f       	sbci	r17, 0xFF	; 255
    25da:	fe 01       	movw	r30, r28
    25dc:	ef 5a       	subi	r30, 0xAF	; 175
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	60 81       	ld	r22, Z
    25e2:	71 81       	ldd	r23, Z+1	; 0x01
    25e4:	82 81       	ldd	r24, Z+2	; 0x02
    25e6:	93 81       	ldd	r25, Z+3	; 0x03
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	4a e7       	ldi	r20, 0x7A	; 122
    25ee:	53 e4       	ldi	r21, 0x43	; 67
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	f8 01       	movw	r30, r16
    25fa:	80 83       	st	Z, r24
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	a2 83       	std	Z+2, r26	; 0x02
    2600:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2602:	fe 01       	movw	r30, r28
    2604:	e3 5b       	subi	r30, 0xB3	; 179
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	82 81       	ldd	r24, Z+2	; 0x02
    260e:	93 81       	ldd	r25, Z+3	; 0x03
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	44 f4       	brge	.+16     	; 0x2630 <functionSet+0x2d4>
		__ticks = 1;
    2620:	fe 01       	movw	r30, r28
    2622:	e5 5b       	subi	r30, 0xB5	; 181
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	80 83       	st	Z, r24
    262e:	64 c0       	rjmp	.+200    	; 0x26f8 <functionSet+0x39c>
	else if (__tmp > 65535)
    2630:	fe 01       	movw	r30, r28
    2632:	e3 5b       	subi	r30, 0xB3	; 179
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	60 81       	ld	r22, Z
    2638:	71 81       	ldd	r23, Z+1	; 0x01
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	93 81       	ldd	r25, Z+3	; 0x03
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	3f ef       	ldi	r19, 0xFF	; 255
    2642:	4f e7       	ldi	r20, 0x7F	; 127
    2644:	57 e4       	ldi	r21, 0x47	; 71
    2646:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    264a:	18 16       	cp	r1, r24
    264c:	0c f0       	brlt	.+2      	; 0x2650 <functionSet+0x2f4>
    264e:	43 c0       	rjmp	.+134    	; 0x26d6 <functionSet+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2650:	fe 01       	movw	r30, r28
    2652:	ef 5a       	subi	r30, 0xAF	; 175
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	60 81       	ld	r22, Z
    2658:	71 81       	ldd	r23, Z+1	; 0x01
    265a:	82 81       	ldd	r24, Z+2	; 0x02
    265c:	93 81       	ldd	r25, Z+3	; 0x03
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	40 e2       	ldi	r20, 0x20	; 32
    2664:	51 e4       	ldi	r21, 0x41	; 65
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	8e 01       	movw	r16, r28
    2670:	05 5b       	subi	r16, 0xB5	; 181
    2672:	1f 4f       	sbci	r17, 0xFF	; 255
    2674:	bc 01       	movw	r22, r24
    2676:	cd 01       	movw	r24, r26
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	f8 01       	movw	r30, r16
    2682:	91 83       	std	Z+1, r25	; 0x01
    2684:	80 83       	st	Z, r24
    2686:	1f c0       	rjmp	.+62     	; 0x26c6 <functionSet+0x36a>
    2688:	fe 01       	movw	r30, r28
    268a:	e7 5b       	subi	r30, 0xB7	; 183
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	89 e1       	ldi	r24, 0x19	; 25
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24
    2696:	fe 01       	movw	r30, r28
    2698:	e7 5b       	subi	r30, 0xB7	; 183
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	80 81       	ld	r24, Z
    269e:	91 81       	ldd	r25, Z+1	; 0x01
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <functionSet+0x344>
    26a4:	fe 01       	movw	r30, r28
    26a6:	e7 5b       	subi	r30, 0xB7	; 183
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	de 01       	movw	r26, r28
    26b0:	a5 5b       	subi	r26, 0xB5	; 181
    26b2:	bf 4f       	sbci	r27, 0xFF	; 255
    26b4:	fe 01       	movw	r30, r28
    26b6:	e5 5b       	subi	r30, 0xB5	; 181
    26b8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ba:	80 81       	ld	r24, Z
    26bc:	91 81       	ldd	r25, Z+1	; 0x01
    26be:	01 97       	sbiw	r24, 0x01	; 1
    26c0:	11 96       	adiw	r26, 0x01	; 1
    26c2:	9c 93       	st	X, r25
    26c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c6:	fe 01       	movw	r30, r28
    26c8:	e5 5b       	subi	r30, 0xB5	; 181
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 81       	ld	r24, Z
    26ce:	91 81       	ldd	r25, Z+1	; 0x01
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	d1 f6       	brne	.-76     	; 0x2688 <functionSet+0x32c>
    26d4:	27 c0       	rjmp	.+78     	; 0x2724 <functionSet+0x3c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d6:	8e 01       	movw	r16, r28
    26d8:	05 5b       	subi	r16, 0xB5	; 181
    26da:	1f 4f       	sbci	r17, 0xFF	; 255
    26dc:	fe 01       	movw	r30, r28
    26de:	e3 5b       	subi	r30, 0xB3	; 179
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	f8 01       	movw	r30, r16
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
    26f8:	de 01       	movw	r26, r28
    26fa:	a9 5b       	subi	r26, 0xB9	; 185
    26fc:	bf 4f       	sbci	r27, 0xFF	; 255
    26fe:	fe 01       	movw	r30, r28
    2700:	e5 5b       	subi	r30, 0xB5	; 181
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	8d 93       	st	X+, r24
    270a:	9c 93       	st	X, r25
    270c:	fe 01       	movw	r30, r28
    270e:	e9 5b       	subi	r30, 0xB9	; 185
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 81       	ld	r24, Z
    2714:	91 81       	ldd	r25, Z+1	; 0x01
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <functionSet+0x3ba>
    271a:	fe 01       	movw	r30, r28
    271c:	e9 5b       	subi	r30, 0xB9	; 185
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	91 83       	std	Z+1, r25	; 0x01
    2722:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing*/
	enable.value = DIO_PIN_HIGH;
    2724:	fe 01       	movw	r30, r28
    2726:	ea 58       	subi	r30, 0x8A	; 138
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	83 83       	std	Z+3, r24	; 0x03
	DIO_U8SetPinValue(&enable);
    272e:	ce 01       	movw	r24, r28
    2730:	8a 58       	subi	r24, 0x8A	; 138
    2732:	9f 4f       	sbci	r25, 0xFF	; 255
    2734:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    2738:	fe 01       	movw	r30, r28
    273a:	ed 5b       	subi	r30, 0xBD	; 189
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	a0 e8       	ldi	r26, 0x80	; 128
    2744:	bf e3       	ldi	r27, 0x3F	; 63
    2746:	80 83       	st	Z, r24
    2748:	91 83       	std	Z+1, r25	; 0x01
    274a:	a2 83       	std	Z+2, r26	; 0x02
    274c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274e:	8e 01       	movw	r16, r28
    2750:	01 5c       	subi	r16, 0xC1	; 193
    2752:	1f 4f       	sbci	r17, 0xFF	; 255
    2754:	fe 01       	movw	r30, r28
    2756:	ed 5b       	subi	r30, 0xBD	; 189
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	60 81       	ld	r22, Z
    275c:	71 81       	ldd	r23, Z+1	; 0x01
    275e:	82 81       	ldd	r24, Z+2	; 0x02
    2760:	93 81       	ldd	r25, Z+3	; 0x03
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	4a e7       	ldi	r20, 0x7A	; 122
    2768:	53 e4       	ldi	r21, 0x43	; 67
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	f8 01       	movw	r30, r16
    2774:	80 83       	st	Z, r24
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	a2 83       	std	Z+2, r26	; 0x02
    277a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    277c:	fe 01       	movw	r30, r28
    277e:	ff 96       	adiw	r30, 0x3f	; 63
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	82 81       	ldd	r24, Z+2	; 0x02
    2786:	93 81       	ldd	r25, Z+3	; 0x03
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e8       	ldi	r20, 0x80	; 128
    278e:	5f e3       	ldi	r21, 0x3F	; 63
    2790:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2794:	88 23       	and	r24, r24
    2796:	2c f4       	brge	.+10     	; 0x27a2 <functionSet+0x446>
		__ticks = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9e af       	std	Y+62, r25	; 0x3e
    279e:	8d af       	std	Y+61, r24	; 0x3d
    27a0:	46 c0       	rjmp	.+140    	; 0x282e <functionSet+0x4d2>
	else if (__tmp > 65535)
    27a2:	fe 01       	movw	r30, r28
    27a4:	ff 96       	adiw	r30, 0x3f	; 63
    27a6:	60 81       	ld	r22, Z
    27a8:	71 81       	ldd	r23, Z+1	; 0x01
    27aa:	82 81       	ldd	r24, Z+2	; 0x02
    27ac:	93 81       	ldd	r25, Z+3	; 0x03
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	3f ef       	ldi	r19, 0xFF	; 255
    27b2:	4f e7       	ldi	r20, 0x7F	; 127
    27b4:	57 e4       	ldi	r21, 0x47	; 71
    27b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ba:	18 16       	cp	r1, r24
    27bc:	64 f5       	brge	.+88     	; 0x2816 <functionSet+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27be:	fe 01       	movw	r30, r28
    27c0:	ed 5b       	subi	r30, 0xBD	; 189
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	60 81       	ld	r22, Z
    27c6:	71 81       	ldd	r23, Z+1	; 0x01
    27c8:	82 81       	ldd	r24, Z+2	; 0x02
    27ca:	93 81       	ldd	r25, Z+3	; 0x03
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e2       	ldi	r20, 0x20	; 32
    27d2:	51 e4       	ldi	r21, 0x41	; 65
    27d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	bc 01       	movw	r22, r24
    27de:	cd 01       	movw	r24, r26
    27e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	9e af       	std	Y+62, r25	; 0x3e
    27ea:	8d af       	std	Y+61, r24	; 0x3d
    27ec:	0f c0       	rjmp	.+30     	; 0x280c <functionSet+0x4b0>
    27ee:	89 e1       	ldi	r24, 0x19	; 25
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	9c af       	std	Y+60, r25	; 0x3c
    27f4:	8b af       	std	Y+59, r24	; 0x3b
    27f6:	8b ad       	ldd	r24, Y+59	; 0x3b
    27f8:	9c ad       	ldd	r25, Y+60	; 0x3c
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <functionSet+0x49e>
    27fe:	9c af       	std	Y+60, r25	; 0x3c
    2800:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2802:	8d ad       	ldd	r24, Y+61	; 0x3d
    2804:	9e ad       	ldd	r25, Y+62	; 0x3e
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	9e af       	std	Y+62, r25	; 0x3e
    280a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280c:	8d ad       	ldd	r24, Y+61	; 0x3d
    280e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	69 f7       	brne	.-38     	; 0x27ee <functionSet+0x492>
    2814:	16 c0       	rjmp	.+44     	; 0x2842 <functionSet+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2816:	fe 01       	movw	r30, r28
    2818:	ff 96       	adiw	r30, 0x3f	; 63
    281a:	60 81       	ld	r22, Z
    281c:	71 81       	ldd	r23, Z+1	; 0x01
    281e:	82 81       	ldd	r24, Z+2	; 0x02
    2820:	93 81       	ldd	r25, Z+3	; 0x03
    2822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	9e af       	std	Y+62, r25	; 0x3e
    282c:	8d af       	std	Y+61, r24	; 0x3d
    282e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2830:	9e ad       	ldd	r25, Y+62	; 0x3e
    2832:	9a af       	std	Y+58, r25	; 0x3a
    2834:	89 af       	std	Y+57, r24	; 0x39
    2836:	89 ad       	ldd	r24, Y+57	; 0x39
    2838:	9a ad       	ldd	r25, Y+58	; 0x3a
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <functionSet+0x4de>
    283e:	9a af       	std	Y+58, r25	; 0x3a
    2840:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
    2842:	fe 01       	movw	r30, r28
    2844:	ec 59       	subi	r30, 0x9C	; 156
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	10 82       	st	Z, r1
    284a:	1b c0       	rjmp	.+54     	; 0x2882 <functionSet+0x526>
		DIO_U8SetPinValue(&dataPins[i]);
    284c:	fe 01       	movw	r30, r28
    284e:	ec 59       	subi	r30, 0x9C	; 156
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	80 81       	ld	r24, Z
    2854:	88 2f       	mov	r24, r24
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9c 01       	movw	r18, r24
    285a:	22 0f       	add	r18, r18
    285c:	33 1f       	adc	r19, r19
    285e:	22 0f       	add	r18, r18
    2860:	33 1f       	adc	r19, r19
    2862:	ce 01       	movw	r24, r28
    2864:	8a 59       	subi	r24, 0x9A	; 154
    2866:	9f 4f       	sbci	r25, 0xFF	; 255
    2868:	82 0f       	add	r24, r18
    286a:	93 1f       	adc	r25, r19
    286c:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
	_delay_ms(1); /* delay for processing*/
	enable.value = DIO_PIN_HIGH;
	DIO_U8SetPinValue(&enable);
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
    2870:	de 01       	movw	r26, r28
    2872:	ac 59       	subi	r26, 0x9C	; 156
    2874:	bf 4f       	sbci	r27, 0xFF	; 255
    2876:	fe 01       	movw	r30, r28
    2878:	ec 59       	subi	r30, 0x9C	; 156
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	8f 5f       	subi	r24, 0xFF	; 255
    2880:	8c 93       	st	X, r24
    2882:	fe 01       	movw	r30, r28
    2884:	ec 59       	subi	r30, 0x9C	; 156
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	80 81       	ld	r24, Z
    288a:	84 30       	cpi	r24, 0x04	; 4
    288c:	f8 f2       	brcs	.-66     	; 0x284c <functionSet+0x4f0>
    288e:	80 e0       	ldi	r24, 0x00	; 0
    2890:	90 e0       	ldi	r25, 0x00	; 0
    2892:	a0 e8       	ldi	r26, 0x80	; 128
    2894:	bf e3       	ldi	r27, 0x3F	; 63
    2896:	8d ab       	std	Y+53, r24	; 0x35
    2898:	9e ab       	std	Y+54, r25	; 0x36
    289a:	af ab       	std	Y+55, r26	; 0x37
    289c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289e:	6d a9       	ldd	r22, Y+53	; 0x35
    28a0:	7e a9       	ldd	r23, Y+54	; 0x36
    28a2:	8f a9       	ldd	r24, Y+55	; 0x37
    28a4:	98 ad       	ldd	r25, Y+56	; 0x38
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	4a e7       	ldi	r20, 0x7A	; 122
    28ac:	53 e4       	ldi	r21, 0x43	; 67
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	89 ab       	std	Y+49, r24	; 0x31
    28b8:	9a ab       	std	Y+50, r25	; 0x32
    28ba:	ab ab       	std	Y+51, r26	; 0x33
    28bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28be:	69 a9       	ldd	r22, Y+49	; 0x31
    28c0:	7a a9       	ldd	r23, Y+50	; 0x32
    28c2:	8b a9       	ldd	r24, Y+51	; 0x33
    28c4:	9c a9       	ldd	r25, Y+52	; 0x34
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e8       	ldi	r20, 0x80	; 128
    28cc:	5f e3       	ldi	r21, 0x3F	; 63
    28ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d2:	88 23       	and	r24, r24
    28d4:	2c f4       	brge	.+10     	; 0x28e0 <functionSet+0x584>
		__ticks = 1;
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	98 ab       	std	Y+48, r25	; 0x30
    28dc:	8f a7       	std	Y+47, r24	; 0x2f
    28de:	3f c0       	rjmp	.+126    	; 0x295e <functionSet+0x602>
	else if (__tmp > 65535)
    28e0:	69 a9       	ldd	r22, Y+49	; 0x31
    28e2:	7a a9       	ldd	r23, Y+50	; 0x32
    28e4:	8b a9       	ldd	r24, Y+51	; 0x33
    28e6:	9c a9       	ldd	r25, Y+52	; 0x34
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	3f ef       	ldi	r19, 0xFF	; 255
    28ec:	4f e7       	ldi	r20, 0x7F	; 127
    28ee:	57 e4       	ldi	r21, 0x47	; 71
    28f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f4:	18 16       	cp	r1, r24
    28f6:	4c f5       	brge	.+82     	; 0x294a <functionSet+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f8:	6d a9       	ldd	r22, Y+53	; 0x35
    28fa:	7e a9       	ldd	r23, Y+54	; 0x36
    28fc:	8f a9       	ldd	r24, Y+55	; 0x37
    28fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e2       	ldi	r20, 0x20	; 32
    2906:	51 e4       	ldi	r21, 0x41	; 65
    2908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	98 ab       	std	Y+48, r25	; 0x30
    291e:	8f a7       	std	Y+47, r24	; 0x2f
    2920:	0f c0       	rjmp	.+30     	; 0x2940 <functionSet+0x5e4>
    2922:	89 e1       	ldi	r24, 0x19	; 25
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	9e a7       	std	Y+46, r25	; 0x2e
    2928:	8d a7       	std	Y+45, r24	; 0x2d
    292a:	8d a5       	ldd	r24, Y+45	; 0x2d
    292c:	9e a5       	ldd	r25, Y+46	; 0x2e
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <functionSet+0x5d2>
    2932:	9e a7       	std	Y+46, r25	; 0x2e
    2934:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2936:	8f a5       	ldd	r24, Y+47	; 0x2f
    2938:	98 a9       	ldd	r25, Y+48	; 0x30
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	98 ab       	std	Y+48, r25	; 0x30
    293e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2940:	8f a5       	ldd	r24, Y+47	; 0x2f
    2942:	98 a9       	ldd	r25, Y+48	; 0x30
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	69 f7       	brne	.-38     	; 0x2922 <functionSet+0x5c6>
    2948:	14 c0       	rjmp	.+40     	; 0x2972 <functionSet+0x616>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	69 a9       	ldd	r22, Y+49	; 0x31
    294c:	7a a9       	ldd	r23, Y+50	; 0x32
    294e:	8b a9       	ldd	r24, Y+51	; 0x33
    2950:	9c a9       	ldd	r25, Y+52	; 0x34
    2952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	98 ab       	std	Y+48, r25	; 0x30
    295c:	8f a7       	std	Y+47, r24	; 0x2f
    295e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2960:	98 a9       	ldd	r25, Y+48	; 0x30
    2962:	9c a7       	std	Y+44, r25	; 0x2c
    2964:	8b a7       	std	Y+43, r24	; 0x2b
    2966:	8b a5       	ldd	r24, Y+43	; 0x2b
    2968:	9c a5       	ldd	r25, Y+44	; 0x2c
    296a:	01 97       	sbiw	r24, 0x01	; 1
    296c:	f1 f7       	brne	.-4      	; 0x296a <functionSet+0x60e>
    296e:	9c a7       	std	Y+44, r25	; 0x2c
    2970:	8b a7       	std	Y+43, r24	; 0x2b
		DIO_U8SetPinValue(&dataPins[i]);
	}

	_delay_ms(1); /* delay for processing*/
	enable.value = DIO_PIN_LOW;
    2972:	fe 01       	movw	r30, r28
    2974:	ea 58       	subi	r30, 0x8A	; 138
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	13 82       	std	Z+3, r1	; 0x03
	DIO_U8SetPinValue(&enable);
    297a:	ce 01       	movw	r24, r28
    297c:	8a 58       	subi	r24, 0x8A	; 138
    297e:	9f 4f       	sbci	r25, 0xFF	; 255
    2980:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	a0 e8       	ldi	r26, 0x80	; 128
    298a:	bf e3       	ldi	r27, 0x3F	; 63
    298c:	8f a3       	std	Y+39, r24	; 0x27
    298e:	98 a7       	std	Y+40, r25	; 0x28
    2990:	a9 a7       	std	Y+41, r26	; 0x29
    2992:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2994:	6f a1       	ldd	r22, Y+39	; 0x27
    2996:	78 a5       	ldd	r23, Y+40	; 0x28
    2998:	89 a5       	ldd	r24, Y+41	; 0x29
    299a:	9a a5       	ldd	r25, Y+42	; 0x2a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	4a e7       	ldi	r20, 0x7A	; 122
    29a2:	53 e4       	ldi	r21, 0x43	; 67
    29a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	8b a3       	std	Y+35, r24	; 0x23
    29ae:	9c a3       	std	Y+36, r25	; 0x24
    29b0:	ad a3       	std	Y+37, r26	; 0x25
    29b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29b4:	6b a1       	ldd	r22, Y+35	; 0x23
    29b6:	7c a1       	ldd	r23, Y+36	; 0x24
    29b8:	8d a1       	ldd	r24, Y+37	; 0x25
    29ba:	9e a1       	ldd	r25, Y+38	; 0x26
    29bc:	20 e0       	ldi	r18, 0x00	; 0
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	40 e8       	ldi	r20, 0x80	; 128
    29c2:	5f e3       	ldi	r21, 0x3F	; 63
    29c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c8:	88 23       	and	r24, r24
    29ca:	2c f4       	brge	.+10     	; 0x29d6 <functionSet+0x67a>
		__ticks = 1;
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	9a a3       	std	Y+34, r25	; 0x22
    29d2:	89 a3       	std	Y+33, r24	; 0x21
    29d4:	3f c0       	rjmp	.+126    	; 0x2a54 <functionSet+0x6f8>
	else if (__tmp > 65535)
    29d6:	6b a1       	ldd	r22, Y+35	; 0x23
    29d8:	7c a1       	ldd	r23, Y+36	; 0x24
    29da:	8d a1       	ldd	r24, Y+37	; 0x25
    29dc:	9e a1       	ldd	r25, Y+38	; 0x26
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	3f ef       	ldi	r19, 0xFF	; 255
    29e2:	4f e7       	ldi	r20, 0x7F	; 127
    29e4:	57 e4       	ldi	r21, 0x47	; 71
    29e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ea:	18 16       	cp	r1, r24
    29ec:	4c f5       	brge	.+82     	; 0x2a40 <functionSet+0x6e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ee:	6f a1       	ldd	r22, Y+39	; 0x27
    29f0:	78 a5       	ldd	r23, Y+40	; 0x28
    29f2:	89 a5       	ldd	r24, Y+41	; 0x29
    29f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e2       	ldi	r20, 0x20	; 32
    29fc:	51 e4       	ldi	r21, 0x41	; 65
    29fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	bc 01       	movw	r22, r24
    2a08:	cd 01       	movw	r24, r26
    2a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	9a a3       	std	Y+34, r25	; 0x22
    2a14:	89 a3       	std	Y+33, r24	; 0x21
    2a16:	0f c0       	rjmp	.+30     	; 0x2a36 <functionSet+0x6da>
    2a18:	89 e1       	ldi	r24, 0x19	; 25
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	98 a3       	std	Y+32, r25	; 0x20
    2a1e:	8f 8f       	std	Y+31, r24	; 0x1f
    2a20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a22:	98 a1       	ldd	r25, Y+32	; 0x20
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <functionSet+0x6c8>
    2a28:	98 a3       	std	Y+32, r25	; 0x20
    2a2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	9a a3       	std	Y+34, r25	; 0x22
    2a34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a36:	89 a1       	ldd	r24, Y+33	; 0x21
    2a38:	9a a1       	ldd	r25, Y+34	; 0x22
    2a3a:	00 97       	sbiw	r24, 0x00	; 0
    2a3c:	69 f7       	brne	.-38     	; 0x2a18 <functionSet+0x6bc>
    2a3e:	14 c0       	rjmp	.+40     	; 0x2a68 <functionSet+0x70c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a40:	6b a1       	ldd	r22, Y+35	; 0x23
    2a42:	7c a1       	ldd	r23, Y+36	; 0x24
    2a44:	8d a1       	ldd	r24, Y+37	; 0x25
    2a46:	9e a1       	ldd	r25, Y+38	; 0x26
    2a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	9a a3       	std	Y+34, r25	; 0x22
    2a52:	89 a3       	std	Y+33, r24	; 0x21
    2a54:	89 a1       	ldd	r24, Y+33	; 0x21
    2a56:	9a a1       	ldd	r25, Y+34	; 0x22
    2a58:	9e 8f       	std	Y+30, r25	; 0x1e
    2a5a:	8d 8f       	std	Y+29, r24	; 0x1d
    2a5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <functionSet+0x704>
    2a64:	9e 8f       	std	Y+30, r25	; 0x1e
    2a66:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing*/


	for (u8 i = 0; i < 4; i++) {
    2a68:	fe 01       	movw	r30, r28
    2a6a:	ed 59       	subi	r30, 0x9D	; 157
    2a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6e:	10 82       	st	Z, r1
    2a70:	1b c0       	rjmp	.+54     	; 0x2aa8 <functionSet+0x74c>
		DIO_U8SetPinValue(&dataPins[i]);
    2a72:	fe 01       	movw	r30, r28
    2a74:	ed 59       	subi	r30, 0x9D	; 157
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 81       	ld	r24, Z
    2a7a:	88 2f       	mov	r24, r24
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	9c 01       	movw	r18, r24
    2a80:	22 0f       	add	r18, r18
    2a82:	33 1f       	adc	r19, r19
    2a84:	22 0f       	add	r18, r18
    2a86:	33 1f       	adc	r19, r19
    2a88:	ce 01       	movw	r24, r28
    2a8a:	8a 59       	subi	r24, 0x9A	; 154
    2a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8e:	82 0f       	add	r24, r18
    2a90:	93 1f       	adc	r25, r19
    2a92:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
	enable.value = DIO_PIN_LOW;
	DIO_U8SetPinValue(&enable);
	_delay_ms(1); /* delay for processing*/


	for (u8 i = 0; i < 4; i++) {
    2a96:	de 01       	movw	r26, r28
    2a98:	ad 59       	subi	r26, 0x9D	; 157
    2a9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a9c:	fe 01       	movw	r30, r28
    2a9e:	ed 59       	subi	r30, 0x9D	; 157
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	80 81       	ld	r24, Z
    2aa4:	8f 5f       	subi	r24, 0xFF	; 255
    2aa6:	8c 93       	st	X, r24
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	ed 59       	subi	r30, 0x9D	; 157
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	80 81       	ld	r24, Z
    2ab0:	84 30       	cpi	r24, 0x04	; 4
    2ab2:	f8 f2       	brcs	.-66     	; 0x2a72 <functionSet+0x716>
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	a0 e8       	ldi	r26, 0x80	; 128
    2aba:	bf e3       	ldi	r27, 0x3F	; 63
    2abc:	89 8f       	std	Y+25, r24	; 0x19
    2abe:	9a 8f       	std	Y+26, r25	; 0x1a
    2ac0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ac2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ac6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ac8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	4a e7       	ldi	r20, 0x7A	; 122
    2ad2:	53 e4       	ldi	r21, 0x43	; 67
    2ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	8d 8b       	std	Y+21, r24	; 0x15
    2ade:	9e 8b       	std	Y+22, r25	; 0x16
    2ae0:	af 8b       	std	Y+23, r26	; 0x17
    2ae2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aea:	98 8d       	ldd	r25, Y+24	; 0x18
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e8       	ldi	r20, 0x80	; 128
    2af2:	5f e3       	ldi	r21, 0x3F	; 63
    2af4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af8:	88 23       	and	r24, r24
    2afa:	2c f4       	brge	.+10     	; 0x2b06 <functionSet+0x7aa>
		__ticks = 1;
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	9c 8b       	std	Y+20, r25	; 0x14
    2b02:	8b 8b       	std	Y+19, r24	; 0x13
    2b04:	3f c0       	rjmp	.+126    	; 0x2b84 <functionSet+0x828>
	else if (__tmp > 65535)
    2b06:	6d 89       	ldd	r22, Y+21	; 0x15
    2b08:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	3f ef       	ldi	r19, 0xFF	; 255
    2b12:	4f e7       	ldi	r20, 0x7F	; 127
    2b14:	57 e4       	ldi	r21, 0x47	; 71
    2b16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b1a:	18 16       	cp	r1, r24
    2b1c:	4c f5       	brge	.+82     	; 0x2b70 <functionSet+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e2       	ldi	r20, 0x20	; 32
    2b2c:	51 e4       	ldi	r21, 0x41	; 65
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	9c 8b       	std	Y+20, r25	; 0x14
    2b44:	8b 8b       	std	Y+19, r24	; 0x13
    2b46:	0f c0       	rjmp	.+30     	; 0x2b66 <functionSet+0x80a>
    2b48:	89 e1       	ldi	r24, 0x19	; 25
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	9a 8b       	std	Y+18, r25	; 0x12
    2b4e:	89 8b       	std	Y+17, r24	; 0x11
    2b50:	89 89       	ldd	r24, Y+17	; 0x11
    2b52:	9a 89       	ldd	r25, Y+18	; 0x12
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <functionSet+0x7f8>
    2b58:	9a 8b       	std	Y+18, r25	; 0x12
    2b5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	9c 8b       	std	Y+20, r25	; 0x14
    2b64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b66:	8b 89       	ldd	r24, Y+19	; 0x13
    2b68:	9c 89       	ldd	r25, Y+20	; 0x14
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	69 f7       	brne	.-38     	; 0x2b48 <functionSet+0x7ec>
    2b6e:	14 c0       	rjmp	.+40     	; 0x2b98 <functionSet+0x83c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b70:	6d 89       	ldd	r22, Y+21	; 0x15
    2b72:	7e 89       	ldd	r23, Y+22	; 0x16
    2b74:	8f 89       	ldd	r24, Y+23	; 0x17
    2b76:	98 8d       	ldd	r25, Y+24	; 0x18
    2b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	9c 8b       	std	Y+20, r25	; 0x14
    2b82:	8b 8b       	std	Y+19, r24	; 0x13
    2b84:	8b 89       	ldd	r24, Y+19	; 0x13
    2b86:	9c 89       	ldd	r25, Y+20	; 0x14
    2b88:	98 8b       	std	Y+16, r25	; 0x10
    2b8a:	8f 87       	std	Y+15, r24	; 0x0f
    2b8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b8e:	98 89       	ldd	r25, Y+16	; 0x10
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	f1 f7       	brne	.-4      	; 0x2b90 <functionSet+0x834>
    2b94:	98 8b       	std	Y+16, r25	; 0x10
    2b96:	8f 87       	std	Y+15, r24	; 0x0f
		DIO_U8SetPinValue(&dataPins[i]);
	}

	_delay_ms(1); /* delay for processing*/
	enable.value = DIO_PIN_LOW;
    2b98:	fe 01       	movw	r30, r28
    2b9a:	ea 58       	subi	r30, 0x8A	; 138
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	13 82       	std	Z+3, r1	; 0x03
	DIO_U8SetPinValue(&enable);
    2ba0:	ce 01       	movw	r24, r28
    2ba2:	8a 58       	subi	r24, 0x8A	; 138
    2ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba6:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	a0 e8       	ldi	r26, 0x80	; 128
    2bb0:	bf e3       	ldi	r27, 0x3F	; 63
    2bb2:	8b 87       	std	Y+11, r24	; 0x0b
    2bb4:	9c 87       	std	Y+12, r25	; 0x0c
    2bb6:	ad 87       	std	Y+13, r26	; 0x0d
    2bb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	4a e7       	ldi	r20, 0x7A	; 122
    2bc8:	53 e4       	ldi	r21, 0x43	; 67
    2bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	8f 83       	std	Y+7, r24	; 0x07
    2bd4:	98 87       	std	Y+8, r25	; 0x08
    2bd6:	a9 87       	std	Y+9, r26	; 0x09
    2bd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bda:	6f 81       	ldd	r22, Y+7	; 0x07
    2bdc:	78 85       	ldd	r23, Y+8	; 0x08
    2bde:	89 85       	ldd	r24, Y+9	; 0x09
    2be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	40 e8       	ldi	r20, 0x80	; 128
    2be8:	5f e3       	ldi	r21, 0x3F	; 63
    2bea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bee:	88 23       	and	r24, r24
    2bf0:	2c f4       	brge	.+10     	; 0x2bfc <functionSet+0x8a0>
		__ticks = 1;
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
    2bfa:	3f c0       	rjmp	.+126    	; 0x2c7a <functionSet+0x91e>
	else if (__tmp > 65535)
    2bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfe:	78 85       	ldd	r23, Y+8	; 0x08
    2c00:	89 85       	ldd	r24, Y+9	; 0x09
    2c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	3f ef       	ldi	r19, 0xFF	; 255
    2c08:	4f e7       	ldi	r20, 0x7F	; 127
    2c0a:	57 e4       	ldi	r21, 0x47	; 71
    2c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c10:	18 16       	cp	r1, r24
    2c12:	4c f5       	brge	.+82     	; 0x2c66 <functionSet+0x90a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e2       	ldi	r20, 0x20	; 32
    2c22:	51 e4       	ldi	r21, 0x41	; 65
    2c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	bc 01       	movw	r22, r24
    2c2e:	cd 01       	movw	r24, r26
    2c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c34:	dc 01       	movw	r26, r24
    2c36:	cb 01       	movw	r24, r22
    2c38:	9e 83       	std	Y+6, r25	; 0x06
    2c3a:	8d 83       	std	Y+5, r24	; 0x05
    2c3c:	0f c0       	rjmp	.+30     	; 0x2c5c <functionSet+0x900>
    2c3e:	89 e1       	ldi	r24, 0x19	; 25
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	9c 83       	std	Y+4, r25	; 0x04
    2c44:	8b 83       	std	Y+3, r24	; 0x03
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <functionSet+0x8ee>
    2c4e:	9c 83       	std	Y+4, r25	; 0x04
    2c50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c52:	8d 81       	ldd	r24, Y+5	; 0x05
    2c54:	9e 81       	ldd	r25, Y+6	; 0x06
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	9e 83       	std	Y+6, r25	; 0x06
    2c5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c60:	00 97       	sbiw	r24, 0x00	; 0
    2c62:	69 f7       	brne	.-38     	; 0x2c3e <functionSet+0x8e2>
    2c64:	14 c0       	rjmp	.+40     	; 0x2c8e <functionSet+0x932>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c66:	6f 81       	ldd	r22, Y+7	; 0x07
    2c68:	78 85       	ldd	r23, Y+8	; 0x08
    2c6a:	89 85       	ldd	r24, Y+9	; 0x09
    2c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
    2c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7e:	9a 83       	std	Y+2, r25	; 0x02
    2c80:	89 83       	std	Y+1, r24	; 0x01
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	9a 81       	ldd	r25, Y+2	; 0x02
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	f1 f7       	brne	.-4      	; 0x2c86 <functionSet+0x92a>
    2c8a:	9a 83       	std	Y+2, r25	; 0x02
    2c8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing*/
}
    2c8e:	c2 58       	subi	r28, 0x82	; 130
    2c90:	df 4f       	sbci	r29, 0xFF	; 255
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	1f 91       	pop	r17
    2ca2:	0f 91       	pop	r16
    2ca4:	08 95       	ret

00002ca6 <H_LCD_void_latchByte>:

static void H_LCD_void_latchByte(u8 copy_u8Byte){
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
    2cb2:	cd 55       	subi	r28, 0x5D	; 93
    2cb4:	d0 40       	sbci	r29, 0x00	; 0
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
    2cc0:	fe 01       	movw	r30, r28
    2cc2:	e3 5a       	subi	r30, 0xA3	; 163
    2cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc6:	80 83       	st	Z, r24
	DIO_Config dataPins[] = {
			{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 4)},//PD4 data bin
			{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 5)},//PD5 data bin
			{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 6)},//PD6 data bin
			{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 7)},//PD7 data bin
	};
    2cc8:	fe 01       	movw	r30, r28
    2cca:	e3 5a       	subi	r30, 0xA3	; 163
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	80 81       	ld	r24, Z
    2cd0:	82 95       	swap	r24
    2cd2:	8f 70       	andi	r24, 0x0F	; 15
    2cd4:	98 2f       	mov	r25, r24
    2cd6:	91 70       	andi	r25, 0x01	; 1
    2cd8:	fe 01       	movw	r30, r28
    2cda:	e3 5a       	subi	r30, 0xA3	; 163
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 81       	ld	r24, Z
    2ce0:	82 95       	swap	r24
    2ce2:	86 95       	lsr	r24
    2ce4:	87 70       	andi	r24, 0x07	; 7
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	21 70       	andi	r18, 0x01	; 1
    2cea:	fe 01       	movw	r30, r28
    2cec:	e3 5a       	subi	r30, 0xA3	; 163
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	80 81       	ld	r24, Z
    2cf2:	82 95       	swap	r24
    2cf4:	86 95       	lsr	r24
    2cf6:	86 95       	lsr	r24
    2cf8:	83 70       	andi	r24, 0x03	; 3
    2cfa:	38 2f       	mov	r19, r24
    2cfc:	31 70       	andi	r19, 0x01	; 1
    2cfe:	fe 01       	movw	r30, r28
    2d00:	e3 5a       	subi	r30, 0xA3	; 163
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	80 81       	ld	r24, Z
    2d06:	48 2f       	mov	r20, r24
    2d08:	44 1f       	adc	r20, r20
    2d0a:	44 27       	eor	r20, r20
    2d0c:	44 1f       	adc	r20, r20
    2d0e:	fe 01       	movw	r30, r28
    2d10:	e7 5b       	subi	r30, 0xB7	; 183
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	80 83       	st	Z, r24
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e7 5b       	subi	r30, 0xB7	; 183
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	11 82       	std	Z+1, r1	; 0x01
    2d20:	fe 01       	movw	r30, r28
    2d22:	e7 5b       	subi	r30, 0xB7	; 183
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	82 83       	std	Z+2, r24	; 0x02
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e7 5b       	subi	r30, 0xB7	; 183
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	93 83       	std	Z+3, r25	; 0x03
    2d32:	fe 01       	movw	r30, r28
    2d34:	e7 5b       	subi	r30, 0xB7	; 183
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	84 83       	std	Z+4, r24	; 0x04
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	e7 5b       	subi	r30, 0xB7	; 183
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	85 83       	std	Z+5, r24	; 0x05
    2d46:	fe 01       	movw	r30, r28
    2d48:	e7 5b       	subi	r30, 0xB7	; 183
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	86 83       	std	Z+6, r24	; 0x06
    2d50:	fe 01       	movw	r30, r28
    2d52:	e7 5b       	subi	r30, 0xB7	; 183
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	27 83       	std	Z+7, r18	; 0x07
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e7 5b       	subi	r30, 0xB7	; 183
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	80 87       	std	Z+8, r24	; 0x08
    2d62:	fe 01       	movw	r30, r28
    2d64:	e7 5b       	subi	r30, 0xB7	; 183
    2d66:	ff 4f       	sbci	r31, 0xFF	; 255
    2d68:	82 e0       	ldi	r24, 0x02	; 2
    2d6a:	81 87       	std	Z+9, r24	; 0x09
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e7 5b       	subi	r30, 0xB7	; 183
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	82 87       	std	Z+10, r24	; 0x0a
    2d76:	fe 01       	movw	r30, r28
    2d78:	e7 5b       	subi	r30, 0xB7	; 183
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	33 87       	std	Z+11, r19	; 0x0b
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e7 5b       	subi	r30, 0xB7	; 183
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	84 87       	std	Z+12, r24	; 0x0c
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e7 5b       	subi	r30, 0xB7	; 183
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	84 e0       	ldi	r24, 0x04	; 4
    2d90:	85 87       	std	Z+13, r24	; 0x0d
    2d92:	fe 01       	movw	r30, r28
    2d94:	e7 5b       	subi	r30, 0xB7	; 183
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	86 87       	std	Z+14, r24	; 0x0e
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e7 5b       	subi	r30, 0xB7	; 183
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	47 87       	std	Z+15, r20	; 0x0f
	for (u8 i = 0; i < 4; i++) {
    2da4:	fe 01       	movw	r30, r28
    2da6:	e8 5b       	subi	r30, 0xB8	; 184
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	10 82       	st	Z, r1
    2dac:	1b c0       	rjmp	.+54     	; 0x2de4 <H_LCD_void_latchByte+0x13e>
		DIO_U8SetPinValue(&dataPins[i]);
    2dae:	fe 01       	movw	r30, r28
    2db0:	e8 5b       	subi	r30, 0xB8	; 184
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	88 2f       	mov	r24, r24
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	9c 01       	movw	r18, r24
    2dbc:	22 0f       	add	r18, r18
    2dbe:	33 1f       	adc	r19, r19
    2dc0:	22 0f       	add	r18, r18
    2dc2:	33 1f       	adc	r19, r19
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	87 5b       	subi	r24, 0xB7	; 183
    2dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dca:	82 0f       	add	r24, r18
    2dcc:	93 1f       	adc	r25, r19
    2dce:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
			{LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 4)},//PD4 data bin
			{LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 5)},//PD5 data bin
			{LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 6)},//PD6 data bin
			{LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT,GET_BIT(copy_u8Byte, 7)},//PD7 data bin
	};
	for (u8 i = 0; i < 4; i++) {
    2dd2:	de 01       	movw	r26, r28
    2dd4:	a8 5b       	subi	r26, 0xB8	; 184
    2dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2dd8:	fe 01       	movw	r30, r28
    2dda:	e8 5b       	subi	r30, 0xB8	; 184
    2ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dde:	80 81       	ld	r24, Z
    2de0:	8f 5f       	subi	r24, 0xFF	; 255
    2de2:	8c 93       	st	X, r24
    2de4:	fe 01       	movw	r30, r28
    2de6:	e8 5b       	subi	r30, 0xB8	; 184
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	80 81       	ld	r24, Z
    2dec:	84 30       	cpi	r24, 0x04	; 4
    2dee:	f8 f2       	brcs	.-66     	; 0x2dae <H_LCD_void_latchByte+0x108>
		DIO_U8SetPinValue(&dataPins[i]);
	}

	DIO_Config enable;
	enable.port = LCD_EN_PORT;
    2df0:	fe 01       	movw	r30, r28
    2df2:	e7 5a       	subi	r30, 0xA7	; 167
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	10 82       	st	Z, r1
	enable.pin = LCD_EN_PIN;
    2df8:	fe 01       	movw	r30, r28
    2dfa:	e7 5a       	subi	r30, 0xA7	; 167
    2dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfe:	82 e0       	ldi	r24, 0x02	; 2
    2e00:	81 83       	std	Z+1, r24	; 0x01
	enable.value = DIO_PIN_LOW;
    2e02:	fe 01       	movw	r30, r28
    2e04:	e7 5a       	subi	r30, 0xA7	; 167
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	13 82       	std	Z+3, r1	; 0x03
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	ed 5b       	subi	r30, 0xBD	; 189
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	a0 e8       	ldi	r26, 0x80	; 128
    2e16:	bf e3       	ldi	r27, 0x3F	; 63
    2e18:	80 83       	st	Z, r24
    2e1a:	91 83       	std	Z+1, r25	; 0x01
    2e1c:	a2 83       	std	Z+2, r26	; 0x02
    2e1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e20:	8e 01       	movw	r16, r28
    2e22:	01 5c       	subi	r16, 0xC1	; 193
    2e24:	1f 4f       	sbci	r17, 0xFF	; 255
    2e26:	fe 01       	movw	r30, r28
    2e28:	ed 5b       	subi	r30, 0xBD	; 189
    2e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2c:	60 81       	ld	r22, Z
    2e2e:	71 81       	ldd	r23, Z+1	; 0x01
    2e30:	82 81       	ldd	r24, Z+2	; 0x02
    2e32:	93 81       	ldd	r25, Z+3	; 0x03
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a e7       	ldi	r20, 0x7A	; 122
    2e3a:	53 e4       	ldi	r21, 0x43	; 67
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	f8 01       	movw	r30, r16
    2e46:	80 83       	st	Z, r24
    2e48:	91 83       	std	Z+1, r25	; 0x01
    2e4a:	a2 83       	std	Z+2, r26	; 0x02
    2e4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ff 96       	adiw	r30, 0x3f	; 63
    2e52:	60 81       	ld	r22, Z
    2e54:	71 81       	ldd	r23, Z+1	; 0x01
    2e56:	82 81       	ldd	r24, Z+2	; 0x02
    2e58:	93 81       	ldd	r25, Z+3	; 0x03
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	40 e8       	ldi	r20, 0x80	; 128
    2e60:	5f e3       	ldi	r21, 0x3F	; 63
    2e62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e66:	88 23       	and	r24, r24
    2e68:	2c f4       	brge	.+10     	; 0x2e74 <H_LCD_void_latchByte+0x1ce>
		__ticks = 1;
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	9e af       	std	Y+62, r25	; 0x3e
    2e70:	8d af       	std	Y+61, r24	; 0x3d
    2e72:	46 c0       	rjmp	.+140    	; 0x2f00 <H_LCD_void_latchByte+0x25a>
	else if (__tmp > 65535)
    2e74:	fe 01       	movw	r30, r28
    2e76:	ff 96       	adiw	r30, 0x3f	; 63
    2e78:	60 81       	ld	r22, Z
    2e7a:	71 81       	ldd	r23, Z+1	; 0x01
    2e7c:	82 81       	ldd	r24, Z+2	; 0x02
    2e7e:	93 81       	ldd	r25, Z+3	; 0x03
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	3f ef       	ldi	r19, 0xFF	; 255
    2e84:	4f e7       	ldi	r20, 0x7F	; 127
    2e86:	57 e4       	ldi	r21, 0x47	; 71
    2e88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e8c:	18 16       	cp	r1, r24
    2e8e:	64 f5       	brge	.+88     	; 0x2ee8 <H_LCD_void_latchByte+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e90:	fe 01       	movw	r30, r28
    2e92:	ed 5b       	subi	r30, 0xBD	; 189
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	60 81       	ld	r22, Z
    2e98:	71 81       	ldd	r23, Z+1	; 0x01
    2e9a:	82 81       	ldd	r24, Z+2	; 0x02
    2e9c:	93 81       	ldd	r25, Z+3	; 0x03
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e2       	ldi	r20, 0x20	; 32
    2ea4:	51 e4       	ldi	r21, 0x41	; 65
    2ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9e af       	std	Y+62, r25	; 0x3e
    2ebc:	8d af       	std	Y+61, r24	; 0x3d
    2ebe:	0f c0       	rjmp	.+30     	; 0x2ede <H_LCD_void_latchByte+0x238>
    2ec0:	89 e1       	ldi	r24, 0x19	; 25
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	9c af       	std	Y+60, r25	; 0x3c
    2ec6:	8b af       	std	Y+59, r24	; 0x3b
    2ec8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2eca:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <H_LCD_void_latchByte+0x226>
    2ed0:	9c af       	std	Y+60, r25	; 0x3c
    2ed2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ed6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	9e af       	std	Y+62, r25	; 0x3e
    2edc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ede:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ee0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	69 f7       	brne	.-38     	; 0x2ec0 <H_LCD_void_latchByte+0x21a>
    2ee6:	16 c0       	rjmp	.+44     	; 0x2f14 <H_LCD_void_latchByte+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee8:	fe 01       	movw	r30, r28
    2eea:	ff 96       	adiw	r30, 0x3f	; 63
    2eec:	60 81       	ld	r22, Z
    2eee:	71 81       	ldd	r23, Z+1	; 0x01
    2ef0:	82 81       	ldd	r24, Z+2	; 0x02
    2ef2:	93 81       	ldd	r25, Z+3	; 0x03
    2ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	9e af       	std	Y+62, r25	; 0x3e
    2efe:	8d af       	std	Y+61, r24	; 0x3d
    2f00:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f02:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f04:	9a af       	std	Y+58, r25	; 0x3a
    2f06:	89 af       	std	Y+57, r24	; 0x39
    2f08:	89 ad       	ldd	r24, Y+57	; 0x39
    2f0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <H_LCD_void_latchByte+0x266>
    2f10:	9a af       	std	Y+58, r25	; 0x3a
    2f12:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing */
	DIO_U8SetPinValue(&enable);
    2f14:	ce 01       	movw	r24, r28
    2f16:	87 5a       	subi	r24, 0xA7	; 167
    2f18:	9f 4f       	sbci	r25, 0xFF	; 255
    2f1a:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	a0 e8       	ldi	r26, 0x80	; 128
    2f24:	bf e3       	ldi	r27, 0x3F	; 63
    2f26:	8d ab       	std	Y+53, r24	; 0x35
    2f28:	9e ab       	std	Y+54, r25	; 0x36
    2f2a:	af ab       	std	Y+55, r26	; 0x37
    2f2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2e:	6d a9       	ldd	r22, Y+53	; 0x35
    2f30:	7e a9       	ldd	r23, Y+54	; 0x36
    2f32:	8f a9       	ldd	r24, Y+55	; 0x37
    2f34:	98 ad       	ldd	r25, Y+56	; 0x38
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	4a e7       	ldi	r20, 0x7A	; 122
    2f3c:	53 e4       	ldi	r21, 0x43	; 67
    2f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	89 ab       	std	Y+49, r24	; 0x31
    2f48:	9a ab       	std	Y+50, r25	; 0x32
    2f4a:	ab ab       	std	Y+51, r26	; 0x33
    2f4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f4e:	69 a9       	ldd	r22, Y+49	; 0x31
    2f50:	7a a9       	ldd	r23, Y+50	; 0x32
    2f52:	8b a9       	ldd	r24, Y+51	; 0x33
    2f54:	9c a9       	ldd	r25, Y+52	; 0x34
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e8       	ldi	r20, 0x80	; 128
    2f5c:	5f e3       	ldi	r21, 0x3F	; 63
    2f5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f62:	88 23       	and	r24, r24
    2f64:	2c f4       	brge	.+10     	; 0x2f70 <H_LCD_void_latchByte+0x2ca>
		__ticks = 1;
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	98 ab       	std	Y+48, r25	; 0x30
    2f6c:	8f a7       	std	Y+47, r24	; 0x2f
    2f6e:	3f c0       	rjmp	.+126    	; 0x2fee <H_LCD_void_latchByte+0x348>
	else if (__tmp > 65535)
    2f70:	69 a9       	ldd	r22, Y+49	; 0x31
    2f72:	7a a9       	ldd	r23, Y+50	; 0x32
    2f74:	8b a9       	ldd	r24, Y+51	; 0x33
    2f76:	9c a9       	ldd	r25, Y+52	; 0x34
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	3f ef       	ldi	r19, 0xFF	; 255
    2f7c:	4f e7       	ldi	r20, 0x7F	; 127
    2f7e:	57 e4       	ldi	r21, 0x47	; 71
    2f80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f84:	18 16       	cp	r1, r24
    2f86:	4c f5       	brge	.+82     	; 0x2fda <H_LCD_void_latchByte+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f88:	6d a9       	ldd	r22, Y+53	; 0x35
    2f8a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f8c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f8e:	98 ad       	ldd	r25, Y+56	; 0x38
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e2       	ldi	r20, 0x20	; 32
    2f96:	51 e4       	ldi	r21, 0x41	; 65
    2f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	98 ab       	std	Y+48, r25	; 0x30
    2fae:	8f a7       	std	Y+47, r24	; 0x2f
    2fb0:	0f c0       	rjmp	.+30     	; 0x2fd0 <H_LCD_void_latchByte+0x32a>
    2fb2:	89 e1       	ldi	r24, 0x19	; 25
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	9e a7       	std	Y+46, r25	; 0x2e
    2fb8:	8d a7       	std	Y+45, r24	; 0x2d
    2fba:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <H_LCD_void_latchByte+0x318>
    2fc2:	9e a7       	std	Y+46, r25	; 0x2e
    2fc4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc8:	98 a9       	ldd	r25, Y+48	; 0x30
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	98 ab       	std	Y+48, r25	; 0x30
    2fce:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fd2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	69 f7       	brne	.-38     	; 0x2fb2 <H_LCD_void_latchByte+0x30c>
    2fd8:	14 c0       	rjmp	.+40     	; 0x3002 <H_LCD_void_latchByte+0x35c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fda:	69 a9       	ldd	r22, Y+49	; 0x31
    2fdc:	7a a9       	ldd	r23, Y+50	; 0x32
    2fde:	8b a9       	ldd	r24, Y+51	; 0x33
    2fe0:	9c a9       	ldd	r25, Y+52	; 0x34
    2fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	98 ab       	std	Y+48, r25	; 0x30
    2fec:	8f a7       	std	Y+47, r24	; 0x2f
    2fee:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ff0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ff2:	9c a7       	std	Y+44, r25	; 0x2c
    2ff4:	8b a7       	std	Y+43, r24	; 0x2b
    2ff6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ff8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <H_LCD_void_latchByte+0x354>
    2ffe:	9c a7       	std	Y+44, r25	; 0x2c
    3000:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_HIGH;
    3002:	fe 01       	movw	r30, r28
    3004:	e7 5a       	subi	r30, 0xA7	; 167
    3006:	ff 4f       	sbci	r31, 0xFF	; 255
    3008:	81 e0       	ldi	r24, 0x01	; 1
    300a:	83 83       	std	Z+3, r24	; 0x03
	DIO_U8SetPinValue(&enable);
    300c:	ce 01       	movw	r24, r28
    300e:	87 5a       	subi	r24, 0xA7	; 167
    3010:	9f 4f       	sbci	r25, 0xFF	; 255
    3012:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	a0 e8       	ldi	r26, 0x80	; 128
    301c:	bf e3       	ldi	r27, 0x3F	; 63
    301e:	8f a3       	std	Y+39, r24	; 0x27
    3020:	98 a7       	std	Y+40, r25	; 0x28
    3022:	a9 a7       	std	Y+41, r26	; 0x29
    3024:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3026:	6f a1       	ldd	r22, Y+39	; 0x27
    3028:	78 a5       	ldd	r23, Y+40	; 0x28
    302a:	89 a5       	ldd	r24, Y+41	; 0x29
    302c:	9a a5       	ldd	r25, Y+42	; 0x2a
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	4a e7       	ldi	r20, 0x7A	; 122
    3034:	53 e4       	ldi	r21, 0x43	; 67
    3036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	8b a3       	std	Y+35, r24	; 0x23
    3040:	9c a3       	std	Y+36, r25	; 0x24
    3042:	ad a3       	std	Y+37, r26	; 0x25
    3044:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3046:	6b a1       	ldd	r22, Y+35	; 0x23
    3048:	7c a1       	ldd	r23, Y+36	; 0x24
    304a:	8d a1       	ldd	r24, Y+37	; 0x25
    304c:	9e a1       	ldd	r25, Y+38	; 0x26
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	40 e8       	ldi	r20, 0x80	; 128
    3054:	5f e3       	ldi	r21, 0x3F	; 63
    3056:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305a:	88 23       	and	r24, r24
    305c:	2c f4       	brge	.+10     	; 0x3068 <H_LCD_void_latchByte+0x3c2>
		__ticks = 1;
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	9a a3       	std	Y+34, r25	; 0x22
    3064:	89 a3       	std	Y+33, r24	; 0x21
    3066:	3f c0       	rjmp	.+126    	; 0x30e6 <H_LCD_void_latchByte+0x440>
	else if (__tmp > 65535)
    3068:	6b a1       	ldd	r22, Y+35	; 0x23
    306a:	7c a1       	ldd	r23, Y+36	; 0x24
    306c:	8d a1       	ldd	r24, Y+37	; 0x25
    306e:	9e a1       	ldd	r25, Y+38	; 0x26
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	3f ef       	ldi	r19, 0xFF	; 255
    3074:	4f e7       	ldi	r20, 0x7F	; 127
    3076:	57 e4       	ldi	r21, 0x47	; 71
    3078:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    307c:	18 16       	cp	r1, r24
    307e:	4c f5       	brge	.+82     	; 0x30d2 <H_LCD_void_latchByte+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3080:	6f a1       	ldd	r22, Y+39	; 0x27
    3082:	78 a5       	ldd	r23, Y+40	; 0x28
    3084:	89 a5       	ldd	r24, Y+41	; 0x29
    3086:	9a a5       	ldd	r25, Y+42	; 0x2a
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e2       	ldi	r20, 0x20	; 32
    308e:	51 e4       	ldi	r21, 0x41	; 65
    3090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	9a a3       	std	Y+34, r25	; 0x22
    30a6:	89 a3       	std	Y+33, r24	; 0x21
    30a8:	0f c0       	rjmp	.+30     	; 0x30c8 <H_LCD_void_latchByte+0x422>
    30aa:	89 e1       	ldi	r24, 0x19	; 25
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	98 a3       	std	Y+32, r25	; 0x20
    30b0:	8f 8f       	std	Y+31, r24	; 0x1f
    30b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30b4:	98 a1       	ldd	r25, Y+32	; 0x20
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	f1 f7       	brne	.-4      	; 0x30b6 <H_LCD_void_latchByte+0x410>
    30ba:	98 a3       	std	Y+32, r25	; 0x20
    30bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30be:	89 a1       	ldd	r24, Y+33	; 0x21
    30c0:	9a a1       	ldd	r25, Y+34	; 0x22
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	9a a3       	std	Y+34, r25	; 0x22
    30c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c8:	89 a1       	ldd	r24, Y+33	; 0x21
    30ca:	9a a1       	ldd	r25, Y+34	; 0x22
    30cc:	00 97       	sbiw	r24, 0x00	; 0
    30ce:	69 f7       	brne	.-38     	; 0x30aa <H_LCD_void_latchByte+0x404>
    30d0:	14 c0       	rjmp	.+40     	; 0x30fa <H_LCD_void_latchByte+0x454>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d2:	6b a1       	ldd	r22, Y+35	; 0x23
    30d4:	7c a1       	ldd	r23, Y+36	; 0x24
    30d6:	8d a1       	ldd	r24, Y+37	; 0x25
    30d8:	9e a1       	ldd	r25, Y+38	; 0x26
    30da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	9a a3       	std	Y+34, r25	; 0x22
    30e4:	89 a3       	std	Y+33, r24	; 0x21
    30e6:	89 a1       	ldd	r24, Y+33	; 0x21
    30e8:	9a a1       	ldd	r25, Y+34	; 0x22
    30ea:	9e 8f       	std	Y+30, r25	; 0x1e
    30ec:	8d 8f       	std	Y+29, r24	; 0x1d
    30ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	f1 f7       	brne	.-4      	; 0x30f2 <H_LCD_void_latchByte+0x44c>
    30f6:	9e 8f       	std	Y+30, r25	; 0x1e
    30f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
    30fa:	fe 01       	movw	r30, r28
    30fc:	e9 5b       	subi	r30, 0xB9	; 185
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	10 82       	st	Z, r1
    3102:	43 c0       	rjmp	.+134    	; 0x318a <H_LCD_void_latchByte+0x4e4>
		dataPins[i].value = GET_BIT(copy_u8Byte, i);
    3104:	fe 01       	movw	r30, r28
    3106:	e9 5b       	subi	r30, 0xB9	; 185
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	80 81       	ld	r24, Z
    310c:	68 2f       	mov	r22, r24
    310e:	70 e0       	ldi	r23, 0x00	; 0
    3110:	fe 01       	movw	r30, r28
    3112:	e3 5a       	subi	r30, 0xA3	; 163
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	80 81       	ld	r24, Z
    3118:	28 2f       	mov	r18, r24
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	fe 01       	movw	r30, r28
    311e:	e9 5b       	subi	r30, 0xB9	; 185
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 81       	ld	r24, Z
    3124:	88 2f       	mov	r24, r24
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	a9 01       	movw	r20, r18
    312a:	02 c0       	rjmp	.+4      	; 0x3130 <H_LCD_void_latchByte+0x48a>
    312c:	55 95       	asr	r21
    312e:	47 95       	ror	r20
    3130:	8a 95       	dec	r24
    3132:	e2 f7       	brpl	.-8      	; 0x312c <H_LCD_void_latchByte+0x486>
    3134:	ca 01       	movw	r24, r20
    3136:	48 2f       	mov	r20, r24
    3138:	41 70       	andi	r20, 0x01	; 1
    313a:	9e 01       	movw	r18, r28
    313c:	27 5b       	subi	r18, 0xB7	; 183
    313e:	3f 4f       	sbci	r19, 0xFF	; 255
    3140:	cb 01       	movw	r24, r22
    3142:	88 0f       	add	r24, r24
    3144:	99 1f       	adc	r25, r25
    3146:	88 0f       	add	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	82 0f       	add	r24, r18
    314c:	93 1f       	adc	r25, r19
    314e:	fc 01       	movw	r30, r24
    3150:	33 96       	adiw	r30, 0x03	; 3
    3152:	40 83       	st	Z, r20
		DIO_U8SetPinValue(&dataPins[i]);
    3154:	fe 01       	movw	r30, r28
    3156:	e9 5b       	subi	r30, 0xB9	; 185
    3158:	ff 4f       	sbci	r31, 0xFF	; 255
    315a:	80 81       	ld	r24, Z
    315c:	88 2f       	mov	r24, r24
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	9c 01       	movw	r18, r24
    3162:	22 0f       	add	r18, r18
    3164:	33 1f       	adc	r19, r19
    3166:	22 0f       	add	r18, r18
    3168:	33 1f       	adc	r19, r19
    316a:	ce 01       	movw	r24, r28
    316c:	87 5b       	subi	r24, 0xB7	; 183
    316e:	9f 4f       	sbci	r25, 0xFF	; 255
    3170:	82 0f       	add	r24, r18
    3172:	93 1f       	adc	r25, r19
    3174:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_HIGH;
	DIO_U8SetPinValue(&enable);
	_delay_ms(1); /* delay for processing */

	for (u8 i = 0; i < 4; i++) {
    3178:	de 01       	movw	r26, r28
    317a:	a9 5b       	subi	r26, 0xB9	; 185
    317c:	bf 4f       	sbci	r27, 0xFF	; 255
    317e:	fe 01       	movw	r30, r28
    3180:	e9 5b       	subi	r30, 0xB9	; 185
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	80 81       	ld	r24, Z
    3186:	8f 5f       	subi	r24, 0xFF	; 255
    3188:	8c 93       	st	X, r24
    318a:	fe 01       	movw	r30, r28
    318c:	e9 5b       	subi	r30, 0xB9	; 185
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	80 81       	ld	r24, Z
    3192:	84 30       	cpi	r24, 0x04	; 4
    3194:	08 f4       	brcc	.+2      	; 0x3198 <H_LCD_void_latchByte+0x4f2>
    3196:	b6 cf       	rjmp	.-148    	; 0x3104 <H_LCD_void_latchByte+0x45e>
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	a0 e8       	ldi	r26, 0x80	; 128
    319e:	bf e3       	ldi	r27, 0x3F	; 63
    31a0:	89 8f       	std	Y+25, r24	; 0x19
    31a2:	9a 8f       	std	Y+26, r25	; 0x1a
    31a4:	ab 8f       	std	Y+27, r26	; 0x1b
    31a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a8:	69 8d       	ldd	r22, Y+25	; 0x19
    31aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	4a e7       	ldi	r20, 0x7A	; 122
    31b6:	53 e4       	ldi	r21, 0x43	; 67
    31b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	8d 8b       	std	Y+21, r24	; 0x15
    31c2:	9e 8b       	std	Y+22, r25	; 0x16
    31c4:	af 8b       	std	Y+23, r26	; 0x17
    31c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31c8:	6d 89       	ldd	r22, Y+21	; 0x15
    31ca:	7e 89       	ldd	r23, Y+22	; 0x16
    31cc:	8f 89       	ldd	r24, Y+23	; 0x17
    31ce:	98 8d       	ldd	r25, Y+24	; 0x18
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e8       	ldi	r20, 0x80	; 128
    31d6:	5f e3       	ldi	r21, 0x3F	; 63
    31d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31dc:	88 23       	and	r24, r24
    31de:	2c f4       	brge	.+10     	; 0x31ea <H_LCD_void_latchByte+0x544>
		__ticks = 1;
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	9c 8b       	std	Y+20, r25	; 0x14
    31e6:	8b 8b       	std	Y+19, r24	; 0x13
    31e8:	3f c0       	rjmp	.+126    	; 0x3268 <H_LCD_void_latchByte+0x5c2>
	else if (__tmp > 65535)
    31ea:	6d 89       	ldd	r22, Y+21	; 0x15
    31ec:	7e 89       	ldd	r23, Y+22	; 0x16
    31ee:	8f 89       	ldd	r24, Y+23	; 0x17
    31f0:	98 8d       	ldd	r25, Y+24	; 0x18
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	3f ef       	ldi	r19, 0xFF	; 255
    31f6:	4f e7       	ldi	r20, 0x7F	; 127
    31f8:	57 e4       	ldi	r21, 0x47	; 71
    31fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31fe:	18 16       	cp	r1, r24
    3200:	4c f5       	brge	.+82     	; 0x3254 <H_LCD_void_latchByte+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3202:	69 8d       	ldd	r22, Y+25	; 0x19
    3204:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3206:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3208:	9c 8d       	ldd	r25, Y+28	; 0x1c
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	40 e2       	ldi	r20, 0x20	; 32
    3210:	51 e4       	ldi	r21, 0x41	; 65
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	bc 01       	movw	r22, r24
    321c:	cd 01       	movw	r24, r26
    321e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3222:	dc 01       	movw	r26, r24
    3224:	cb 01       	movw	r24, r22
    3226:	9c 8b       	std	Y+20, r25	; 0x14
    3228:	8b 8b       	std	Y+19, r24	; 0x13
    322a:	0f c0       	rjmp	.+30     	; 0x324a <H_LCD_void_latchByte+0x5a4>
    322c:	89 e1       	ldi	r24, 0x19	; 25
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	9a 8b       	std	Y+18, r25	; 0x12
    3232:	89 8b       	std	Y+17, r24	; 0x11
    3234:	89 89       	ldd	r24, Y+17	; 0x11
    3236:	9a 89       	ldd	r25, Y+18	; 0x12
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	f1 f7       	brne	.-4      	; 0x3238 <H_LCD_void_latchByte+0x592>
    323c:	9a 8b       	std	Y+18, r25	; 0x12
    323e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3240:	8b 89       	ldd	r24, Y+19	; 0x13
    3242:	9c 89       	ldd	r25, Y+20	; 0x14
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	9c 8b       	std	Y+20, r25	; 0x14
    3248:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    324a:	8b 89       	ldd	r24, Y+19	; 0x13
    324c:	9c 89       	ldd	r25, Y+20	; 0x14
    324e:	00 97       	sbiw	r24, 0x00	; 0
    3250:	69 f7       	brne	.-38     	; 0x322c <H_LCD_void_latchByte+0x586>
    3252:	14 c0       	rjmp	.+40     	; 0x327c <H_LCD_void_latchByte+0x5d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3254:	6d 89       	ldd	r22, Y+21	; 0x15
    3256:	7e 89       	ldd	r23, Y+22	; 0x16
    3258:	8f 89       	ldd	r24, Y+23	; 0x17
    325a:	98 8d       	ldd	r25, Y+24	; 0x18
    325c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	9c 8b       	std	Y+20, r25	; 0x14
    3266:	8b 8b       	std	Y+19, r24	; 0x13
    3268:	8b 89       	ldd	r24, Y+19	; 0x13
    326a:	9c 89       	ldd	r25, Y+20	; 0x14
    326c:	98 8b       	std	Y+16, r25	; 0x10
    326e:	8f 87       	std	Y+15, r24	; 0x0f
    3270:	8f 85       	ldd	r24, Y+15	; 0x0f
    3272:	98 89       	ldd	r25, Y+16	; 0x10
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <H_LCD_void_latchByte+0x5ce>
    3278:	98 8b       	std	Y+16, r25	; 0x10
    327a:	8f 87       	std	Y+15, r24	; 0x0f
		dataPins[i].value = GET_BIT(copy_u8Byte, i);
		DIO_U8SetPinValue(&dataPins[i]);
	}

	_delay_ms(1); /* delay for processing */
	enable.value = DIO_PIN_LOW;
    327c:	fe 01       	movw	r30, r28
    327e:	e7 5a       	subi	r30, 0xA7	; 167
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	13 82       	std	Z+3, r1	; 0x03
	DIO_U8SetPinValue(&enable);
    3284:	ce 01       	movw	r24, r28
    3286:	87 5a       	subi	r24, 0xA7	; 167
    3288:	9f 4f       	sbci	r25, 0xFF	; 255
    328a:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	a0 e8       	ldi	r26, 0x80	; 128
    3294:	bf e3       	ldi	r27, 0x3F	; 63
    3296:	8b 87       	std	Y+11, r24	; 0x0b
    3298:	9c 87       	std	Y+12, r25	; 0x0c
    329a:	ad 87       	std	Y+13, r26	; 0x0d
    329c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    329e:	6b 85       	ldd	r22, Y+11	; 0x0b
    32a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32a6:	20 e0       	ldi	r18, 0x00	; 0
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	4a e7       	ldi	r20, 0x7A	; 122
    32ac:	53 e4       	ldi	r21, 0x43	; 67
    32ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	8f 83       	std	Y+7, r24	; 0x07
    32b8:	98 87       	std	Y+8, r25	; 0x08
    32ba:	a9 87       	std	Y+9, r26	; 0x09
    32bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32be:	6f 81       	ldd	r22, Y+7	; 0x07
    32c0:	78 85       	ldd	r23, Y+8	; 0x08
    32c2:	89 85       	ldd	r24, Y+9	; 0x09
    32c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	40 e8       	ldi	r20, 0x80	; 128
    32cc:	5f e3       	ldi	r21, 0x3F	; 63
    32ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32d2:	88 23       	and	r24, r24
    32d4:	2c f4       	brge	.+10     	; 0x32e0 <H_LCD_void_latchByte+0x63a>
		__ticks = 1;
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	9e 83       	std	Y+6, r25	; 0x06
    32dc:	8d 83       	std	Y+5, r24	; 0x05
    32de:	3f c0       	rjmp	.+126    	; 0x335e <H_LCD_void_latchByte+0x6b8>
	else if (__tmp > 65535)
    32e0:	6f 81       	ldd	r22, Y+7	; 0x07
    32e2:	78 85       	ldd	r23, Y+8	; 0x08
    32e4:	89 85       	ldd	r24, Y+9	; 0x09
    32e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e8:	20 e0       	ldi	r18, 0x00	; 0
    32ea:	3f ef       	ldi	r19, 0xFF	; 255
    32ec:	4f e7       	ldi	r20, 0x7F	; 127
    32ee:	57 e4       	ldi	r21, 0x47	; 71
    32f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32f4:	18 16       	cp	r1, r24
    32f6:	4c f5       	brge	.+82     	; 0x334a <H_LCD_void_latchByte+0x6a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    32fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    32fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	40 e2       	ldi	r20, 0x20	; 32
    3306:	51 e4       	ldi	r21, 0x41	; 65
    3308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	bc 01       	movw	r22, r24
    3312:	cd 01       	movw	r24, r26
    3314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	9e 83       	std	Y+6, r25	; 0x06
    331e:	8d 83       	std	Y+5, r24	; 0x05
    3320:	0f c0       	rjmp	.+30     	; 0x3340 <H_LCD_void_latchByte+0x69a>
    3322:	89 e1       	ldi	r24, 0x19	; 25
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	9c 83       	std	Y+4, r25	; 0x04
    3328:	8b 83       	std	Y+3, r24	; 0x03
    332a:	8b 81       	ldd	r24, Y+3	; 0x03
    332c:	9c 81       	ldd	r25, Y+4	; 0x04
    332e:	01 97       	sbiw	r24, 0x01	; 1
    3330:	f1 f7       	brne	.-4      	; 0x332e <H_LCD_void_latchByte+0x688>
    3332:	9c 83       	std	Y+4, r25	; 0x04
    3334:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3336:	8d 81       	ldd	r24, Y+5	; 0x05
    3338:	9e 81       	ldd	r25, Y+6	; 0x06
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	9e 83       	std	Y+6, r25	; 0x06
    333e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3340:	8d 81       	ldd	r24, Y+5	; 0x05
    3342:	9e 81       	ldd	r25, Y+6	; 0x06
    3344:	00 97       	sbiw	r24, 0x00	; 0
    3346:	69 f7       	brne	.-38     	; 0x3322 <H_LCD_void_latchByte+0x67c>
    3348:	14 c0       	rjmp	.+40     	; 0x3372 <H_LCD_void_latchByte+0x6cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    334a:	6f 81       	ldd	r22, Y+7	; 0x07
    334c:	78 85       	ldd	r23, Y+8	; 0x08
    334e:	89 85       	ldd	r24, Y+9	; 0x09
    3350:	9a 85       	ldd	r25, Y+10	; 0x0a
    3352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3356:	dc 01       	movw	r26, r24
    3358:	cb 01       	movw	r24, r22
    335a:	9e 83       	std	Y+6, r25	; 0x06
    335c:	8d 83       	std	Y+5, r24	; 0x05
    335e:	8d 81       	ldd	r24, Y+5	; 0x05
    3360:	9e 81       	ldd	r25, Y+6	; 0x06
    3362:	9a 83       	std	Y+2, r25	; 0x02
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	89 81       	ldd	r24, Y+1	; 0x01
    3368:	9a 81       	ldd	r25, Y+2	; 0x02
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	f1 f7       	brne	.-4      	; 0x336a <H_LCD_void_latchByte+0x6c4>
    336e:	9a 83       	std	Y+2, r25	; 0x02
    3370:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing*/


}
    3372:	c3 5a       	subi	r28, 0xA3	; 163
    3374:	df 4f       	sbci	r29, 0xFF	; 255
    3376:	0f b6       	in	r0, 0x3f	; 63
    3378:	f8 94       	cli
    337a:	de bf       	out	0x3e, r29	; 62
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	cd bf       	out	0x3d, r28	; 61
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	1f 91       	pop	r17
    3386:	0f 91       	pop	r16
    3388:	08 95       	ret

0000338a <KEYPAD_getPressedKey>:
 * its corresponding functional number in the proteus for 4x4 keypad
 */
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number);


u8 KEYPAD_getPressedKey(void){
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	aa 97       	sbiw	r28, 0x2a	; 42
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	f8 94       	cli
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	0f be       	out	0x3f, r0	; 63
    339c:	cd bf       	out	0x3d, r28	; 61
    DIO_Config colPins[] = {
           {DIO_PORTD, DIO_PIN7, DIO_PIN_INPUT,DIO_PIN_HIGH},
           {DIO_PORTD, DIO_PIN6, DIO_PIN_INPUT,DIO_PIN_HIGH},
           {DIO_PORTD, DIO_PIN5, DIO_PIN_INPUT,DIO_PIN_HIGH},
           {DIO_PORTD, DIO_PIN3, DIO_PIN_INPUT,DIO_PIN_HIGH},
       };
    339e:	ce 01       	movw	r24, r28
    33a0:	04 96       	adiw	r24, 0x04	; 4
    33a2:	9f a3       	std	Y+39, r25	; 0x27
    33a4:	8e a3       	std	Y+38, r24	; 0x26
    33a6:	a0 ed       	ldi	r26, 0xD0	; 208
    33a8:	b0 e0       	ldi	r27, 0x00	; 0
    33aa:	b9 a7       	std	Y+41, r27	; 0x29
    33ac:	a8 a7       	std	Y+40, r26	; 0x28
    33ae:	b0 e1       	ldi	r27, 0x10	; 16
    33b0:	ba a7       	std	Y+42, r27	; 0x2a
    33b2:	e8 a5       	ldd	r30, Y+40	; 0x28
    33b4:	f9 a5       	ldd	r31, Y+41	; 0x29
    33b6:	00 80       	ld	r0, Z
    33b8:	88 a5       	ldd	r24, Y+40	; 0x28
    33ba:	99 a5       	ldd	r25, Y+41	; 0x29
    33bc:	01 96       	adiw	r24, 0x01	; 1
    33be:	99 a7       	std	Y+41, r25	; 0x29
    33c0:	88 a7       	std	Y+40, r24	; 0x28
    33c2:	ae a1       	ldd	r26, Y+38	; 0x26
    33c4:	bf a1       	ldd	r27, Y+39	; 0x27
    33c6:	0c 92       	st	X, r0
    33c8:	ee a1       	ldd	r30, Y+38	; 0x26
    33ca:	ff a1       	ldd	r31, Y+39	; 0x27
    33cc:	31 96       	adiw	r30, 0x01	; 1
    33ce:	ff a3       	std	Y+39, r31	; 0x27
    33d0:	ee a3       	std	Y+38, r30	; 0x26
    33d2:	fa a5       	ldd	r31, Y+42	; 0x2a
    33d4:	f1 50       	subi	r31, 0x01	; 1
    33d6:	fa a7       	std	Y+42, r31	; 0x2a
    33d8:	8a a5       	ldd	r24, Y+42	; 0x2a
    33da:	88 23       	and	r24, r24
    33dc:	51 f7       	brne	.-44     	; 0x33b2 <KEYPAD_getPressedKey+0x28>
    DIO_Config rowPins[] = {
           {DIO_PORTC, DIO_PIN5, DIO_PIN_OUTPUT},
           {DIO_PORTC, DIO_PIN4, DIO_PIN_OUTPUT},
           {DIO_PORTC, DIO_PIN3, DIO_PIN_OUTPUT},
           {DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT}
       };
    33de:	80 e1       	ldi	r24, 0x10	; 16
    33e0:	fe 01       	movw	r30, r28
    33e2:	74 96       	adiw	r30, 0x14	; 20
    33e4:	df 01       	movw	r26, r30
    33e6:	98 2f       	mov	r25, r24
    33e8:	1d 92       	st	X+, r1
    33ea:	9a 95       	dec	r25
    33ec:	e9 f7       	brne	.-6      	; 0x33e8 <KEYPAD_getPressedKey+0x5e>
    33ee:	82 e0       	ldi	r24, 0x02	; 2
    33f0:	8c 8b       	std	Y+20, r24	; 0x14
    33f2:	85 e0       	ldi	r24, 0x05	; 5
    33f4:	8d 8b       	std	Y+21, r24	; 0x15
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	8e 8b       	std	Y+22, r24	; 0x16
    33fa:	82 e0       	ldi	r24, 0x02	; 2
    33fc:	88 8f       	std	Y+24, r24	; 0x18
    33fe:	84 e0       	ldi	r24, 0x04	; 4
    3400:	89 8f       	std	Y+25, r24	; 0x19
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	8a 8f       	std	Y+26, r24	; 0x1a
    3406:	82 e0       	ldi	r24, 0x02	; 2
    3408:	8c 8f       	std	Y+28, r24	; 0x1c
    340a:	83 e0       	ldi	r24, 0x03	; 3
    340c:	8d 8f       	std	Y+29, r24	; 0x1d
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	8e 8f       	std	Y+30, r24	; 0x1e
    3412:	82 e0       	ldi	r24, 0x02	; 2
    3414:	88 a3       	std	Y+32, r24	; 0x20
    3416:	82 e0       	ldi	r24, 0x02	; 2
    3418:	89 a3       	std	Y+33, r24	; 0x21
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	8a a3       	std	Y+34, r24	; 0x22

    // Initialize the keypad pins
    for (u8 i = 0; i < 4; i++) {
    341e:	19 82       	std	Y+1, r1	; 0x01
    3420:	2d c0       	rjmp	.+90     	; 0x347c <KEYPAD_getPressedKey+0xf2>
        DIO_U8SetPinDirection(&colPins[i]);
    3422:	89 81       	ldd	r24, Y+1	; 0x01
    3424:	88 2f       	mov	r24, r24
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	9c 01       	movw	r18, r24
    342a:	22 0f       	add	r18, r18
    342c:	33 1f       	adc	r19, r19
    342e:	22 0f       	add	r18, r18
    3430:	33 1f       	adc	r19, r19
    3432:	ce 01       	movw	r24, r28
    3434:	04 96       	adiw	r24, 0x04	; 4
    3436:	82 0f       	add	r24, r18
    3438:	93 1f       	adc	r25, r19
    343a:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
        DIO_U8SetPinDirection(&rowPins[i]);
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	88 2f       	mov	r24, r24
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	9c 01       	movw	r18, r24
    3446:	22 0f       	add	r18, r18
    3448:	33 1f       	adc	r19, r19
    344a:	22 0f       	add	r18, r18
    344c:	33 1f       	adc	r19, r19
    344e:	ce 01       	movw	r24, r28
    3450:	44 96       	adiw	r24, 0x14	; 20
    3452:	82 0f       	add	r24, r18
    3454:	93 1f       	adc	r25, r19
    3456:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
        DIO_U8SetPinValue(&colPins[i]);
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	88 2f       	mov	r24, r24
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	9c 01       	movw	r18, r24
    3462:	22 0f       	add	r18, r18
    3464:	33 1f       	adc	r19, r19
    3466:	22 0f       	add	r18, r18
    3468:	33 1f       	adc	r19, r19
    346a:	ce 01       	movw	r24, r28
    346c:	04 96       	adiw	r24, 0x04	; 4
    346e:	82 0f       	add	r24, r18
    3470:	93 1f       	adc	r25, r19
    3472:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
           {DIO_PORTC, DIO_PIN3, DIO_PIN_OUTPUT},
           {DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT}
       };

    // Initialize the keypad pins
    for (u8 i = 0; i < 4; i++) {
    3476:	89 81       	ldd	r24, Y+1	; 0x01
    3478:	8f 5f       	subi	r24, 0xFF	; 255
    347a:	89 83       	std	Y+1, r24	; 0x01
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	84 30       	cpi	r24, 0x04	; 4
    3480:	80 f2       	brcs	.-96     	; 0x3422 <KEYPAD_getPressedKey+0x98>
    }

    while(1)
    	{
    	/*for loop to scan all keypad columns*/
    		for (row = 0 ; row < 4 ; row++)
    3482:	1a 82       	std	Y+2, r1	; 0x02
    3484:	6a c0       	rjmp	.+212    	; 0x355a <KEYPAD_getPressedKey+0x1d0>
    		{
    			/*set current row pin low to test all col pins to find out which button has been pressed*/
    			rowPins[row].value = DIO_PIN_LOW;
    3486:	8a 81       	ldd	r24, Y+2	; 0x02
    3488:	88 2f       	mov	r24, r24
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	9c 01       	movw	r18, r24
    348e:	22 0f       	add	r18, r18
    3490:	33 1f       	adc	r19, r19
    3492:	22 0f       	add	r18, r18
    3494:	33 1f       	adc	r19, r19
    3496:	ce 01       	movw	r24, r28
    3498:	01 96       	adiw	r24, 0x01	; 1
    349a:	82 0f       	add	r24, r18
    349c:	93 1f       	adc	r25, r19
    349e:	fc 01       	movw	r30, r24
    34a0:	76 96       	adiw	r30, 0x16	; 22
    34a2:	10 82       	st	Z, r1
    			DIO_U8SetPinValue(&rowPins[row]);
    34a4:	8a 81       	ldd	r24, Y+2	; 0x02
    34a6:	88 2f       	mov	r24, r24
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	9c 01       	movw	r18, r24
    34ac:	22 0f       	add	r18, r18
    34ae:	33 1f       	adc	r19, r19
    34b0:	22 0f       	add	r18, r18
    34b2:	33 1f       	adc	r19, r19
    34b4:	ce 01       	movw	r24, r28
    34b6:	44 96       	adiw	r24, 0x14	; 20
    34b8:	82 0f       	add	r24, r18
    34ba:	93 1f       	adc	r25, r19
    34bc:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    			/*for loop to scan and test all keypad row pins*/
    			for (col = 0 ; col < 4 ; col++)
    34c0:	1b 82       	std	Y+3, r1	; 0x03
    34c2:	27 c0       	rjmp	.+78     	; 0x3512 <KEYPAD_getPressedKey+0x188>
    			{
    				u8 key;
    				DIO_U8GetPinValue(&colPins[col], &key);
    34c4:	8b 81       	ldd	r24, Y+3	; 0x03
    34c6:	88 2f       	mov	r24, r24
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	9c 01       	movw	r18, r24
    34cc:	22 0f       	add	r18, r18
    34ce:	33 1f       	adc	r19, r19
    34d0:	22 0f       	add	r18, r18
    34d2:	33 1f       	adc	r19, r19
    34d4:	ce 01       	movw	r24, r28
    34d6:	04 96       	adiw	r24, 0x04	; 4
    34d8:	82 0f       	add	r24, r18
    34da:	93 1f       	adc	r25, r19
    34dc:	9e 01       	movw	r18, r28
    34de:	2c 5d       	subi	r18, 0xDC	; 220
    34e0:	3f 4f       	sbci	r19, 0xFF	; 255
    34e2:	b9 01       	movw	r22, r18
    34e4:	0e 94 27 09 	call	0x124e	; 0x124e <DIO_U8GetPinValue>
    				/*check current row pin value*/
    				if ( DIO_PIN_LOW == key )
    34e8:	8c a1       	ldd	r24, Y+36	; 0x24
    34ea:	88 23       	and	r24, r24
    34ec:	79 f4       	brne	.+30     	; 0x350c <KEYPAD_getPressedKey+0x182>
    				{
    					/*return pressed button value*/
    					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	88 2f       	mov	r24, r24
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	88 0f       	add	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	88 0f       	add	r24, r24
    34fa:	99 1f       	adc	r25, r25
    34fc:	98 2f       	mov	r25, r24
    34fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3500:	89 0f       	add	r24, r25
    3502:	8f 5f       	subi	r24, 0xFF	; 255
    3504:	0e 94 bd 1a 	call	0x357a	; 0x357a <KEYPAD_4x4_adjustKeyNumber>
    3508:	8d a3       	std	Y+37, r24	; 0x25
    350a:	2d c0       	rjmp	.+90     	; 0x3566 <KEYPAD_getPressedKey+0x1dc>
    		{
    			/*set current row pin low to test all col pins to find out which button has been pressed*/
    			rowPins[row].value = DIO_PIN_LOW;
    			DIO_U8SetPinValue(&rowPins[row]);
    			/*for loop to scan and test all keypad row pins*/
    			for (col = 0 ; col < 4 ; col++)
    350c:	8b 81       	ldd	r24, Y+3	; 0x03
    350e:	8f 5f       	subi	r24, 0xFF	; 255
    3510:	8b 83       	std	Y+3, r24	; 0x03
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	84 30       	cpi	r24, 0x04	; 4
    3516:	b0 f2       	brcs	.-84     	; 0x34c4 <KEYPAD_getPressedKey+0x13a>
    					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    					//return keymap[i][j];
    				}
    			}/*end of for loop*/
    			/*set current column pin HIGH again*/
    			rowPins[row].value = DIO_PIN_HIGH;
    3518:	8a 81       	ldd	r24, Y+2	; 0x02
    351a:	88 2f       	mov	r24, r24
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	9c 01       	movw	r18, r24
    3520:	22 0f       	add	r18, r18
    3522:	33 1f       	adc	r19, r19
    3524:	22 0f       	add	r18, r18
    3526:	33 1f       	adc	r19, r19
    3528:	ce 01       	movw	r24, r28
    352a:	01 96       	adiw	r24, 0x01	; 1
    352c:	82 0f       	add	r24, r18
    352e:	93 1f       	adc	r25, r19
    3530:	fc 01       	movw	r30, r24
    3532:	76 96       	adiw	r30, 0x16	; 22
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	80 83       	st	Z, r24
    			DIO_U8SetPinValue(&rowPins[row]);
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	88 2f       	mov	r24, r24
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	9c 01       	movw	r18, r24
    3540:	22 0f       	add	r18, r18
    3542:	33 1f       	adc	r19, r19
    3544:	22 0f       	add	r18, r18
    3546:	33 1f       	adc	r19, r19
    3548:	ce 01       	movw	r24, r28
    354a:	44 96       	adiw	r24, 0x14	; 20
    354c:	82 0f       	add	r24, r18
    354e:	93 1f       	adc	r25, r19
    3550:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    }

    while(1)
    	{
    	/*for loop to scan all keypad columns*/
    		for (row = 0 ; row < 4 ; row++)
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	8f 5f       	subi	r24, 0xFF	; 255
    3558:	8a 83       	std	Y+2, r24	; 0x02
    355a:	8a 81       	ldd	r24, Y+2	; 0x02
    355c:	84 30       	cpi	r24, 0x04	; 4
    355e:	08 f4       	brcc	.+2      	; 0x3562 <KEYPAD_getPressedKey+0x1d8>
    3560:	92 cf       	rjmp	.-220    	; 0x3486 <KEYPAD_getPressedKey+0xfc>
    			/*set current column pin HIGH again*/
    			rowPins[row].value = DIO_PIN_HIGH;
    			DIO_U8SetPinValue(&rowPins[row]);

    		}/*end of for loop*/
    		return 'x';
    3562:	a8 e7       	ldi	r26, 0x78	; 120
    3564:	ad a3       	std	Y+37, r26	; 0x25
    3566:	8d a1       	ldd	r24, Y+37	; 0x25
    	}



}
    3568:	aa 96       	adiw	r28, 0x2a	; 42
    356a:	0f b6       	in	r0, 0x3f	; 63
    356c:	f8 94       	cli
    356e:	de bf       	out	0x3e, r29	; 62
    3570:	0f be       	out	0x3f, r0	; 63
    3572:	cd bf       	out	0x3d, r28	; 61
    3574:	cf 91       	pop	r28
    3576:	df 91       	pop	r29
    3578:	08 95       	ret

0000357a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number)
{
    357a:	df 93       	push	r29
    357c:	cf 93       	push	r28
    357e:	00 d0       	rcall	.+0      	; 0x3580 <KEYPAD_4x4_adjustKeyNumber+0x6>
    3580:	00 d0       	rcall	.+0      	; 0x3582 <KEYPAD_4x4_adjustKeyNumber+0x8>
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	8a 83       	std	Y+2, r24	; 0x02
	u8 keypad_button = 0;
    3588:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    358a:	8a 81       	ldd	r24, Y+2	; 0x02
    358c:	28 2f       	mov	r18, r24
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	3c 83       	std	Y+4, r19	; 0x04
    3592:	2b 83       	std	Y+3, r18	; 0x03
    3594:	8b 81       	ldd	r24, Y+3	; 0x03
    3596:	9c 81       	ldd	r25, Y+4	; 0x04
    3598:	88 30       	cpi	r24, 0x08	; 8
    359a:	91 05       	cpc	r25, r1
    359c:	09 f4       	brne	.+2      	; 0x35a0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    359e:	70 c0       	rjmp	.+224    	; 0x3680 <KEYPAD_4x4_adjustKeyNumber+0x106>
    35a0:	2b 81       	ldd	r18, Y+3	; 0x03
    35a2:	3c 81       	ldd	r19, Y+4	; 0x04
    35a4:	29 30       	cpi	r18, 0x09	; 9
    35a6:	31 05       	cpc	r19, r1
    35a8:	5c f5       	brge	.+86     	; 0x3600 <KEYPAD_4x4_adjustKeyNumber+0x86>
    35aa:	8b 81       	ldd	r24, Y+3	; 0x03
    35ac:	9c 81       	ldd	r25, Y+4	; 0x04
    35ae:	84 30       	cpi	r24, 0x04	; 4
    35b0:	91 05       	cpc	r25, r1
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    35b4:	59 c0       	rjmp	.+178    	; 0x3668 <KEYPAD_4x4_adjustKeyNumber+0xee>
    35b6:	2b 81       	ldd	r18, Y+3	; 0x03
    35b8:	3c 81       	ldd	r19, Y+4	; 0x04
    35ba:	25 30       	cpi	r18, 0x05	; 5
    35bc:	31 05       	cpc	r19, r1
    35be:	9c f4       	brge	.+38     	; 0x35e6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    35c0:	8b 81       	ldd	r24, Y+3	; 0x03
    35c2:	9c 81       	ldd	r25, Y+4	; 0x04
    35c4:	82 30       	cpi	r24, 0x02	; 2
    35c6:	91 05       	cpc	r25, r1
    35c8:	09 f4       	brne	.+2      	; 0x35cc <KEYPAD_4x4_adjustKeyNumber+0x52>
    35ca:	48 c0       	rjmp	.+144    	; 0x365c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    35cc:	2b 81       	ldd	r18, Y+3	; 0x03
    35ce:	3c 81       	ldd	r19, Y+4	; 0x04
    35d0:	23 30       	cpi	r18, 0x03	; 3
    35d2:	31 05       	cpc	r19, r1
    35d4:	0c f0       	brlt	.+2      	; 0x35d8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    35d6:	45 c0       	rjmp	.+138    	; 0x3662 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    35d8:	8b 81       	ldd	r24, Y+3	; 0x03
    35da:	9c 81       	ldd	r25, Y+4	; 0x04
    35dc:	81 30       	cpi	r24, 0x01	; 1
    35de:	91 05       	cpc	r25, r1
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    35e2:	39 c0       	rjmp	.+114    	; 0x3656 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    35e4:	67 c0       	rjmp	.+206    	; 0x36b4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    35e6:	2b 81       	ldd	r18, Y+3	; 0x03
    35e8:	3c 81       	ldd	r19, Y+4	; 0x04
    35ea:	26 30       	cpi	r18, 0x06	; 6
    35ec:	31 05       	cpc	r19, r1
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    35f0:	41 c0       	rjmp	.+130    	; 0x3674 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    35f2:	8b 81       	ldd	r24, Y+3	; 0x03
    35f4:	9c 81       	ldd	r25, Y+4	; 0x04
    35f6:	87 30       	cpi	r24, 0x07	; 7
    35f8:	91 05       	cpc	r25, r1
    35fa:	0c f0       	brlt	.+2      	; 0x35fe <KEYPAD_4x4_adjustKeyNumber+0x84>
    35fc:	3e c0       	rjmp	.+124    	; 0x367a <KEYPAD_4x4_adjustKeyNumber+0x100>
    35fe:	37 c0       	rjmp	.+110    	; 0x366e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3600:	2b 81       	ldd	r18, Y+3	; 0x03
    3602:	3c 81       	ldd	r19, Y+4	; 0x04
    3604:	2c 30       	cpi	r18, 0x0C	; 12
    3606:	31 05       	cpc	r19, r1
    3608:	09 f4       	brne	.+2      	; 0x360c <KEYPAD_4x4_adjustKeyNumber+0x92>
    360a:	46 c0       	rjmp	.+140    	; 0x3698 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    360c:	8b 81       	ldd	r24, Y+3	; 0x03
    360e:	9c 81       	ldd	r25, Y+4	; 0x04
    3610:	8d 30       	cpi	r24, 0x0D	; 13
    3612:	91 05       	cpc	r25, r1
    3614:	5c f4       	brge	.+22     	; 0x362c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3616:	2b 81       	ldd	r18, Y+3	; 0x03
    3618:	3c 81       	ldd	r19, Y+4	; 0x04
    361a:	2a 30       	cpi	r18, 0x0A	; 10
    361c:	31 05       	cpc	r19, r1
    361e:	b1 f1       	breq	.+108    	; 0x368c <KEYPAD_4x4_adjustKeyNumber+0x112>
    3620:	8b 81       	ldd	r24, Y+3	; 0x03
    3622:	9c 81       	ldd	r25, Y+4	; 0x04
    3624:	8b 30       	cpi	r24, 0x0B	; 11
    3626:	91 05       	cpc	r25, r1
    3628:	a4 f5       	brge	.+104    	; 0x3692 <KEYPAD_4x4_adjustKeyNumber+0x118>
    362a:	2d c0       	rjmp	.+90     	; 0x3686 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    362c:	2b 81       	ldd	r18, Y+3	; 0x03
    362e:	3c 81       	ldd	r19, Y+4	; 0x04
    3630:	2e 30       	cpi	r18, 0x0E	; 14
    3632:	31 05       	cpc	r19, r1
    3634:	b9 f1       	breq	.+110    	; 0x36a4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3636:	8b 81       	ldd	r24, Y+3	; 0x03
    3638:	9c 81       	ldd	r25, Y+4	; 0x04
    363a:	8e 30       	cpi	r24, 0x0E	; 14
    363c:	91 05       	cpc	r25, r1
    363e:	7c f1       	brlt	.+94     	; 0x369e <KEYPAD_4x4_adjustKeyNumber+0x124>
    3640:	2b 81       	ldd	r18, Y+3	; 0x03
    3642:	3c 81       	ldd	r19, Y+4	; 0x04
    3644:	2f 30       	cpi	r18, 0x0F	; 15
    3646:	31 05       	cpc	r19, r1
    3648:	79 f1       	breq	.+94     	; 0x36a8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	9c 81       	ldd	r25, Y+4	; 0x04
    364e:	80 31       	cpi	r24, 0x10	; 16
    3650:	91 05       	cpc	r25, r1
    3652:	69 f1       	breq	.+90     	; 0x36ae <KEYPAD_4x4_adjustKeyNumber+0x134>
    3654:	2f c0       	rjmp	.+94     	; 0x36b4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    3656:	87 e0       	ldi	r24, 0x07	; 7
    3658:	89 83       	std	Y+1, r24	; 0x01
    365a:	2e c0       	rjmp	.+92     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    365c:	88 e0       	ldi	r24, 0x08	; 8
    365e:	89 83       	std	Y+1, r24	; 0x01
    3660:	2b c0       	rjmp	.+86     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    3662:	89 e0       	ldi	r24, 0x09	; 9
    3664:	89 83       	std	Y+1, r24	; 0x01
    3666:	28 c0       	rjmp	.+80     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    3668:	85 e2       	ldi	r24, 0x25	; 37
    366a:	89 83       	std	Y+1, r24	; 0x01
    366c:	25 c0       	rjmp	.+74     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    366e:	84 e0       	ldi	r24, 0x04	; 4
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	22 c0       	rjmp	.+68     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    3674:	85 e0       	ldi	r24, 0x05	; 5
    3676:	89 83       	std	Y+1, r24	; 0x01
    3678:	1f c0       	rjmp	.+62     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    367a:	86 e0       	ldi	r24, 0x06	; 6
    367c:	89 83       	std	Y+1, r24	; 0x01
    367e:	1c c0       	rjmp	.+56     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3680:	8a e2       	ldi	r24, 0x2A	; 42
    3682:	89 83       	std	Y+1, r24	; 0x01
    3684:	19 c0       	rjmp	.+50     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    3686:	81 e0       	ldi	r24, 0x01	; 1
    3688:	89 83       	std	Y+1, r24	; 0x01
    368a:	16 c0       	rjmp	.+44     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    368c:	82 e0       	ldi	r24, 0x02	; 2
    368e:	89 83       	std	Y+1, r24	; 0x01
    3690:	13 c0       	rjmp	.+38     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    3692:	83 e0       	ldi	r24, 0x03	; 3
    3694:	89 83       	std	Y+1, r24	; 0x01
    3696:	10 c0       	rjmp	.+32     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3698:	8d e2       	ldi	r24, 0x2D	; 45
    369a:	89 83       	std	Y+1, r24	; 0x01
    369c:	0d c0       	rjmp	.+26     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    369e:	8d e0       	ldi	r24, 0x0D	; 13
    36a0:	89 83       	std	Y+1, r24	; 0x01
    36a2:	0a c0       	rjmp	.+20     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    36a4:	19 82       	std	Y+1, r1	; 0x01
    36a6:	08 c0       	rjmp	.+16     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    36a8:	8d e3       	ldi	r24, 0x3D	; 61
    36aa:	89 83       	std	Y+1, r24	; 0x01
    36ac:	05 c0       	rjmp	.+10     	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    36ae:	8b e2       	ldi	r24, 0x2B	; 43
    36b0:	89 83       	std	Y+1, r24	; 0x01
    36b2:	02 c0       	rjmp	.+4      	; 0x36b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    36b4:	8a 81       	ldd	r24, Y+2	; 0x02
    36b6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    36ba:	0f 90       	pop	r0
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	cf 91       	pop	r28
    36c4:	df 91       	pop	r29
    36c6:	08 95       	ret

000036c8 <testCallback>:
#include "../MCAL/ADC/ADC_interface.h"
#include "../HAL/LCD/LCD_interface.h"
#include <util/delay.h>


void testCallback(void){
    36c8:	df 93       	push	r29
    36ca:	cf 93       	push	r28
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <testCallback+0x6>
    36ce:	00 d0       	rcall	.+0      	; 0x36d0 <testCallback+0x8>
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
	DIO_Config pinTest;
	pinTest.port= DIO_PORTA;
    36d4:	19 82       	std	Y+1, r1	; 0x01
	pinTest.pin= DIO_PIN6;
    36d6:	86 e0       	ldi	r24, 0x06	; 6
    36d8:	8a 83       	std	Y+2, r24	; 0x02
	DIO_U8TogglePin(&pinTest);
    36da:	ce 01       	movw	r24, r28
    36dc:	01 96       	adiw	r24, 0x01	; 1
    36de:	0e 94 ae 08 	call	0x115c	; 0x115c <DIO_U8TogglePin>
}
    36e2:	0f 90       	pop	r0
    36e4:	0f 90       	pop	r0
    36e6:	0f 90       	pop	r0
    36e8:	0f 90       	pop	r0
    36ea:	cf 91       	pop	r28
    36ec:	df 91       	pop	r29
    36ee:	08 95       	ret

000036f0 <init>:


void init(){
    36f0:	df 93       	push	r29
    36f2:	cf 93       	push	r28
    36f4:	00 d0       	rcall	.+0      	; 0x36f6 <init+0x6>
    36f6:	00 d0       	rcall	.+0      	; 0x36f8 <init+0x8>
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
	DIO_Config pinTest;
	pinTest.port= DIO_PORTD;
    36fc:	83 e0       	ldi	r24, 0x03	; 3
    36fe:	89 83       	std	Y+1, r24	; 0x01
	pinTest.direction= DIO_PIN_INPUT;
    3700:	1b 82       	std	Y+3, r1	; 0x03
	pinTest.pin= DIO_PIN3;
    3702:	83 e0       	ldi	r24, 0x03	; 3
    3704:	8a 83       	std	Y+2, r24	; 0x02
	pinTest.value = DIO_PIN_HIGH;
    3706:	81 e0       	ldi	r24, 0x01	; 1
    3708:	8c 83       	std	Y+4, r24	; 0x04
	DIO_U8SetPinDirection(&pinTest);
    370a:	ce 01       	movw	r24, r28
    370c:	01 96       	adiw	r24, 0x01	; 1
    370e:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
	DIO_U8SetPinValue(&pinTest);
    3712:	ce 01       	movw	r24, r28
    3714:	01 96       	adiw	r24, 0x01	; 1
    3716:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
	pinTest.port= DIO_PORTA;
    371a:	19 82       	std	Y+1, r1	; 0x01
	pinTest.direction= DIO_PIN_OUTPUT;
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	8b 83       	std	Y+3, r24	; 0x03
	pinTest.pin= DIO_PIN6;
    3720:	86 e0       	ldi	r24, 0x06	; 6
    3722:	8a 83       	std	Y+2, r24	; 0x02
	DIO_U8SetPinDirection(&pinTest);
    3724:	ce 01       	movw	r24, r28
    3726:	01 96       	adiw	r24, 0x01	; 1
    3728:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
}
    372c:	0f 90       	pop	r0
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	0f 90       	pop	r0
    3734:	cf 91       	pop	r28
    3736:	df 91       	pop	r29
    3738:	08 95       	ret

0000373a <yellowLed>:

void yellowLed(){
    373a:	df 93       	push	r29
    373c:	cf 93       	push	r28
    373e:	00 d0       	rcall	.+0      	; 0x3740 <yellowLed+0x6>
    3740:	00 d0       	rcall	.+0      	; 0x3742 <yellowLed+0x8>
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
	DIO_Config pinTest;
	pinTest.port= DIO_PORTA;
    3746:	19 82       	std	Y+1, r1	; 0x01
	pinTest.pin= DIO_PIN6;
    3748:	86 e0       	ldi	r24, 0x06	; 6
    374a:	8a 83       	std	Y+2, r24	; 0x02
	pinTest.direction= DIO_PIN_OUTPUT;
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	8b 83       	std	Y+3, r24	; 0x03
	pinTest.value = DIO_PIN_HIGH;
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	8c 83       	std	Y+4, r24	; 0x04
	DIO_U8SetPinDirection(&pinTest);
    3754:	ce 01       	movw	r24, r28
    3756:	01 96       	adiw	r24, 0x01	; 1
    3758:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
	DIO_U8TogglePin(&pinTest);
    375c:	ce 01       	movw	r24, r28
    375e:	01 96       	adiw	r24, 0x01	; 1
    3760:	0e 94 ae 08 	call	0x115c	; 0x115c <DIO_U8TogglePin>
}
    3764:	0f 90       	pop	r0
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	cf 91       	pop	r28
    376e:	df 91       	pop	r29
    3770:	08 95       	ret

00003772 <getADCValue>:

u16 adcValue = 0;
void getADCValue(u16 value){
    3772:	df 93       	push	r29
    3774:	cf 93       	push	r28
    3776:	00 d0       	rcall	.+0      	; 0x3778 <getADCValue+0x6>
    3778:	cd b7       	in	r28, 0x3d	; 61
    377a:	de b7       	in	r29, 0x3e	; 62
    377c:	9a 83       	std	Y+2, r25	; 0x02
    377e:	89 83       	std	Y+1, r24	; 0x01
	adcValue = value;
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	9a 81       	ldd	r25, Y+2	; 0x02
    3784:	90 93 f0 00 	sts	0x00F0, r25
    3788:	80 93 ef 00 	sts	0x00EF, r24
}
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	cf 91       	pop	r28
    3792:	df 91       	pop	r29
    3794:	08 95       	ret

00003796 <main>:

int main(void) {
    3796:	0f 93       	push	r16
    3798:	1f 93       	push	r17
    379a:	df 93       	push	r29
    379c:	cf 93       	push	r28
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
    37a2:	c0 55       	subi	r28, 0x50	; 80
    37a4:	d0 40       	sbci	r29, 0x00	; 0
    37a6:	0f b6       	in	r0, 0x3f	; 63
    37a8:	f8 94       	cli
    37aa:	de bf       	out	0x3e, r29	; 62
    37ac:	0f be       	out	0x3f, r0	; 63
    37ae:	cd bf       	out	0x3d, r28	; 61
	//init();
	// Enable global interrupts
	GIE_enable();
    37b0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_enable>
	//EXTI_setCallBack(EXTI_INT1_ID,testCallback);
	// Initialize the 7-segment display
	//segment_Init();

	//adcA1init();
	ADC_config adcConfig = {AVCC,LeftAdj,SingleADC0,Prescaler_128,Free};
    37b4:	ce 01       	movw	r24, r28
    37b6:	89 5b       	subi	r24, 0xB9	; 185
    37b8:	9f 4f       	sbci	r25, 0xFF	; 255
    37ba:	2e 96       	adiw	r28, 0x0e	; 14
    37bc:	9f af       	std	Y+63, r25	; 0x3f
    37be:	8e af       	std	Y+62, r24	; 0x3e
    37c0:	2e 97       	sbiw	r28, 0x0e	; 14
    37c2:	80 ee       	ldi	r24, 0xE0	; 224
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	60 96       	adiw	r28, 0x10	; 16
    37c8:	9f af       	std	Y+63, r25	; 0x3f
    37ca:	8e af       	std	Y+62, r24	; 0x3e
    37cc:	60 97       	sbiw	r28, 0x10	; 16
    37ce:	95 e0       	ldi	r25, 0x05	; 5
    37d0:	61 96       	adiw	r28, 0x11	; 17
    37d2:	9f af       	std	Y+63, r25	; 0x3f
    37d4:	61 97       	sbiw	r28, 0x11	; 17
    37d6:	60 96       	adiw	r28, 0x10	; 16
    37d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    37da:	ff ad       	ldd	r31, Y+63	; 0x3f
    37dc:	60 97       	sbiw	r28, 0x10	; 16
    37de:	00 80       	ld	r0, Z
    37e0:	60 96       	adiw	r28, 0x10	; 16
    37e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    37e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    37e6:	60 97       	sbiw	r28, 0x10	; 16
    37e8:	01 96       	adiw	r24, 0x01	; 1
    37ea:	60 96       	adiw	r28, 0x10	; 16
    37ec:	9f af       	std	Y+63, r25	; 0x3f
    37ee:	8e af       	std	Y+62, r24	; 0x3e
    37f0:	60 97       	sbiw	r28, 0x10	; 16
    37f2:	2e 96       	adiw	r28, 0x0e	; 14
    37f4:	ee ad       	ldd	r30, Y+62	; 0x3e
    37f6:	ff ad       	ldd	r31, Y+63	; 0x3f
    37f8:	2e 97       	sbiw	r28, 0x0e	; 14
    37fa:	00 82       	st	Z, r0
    37fc:	2e 96       	adiw	r28, 0x0e	; 14
    37fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    3800:	9f ad       	ldd	r25, Y+63	; 0x3f
    3802:	2e 97       	sbiw	r28, 0x0e	; 14
    3804:	01 96       	adiw	r24, 0x01	; 1
    3806:	2e 96       	adiw	r28, 0x0e	; 14
    3808:	9f af       	std	Y+63, r25	; 0x3f
    380a:	8e af       	std	Y+62, r24	; 0x3e
    380c:	2e 97       	sbiw	r28, 0x0e	; 14
    380e:	61 96       	adiw	r28, 0x11	; 17
    3810:	9f ad       	ldd	r25, Y+63	; 0x3f
    3812:	61 97       	sbiw	r28, 0x11	; 17
    3814:	91 50       	subi	r25, 0x01	; 1
    3816:	61 96       	adiw	r28, 0x11	; 17
    3818:	9f af       	std	Y+63, r25	; 0x3f
    381a:	61 97       	sbiw	r28, 0x11	; 17
    381c:	61 96       	adiw	r28, 0x11	; 17
    381e:	ef ad       	ldd	r30, Y+63	; 0x3f
    3820:	61 97       	sbiw	r28, 0x11	; 17
    3822:	ee 23       	and	r30, r30
    3824:	c1 f6       	brne	.-80     	; 0x37d6 <main+0x40>
	ADC_Init(&adcConfig);
    3826:	ce 01       	movw	r24, r28
    3828:	89 5b       	subi	r24, 0xB9	; 185
    382a:	9f 4f       	sbci	r25, 0xFF	; 255
    382c:	0e 94 a2 09 	call	0x1344	; 0x1344 <ADC_Init>
    3830:	fe 01       	movw	r30, r28
    3832:	ed 5b       	subi	r30, 0xBD	; 189
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	80 e0       	ldi	r24, 0x00	; 0
    3838:	90 e4       	ldi	r25, 0x40	; 64
    383a:	ac e9       	ldi	r26, 0x9C	; 156
    383c:	b5 e4       	ldi	r27, 0x45	; 69
    383e:	80 83       	st	Z, r24
    3840:	91 83       	std	Z+1, r25	; 0x01
    3842:	a2 83       	std	Z+2, r26	; 0x02
    3844:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3846:	8e 01       	movw	r16, r28
    3848:	01 5c       	subi	r16, 0xC1	; 193
    384a:	1f 4f       	sbci	r17, 0xFF	; 255
    384c:	fe 01       	movw	r30, r28
    384e:	ed 5b       	subi	r30, 0xBD	; 189
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	60 81       	ld	r22, Z
    3854:	71 81       	ldd	r23, Z+1	; 0x01
    3856:	82 81       	ldd	r24, Z+2	; 0x02
    3858:	93 81       	ldd	r25, Z+3	; 0x03
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	4a e7       	ldi	r20, 0x7A	; 122
    3860:	53 e4       	ldi	r21, 0x43	; 67
    3862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3866:	dc 01       	movw	r26, r24
    3868:	cb 01       	movw	r24, r22
    386a:	f8 01       	movw	r30, r16
    386c:	80 83       	st	Z, r24
    386e:	91 83       	std	Z+1, r25	; 0x01
    3870:	a2 83       	std	Z+2, r26	; 0x02
    3872:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3874:	fe 01       	movw	r30, r28
    3876:	ff 96       	adiw	r30, 0x3f	; 63
    3878:	60 81       	ld	r22, Z
    387a:	71 81       	ldd	r23, Z+1	; 0x01
    387c:	82 81       	ldd	r24, Z+2	; 0x02
    387e:	93 81       	ldd	r25, Z+3	; 0x03
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	40 e8       	ldi	r20, 0x80	; 128
    3886:	5f e3       	ldi	r21, 0x3F	; 63
    3888:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    388c:	88 23       	and	r24, r24
    388e:	2c f4       	brge	.+10     	; 0x389a <main+0x104>
		__ticks = 1;
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	9e af       	std	Y+62, r25	; 0x3e
    3896:	8d af       	std	Y+61, r24	; 0x3d
    3898:	46 c0       	rjmp	.+140    	; 0x3926 <main+0x190>
	else if (__tmp > 65535)
    389a:	fe 01       	movw	r30, r28
    389c:	ff 96       	adiw	r30, 0x3f	; 63
    389e:	60 81       	ld	r22, Z
    38a0:	71 81       	ldd	r23, Z+1	; 0x01
    38a2:	82 81       	ldd	r24, Z+2	; 0x02
    38a4:	93 81       	ldd	r25, Z+3	; 0x03
    38a6:	20 e0       	ldi	r18, 0x00	; 0
    38a8:	3f ef       	ldi	r19, 0xFF	; 255
    38aa:	4f e7       	ldi	r20, 0x7F	; 127
    38ac:	57 e4       	ldi	r21, 0x47	; 71
    38ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38b2:	18 16       	cp	r1, r24
    38b4:	64 f5       	brge	.+88     	; 0x390e <main+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38b6:	fe 01       	movw	r30, r28
    38b8:	ed 5b       	subi	r30, 0xBD	; 189
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	60 81       	ld	r22, Z
    38be:	71 81       	ldd	r23, Z+1	; 0x01
    38c0:	82 81       	ldd	r24, Z+2	; 0x02
    38c2:	93 81       	ldd	r25, Z+3	; 0x03
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	40 e2       	ldi	r20, 0x20	; 32
    38ca:	51 e4       	ldi	r21, 0x41	; 65
    38cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	bc 01       	movw	r22, r24
    38d6:	cd 01       	movw	r24, r26
    38d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38dc:	dc 01       	movw	r26, r24
    38de:	cb 01       	movw	r24, r22
    38e0:	9e af       	std	Y+62, r25	; 0x3e
    38e2:	8d af       	std	Y+61, r24	; 0x3d
    38e4:	0f c0       	rjmp	.+30     	; 0x3904 <main+0x16e>
    38e6:	89 e1       	ldi	r24, 0x19	; 25
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	9c af       	std	Y+60, r25	; 0x3c
    38ec:	8b af       	std	Y+59, r24	; 0x3b
    38ee:	8b ad       	ldd	r24, Y+59	; 0x3b
    38f0:	9c ad       	ldd	r25, Y+60	; 0x3c
    38f2:	01 97       	sbiw	r24, 0x01	; 1
    38f4:	f1 f7       	brne	.-4      	; 0x38f2 <main+0x15c>
    38f6:	9c af       	std	Y+60, r25	; 0x3c
    38f8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    38fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	9e af       	std	Y+62, r25	; 0x3e
    3902:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3904:	8d ad       	ldd	r24, Y+61	; 0x3d
    3906:	9e ad       	ldd	r25, Y+62	; 0x3e
    3908:	00 97       	sbiw	r24, 0x00	; 0
    390a:	69 f7       	brne	.-38     	; 0x38e6 <main+0x150>
    390c:	16 c0       	rjmp	.+44     	; 0x393a <main+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    390e:	fe 01       	movw	r30, r28
    3910:	ff 96       	adiw	r30, 0x3f	; 63
    3912:	60 81       	ld	r22, Z
    3914:	71 81       	ldd	r23, Z+1	; 0x01
    3916:	82 81       	ldd	r24, Z+2	; 0x02
    3918:	93 81       	ldd	r25, Z+3	; 0x03
    391a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	9e af       	std	Y+62, r25	; 0x3e
    3924:	8d af       	std	Y+61, r24	; 0x3d
    3926:	8d ad       	ldd	r24, Y+61	; 0x3d
    3928:	9e ad       	ldd	r25, Y+62	; 0x3e
    392a:	9a af       	std	Y+58, r25	; 0x3a
    392c:	89 af       	std	Y+57, r24	; 0x39
    392e:	89 ad       	ldd	r24, Y+57	; 0x39
    3930:	9a ad       	ldd	r25, Y+58	; 0x3a
    3932:	01 97       	sbiw	r24, 0x01	; 1
    3934:	f1 f7       	brne	.-4      	; 0x3932 <main+0x19c>
    3936:	9a af       	std	Y+58, r25	; 0x3a
    3938:	89 af       	std	Y+57, r24	; 0x39
	//	u8 key;
	//yellowLed();
	_delay_ms(5000);
	H_LCD_void_Init();
    393a:	0e 94 9f 0c 	call	0x193e	; 0x193e <H_LCD_void_Init>
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	90 e4       	ldi	r25, 0x40	; 64
    3942:	ac e9       	ldi	r26, 0x9C	; 156
    3944:	b5 e4       	ldi	r27, 0x45	; 69
    3946:	8d ab       	std	Y+53, r24	; 0x35
    3948:	9e ab       	std	Y+54, r25	; 0x36
    394a:	af ab       	std	Y+55, r26	; 0x37
    394c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394e:	6d a9       	ldd	r22, Y+53	; 0x35
    3950:	7e a9       	ldd	r23, Y+54	; 0x36
    3952:	8f a9       	ldd	r24, Y+55	; 0x37
    3954:	98 ad       	ldd	r25, Y+56	; 0x38
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	4a e7       	ldi	r20, 0x7A	; 122
    395c:	53 e4       	ldi	r21, 0x43	; 67
    395e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	89 ab       	std	Y+49, r24	; 0x31
    3968:	9a ab       	std	Y+50, r25	; 0x32
    396a:	ab ab       	std	Y+51, r26	; 0x33
    396c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    396e:	69 a9       	ldd	r22, Y+49	; 0x31
    3970:	7a a9       	ldd	r23, Y+50	; 0x32
    3972:	8b a9       	ldd	r24, Y+51	; 0x33
    3974:	9c a9       	ldd	r25, Y+52	; 0x34
    3976:	20 e0       	ldi	r18, 0x00	; 0
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	40 e8       	ldi	r20, 0x80	; 128
    397c:	5f e3       	ldi	r21, 0x3F	; 63
    397e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3982:	88 23       	and	r24, r24
    3984:	2c f4       	brge	.+10     	; 0x3990 <main+0x1fa>
		__ticks = 1;
    3986:	81 e0       	ldi	r24, 0x01	; 1
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	98 ab       	std	Y+48, r25	; 0x30
    398c:	8f a7       	std	Y+47, r24	; 0x2f
    398e:	3f c0       	rjmp	.+126    	; 0x3a0e <main+0x278>
	else if (__tmp > 65535)
    3990:	69 a9       	ldd	r22, Y+49	; 0x31
    3992:	7a a9       	ldd	r23, Y+50	; 0x32
    3994:	8b a9       	ldd	r24, Y+51	; 0x33
    3996:	9c a9       	ldd	r25, Y+52	; 0x34
    3998:	20 e0       	ldi	r18, 0x00	; 0
    399a:	3f ef       	ldi	r19, 0xFF	; 255
    399c:	4f e7       	ldi	r20, 0x7F	; 127
    399e:	57 e4       	ldi	r21, 0x47	; 71
    39a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39a4:	18 16       	cp	r1, r24
    39a6:	4c f5       	brge	.+82     	; 0x39fa <main+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a8:	6d a9       	ldd	r22, Y+53	; 0x35
    39aa:	7e a9       	ldd	r23, Y+54	; 0x36
    39ac:	8f a9       	ldd	r24, Y+55	; 0x37
    39ae:	98 ad       	ldd	r25, Y+56	; 0x38
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	40 e2       	ldi	r20, 0x20	; 32
    39b6:	51 e4       	ldi	r21, 0x41	; 65
    39b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39bc:	dc 01       	movw	r26, r24
    39be:	cb 01       	movw	r24, r22
    39c0:	bc 01       	movw	r22, r24
    39c2:	cd 01       	movw	r24, r26
    39c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	98 ab       	std	Y+48, r25	; 0x30
    39ce:	8f a7       	std	Y+47, r24	; 0x2f
    39d0:	0f c0       	rjmp	.+30     	; 0x39f0 <main+0x25a>
    39d2:	89 e1       	ldi	r24, 0x19	; 25
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	9e a7       	std	Y+46, r25	; 0x2e
    39d8:	8d a7       	std	Y+45, r24	; 0x2d
    39da:	8d a5       	ldd	r24, Y+45	; 0x2d
    39dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    39de:	01 97       	sbiw	r24, 0x01	; 1
    39e0:	f1 f7       	brne	.-4      	; 0x39de <main+0x248>
    39e2:	9e a7       	std	Y+46, r25	; 0x2e
    39e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    39e8:	98 a9       	ldd	r25, Y+48	; 0x30
    39ea:	01 97       	sbiw	r24, 0x01	; 1
    39ec:	98 ab       	std	Y+48, r25	; 0x30
    39ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    39f2:	98 a9       	ldd	r25, Y+48	; 0x30
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	69 f7       	brne	.-38     	; 0x39d2 <main+0x23c>
    39f8:	14 c0       	rjmp	.+40     	; 0x3a22 <main+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39fa:	69 a9       	ldd	r22, Y+49	; 0x31
    39fc:	7a a9       	ldd	r23, Y+50	; 0x32
    39fe:	8b a9       	ldd	r24, Y+51	; 0x33
    3a00:	9c a9       	ldd	r25, Y+52	; 0x34
    3a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a06:	dc 01       	movw	r26, r24
    3a08:	cb 01       	movw	r24, r22
    3a0a:	98 ab       	std	Y+48, r25	; 0x30
    3a0c:	8f a7       	std	Y+47, r24	; 0x2f
    3a0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a10:	98 a9       	ldd	r25, Y+48	; 0x30
    3a12:	9c a7       	std	Y+44, r25	; 0x2c
    3a14:	8b a7       	std	Y+43, r24	; 0x2b
    3a16:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a18:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a1a:	01 97       	sbiw	r24, 0x01	; 1
    3a1c:	f1 f7       	brne	.-4      	; 0x3a1a <main+0x284>
    3a1e:	9c a7       	std	Y+44, r25	; 0x2c
    3a20:	8b a7       	std	Y+43, r24	; 0x2b
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	90 e8       	ldi	r25, 0x80	; 128
    3a26:	ab e3       	ldi	r26, 0x3B	; 59
    3a28:	b5 e4       	ldi	r27, 0x45	; 69
    3a2a:	8f a3       	std	Y+39, r24	; 0x27
    3a2c:	98 a7       	std	Y+40, r25	; 0x28
    3a2e:	a9 a7       	std	Y+41, r26	; 0x29
    3a30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a32:	6f a1       	ldd	r22, Y+39	; 0x27
    3a34:	78 a5       	ldd	r23, Y+40	; 0x28
    3a36:	89 a5       	ldd	r24, Y+41	; 0x29
    3a38:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	4a e7       	ldi	r20, 0x7A	; 122
    3a40:	53 e4       	ldi	r21, 0x43	; 67
    3a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a46:	dc 01       	movw	r26, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	8b a3       	std	Y+35, r24	; 0x23
    3a4c:	9c a3       	std	Y+36, r25	; 0x24
    3a4e:	ad a3       	std	Y+37, r26	; 0x25
    3a50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a52:	6b a1       	ldd	r22, Y+35	; 0x23
    3a54:	7c a1       	ldd	r23, Y+36	; 0x24
    3a56:	8d a1       	ldd	r24, Y+37	; 0x25
    3a58:	9e a1       	ldd	r25, Y+38	; 0x26
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e8       	ldi	r20, 0x80	; 128
    3a60:	5f e3       	ldi	r21, 0x3F	; 63
    3a62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a66:	88 23       	and	r24, r24
    3a68:	2c f4       	brge	.+10     	; 0x3a74 <main+0x2de>
		__ticks = 1;
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	9a a3       	std	Y+34, r25	; 0x22
    3a70:	89 a3       	std	Y+33, r24	; 0x21
    3a72:	3f c0       	rjmp	.+126    	; 0x3af2 <main+0x35c>
	else if (__tmp > 65535)
    3a74:	6b a1       	ldd	r22, Y+35	; 0x23
    3a76:	7c a1       	ldd	r23, Y+36	; 0x24
    3a78:	8d a1       	ldd	r24, Y+37	; 0x25
    3a7a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a7c:	20 e0       	ldi	r18, 0x00	; 0
    3a7e:	3f ef       	ldi	r19, 0xFF	; 255
    3a80:	4f e7       	ldi	r20, 0x7F	; 127
    3a82:	57 e4       	ldi	r21, 0x47	; 71
    3a84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a88:	18 16       	cp	r1, r24
    3a8a:	4c f5       	brge	.+82     	; 0x3ade <main+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a8c:	6f a1       	ldd	r22, Y+39	; 0x27
    3a8e:	78 a5       	ldd	r23, Y+40	; 0x28
    3a90:	89 a5       	ldd	r24, Y+41	; 0x29
    3a92:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	40 e2       	ldi	r20, 0x20	; 32
    3a9a:	51 e4       	ldi	r21, 0x41	; 65
    3a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	bc 01       	movw	r22, r24
    3aa6:	cd 01       	movw	r24, r26
    3aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	9a a3       	std	Y+34, r25	; 0x22
    3ab2:	89 a3       	std	Y+33, r24	; 0x21
    3ab4:	0f c0       	rjmp	.+30     	; 0x3ad4 <main+0x33e>
    3ab6:	89 e1       	ldi	r24, 0x19	; 25
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	98 a3       	std	Y+32, r25	; 0x20
    3abc:	8f 8f       	std	Y+31, r24	; 0x1f
    3abe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ac0:	98 a1       	ldd	r25, Y+32	; 0x20
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	f1 f7       	brne	.-4      	; 0x3ac2 <main+0x32c>
    3ac6:	98 a3       	std	Y+32, r25	; 0x20
    3ac8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3aca:	89 a1       	ldd	r24, Y+33	; 0x21
    3acc:	9a a1       	ldd	r25, Y+34	; 0x22
    3ace:	01 97       	sbiw	r24, 0x01	; 1
    3ad0:	9a a3       	std	Y+34, r25	; 0x22
    3ad2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad4:	89 a1       	ldd	r24, Y+33	; 0x21
    3ad6:	9a a1       	ldd	r25, Y+34	; 0x22
    3ad8:	00 97       	sbiw	r24, 0x00	; 0
    3ada:	69 f7       	brne	.-38     	; 0x3ab6 <main+0x320>
    3adc:	14 c0       	rjmp	.+40     	; 0x3b06 <main+0x370>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ade:	6b a1       	ldd	r22, Y+35	; 0x23
    3ae0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ae2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ae4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aea:	dc 01       	movw	r26, r24
    3aec:	cb 01       	movw	r24, r22
    3aee:	9a a3       	std	Y+34, r25	; 0x22
    3af0:	89 a3       	std	Y+33, r24	; 0x21
    3af2:	89 a1       	ldd	r24, Y+33	; 0x21
    3af4:	9a a1       	ldd	r25, Y+34	; 0x22
    3af6:	9e 8f       	std	Y+30, r25	; 0x1e
    3af8:	8d 8f       	std	Y+29, r24	; 0x1d
    3afa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3afc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3afe:	01 97       	sbiw	r24, 0x01	; 1
    3b00:	f1 f7       	brne	.-4      	; 0x3afe <main+0x368>
    3b02:	9e 8f       	std	Y+30, r25	; 0x1e
    3b04:	8d 8f       	std	Y+29, r24	; 0x1d
		//		}

		_delay_ms(3000);
		//ADC pooling
		//H_LCD_void_sendIntNum(ADC_getDigitalValueSynchNonBlocking(SingleADC0));
		ADC_getDigitalValueAsynchCallBack(SingleADC0,getADCValue);
    3b06:	29 eb       	ldi	r18, 0xB9	; 185
    3b08:	3b e1       	ldi	r19, 0x1B	; 27
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	b9 01       	movw	r22, r18
    3b0e:	0e 94 ef 09 	call	0x13de	; 0x13de <ADC_getDigitalValueAsynchCallBack>
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e8       	ldi	r25, 0x80	; 128
    3b16:	ab e3       	ldi	r26, 0x3B	; 59
    3b18:	b5 e4       	ldi	r27, 0x45	; 69
    3b1a:	89 8f       	std	Y+25, r24	; 0x19
    3b1c:	9a 8f       	std	Y+26, r25	; 0x1a
    3b1e:	ab 8f       	std	Y+27, r26	; 0x1b
    3b20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b22:	69 8d       	ldd	r22, Y+25	; 0x19
    3b24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	4a e7       	ldi	r20, 0x7A	; 122
    3b30:	53 e4       	ldi	r21, 0x43	; 67
    3b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	8d 8b       	std	Y+21, r24	; 0x15
    3b3c:	9e 8b       	std	Y+22, r25	; 0x16
    3b3e:	af 8b       	std	Y+23, r26	; 0x17
    3b40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b42:	6d 89       	ldd	r22, Y+21	; 0x15
    3b44:	7e 89       	ldd	r23, Y+22	; 0x16
    3b46:	8f 89       	ldd	r24, Y+23	; 0x17
    3b48:	98 8d       	ldd	r25, Y+24	; 0x18
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	40 e8       	ldi	r20, 0x80	; 128
    3b50:	5f e3       	ldi	r21, 0x3F	; 63
    3b52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b56:	88 23       	and	r24, r24
    3b58:	2c f4       	brge	.+10     	; 0x3b64 <main+0x3ce>
		__ticks = 1;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	9c 8b       	std	Y+20, r25	; 0x14
    3b60:	8b 8b       	std	Y+19, r24	; 0x13
    3b62:	3f c0       	rjmp	.+126    	; 0x3be2 <main+0x44c>
	else if (__tmp > 65535)
    3b64:	6d 89       	ldd	r22, Y+21	; 0x15
    3b66:	7e 89       	ldd	r23, Y+22	; 0x16
    3b68:	8f 89       	ldd	r24, Y+23	; 0x17
    3b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	3f ef       	ldi	r19, 0xFF	; 255
    3b70:	4f e7       	ldi	r20, 0x7F	; 127
    3b72:	57 e4       	ldi	r21, 0x47	; 71
    3b74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b78:	18 16       	cp	r1, r24
    3b7a:	4c f5       	brge	.+82     	; 0x3bce <main+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b7c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	40 e2       	ldi	r20, 0x20	; 32
    3b8a:	51 e4       	ldi	r21, 0x41	; 65
    3b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	bc 01       	movw	r22, r24
    3b96:	cd 01       	movw	r24, r26
    3b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	9c 8b       	std	Y+20, r25	; 0x14
    3ba2:	8b 8b       	std	Y+19, r24	; 0x13
    3ba4:	0f c0       	rjmp	.+30     	; 0x3bc4 <main+0x42e>
    3ba6:	89 e1       	ldi	r24, 0x19	; 25
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	9a 8b       	std	Y+18, r25	; 0x12
    3bac:	89 8b       	std	Y+17, r24	; 0x11
    3bae:	89 89       	ldd	r24, Y+17	; 0x11
    3bb0:	9a 89       	ldd	r25, Y+18	; 0x12
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	f1 f7       	brne	.-4      	; 0x3bb2 <main+0x41c>
    3bb6:	9a 8b       	std	Y+18, r25	; 0x12
    3bb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bba:	8b 89       	ldd	r24, Y+19	; 0x13
    3bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    3bbe:	01 97       	sbiw	r24, 0x01	; 1
    3bc0:	9c 8b       	std	Y+20, r25	; 0x14
    3bc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    3bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	69 f7       	brne	.-38     	; 0x3ba6 <main+0x410>
    3bcc:	14 c0       	rjmp	.+40     	; 0x3bf6 <main+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bce:	6d 89       	ldd	r22, Y+21	; 0x15
    3bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    3bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    3bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    3bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	9c 8b       	std	Y+20, r25	; 0x14
    3be0:	8b 8b       	std	Y+19, r24	; 0x13
    3be2:	8b 89       	ldd	r24, Y+19	; 0x13
    3be4:	9c 89       	ldd	r25, Y+20	; 0x14
    3be6:	98 8b       	std	Y+16, r25	; 0x10
    3be8:	8f 87       	std	Y+15, r24	; 0x0f
    3bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bec:	98 89       	ldd	r25, Y+16	; 0x10
    3bee:	01 97       	sbiw	r24, 0x01	; 1
    3bf0:	f1 f7       	brne	.-4      	; 0x3bee <main+0x458>
    3bf2:	98 8b       	std	Y+16, r25	; 0x10
    3bf4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(3000);
		if(adcValue){
    3bf6:	80 91 ef 00 	lds	r24, 0x00EF
    3bfa:	90 91 f0 00 	lds	r25, 0x00F0
    3bfe:	00 97       	sbiw	r24, 0x00	; 0
    3c00:	09 f4       	brne	.+2      	; 0x3c04 <main+0x46e>
    3c02:	0f cf       	rjmp	.-482    	; 0x3a22 <main+0x28c>
			H_LCD_void_sendIntNum(adcValue);
    3c04:	80 91 ef 00 	lds	r24, 0x00EF
    3c08:	90 91 f0 00 	lds	r25, 0x00F0
    3c0c:	cc 01       	movw	r24, r24
    3c0e:	a0 e0       	ldi	r26, 0x00	; 0
    3c10:	b0 e0       	ldi	r27, 0x00	; 0
    3c12:	bc 01       	movw	r22, r24
    3c14:	cd 01       	movw	r24, r26
    3c16:	0e 94 05 11 	call	0x220a	; 0x220a <H_LCD_void_sendIntNum>
    3c1a:	80 e0       	ldi	r24, 0x00	; 0
    3c1c:	90 e8       	ldi	r25, 0x80	; 128
    3c1e:	ab e3       	ldi	r26, 0x3B	; 59
    3c20:	b5 e4       	ldi	r27, 0x45	; 69
    3c22:	8b 87       	std	Y+11, r24	; 0x0b
    3c24:	9c 87       	std	Y+12, r25	; 0x0c
    3c26:	ad 87       	std	Y+13, r26	; 0x0d
    3c28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c32:	20 e0       	ldi	r18, 0x00	; 0
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	4a e7       	ldi	r20, 0x7A	; 122
    3c38:	53 e4       	ldi	r21, 0x43	; 67
    3c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	8f 83       	std	Y+7, r24	; 0x07
    3c44:	98 87       	std	Y+8, r25	; 0x08
    3c46:	a9 87       	std	Y+9, r26	; 0x09
    3c48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c4c:	78 85       	ldd	r23, Y+8	; 0x08
    3c4e:	89 85       	ldd	r24, Y+9	; 0x09
    3c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	40 e8       	ldi	r20, 0x80	; 128
    3c58:	5f e3       	ldi	r21, 0x3F	; 63
    3c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c5e:	88 23       	and	r24, r24
    3c60:	2c f4       	brge	.+10     	; 0x3c6c <main+0x4d6>
		__ticks = 1;
    3c62:	81 e0       	ldi	r24, 0x01	; 1
    3c64:	90 e0       	ldi	r25, 0x00	; 0
    3c66:	9e 83       	std	Y+6, r25	; 0x06
    3c68:	8d 83       	std	Y+5, r24	; 0x05
    3c6a:	3f c0       	rjmp	.+126    	; 0x3cea <main+0x554>
	else if (__tmp > 65535)
    3c6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c6e:	78 85       	ldd	r23, Y+8	; 0x08
    3c70:	89 85       	ldd	r24, Y+9	; 0x09
    3c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c74:	20 e0       	ldi	r18, 0x00	; 0
    3c76:	3f ef       	ldi	r19, 0xFF	; 255
    3c78:	4f e7       	ldi	r20, 0x7F	; 127
    3c7a:	57 e4       	ldi	r21, 0x47	; 71
    3c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c80:	18 16       	cp	r1, r24
    3c82:	4c f5       	brge	.+82     	; 0x3cd6 <main+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c8c:	20 e0       	ldi	r18, 0x00	; 0
    3c8e:	30 e0       	ldi	r19, 0x00	; 0
    3c90:	40 e2       	ldi	r20, 0x20	; 32
    3c92:	51 e4       	ldi	r21, 0x41	; 65
    3c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	bc 01       	movw	r22, r24
    3c9e:	cd 01       	movw	r24, r26
    3ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca4:	dc 01       	movw	r26, r24
    3ca6:	cb 01       	movw	r24, r22
    3ca8:	9e 83       	std	Y+6, r25	; 0x06
    3caa:	8d 83       	std	Y+5, r24	; 0x05
    3cac:	0f c0       	rjmp	.+30     	; 0x3ccc <main+0x536>
    3cae:	89 e1       	ldi	r24, 0x19	; 25
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	9c 83       	std	Y+4, r25	; 0x04
    3cb4:	8b 83       	std	Y+3, r24	; 0x03
    3cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	f1 f7       	brne	.-4      	; 0x3cba <main+0x524>
    3cbe:	9c 83       	std	Y+4, r25	; 0x04
    3cc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cc6:	01 97       	sbiw	r24, 0x01	; 1
    3cc8:	9e 83       	std	Y+6, r25	; 0x06
    3cca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cce:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd0:	00 97       	sbiw	r24, 0x00	; 0
    3cd2:	69 f7       	brne	.-38     	; 0x3cae <main+0x518>
    3cd4:	a6 ce       	rjmp	.-692    	; 0x3a22 <main+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    3cd8:	78 85       	ldd	r23, Y+8	; 0x08
    3cda:	89 85       	ldd	r24, Y+9	; 0x09
    3cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	cb 01       	movw	r24, r22
    3ce6:	9e 83       	std	Y+6, r25	; 0x06
    3ce8:	8d 83       	std	Y+5, r24	; 0x05
    3cea:	8d 81       	ldd	r24, Y+5	; 0x05
    3cec:	9e 81       	ldd	r25, Y+6	; 0x06
    3cee:	9a 83       	std	Y+2, r25	; 0x02
    3cf0:	89 83       	std	Y+1, r24	; 0x01
    3cf2:	89 81       	ldd	r24, Y+1	; 0x01
    3cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    3cf6:	01 97       	sbiw	r24, 0x01	; 1
    3cf8:	f1 f7       	brne	.-4      	; 0x3cf6 <main+0x560>
    3cfa:	9a 83       	std	Y+2, r25	; 0x02
    3cfc:	89 83       	std	Y+1, r24	; 0x01
    3cfe:	91 ce       	rjmp	.-734    	; 0x3a22 <main+0x28c>

00003d00 <__prologue_saves__>:
    3d00:	2f 92       	push	r2
    3d02:	3f 92       	push	r3
    3d04:	4f 92       	push	r4
    3d06:	5f 92       	push	r5
    3d08:	6f 92       	push	r6
    3d0a:	7f 92       	push	r7
    3d0c:	8f 92       	push	r8
    3d0e:	9f 92       	push	r9
    3d10:	af 92       	push	r10
    3d12:	bf 92       	push	r11
    3d14:	cf 92       	push	r12
    3d16:	df 92       	push	r13
    3d18:	ef 92       	push	r14
    3d1a:	ff 92       	push	r15
    3d1c:	0f 93       	push	r16
    3d1e:	1f 93       	push	r17
    3d20:	cf 93       	push	r28
    3d22:	df 93       	push	r29
    3d24:	cd b7       	in	r28, 0x3d	; 61
    3d26:	de b7       	in	r29, 0x3e	; 62
    3d28:	ca 1b       	sub	r28, r26
    3d2a:	db 0b       	sbc	r29, r27
    3d2c:	0f b6       	in	r0, 0x3f	; 63
    3d2e:	f8 94       	cli
    3d30:	de bf       	out	0x3e, r29	; 62
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	cd bf       	out	0x3d, r28	; 61
    3d36:	09 94       	ijmp

00003d38 <__epilogue_restores__>:
    3d38:	2a 88       	ldd	r2, Y+18	; 0x12
    3d3a:	39 88       	ldd	r3, Y+17	; 0x11
    3d3c:	48 88       	ldd	r4, Y+16	; 0x10
    3d3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d40:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d42:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d44:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d46:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d48:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d4a:	b9 84       	ldd	r11, Y+9	; 0x09
    3d4c:	c8 84       	ldd	r12, Y+8	; 0x08
    3d4e:	df 80       	ldd	r13, Y+7	; 0x07
    3d50:	ee 80       	ldd	r14, Y+6	; 0x06
    3d52:	fd 80       	ldd	r15, Y+5	; 0x05
    3d54:	0c 81       	ldd	r16, Y+4	; 0x04
    3d56:	1b 81       	ldd	r17, Y+3	; 0x03
    3d58:	aa 81       	ldd	r26, Y+2	; 0x02
    3d5a:	b9 81       	ldd	r27, Y+1	; 0x01
    3d5c:	ce 0f       	add	r28, r30
    3d5e:	d1 1d       	adc	r29, r1
    3d60:	0f b6       	in	r0, 0x3f	; 63
    3d62:	f8 94       	cli
    3d64:	de bf       	out	0x3e, r29	; 62
    3d66:	0f be       	out	0x3f, r0	; 63
    3d68:	cd bf       	out	0x3d, r28	; 61
    3d6a:	ed 01       	movw	r28, r26
    3d6c:	08 95       	ret

00003d6e <itoa>:
    3d6e:	fb 01       	movw	r30, r22
    3d70:	9f 01       	movw	r18, r30
    3d72:	e8 94       	clt
    3d74:	42 30       	cpi	r20, 0x02	; 2
    3d76:	c4 f0       	brlt	.+48     	; 0x3da8 <itoa+0x3a>
    3d78:	45 32       	cpi	r20, 0x25	; 37
    3d7a:	b4 f4       	brge	.+44     	; 0x3da8 <itoa+0x3a>
    3d7c:	4a 30       	cpi	r20, 0x0A	; 10
    3d7e:	29 f4       	brne	.+10     	; 0x3d8a <itoa+0x1c>
    3d80:	97 fb       	bst	r25, 7
    3d82:	1e f4       	brtc	.+6      	; 0x3d8a <itoa+0x1c>
    3d84:	90 95       	com	r25
    3d86:	81 95       	neg	r24
    3d88:	9f 4f       	sbci	r25, 0xFF	; 255
    3d8a:	64 2f       	mov	r22, r20
    3d8c:	77 27       	eor	r23, r23
    3d8e:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <__udivmodhi4>
    3d92:	80 5d       	subi	r24, 0xD0	; 208
    3d94:	8a 33       	cpi	r24, 0x3A	; 58
    3d96:	0c f0       	brlt	.+2      	; 0x3d9a <itoa+0x2c>
    3d98:	89 5d       	subi	r24, 0xD9	; 217
    3d9a:	81 93       	st	Z+, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	00 97       	sbiw	r24, 0x00	; 0
    3da0:	a1 f7       	brne	.-24     	; 0x3d8a <itoa+0x1c>
    3da2:	16 f4       	brtc	.+4      	; 0x3da8 <itoa+0x3a>
    3da4:	5d e2       	ldi	r21, 0x2D	; 45
    3da6:	51 93       	st	Z+, r21
    3da8:	10 82       	st	Z, r1
    3daa:	c9 01       	movw	r24, r18
    3dac:	0c 94 d8 1e 	jmp	0x3db0	; 0x3db0 <strrev>

00003db0 <strrev>:
    3db0:	dc 01       	movw	r26, r24
    3db2:	fc 01       	movw	r30, r24
    3db4:	67 2f       	mov	r22, r23
    3db6:	71 91       	ld	r23, Z+
    3db8:	77 23       	and	r23, r23
    3dba:	e1 f7       	brne	.-8      	; 0x3db4 <strrev+0x4>
    3dbc:	32 97       	sbiw	r30, 0x02	; 2
    3dbe:	04 c0       	rjmp	.+8      	; 0x3dc8 <strrev+0x18>
    3dc0:	7c 91       	ld	r23, X
    3dc2:	6d 93       	st	X+, r22
    3dc4:	70 83       	st	Z, r23
    3dc6:	62 91       	ld	r22, -Z
    3dc8:	ae 17       	cp	r26, r30
    3dca:	bf 07       	cpc	r27, r31
    3dcc:	c8 f3       	brcs	.-14     	; 0x3dc0 <strrev+0x10>
    3dce:	08 95       	ret

00003dd0 <__udivmodhi4>:
    3dd0:	aa 1b       	sub	r26, r26
    3dd2:	bb 1b       	sub	r27, r27
    3dd4:	51 e1       	ldi	r21, 0x11	; 17
    3dd6:	07 c0       	rjmp	.+14     	; 0x3de6 <__udivmodhi4_ep>

00003dd8 <__udivmodhi4_loop>:
    3dd8:	aa 1f       	adc	r26, r26
    3dda:	bb 1f       	adc	r27, r27
    3ddc:	a6 17       	cp	r26, r22
    3dde:	b7 07       	cpc	r27, r23
    3de0:	10 f0       	brcs	.+4      	; 0x3de6 <__udivmodhi4_ep>
    3de2:	a6 1b       	sub	r26, r22
    3de4:	b7 0b       	sbc	r27, r23

00003de6 <__udivmodhi4_ep>:
    3de6:	88 1f       	adc	r24, r24
    3de8:	99 1f       	adc	r25, r25
    3dea:	5a 95       	dec	r21
    3dec:	a9 f7       	brne	.-22     	; 0x3dd8 <__udivmodhi4_loop>
    3dee:	80 95       	com	r24
    3df0:	90 95       	com	r25
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	08 95       	ret

00003df8 <_exit>:
    3df8:	f8 94       	cli

00003dfa <__stop_program>:
    3dfa:	ff cf       	rjmp	.-2      	; 0x3dfa <__stop_program>
