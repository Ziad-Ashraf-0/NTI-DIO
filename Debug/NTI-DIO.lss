
NTI-DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00001b18  00001bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000c0  008000c0  00001c0c  2**0
                  ALLOC
  3 .stab         00001bfc  00000000  00000000  00001c0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001625  00000000  00000000  00003808  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000050dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000089c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000957b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__vector_1>
       8:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 0c 	call	0x199a	; 0x199a <main>
      8a:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_enable>:

#include "GIE_interface.h"


// Enable Global Interrupts
void GIE_enable(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
    __asm__ __volatile__ ("sei" ::);
     b4e:	78 94       	sei
}
     b50:	cf 91       	pop	r28
     b52:	df 91       	pop	r29
     b54:	08 95       	ret

00000b56 <GIE_disable>:

// Disable Global Interrupts
void GIE_disable(){
     b56:	df 93       	push	r29
     b58:	cf 93       	push	r28
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
    __asm__ __volatile__ ("cli" ::);
     b5e:	f8 94       	cli
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <EXTI_enable>:
// Array of three pointers to functions
void (*Action[3])(void) = {NULL, NULL, NULL};



void EXTI_enable(u8 Int_ID, u8 trigger){
     b66:	df 93       	push	r29
     b68:	cf 93       	push	r28
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <EXTI_enable+0x6>
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <EXTI_enable+0x8>
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	6a 83       	std	Y+2, r22	; 0x02

	if(Int_ID <= EXTI_INT1_ID){
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	88 30       	cpi	r24, 0x08	; 8
     b7a:	a0 f4       	brcc	.+40     	; 0xba4 <EXTI_enable+0x3e>
		SET_BIT(EXTI_BASE->GICR, Int_ID);
     b7c:	a4 e5       	ldi	r26, 0x54	; 84
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e4 e5       	ldi	r30, 0x54	; 84
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	87 81       	ldd	r24, Z+7	; 0x07
     b86:	48 2f       	mov	r20, r24
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	28 2f       	mov	r18, r24
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <EXTI_enable+0x32>
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	2a 95       	dec	r18
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <EXTI_enable+0x2e>
     b9c:	84 2b       	or	r24, r20
     b9e:	17 96       	adiw	r26, 0x07	; 7
     ba0:	8c 93       	st	X, r24
     ba2:	17 97       	sbiw	r26, 0x07	; 7
	}

	switch (Int_ID)
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	3c 83       	std	Y+4, r19	; 0x04
     bac:	2b 83       	std	Y+3, r18	; 0x03
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	9c 81       	ldd	r25, Y+4	; 0x04
     bb2:	86 30       	cpi	r24, 0x06	; 6
     bb4:	91 05       	cpc	r25, r1
     bb6:	59 f0       	breq	.+22     	; 0xbce <EXTI_enable+0x68>
     bb8:	2b 81       	ldd	r18, Y+3	; 0x03
     bba:	3c 81       	ldd	r19, Y+4	; 0x04
     bbc:	27 30       	cpi	r18, 0x07	; 7
     bbe:	31 05       	cpc	r19, r1
     bc0:	c9 f0       	breq	.+50     	; 0xbf4 <EXTI_enable+0x8e>
     bc2:	8b 81       	ldd	r24, Y+3	; 0x03
     bc4:	9c 81       	ldd	r25, Y+4	; 0x04
     bc6:	85 30       	cpi	r24, 0x05	; 5
     bc8:	91 05       	cpc	r25, r1
     bca:	71 f1       	breq	.+92     	; 0xc28 <EXTI_enable+0xc2>
     bcc:	48 c0       	rjmp	.+144    	; 0xc5e <EXTI_enable+0xf8>
	{
	case EXTI_INT0_ID:
		EXTI_BASE->MCUCR &= 0xFC;
     bce:	a4 e5       	ldi	r26, 0x54	; 84
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	e4 e5       	ldi	r30, 0x54	; 84
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	81 81       	ldd	r24, Z+1	; 0x01
     bd8:	8c 7f       	andi	r24, 0xFC	; 252
     bda:	11 96       	adiw	r26, 0x01	; 1
     bdc:	8c 93       	st	X, r24
		EXTI_BASE->MCUCR |= trigger;
     bde:	a4 e5       	ldi	r26, 0x54	; 84
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e4 e5       	ldi	r30, 0x54	; 84
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	89 2b       	or	r24, r25
     bec:	11 96       	adiw	r26, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	11 97       	sbiw	r26, 0x01	; 1
     bf2:	35 c0       	rjmp	.+106    	; 0xc5e <EXTI_enable+0xf8>
		break;
	case EXTI_INT1_ID:
		EXTI_BASE->MCUCR &= 0xF3;
     bf4:	a4 e5       	ldi	r26, 0x54	; 84
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e4 e5       	ldi	r30, 0x54	; 84
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	81 81       	ldd	r24, Z+1	; 0x01
     bfe:	83 7f       	andi	r24, 0xF3	; 243
     c00:	11 96       	adiw	r26, 0x01	; 1
     c02:	8c 93       	st	X, r24
		EXTI_BASE->MCUCR |= trigger << 2;
     c04:	a4 e5       	ldi	r26, 0x54	; 84
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e4 e5       	ldi	r30, 0x54	; 84
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	81 81       	ldd	r24, Z+1	; 0x01
     c0e:	28 2f       	mov	r18, r24
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	88 0f       	add	r24, r24
     c1c:	99 1f       	adc	r25, r25
     c1e:	82 2b       	or	r24, r18
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	8c 93       	st	X, r24
     c24:	11 97       	sbiw	r26, 0x01	; 1
     c26:	1b c0       	rjmp	.+54     	; 0xc5e <EXTI_enable+0xf8>
		break;
	case EXTI_INT2_ID:
		EXTI_BASE->MCUCSR &= 0xBF;
     c28:	a4 e5       	ldi	r26, 0x54	; 84
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e4 e5       	ldi	r30, 0x54	; 84
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	8f 7b       	andi	r24, 0xBF	; 191
     c34:	8c 93       	st	X, r24
		EXTI_BASE->MCUCSR |= trigger << 6;
     c36:	a4 e5       	ldi	r26, 0x54	; 84
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e4 e5       	ldi	r30, 0x54	; 84
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	28 2f       	mov	r18, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	00 24       	eor	r0, r0
     c4a:	96 95       	lsr	r25
     c4c:	87 95       	ror	r24
     c4e:	07 94       	ror	r0
     c50:	96 95       	lsr	r25
     c52:	87 95       	ror	r24
     c54:	07 94       	ror	r0
     c56:	98 2f       	mov	r25, r24
     c58:	80 2d       	mov	r24, r0
     c5a:	82 2b       	or	r24, r18
     c5c:	8c 93       	st	X, r24
		break;
	}

}
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	08 95       	ret

00000c6c <EXTI_disable>:

void EXTI_disable(u8 Int_ID)
{
     c6c:	df 93       	push	r29
     c6e:	cf 93       	push	r28
     c70:	0f 92       	push	r0
     c72:	cd b7       	in	r28, 0x3d	; 61
     c74:	de b7       	in	r29, 0x3e	; 62
     c76:	89 83       	std	Y+1, r24	; 0x01
	if(Int_ID <= EXTI_INT1_ID){
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	88 30       	cpi	r24, 0x08	; 8
     c7c:	b0 f4       	brcc	.+44     	; 0xcaa <EXTI_disable+0x3e>
		CLR_BIT(EXTI_BASE->GICR, Int_ID);
     c7e:	a4 e5       	ldi	r26, 0x54	; 84
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e4 e5       	ldi	r30, 0x54	; 84
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	87 81       	ldd	r24, Z+7	; 0x07
     c88:	48 2f       	mov	r20, r24
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	28 2f       	mov	r18, r24
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	02 2e       	mov	r0, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <EXTI_disable+0x30>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <EXTI_disable+0x2c>
     ca0:	80 95       	com	r24
     ca2:	84 23       	and	r24, r20
     ca4:	17 96       	adiw	r26, 0x07	; 7
     ca6:	8c 93       	st	X, r24
     ca8:	17 97       	sbiw	r26, 0x07	; 7
	}
}
     caa:	0f 90       	pop	r0
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <EXTI_setCallBack>:

void EXTI_setCallBack(u8 Int_ID, void (*localPtr)(void))
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	00 d0       	rcall	.+0      	; 0xcb8 <EXTI_setCallBack+0x6>
     cb8:	00 d0       	rcall	.+0      	; 0xcba <EXTI_setCallBack+0x8>
     cba:	0f 92       	push	r0
     cbc:	cd b7       	in	r28, 0x3d	; 61
     cbe:	de b7       	in	r29, 0x3e	; 62
     cc0:	89 83       	std	Y+1, r24	; 0x01
     cc2:	7b 83       	std	Y+3, r23	; 0x03
     cc4:	6a 83       	std	Y+2, r22	; 0x02
	switch (Int_ID)
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	3d 83       	std	Y+5, r19	; 0x05
     cce:	2c 83       	std	Y+4, r18	; 0x04
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	9d 81       	ldd	r25, Y+5	; 0x05
     cd4:	86 30       	cpi	r24, 0x06	; 6
     cd6:	91 05       	cpc	r25, r1
     cd8:	59 f0       	breq	.+22     	; 0xcf0 <EXTI_setCallBack+0x3e>
     cda:	2c 81       	ldd	r18, Y+4	; 0x04
     cdc:	3d 81       	ldd	r19, Y+5	; 0x05
     cde:	27 30       	cpi	r18, 0x07	; 7
     ce0:	31 05       	cpc	r19, r1
     ce2:	69 f0       	breq	.+26     	; 0xcfe <EXTI_setCallBack+0x4c>
     ce4:	8c 81       	ldd	r24, Y+4	; 0x04
     ce6:	9d 81       	ldd	r25, Y+5	; 0x05
     ce8:	85 30       	cpi	r24, 0x05	; 5
     cea:	91 05       	cpc	r25, r1
     cec:	79 f0       	breq	.+30     	; 0xd0c <EXTI_setCallBack+0x5a>
     cee:	14 c0       	rjmp	.+40     	; 0xd18 <EXTI_setCallBack+0x66>
	{
	case EXTI_INT0_ID:
		Action[0] = localPtr;
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	90 93 c1 00 	sts	0x00C1, r25
     cf8:	80 93 c0 00 	sts	0x00C0, r24
     cfc:	0d c0       	rjmp	.+26     	; 0xd18 <EXTI_setCallBack+0x66>
		break;
	case EXTI_INT1_ID:
		Action[1] = localPtr;
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	90 93 c3 00 	sts	0x00C3, r25
     d06:	80 93 c2 00 	sts	0x00C2, r24
     d0a:	06 c0       	rjmp	.+12     	; 0xd18 <EXTI_setCallBack+0x66>
		break;
	case EXTI_INT2_ID:
		Action[2] = localPtr;
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	9b 81       	ldd	r25, Y+3	; 0x03
     d10:	90 93 c5 00 	sts	0x00C5, r25
     d14:	80 93 c4 00 	sts	0x00C4, r24
		break;
	}
}
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <__vector_1>:

void __vector_1 (void){
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
	if(Action[0]!= NULL){
     d52:	80 91 c0 00 	lds	r24, 0x00C0
     d56:	90 91 c1 00 	lds	r25, 0x00C1
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	29 f0       	breq	.+10     	; 0xd68 <__vector_1+0x40>
		Action[0]();
     d5e:	e0 91 c0 00 	lds	r30, 0x00C0
     d62:	f0 91 c1 00 	lds	r31, 0x00C1
     d66:	09 95       	icall
	}
}
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	7f 91       	pop	r23
     d7a:	6f 91       	pop	r22
     d7c:	5f 91       	pop	r21
     d7e:	4f 91       	pop	r20
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <__vector_2>:

void __vector_2 (void){
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	2f 93       	push	r18
     d9a:	3f 93       	push	r19
     d9c:	4f 93       	push	r20
     d9e:	5f 93       	push	r21
     da0:	6f 93       	push	r22
     da2:	7f 93       	push	r23
     da4:	8f 93       	push	r24
     da6:	9f 93       	push	r25
     da8:	af 93       	push	r26
     daa:	bf 93       	push	r27
     dac:	ef 93       	push	r30
     dae:	ff 93       	push	r31
     db0:	df 93       	push	r29
     db2:	cf 93       	push	r28
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
	if(Action[1]!= NULL){
     db8:	80 91 c2 00 	lds	r24, 0x00C2
     dbc:	90 91 c3 00 	lds	r25, 0x00C3
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	29 f0       	breq	.+10     	; 0xdce <__vector_2+0x40>
		Action[1]();
     dc4:	e0 91 c2 00 	lds	r30, 0x00C2
     dc8:	f0 91 c3 00 	lds	r31, 0x00C3
     dcc:	09 95       	icall
	}
}
     dce:	cf 91       	pop	r28
     dd0:	df 91       	pop	r29
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	7f 91       	pop	r23
     de0:	6f 91       	pop	r22
     de2:	5f 91       	pop	r21
     de4:	4f 91       	pop	r20
     de6:	3f 91       	pop	r19
     de8:	2f 91       	pop	r18
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <__vector_18>:

void __vector_18 (void){
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
     dfe:	2f 93       	push	r18
     e00:	3f 93       	push	r19
     e02:	4f 93       	push	r20
     e04:	5f 93       	push	r21
     e06:	6f 93       	push	r22
     e08:	7f 93       	push	r23
     e0a:	8f 93       	push	r24
     e0c:	9f 93       	push	r25
     e0e:	af 93       	push	r26
     e10:	bf 93       	push	r27
     e12:	ef 93       	push	r30
     e14:	ff 93       	push	r31
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	if(Action[2]!= NULL){
     e1e:	80 91 c4 00 	lds	r24, 0x00C4
     e22:	90 91 c5 00 	lds	r25, 0x00C5
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	29 f0       	breq	.+10     	; 0xe34 <__vector_18+0x40>
		Action[2]();
     e2a:	e0 91 c4 00 	lds	r30, 0x00C4
     e2e:	f0 91 c5 00 	lds	r31, 0x00C5
     e32:	09 95       	icall
	}
}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	ff 91       	pop	r31
     e3a:	ef 91       	pop	r30
     e3c:	bf 91       	pop	r27
     e3e:	af 91       	pop	r26
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	7f 91       	pop	r23
     e46:	6f 91       	pop	r22
     e48:	5f 91       	pop	r21
     e4a:	4f 91       	pop	r20
     e4c:	3f 91       	pop	r19
     e4e:	2f 91       	pop	r18
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <DIO_U8SetPortDirection>:
/***********************************************************************************/
/* 							PUBLIC FUNCTIONS IMPLEMENTATION						   */
/***********************************************************************************/

u8 DIO_U8SetPortDirection (const DIO_Config* config)
{
     e5a:	df 93       	push	r29
     e5c:	cf 93       	push	r28
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <DIO_U8SetPortDirection+0x6>
     e60:	0f 92       	push	r0
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	9a 83       	std	Y+2, r25	; 0x02
     e68:	89 83       	std	Y+1, r24	; 0x01
	if (config->port <= DIO_PORTD)
     e6a:	e9 81       	ldd	r30, Y+1	; 0x01
     e6c:	fa 81       	ldd	r31, Y+2	; 0x02
     e6e:	80 81       	ld	r24, Z
     e70:	84 30       	cpi	r24, 0x04	; 4
     e72:	70 f5       	brcc	.+92     	; 0xed0 <DIO_U8SetPortDirection+0x76>
	{
		if (config->pin == DIO_PORT_INPUT)
     e74:	e9 81       	ldd	r30, Y+1	; 0x01
     e76:	fa 81       	ldd	r31, Y+2	; 0x02
     e78:	81 81       	ldd	r24, Z+1	; 0x01
     e7a:	88 23       	and	r24, r24
     e7c:	81 f4       	brne	.+32     	; 0xe9e <DIO_U8SetPortDirection+0x44>
		{
			*directionRegisters[config->port] = DIO_PORT_INPUT;
     e7e:	e9 81       	ldd	r30, Y+1	; 0x01
     e80:	fa 81       	ldd	r31, Y+2	; 0x02
     e82:	80 81       	ld	r24, Z
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	fc 01       	movw	r30, r24
     e8e:	e8 59       	subi	r30, 0x98	; 152
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	01 90       	ld	r0, Z+
     e94:	f0 81       	ld	r31, Z
     e96:	e0 2d       	mov	r30, r0
     e98:	10 82       	st	Z, r1
			return NO_ERROR;
     e9a:	1b 82       	std	Y+3, r1	; 0x03
     e9c:	1b c0       	rjmp	.+54     	; 0xed4 <DIO_U8SetPortDirection+0x7a>
		}
		else if (config->pin == DIO_PORT_OUTPUT)
     e9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ea0:	fa 81       	ldd	r31, Y+2	; 0x02
     ea2:	81 81       	ldd	r24, Z+1	; 0x01
     ea4:	8f 3f       	cpi	r24, 0xFF	; 255
     ea6:	89 f4       	brne	.+34     	; 0xeca <DIO_U8SetPortDirection+0x70>
		{
			*directionRegisters[config->port] = DIO_PORT_OUTPUT;
     ea8:	e9 81       	ldd	r30, Y+1	; 0x01
     eaa:	fa 81       	ldd	r31, Y+2	; 0x02
     eac:	80 81       	ld	r24, Z
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	fc 01       	movw	r30, r24
     eb8:	e8 59       	subi	r30, 0x98	; 152
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	01 90       	ld	r0, Z+
     ebe:	f0 81       	ld	r31, Z
     ec0:	e0 2d       	mov	r30, r0
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	80 83       	st	Z, r24
			return NO_ERROR;
     ec6:	1b 82       	std	Y+3, r1	; 0x03
     ec8:	05 c0       	rjmp	.+10     	; 0xed4 <DIO_U8SetPortDirection+0x7a>
		}
		else
		{
			return ERROR;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	8b 83       	std	Y+3, r24	; 0x03
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_U8SetPortDirection+0x7a>
		}
	}
	else
	{
		return ERROR;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	8b 83       	std	Y+3, r24	; 0x03
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <DIO_U8SetPinDirection>:

u8 DIO_U8SetPinDirection (const DIO_Config* config)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <DIO_U8SetPinDirection+0x6>
     ee8:	0f 92       	push	r0
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	9a 83       	std	Y+2, r25	; 0x02
     ef0:	89 83       	std	Y+1, r24	; 0x01
	if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7)
     ef2:	e9 81       	ldd	r30, Y+1	; 0x01
     ef4:	fa 81       	ldd	r31, Y+2	; 0x02
     ef6:	80 81       	ld	r24, Z
     ef8:	84 30       	cpi	r24, 0x04	; 4
     efa:	08 f0       	brcs	.+2      	; 0xefe <DIO_U8SetPinDirection+0x1c>
     efc:	6c c0       	rjmp	.+216    	; 0xfd6 <DIO_U8SetPinDirection+0xf4>
     efe:	e9 81       	ldd	r30, Y+1	; 0x01
     f00:	fa 81       	ldd	r31, Y+2	; 0x02
     f02:	81 81       	ldd	r24, Z+1	; 0x01
     f04:	88 30       	cpi	r24, 0x08	; 8
     f06:	08 f0       	brcs	.+2      	; 0xf0a <DIO_U8SetPinDirection+0x28>
     f08:	66 c0       	rjmp	.+204    	; 0xfd6 <DIO_U8SetPinDirection+0xf4>
	{
		if (config->direction == DIO_PIN_INPUT)
     f0a:	e9 81       	ldd	r30, Y+1	; 0x01
     f0c:	fa 81       	ldd	r31, Y+2	; 0x02
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	88 23       	and	r24, r24
     f12:	69 f5       	brne	.+90     	; 0xf6e <DIO_U8SetPinDirection+0x8c>
		{
			CLR_BIT( *directionRegisters[config->port], config->pin );
     f14:	e9 81       	ldd	r30, Y+1	; 0x01
     f16:	fa 81       	ldd	r31, Y+2	; 0x02
     f18:	80 81       	ld	r24, Z
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	fc 01       	movw	r30, r24
     f24:	e8 59       	subi	r30, 0x98	; 152
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	a0 81       	ld	r26, Z
     f2a:	b1 81       	ldd	r27, Z+1	; 0x01
     f2c:	e9 81       	ldd	r30, Y+1	; 0x01
     f2e:	fa 81       	ldd	r31, Y+2	; 0x02
     f30:	80 81       	ld	r24, Z
     f32:	88 2f       	mov	r24, r24
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	fc 01       	movw	r30, r24
     f3c:	e8 59       	subi	r30, 0x98	; 152
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	01 90       	ld	r0, Z+
     f42:	f0 81       	ld	r31, Z
     f44:	e0 2d       	mov	r30, r0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	e9 81       	ldd	r30, Y+1	; 0x01
     f4c:	fa 81       	ldd	r31, Y+2	; 0x02
     f4e:	81 81       	ldd	r24, Z+1	; 0x01
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_U8SetPinDirection+0x7e>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_U8SetPinDirection+0x7a>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
			return NO_ERROR;
     f6a:	1b 82       	std	Y+3, r1	; 0x03
     f6c:	36 c0       	rjmp	.+108    	; 0xfda <DIO_U8SetPinDirection+0xf8>
		}
		else if (config->direction == DIO_PIN_OUTPUT)
     f6e:	e9 81       	ldd	r30, Y+1	; 0x01
     f70:	fa 81       	ldd	r31, Y+2	; 0x02
     f72:	82 81       	ldd	r24, Z+2	; 0x02
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	61 f5       	brne	.+88     	; 0xfd0 <DIO_U8SetPinDirection+0xee>
		{
			SET_BIT( *directionRegisters[config->port], config->pin );
     f78:	e9 81       	ldd	r30, Y+1	; 0x01
     f7a:	fa 81       	ldd	r31, Y+2	; 0x02
     f7c:	80 81       	ld	r24, Z
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	fc 01       	movw	r30, r24
     f88:	e8 59       	subi	r30, 0x98	; 152
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	a0 81       	ld	r26, Z
     f8e:	b1 81       	ldd	r27, Z+1	; 0x01
     f90:	e9 81       	ldd	r30, Y+1	; 0x01
     f92:	fa 81       	ldd	r31, Y+2	; 0x02
     f94:	80 81       	ld	r24, Z
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	fc 01       	movw	r30, r24
     fa0:	e8 59       	subi	r30, 0x98	; 152
     fa2:	ff 4f       	sbci	r31, 0xFF	; 255
     fa4:	01 90       	ld	r0, Z+
     fa6:	f0 81       	ld	r31, Z
     fa8:	e0 2d       	mov	r30, r0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	e9 81       	ldd	r30, Y+1	; 0x01
     fb0:	fa 81       	ldd	r31, Y+2	; 0x02
     fb2:	81 81       	ldd	r24, Z+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_U8SetPinDirection+0xe2>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_U8SetPinDirection+0xde>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
			return NO_ERROR;
     fcc:	1b 82       	std	Y+3, r1	; 0x03
     fce:	05 c0       	rjmp	.+10     	; 0xfda <DIO_U8SetPinDirection+0xf8>
		}
		else
		{
			return ERROR;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_U8SetPinDirection+0xf8>
		}
	}
	else
	{
		return ERROR;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	8b 83       	std	Y+3, r24	; 0x03
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <DIO_U8SetPortValue>:

u8 DIO_U8SetPortValue(const DIO_Config* config) {
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <DIO_U8SetPortValue+0x6>
     fee:	0f 92       	push	r0
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
    if (config != NULL) {
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	d1 f0       	breq	.+52     	; 0x1034 <DIO_U8SetPortValue+0x4c>
        if (config->port <= DIO_PORTD) {
    1000:	e9 81       	ldd	r30, Y+1	; 0x01
    1002:	fa 81       	ldd	r31, Y+2	; 0x02
    1004:	80 81       	ld	r24, Z
    1006:	84 30       	cpi	r24, 0x04	; 4
    1008:	90 f4       	brcc	.+36     	; 0x102e <DIO_U8SetPortValue+0x46>
            *writeRegisters[config->port] = config->value;
    100a:	e9 81       	ldd	r30, Y+1	; 0x01
    100c:	fa 81       	ldd	r31, Y+2	; 0x02
    100e:	80 81       	ld	r24, Z
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	fc 01       	movw	r30, r24
    101a:	e0 59       	subi	r30, 0x90	; 144
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	a0 81       	ld	r26, Z
    1020:	b1 81       	ldd	r27, Z+1	; 0x01
    1022:	e9 81       	ldd	r30, Y+1	; 0x01
    1024:	fa 81       	ldd	r31, Y+2	; 0x02
    1026:	83 81       	ldd	r24, Z+3	; 0x03
    1028:	8c 93       	st	X, r24
            return NO_ERROR;
    102a:	1b 82       	std	Y+3, r1	; 0x03
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <DIO_U8SetPortValue+0x50>
        } else {
            return ERROR;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	8b 83       	std	Y+3, r24	; 0x03
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_U8SetPortValue+0x50>
        }
    } else {
        return ERROR;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	8b 83       	std	Y+3, r24	; 0x03
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(const DIO_Config* config) {
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <DIO_U8SetPinValue+0x6>
    104c:	0f 92       	push	r0
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	89 83       	std	Y+1, r24	; 0x01
    if (config != NULL) {
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	09 f4       	brne	.+2      	; 0x1060 <DIO_U8SetPinValue+0x1a>
    105e:	75 c0       	rjmp	.+234    	; 0x114a <DIO_U8SetPinValue+0x104>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
    1060:	e9 81       	ldd	r30, Y+1	; 0x01
    1062:	fa 81       	ldd	r31, Y+2	; 0x02
    1064:	80 81       	ld	r24, Z
    1066:	84 30       	cpi	r24, 0x04	; 4
    1068:	08 f0       	brcs	.+2      	; 0x106c <DIO_U8SetPinValue+0x26>
    106a:	6c c0       	rjmp	.+216    	; 0x1144 <DIO_U8SetPinValue+0xfe>
    106c:	e9 81       	ldd	r30, Y+1	; 0x01
    106e:	fa 81       	ldd	r31, Y+2	; 0x02
    1070:	81 81       	ldd	r24, Z+1	; 0x01
    1072:	88 30       	cpi	r24, 0x08	; 8
    1074:	08 f0       	brcs	.+2      	; 0x1078 <DIO_U8SetPinValue+0x32>
    1076:	66 c0       	rjmp	.+204    	; 0x1144 <DIO_U8SetPinValue+0xfe>
            if (config->value == DIO_PIN_HIGH) {
    1078:	e9 81       	ldd	r30, Y+1	; 0x01
    107a:	fa 81       	ldd	r31, Y+2	; 0x02
    107c:	83 81       	ldd	r24, Z+3	; 0x03
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	61 f5       	brne	.+88     	; 0x10da <DIO_U8SetPinValue+0x94>
                SET_BIT(*writeRegisters[config->port], config->pin);
    1082:	e9 81       	ldd	r30, Y+1	; 0x01
    1084:	fa 81       	ldd	r31, Y+2	; 0x02
    1086:	80 81       	ld	r24, Z
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	fc 01       	movw	r30, r24
    1092:	e0 59       	subi	r30, 0x90	; 144
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	a0 81       	ld	r26, Z
    1098:	b1 81       	ldd	r27, Z+1	; 0x01
    109a:	e9 81       	ldd	r30, Y+1	; 0x01
    109c:	fa 81       	ldd	r31, Y+2	; 0x02
    109e:	80 81       	ld	r24, Z
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	fc 01       	movw	r30, r24
    10aa:	e0 59       	subi	r30, 0x90	; 144
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	01 90       	ld	r0, Z+
    10b0:	f0 81       	ld	r31, Z
    10b2:	e0 2d       	mov	r30, r0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ba:	fa 81       	ldd	r31, Y+2	; 0x02
    10bc:	81 81       	ldd	r24, Z+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_U8SetPinValue+0x88>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_U8SetPinValue+0x84>
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
                return NO_ERROR;
    10d6:	1b 82       	std	Y+3, r1	; 0x03
    10d8:	3a c0       	rjmp	.+116    	; 0x114e <DIO_U8SetPinValue+0x108>
            } else if (config->value == DIO_PIN_LOW) {
    10da:	e9 81       	ldd	r30, Y+1	; 0x01
    10dc:	fa 81       	ldd	r31, Y+2	; 0x02
    10de:	83 81       	ldd	r24, Z+3	; 0x03
    10e0:	88 23       	and	r24, r24
    10e2:	69 f5       	brne	.+90     	; 0x113e <DIO_U8SetPinValue+0xf8>
                CLR_BIT(*writeRegisters[config->port], config->pin);
    10e4:	e9 81       	ldd	r30, Y+1	; 0x01
    10e6:	fa 81       	ldd	r31, Y+2	; 0x02
    10e8:	80 81       	ld	r24, Z
    10ea:	88 2f       	mov	r24, r24
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	fc 01       	movw	r30, r24
    10f4:	e0 59       	subi	r30, 0x90	; 144
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	a0 81       	ld	r26, Z
    10fa:	b1 81       	ldd	r27, Z+1	; 0x01
    10fc:	e9 81       	ldd	r30, Y+1	; 0x01
    10fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1100:	80 81       	ld	r24, Z
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	fc 01       	movw	r30, r24
    110c:	e0 59       	subi	r30, 0x90	; 144
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	01 90       	ld	r0, Z+
    1112:	f0 81       	ld	r31, Z
    1114:	e0 2d       	mov	r30, r0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	e9 81       	ldd	r30, Y+1	; 0x01
    111c:	fa 81       	ldd	r31, Y+2	; 0x02
    111e:	81 81       	ldd	r24, Z+1	; 0x01
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_U8SetPinValue+0xea>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_U8SetPinValue+0xe6>
    1134:	80 95       	com	r24
    1136:	84 23       	and	r24, r20
    1138:	8c 93       	st	X, r24
                return NO_ERROR;
    113a:	1b 82       	std	Y+3, r1	; 0x03
    113c:	08 c0       	rjmp	.+16     	; 0x114e <DIO_U8SetPinValue+0x108>
            } else {
                return ERROR;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	8b 83       	std	Y+3, r24	; 0x03
    1142:	05 c0       	rjmp	.+10     	; 0x114e <DIO_U8SetPinValue+0x108>
            }
        } else {
            return ERROR;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	8b 83       	std	Y+3, r24	; 0x03
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_U8SetPinValue+0x108>
        }
    } else {
        return ERROR;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	8b 83       	std	Y+3, r24	; 0x03
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <DIO_U8TogglePin>:

u8 DIO_U8TogglePin(const DIO_Config* config) {
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <DIO_U8TogglePin+0x6>
    1162:	0f 92       	push	r0
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	9a 83       	std	Y+2, r25	; 0x02
    116a:	89 83       	std	Y+1, r24	; 0x01
    if (config != NULL) {
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	c9 f1       	breq	.+114    	; 0x11e6 <DIO_U8TogglePin+0x8a>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
    1174:	e9 81       	ldd	r30, Y+1	; 0x01
    1176:	fa 81       	ldd	r31, Y+2	; 0x02
    1178:	80 81       	ld	r24, Z
    117a:	84 30       	cpi	r24, 0x04	; 4
    117c:	88 f5       	brcc	.+98     	; 0x11e0 <DIO_U8TogglePin+0x84>
    117e:	e9 81       	ldd	r30, Y+1	; 0x01
    1180:	fa 81       	ldd	r31, Y+2	; 0x02
    1182:	81 81       	ldd	r24, Z+1	; 0x01
    1184:	88 30       	cpi	r24, 0x08	; 8
    1186:	60 f5       	brcc	.+88     	; 0x11e0 <DIO_U8TogglePin+0x84>
            TOG_BIT(*writeRegisters[config->port], config->pin);
    1188:	e9 81       	ldd	r30, Y+1	; 0x01
    118a:	fa 81       	ldd	r31, Y+2	; 0x02
    118c:	80 81       	ld	r24, Z
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	fc 01       	movw	r30, r24
    1198:	e0 59       	subi	r30, 0x90	; 144
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	a0 81       	ld	r26, Z
    119e:	b1 81       	ldd	r27, Z+1	; 0x01
    11a0:	e9 81       	ldd	r30, Y+1	; 0x01
    11a2:	fa 81       	ldd	r31, Y+2	; 0x02
    11a4:	80 81       	ld	r24, Z
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	fc 01       	movw	r30, r24
    11b0:	e0 59       	subi	r30, 0x90	; 144
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	01 90       	ld	r0, Z+
    11b6:	f0 81       	ld	r31, Z
    11b8:	e0 2d       	mov	r30, r0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	e9 81       	ldd	r30, Y+1	; 0x01
    11c0:	fa 81       	ldd	r31, Y+2	; 0x02
    11c2:	81 81       	ldd	r24, Z+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_U8TogglePin+0x78>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_U8TogglePin+0x74>
    11d8:	84 27       	eor	r24, r20
    11da:	8c 93       	st	X, r24
            return NO_ERROR;
    11dc:	1b 82       	std	Y+3, r1	; 0x03
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <DIO_U8TogglePin+0x8e>
        } else {
            return ERROR;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_U8TogglePin+0x8e>
        }
    } else {
        return ERROR;
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	8b 83       	std	Y+3, r24	; 0x03
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <DIO_U8TogglePort>:

u8 DIO_U8TogglePort(DIO_Port port) {
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <DIO_U8TogglePort+0x6>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01
    if (port <= DIO_PORTD) {
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	84 30       	cpi	r24, 0x04	; 4
    1208:	d0 f4       	brcc	.+52     	; 0x123e <DIO_U8TogglePort+0x46>
        *writeRegisters[port] = ~(*writeRegisters[port]);
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	fc 01       	movw	r30, r24
    1216:	e0 59       	subi	r30, 0x90	; 144
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	a0 81       	ld	r26, Z
    121c:	b1 81       	ldd	r27, Z+1	; 0x01
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	fc 01       	movw	r30, r24
    122a:	e0 59       	subi	r30, 0x90	; 144
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	01 90       	ld	r0, Z+
    1230:	f0 81       	ld	r31, Z
    1232:	e0 2d       	mov	r30, r0
    1234:	80 81       	ld	r24, Z
    1236:	80 95       	com	r24
    1238:	8c 93       	st	X, r24
        return NO_ERROR;
    123a:	1a 82       	std	Y+2, r1	; 0x02
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_U8TogglePort+0x4a>
    } else {
        return ERROR;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	8a 83       	std	Y+2, r24	; 0x02
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    }
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(const DIO_Config* config, u8* value) {
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <DIO_U8GetPinValue+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <DIO_U8GetPinValue+0x8>
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	9a 83       	std	Y+2, r25	; 0x02
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	7c 83       	std	Y+4, r23	; 0x04
    1262:	6b 83       	std	Y+3, r22	; 0x03
    if (config != NULL && value != NULL) {
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	9a 81       	ldd	r25, Y+2	; 0x02
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	99 f1       	breq	.+102    	; 0x12d2 <DIO_U8GetPinValue+0x84>
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	79 f1       	breq	.+94     	; 0x12d2 <DIO_U8GetPinValue+0x84>
        if (config->port <= DIO_PORTD && config->pin <= DIO_PIN7) {
    1274:	e9 81       	ldd	r30, Y+1	; 0x01
    1276:	fa 81       	ldd	r31, Y+2	; 0x02
    1278:	80 81       	ld	r24, Z
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	38 f5       	brcc	.+78     	; 0x12cc <DIO_U8GetPinValue+0x7e>
    127e:	e9 81       	ldd	r30, Y+1	; 0x01
    1280:	fa 81       	ldd	r31, Y+2	; 0x02
    1282:	81 81       	ldd	r24, Z+1	; 0x01
    1284:	88 30       	cpi	r24, 0x08	; 8
    1286:	10 f5       	brcc	.+68     	; 0x12cc <DIO_U8GetPinValue+0x7e>
            *value = GET_BIT(*readRegisters[config->port], config->pin);
    1288:	e9 81       	ldd	r30, Y+1	; 0x01
    128a:	fa 81       	ldd	r31, Y+2	; 0x02
    128c:	80 81       	ld	r24, Z
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	fc 01       	movw	r30, r24
    1298:	e8 58       	subi	r30, 0x88	; 136
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	01 90       	ld	r0, Z+
    129e:	f0 81       	ld	r31, Z
    12a0:	e0 2d       	mov	r30, r0
    12a2:	80 81       	ld	r24, Z
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	e9 81       	ldd	r30, Y+1	; 0x01
    12aa:	fa 81       	ldd	r31, Y+2	; 0x02
    12ac:	81 81       	ldd	r24, Z+1	; 0x01
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	a9 01       	movw	r20, r18
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <DIO_U8GetPinValue+0x6c>
    12b6:	55 95       	asr	r21
    12b8:	47 95       	ror	r20
    12ba:	8a 95       	dec	r24
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <DIO_U8GetPinValue+0x68>
    12be:	ca 01       	movw	r24, r20
    12c0:	81 70       	andi	r24, 0x01	; 1
    12c2:	eb 81       	ldd	r30, Y+3	; 0x03
    12c4:	fc 81       	ldd	r31, Y+4	; 0x04
    12c6:	80 83       	st	Z, r24
            return NO_ERROR;
    12c8:	1d 82       	std	Y+5, r1	; 0x05
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <DIO_U8GetPinValue+0x88>
        } else {
            return ERROR;
    12cc:	51 e0       	ldi	r21, 0x01	; 1
    12ce:	5d 83       	std	Y+5, r21	; 0x05
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_U8GetPinValue+0x88>
        }
    } else {
        return ERROR;
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    }
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <DIO_U8GetPortValue>:

u8 DIO_U8GetPortValue(DIO_Port port, u8* value) {
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <DIO_U8GetPortValue+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <DIO_U8GetPortValue+0x8>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	7b 83       	std	Y+3, r23	; 0x03
    12f8:	6a 83       	std	Y+2, r22	; 0x02
    if (value != NULL) {
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	b9 f0       	breq	.+46     	; 0x1330 <DIO_U8GetPortValue+0x48>
        if (port <= DIO_PORTD) {
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	88 f4       	brcc	.+34     	; 0x132a <DIO_U8GetPortValue+0x42>
            *value = *readRegisters[port];
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	fc 01       	movw	r30, r24
    1314:	e8 58       	subi	r30, 0x88	; 136
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	01 90       	ld	r0, Z+
    131a:	f0 81       	ld	r31, Z
    131c:	e0 2d       	mov	r30, r0
    131e:	80 81       	ld	r24, Z
    1320:	ea 81       	ldd	r30, Y+2	; 0x02
    1322:	fb 81       	ldd	r31, Y+3	; 0x03
    1324:	80 83       	st	Z, r24
            return NO_ERROR;
    1326:	1c 82       	std	Y+4, r1	; 0x04
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <DIO_U8GetPortValue+0x4c>
        } else {
            return ERROR;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	8c 83       	std	Y+4, r24	; 0x04
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_U8GetPortValue+0x4c>
        }
    } else {
        return ERROR;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	8c 83       	std	Y+4, r24	; 0x04
    1334:	8c 81       	ldd	r24, Y+4	; 0x04
    }
}
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <segment_Init>:
#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_Interface.h"

#include "segment.h"

void segment_Init() {
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	a1 97       	sbiw	r28, 0x21	; 33
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
        {DIO_PORTB, DIO_PIN4, DIO_PIN_OUTPUT},
        {DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT},
        {DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT},
        {DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT},
        {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT}
    };
    1358:	80 e2       	ldi	r24, 0x20	; 32
    135a:	fe 01       	movw	r30, r28
    135c:	32 96       	adiw	r30, 0x02	; 2
    135e:	df 01       	movw	r26, r30
    1360:	98 2f       	mov	r25, r24
    1362:	1d 92       	st	X+, r1
    1364:	9a 95       	dec	r25
    1366:	e9 f7       	brne	.-6      	; 0x1362 <segment_Init+0x1e>
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	8a 83       	std	Y+2, r24	; 0x02
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	8c 83       	std	Y+4, r24	; 0x04
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	8e 83       	std	Y+6, r24	; 0x06
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	8f 83       	std	Y+7, r24	; 0x07
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	88 87       	std	Y+8, r24	; 0x08
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	8a 87       	std	Y+10, r24	; 0x0a
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	8b 87       	std	Y+11, r24	; 0x0b
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	8c 87       	std	Y+12, r24	; 0x0c
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	8e 87       	std	Y+14, r24	; 0x0e
    138c:	84 e0       	ldi	r24, 0x04	; 4
    138e:	8f 87       	std	Y+15, r24	; 0x0f
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	88 8b       	std	Y+16, r24	; 0x10
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	8a 8b       	std	Y+18, r24	; 0x12
    1398:	86 e0       	ldi	r24, 0x06	; 6
    139a:	8b 8b       	std	Y+19, r24	; 0x13
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	8c 8b       	std	Y+20, r24	; 0x14
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	8e 8b       	std	Y+22, r24	; 0x16
    13a4:	85 e0       	ldi	r24, 0x05	; 5
    13a6:	8f 8b       	std	Y+23, r24	; 0x17
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	88 8f       	std	Y+24, r24	; 0x18
    13ac:	82 e0       	ldi	r24, 0x02	; 2
    13ae:	8b 8f       	std	Y+27, r24	; 0x1b
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	8c 8f       	std	Y+28, r24	; 0x1c
    13b4:	83 e0       	ldi	r24, 0x03	; 3
    13b6:	8f 8f       	std	Y+31, r24	; 0x1f
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	88 a3       	std	Y+32, r24	; 0x20

    // Initialize the segment pins
    for (u8 i = 0; i < 4; i++) {
    13bc:	19 82       	std	Y+1, r1	; 0x01
    13be:	11 c0       	rjmp	.+34     	; 0x13e2 <segment_Init+0x9e>
        DIO_U8SetPinDirection(&segmentPins[i]);
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	88 2f       	mov	r24, r24
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9c 01       	movw	r18, r24
    13c8:	22 0f       	add	r18, r18
    13ca:	33 1f       	adc	r19, r19
    13cc:	22 0f       	add	r18, r18
    13ce:	33 1f       	adc	r19, r19
    13d0:	ce 01       	movw	r24, r28
    13d2:	02 96       	adiw	r24, 0x02	; 2
    13d4:	82 0f       	add	r24, r18
    13d6:	93 1f       	adc	r25, r19
    13d8:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
        {DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT},
        {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT}
    };

    // Initialize the segment pins
    for (u8 i = 0; i < 4; i++) {
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	8f 5f       	subi	r24, 0xFF	; 255
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	84 30       	cpi	r24, 0x04	; 4
    13e6:	60 f3       	brcs	.-40     	; 0x13c0 <segment_Init+0x7c>
        DIO_U8SetPinDirection(&segmentPins[i]);
    }
}
    13e8:	a1 96       	adiw	r28, 0x21	; 33
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <segment_Num>:

void segment_Num(u8 num, u8 segmentNum) {
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	c4 54       	subi	r28, 0x44	; 68
    1404:	d0 40       	sbci	r29, 0x00	; 0
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	8c ab       	std	Y+52, r24	; 0x34
    1412:	6d ab       	std	Y+53, r22	; 0x35
	DIO_Config clearPins[] = {
	    {DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
	    {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
	    {DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
	    {DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT, DIO_PIN_HIGH}
	};
    1414:	ae 01       	movw	r20, r28
    1416:	4c 5f       	subi	r20, 0xFC	; 252
    1418:	5f 4f       	sbci	r21, 0xFF	; 255
    141a:	5f ab       	std	Y+55, r21	; 0x37
    141c:	4e ab       	std	Y+54, r20	; 0x36
    141e:	80 ea       	ldi	r24, 0xA0	; 160
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	99 af       	std	Y+57, r25	; 0x39
    1424:	88 af       	std	Y+56, r24	; 0x38
    1426:	90 e1       	ldi	r25, 0x10	; 16
    1428:	9a af       	std	Y+58, r25	; 0x3a
    142a:	e8 ad       	ldd	r30, Y+56	; 0x38
    142c:	f9 ad       	ldd	r31, Y+57	; 0x39
    142e:	00 80       	ld	r0, Z
    1430:	48 ad       	ldd	r20, Y+56	; 0x38
    1432:	59 ad       	ldd	r21, Y+57	; 0x39
    1434:	4f 5f       	subi	r20, 0xFF	; 255
    1436:	5f 4f       	sbci	r21, 0xFF	; 255
    1438:	59 af       	std	Y+57, r21	; 0x39
    143a:	48 af       	std	Y+56, r20	; 0x38
    143c:	ee a9       	ldd	r30, Y+54	; 0x36
    143e:	ff a9       	ldd	r31, Y+55	; 0x37
    1440:	00 82       	st	Z, r0
    1442:	4e a9       	ldd	r20, Y+54	; 0x36
    1444:	5f a9       	ldd	r21, Y+55	; 0x37
    1446:	4f 5f       	subi	r20, 0xFF	; 255
    1448:	5f 4f       	sbci	r21, 0xFF	; 255
    144a:	5f ab       	std	Y+55, r21	; 0x37
    144c:	4e ab       	std	Y+54, r20	; 0x36
    144e:	5a ad       	ldd	r21, Y+58	; 0x3a
    1450:	51 50       	subi	r21, 0x01	; 1
    1452:	5a af       	std	Y+58, r21	; 0x3a
    1454:	8a ad       	ldd	r24, Y+58	; 0x3a
    1456:	88 23       	and	r24, r24
    1458:	41 f7       	brne	.-48     	; 0x142a <segment_Num+0x30>

	for (u8 i = 0; i < 4; i++) {
    145a:	1b 82       	std	Y+3, r1	; 0x03
    145c:	11 c0       	rjmp	.+34     	; 0x1480 <segment_Num+0x86>
	    DIO_U8SetPinValue(&clearPins[i]); // Set pin value to low
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9c 01       	movw	r18, r24
    1466:	22 0f       	add	r18, r18
    1468:	33 1f       	adc	r19, r19
    146a:	22 0f       	add	r18, r18
    146c:	33 1f       	adc	r19, r19
    146e:	ce 01       	movw	r24, r28
    1470:	04 96       	adiw	r24, 0x04	; 4
    1472:	82 0f       	add	r24, r18
    1474:	93 1f       	adc	r25, r19
    1476:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
	    {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
	    {DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT, DIO_PIN_HIGH},
	    {DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT, DIO_PIN_HIGH}
	};

	for (u8 i = 0; i < 4; i++) {
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	8f 5f       	subi	r24, 0xFF	; 255
    147e:	8b 83       	std	Y+3, r24	; 0x03
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	84 30       	cpi	r24, 0x04	; 4
    1484:	60 f3       	brcs	.-40     	; 0x145e <segment_Num+0x64>
	DIO_Config segmentPins[] = {
	    {DIO_PORTA, DIO_PIN3, DIO_PIN_OUTPUT, DIO_PIN_LOW},
	    {DIO_PORTA, DIO_PIN2, DIO_PIN_OUTPUT, DIO_PIN_LOW},
	    {DIO_PORTB, DIO_PIN5, DIO_PIN_OUTPUT, DIO_PIN_LOW},
	    {DIO_PORTB, DIO_PIN6, DIO_PIN_OUTPUT, DIO_PIN_LOW}
	};
    1486:	fe 01       	movw	r30, r28
    1488:	74 96       	adiw	r30, 0x14	; 20
    148a:	fc af       	std	Y+60, r31	; 0x3c
    148c:	eb af       	std	Y+59, r30	; 0x3b
    148e:	40 e9       	ldi	r20, 0x90	; 144
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	5e af       	std	Y+62, r21	; 0x3e
    1494:	4d af       	std	Y+61, r20	; 0x3d
    1496:	50 e1       	ldi	r21, 0x10	; 16
    1498:	5f af       	std	Y+63, r21	; 0x3f
    149a:	ed ad       	ldd	r30, Y+61	; 0x3d
    149c:	fe ad       	ldd	r31, Y+62	; 0x3e
    149e:	00 80       	ld	r0, Z
    14a0:	4d ad       	ldd	r20, Y+61	; 0x3d
    14a2:	5e ad       	ldd	r21, Y+62	; 0x3e
    14a4:	4f 5f       	subi	r20, 0xFF	; 255
    14a6:	5f 4f       	sbci	r21, 0xFF	; 255
    14a8:	5e af       	std	Y+62, r21	; 0x3e
    14aa:	4d af       	std	Y+61, r20	; 0x3d
    14ac:	eb ad       	ldd	r30, Y+59	; 0x3b
    14ae:	fc ad       	ldd	r31, Y+60	; 0x3c
    14b0:	00 82       	st	Z, r0
    14b2:	4b ad       	ldd	r20, Y+59	; 0x3b
    14b4:	5c ad       	ldd	r21, Y+60	; 0x3c
    14b6:	4f 5f       	subi	r20, 0xFF	; 255
    14b8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ba:	5c af       	std	Y+60, r21	; 0x3c
    14bc:	4b af       	std	Y+59, r20	; 0x3b
    14be:	5f ad       	ldd	r21, Y+63	; 0x3f
    14c0:	51 50       	subi	r21, 0x01	; 1
    14c2:	5f af       	std	Y+63, r21	; 0x3f
    14c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    14c6:	88 23       	and	r24, r24
    14c8:	41 f7       	brne	.-48     	; 0x149a <segment_Num+0xa0>

	if (segmentNum >= 1 && segmentNum <= 4) {
    14ca:	8d a9       	ldd	r24, Y+53	; 0x35
    14cc:	88 23       	and	r24, r24
    14ce:	c1 f0       	breq	.+48     	; 0x1500 <segment_Num+0x106>
    14d0:	8d a9       	ldd	r24, Y+53	; 0x35
    14d2:	85 30       	cpi	r24, 0x05	; 5
    14d4:	a8 f4       	brcc	.+42     	; 0x1500 <segment_Num+0x106>
	    DIO_U8SetPinValue(&segmentPins[segmentNum - 1]); // Set segment pin value to high
    14d6:	8d a9       	ldd	r24, Y+53	; 0x35
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	82 1b       	sub	r24, r18
    14e2:	93 0b       	sbc	r25, r19
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	22 27       	eor	r18, r18
    14ee:	33 27       	eor	r19, r19
    14f0:	28 1b       	sub	r18, r24
    14f2:	39 0b       	sbc	r19, r25
    14f4:	ce 01       	movw	r24, r28
    14f6:	44 96       	adiw	r24, 0x14	; 20
    14f8:	82 0f       	add	r24, r18
    14fa:	93 1f       	adc	r25, r19
    14fc:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
	DIO_Config displayPins[] = {
	    {DIO_PORTB, DIO_PIN0, DIO_PIN_OUTPUT, DIO_PIN_LOW}, // Pin 0
	    {DIO_PORTB, DIO_PIN1, DIO_PIN_OUTPUT, DIO_PIN_LOW}, // Pin 1
	    {DIO_PORTB, DIO_PIN2, DIO_PIN_OUTPUT, DIO_PIN_LOW}, // Pin 2
	    {DIO_PORTB, DIO_PIN4, DIO_PIN_OUTPUT, DIO_PIN_LOW}  // Pin 4
	};
    1500:	fe 01       	movw	r30, r28
    1502:	b4 96       	adiw	r30, 0x24	; 36
    1504:	22 96       	adiw	r28, 0x02	; 2
    1506:	ff af       	std	Y+63, r31	; 0x3f
    1508:	ee af       	std	Y+62, r30	; 0x3e
    150a:	22 97       	sbiw	r28, 0x02	; 2
    150c:	40 e8       	ldi	r20, 0x80	; 128
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	24 96       	adiw	r28, 0x04	; 4
    1512:	5f af       	std	Y+63, r21	; 0x3f
    1514:	4e af       	std	Y+62, r20	; 0x3e
    1516:	24 97       	sbiw	r28, 0x04	; 4
    1518:	50 e1       	ldi	r21, 0x10	; 16
    151a:	25 96       	adiw	r28, 0x05	; 5
    151c:	5f af       	std	Y+63, r21	; 0x3f
    151e:	25 97       	sbiw	r28, 0x05	; 5
    1520:	24 96       	adiw	r28, 0x04	; 4
    1522:	ee ad       	ldd	r30, Y+62	; 0x3e
    1524:	ff ad       	ldd	r31, Y+63	; 0x3f
    1526:	24 97       	sbiw	r28, 0x04	; 4
    1528:	00 80       	ld	r0, Z
    152a:	24 96       	adiw	r28, 0x04	; 4
    152c:	4e ad       	ldd	r20, Y+62	; 0x3e
    152e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1530:	24 97       	sbiw	r28, 0x04	; 4
    1532:	4f 5f       	subi	r20, 0xFF	; 255
    1534:	5f 4f       	sbci	r21, 0xFF	; 255
    1536:	24 96       	adiw	r28, 0x04	; 4
    1538:	5f af       	std	Y+63, r21	; 0x3f
    153a:	4e af       	std	Y+62, r20	; 0x3e
    153c:	24 97       	sbiw	r28, 0x04	; 4
    153e:	22 96       	adiw	r28, 0x02	; 2
    1540:	ee ad       	ldd	r30, Y+62	; 0x3e
    1542:	ff ad       	ldd	r31, Y+63	; 0x3f
    1544:	22 97       	sbiw	r28, 0x02	; 2
    1546:	00 82       	st	Z, r0
    1548:	22 96       	adiw	r28, 0x02	; 2
    154a:	4e ad       	ldd	r20, Y+62	; 0x3e
    154c:	5f ad       	ldd	r21, Y+63	; 0x3f
    154e:	22 97       	sbiw	r28, 0x02	; 2
    1550:	4f 5f       	subi	r20, 0xFF	; 255
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	22 96       	adiw	r28, 0x02	; 2
    1556:	5f af       	std	Y+63, r21	; 0x3f
    1558:	4e af       	std	Y+62, r20	; 0x3e
    155a:	22 97       	sbiw	r28, 0x02	; 2
    155c:	25 96       	adiw	r28, 0x05	; 5
    155e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1560:	25 97       	sbiw	r28, 0x05	; 5
    1562:	51 50       	subi	r21, 0x01	; 1
    1564:	25 96       	adiw	r28, 0x05	; 5
    1566:	5f af       	std	Y+63, r21	; 0x3f
    1568:	25 97       	sbiw	r28, 0x05	; 5
    156a:	25 96       	adiw	r28, 0x05	; 5
    156c:	8f ad       	ldd	r24, Y+63	; 0x3f
    156e:	25 97       	sbiw	r28, 0x05	; 5
    1570:	88 23       	and	r24, r24
    1572:	b1 f6       	brne	.-84     	; 0x1520 <segment_Num+0x126>

	// Set the common configuration for the display pins
	for (u8 i = 0; i < 4; i++) {
    1574:	1a 82       	std	Y+2, r1	; 0x02
    1576:	30 c0       	rjmp	.+96     	; 0x15d8 <segment_Num+0x1de>
	    // Set the pin value based on the number (num)
	    u8 pinValue = (num & (1 << i)) ? DIO_PIN_HIGH : DIO_PIN_LOW;
    1578:	8c a9       	ldd	r24, Y+52	; 0x34
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	f9 01       	movw	r30, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <segment_Num+0x192>
    1588:	f5 95       	asr	r31
    158a:	e7 95       	ror	r30
    158c:	8a 95       	dec	r24
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <segment_Num+0x18e>
    1590:	cf 01       	movw	r24, r30
    1592:	81 70       	andi	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01

	    // Set the pin value for each digit based on the binary representation
	    displayPins[i].value = pinValue;
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9c 01       	movw	r18, r24
    159e:	22 0f       	add	r18, r18
    15a0:	33 1f       	adc	r19, r19
    15a2:	22 0f       	add	r18, r18
    15a4:	33 1f       	adc	r19, r19
    15a6:	ce 01       	movw	r24, r28
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	82 0f       	add	r24, r18
    15ac:	93 1f       	adc	r25, r19
    15ae:	fc 01       	movw	r30, r24
    15b0:	b6 96       	adiw	r30, 0x26	; 38
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	80 83       	st	Z, r24
	    DIO_U8SetPinValue(&displayPins[i]);
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	9c 01       	movw	r18, r24
    15be:	22 0f       	add	r18, r18
    15c0:	33 1f       	adc	r19, r19
    15c2:	22 0f       	add	r18, r18
    15c4:	33 1f       	adc	r19, r19
    15c6:	ce 01       	movw	r24, r28
    15c8:	84 96       	adiw	r24, 0x24	; 36
    15ca:	82 0f       	add	r24, r18
    15cc:	93 1f       	adc	r25, r19
    15ce:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
	    {DIO_PORTB, DIO_PIN2, DIO_PIN_OUTPUT, DIO_PIN_LOW}, // Pin 2
	    {DIO_PORTB, DIO_PIN4, DIO_PIN_OUTPUT, DIO_PIN_LOW}  // Pin 4
	};

	// Set the common configuration for the display pins
	for (u8 i = 0; i < 4; i++) {
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	8f 5f       	subi	r24, 0xFF	; 255
    15d6:	8a 83       	std	Y+2, r24	; 0x02
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	84 30       	cpi	r24, 0x04	; 4
    15dc:	68 f2       	brcs	.-102    	; 0x1578 <segment_Num+0x17e>
	    displayPins[i].value = pinValue;
	    DIO_U8SetPinValue(&displayPins[i]);
	}


}
    15de:	cc 5b       	subi	r28, 0xBC	; 188
    15e0:	df 4f       	sbci	r29, 0xFF	; 255
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <KEYPAD_getPressedKey>:
 * its corresponding functional number in the proteus for 4x4 keypad
 */
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number);


u8 KEYPAD_getPressedKey(void){
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	a9 97       	sbiw	r28, 0x29	; 41
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    DIO_Config colPins[] = {
           {DIO_PORTD, DIO_PIN7, DIO_PIN_INPUT,DIO_PIN_HIGH},
           {DIO_PORTD, DIO_PIN6, DIO_PIN_INPUT,DIO_PIN_HIGH},
           {DIO_PORTD, DIO_PIN5, DIO_PIN_INPUT,DIO_PIN_HIGH},
           {DIO_PORTD, DIO_PIN3, DIO_PIN_INPUT,DIO_PIN_HIGH},
       };
    1606:	ce 01       	movw	r24, r28
    1608:	04 96       	adiw	r24, 0x04	; 4
    160a:	9e a3       	std	Y+38, r25	; 0x26
    160c:	8d a3       	std	Y+37, r24	; 0x25
    160e:	a0 eb       	ldi	r26, 0xB0	; 176
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	b8 a7       	std	Y+40, r27	; 0x28
    1614:	af a3       	std	Y+39, r26	; 0x27
    1616:	b0 e1       	ldi	r27, 0x10	; 16
    1618:	b9 a7       	std	Y+41, r27	; 0x29
    161a:	ef a1       	ldd	r30, Y+39	; 0x27
    161c:	f8 a5       	ldd	r31, Y+40	; 0x28
    161e:	00 80       	ld	r0, Z
    1620:	8f a1       	ldd	r24, Y+39	; 0x27
    1622:	98 a5       	ldd	r25, Y+40	; 0x28
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	98 a7       	std	Y+40, r25	; 0x28
    1628:	8f a3       	std	Y+39, r24	; 0x27
    162a:	ad a1       	ldd	r26, Y+37	; 0x25
    162c:	be a1       	ldd	r27, Y+38	; 0x26
    162e:	0c 92       	st	X, r0
    1630:	ed a1       	ldd	r30, Y+37	; 0x25
    1632:	fe a1       	ldd	r31, Y+38	; 0x26
    1634:	31 96       	adiw	r30, 0x01	; 1
    1636:	fe a3       	std	Y+38, r31	; 0x26
    1638:	ed a3       	std	Y+37, r30	; 0x25
    163a:	f9 a5       	ldd	r31, Y+41	; 0x29
    163c:	f1 50       	subi	r31, 0x01	; 1
    163e:	f9 a7       	std	Y+41, r31	; 0x29
    1640:	89 a5       	ldd	r24, Y+41	; 0x29
    1642:	88 23       	and	r24, r24
    1644:	51 f7       	brne	.-44     	; 0x161a <KEYPAD_getPressedKey+0x28>
    DIO_Config rowPins[] = {
           {DIO_PORTC, DIO_PIN5, DIO_PIN_OUTPUT},
           {DIO_PORTC, DIO_PIN4, DIO_PIN_OUTPUT},
           {DIO_PORTC, DIO_PIN3, DIO_PIN_OUTPUT},
           {DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT}
       };
    1646:	80 e1       	ldi	r24, 0x10	; 16
    1648:	fe 01       	movw	r30, r28
    164a:	74 96       	adiw	r30, 0x14	; 20
    164c:	df 01       	movw	r26, r30
    164e:	98 2f       	mov	r25, r24
    1650:	1d 92       	st	X+, r1
    1652:	9a 95       	dec	r25
    1654:	e9 f7       	brne	.-6      	; 0x1650 <KEYPAD_getPressedKey+0x5e>
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	8c 8b       	std	Y+20, r24	; 0x14
    165a:	85 e0       	ldi	r24, 0x05	; 5
    165c:	8d 8b       	std	Y+21, r24	; 0x15
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	8e 8b       	std	Y+22, r24	; 0x16
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	88 8f       	std	Y+24, r24	; 0x18
    1666:	84 e0       	ldi	r24, 0x04	; 4
    1668:	89 8f       	std	Y+25, r24	; 0x19
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	8a 8f       	std	Y+26, r24	; 0x1a
    166e:	82 e0       	ldi	r24, 0x02	; 2
    1670:	8c 8f       	std	Y+28, r24	; 0x1c
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	8d 8f       	std	Y+29, r24	; 0x1d
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	8e 8f       	std	Y+30, r24	; 0x1e
    167a:	82 e0       	ldi	r24, 0x02	; 2
    167c:	88 a3       	std	Y+32, r24	; 0x20
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	89 a3       	std	Y+33, r24	; 0x21
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	8a a3       	std	Y+34, r24	; 0x22

    // Initialize the keypad pins
    for (u8 i = 0; i < 4; i++) {
    1686:	19 82       	std	Y+1, r1	; 0x01
    1688:	2d c0       	rjmp	.+90     	; 0x16e4 <KEYPAD_getPressedKey+0xf2>
        DIO_U8SetPinDirection(&colPins[i]);
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9c 01       	movw	r18, r24
    1692:	22 0f       	add	r18, r18
    1694:	33 1f       	adc	r19, r19
    1696:	22 0f       	add	r18, r18
    1698:	33 1f       	adc	r19, r19
    169a:	ce 01       	movw	r24, r28
    169c:	04 96       	adiw	r24, 0x04	; 4
    169e:	82 0f       	add	r24, r18
    16a0:	93 1f       	adc	r25, r19
    16a2:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
        DIO_U8SetPinDirection(&rowPins[i]);
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	88 2f       	mov	r24, r24
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	9c 01       	movw	r18, r24
    16ae:	22 0f       	add	r18, r18
    16b0:	33 1f       	adc	r19, r19
    16b2:	22 0f       	add	r18, r18
    16b4:	33 1f       	adc	r19, r19
    16b6:	ce 01       	movw	r24, r28
    16b8:	44 96       	adiw	r24, 0x14	; 20
    16ba:	82 0f       	add	r24, r18
    16bc:	93 1f       	adc	r25, r19
    16be:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
        DIO_U8SetPinValue(&colPins[i]);
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	88 2f       	mov	r24, r24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	9c 01       	movw	r18, r24
    16ca:	22 0f       	add	r18, r18
    16cc:	33 1f       	adc	r19, r19
    16ce:	22 0f       	add	r18, r18
    16d0:	33 1f       	adc	r19, r19
    16d2:	ce 01       	movw	r24, r28
    16d4:	04 96       	adiw	r24, 0x04	; 4
    16d6:	82 0f       	add	r24, r18
    16d8:	93 1f       	adc	r25, r19
    16da:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
           {DIO_PORTC, DIO_PIN3, DIO_PIN_OUTPUT},
           {DIO_PORTC, DIO_PIN2, DIO_PIN_OUTPUT}
       };

    // Initialize the keypad pins
    for (u8 i = 0; i < 4; i++) {
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	8f 5f       	subi	r24, 0xFF	; 255
    16e2:	89 83       	std	Y+1, r24	; 0x01
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	84 30       	cpi	r24, 0x04	; 4
    16e8:	80 f2       	brcs	.-96     	; 0x168a <KEYPAD_getPressedKey+0x98>
    }

    while(1)
    	{
    	/*for loop to scan all keypad columns*/
    		for (row = 0 ; row < 4 ; row++)
    16ea:	1a 82       	std	Y+2, r1	; 0x02
    16ec:	71 c0       	rjmp	.+226    	; 0x17d0 <KEYPAD_getPressedKey+0x1de>
    		{
    			/*set current row pin low to test all col pins to find out which button has been pressed*/
    			rowPins[row].value = DIO_PIN_LOW;
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9c 01       	movw	r18, r24
    16f6:	22 0f       	add	r18, r18
    16f8:	33 1f       	adc	r19, r19
    16fa:	22 0f       	add	r18, r18
    16fc:	33 1f       	adc	r19, r19
    16fe:	ce 01       	movw	r24, r28
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	82 0f       	add	r24, r18
    1704:	93 1f       	adc	r25, r19
    1706:	fc 01       	movw	r30, r24
    1708:	76 96       	adiw	r30, 0x16	; 22
    170a:	10 82       	st	Z, r1
    			DIO_U8SetPinValue(&rowPins[row]);
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9c 01       	movw	r18, r24
    1714:	22 0f       	add	r18, r18
    1716:	33 1f       	adc	r19, r19
    1718:	22 0f       	add	r18, r18
    171a:	33 1f       	adc	r19, r19
    171c:	ce 01       	movw	r24, r28
    171e:	44 96       	adiw	r24, 0x14	; 20
    1720:	82 0f       	add	r24, r18
    1722:	93 1f       	adc	r25, r19
    1724:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    			/*for loop to scan and test all keypad row pins*/
    			for (col = 0 ; col < 4 ; col++)
    1728:	1b 82       	std	Y+3, r1	; 0x03
    172a:	2e c0       	rjmp	.+92     	; 0x1788 <KEYPAD_getPressedKey+0x196>
    			{
    				u8 key;
    				DIO_U8GetPinValue(&colPins[col], &key);
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	88 2f       	mov	r24, r24
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	9c 01       	movw	r18, r24
    1734:	22 0f       	add	r18, r18
    1736:	33 1f       	adc	r19, r19
    1738:	22 0f       	add	r18, r18
    173a:	33 1f       	adc	r19, r19
    173c:	ce 01       	movw	r24, r28
    173e:	04 96       	adiw	r24, 0x04	; 4
    1740:	82 0f       	add	r24, r18
    1742:	93 1f       	adc	r25, r19
    1744:	9e 01       	movw	r18, r28
    1746:	2c 5d       	subi	r18, 0xDC	; 220
    1748:	3f 4f       	sbci	r19, 0xFF	; 255
    174a:	b9 01       	movw	r22, r18
    174c:	0e 94 27 09 	call	0x124e	; 0x124e <DIO_U8GetPinValue>
    				/*check current row pin value*/
    				if ( DIO_PIN_LOW == key )
    1750:	8c a1       	ldd	r24, Y+36	; 0x24
    1752:	88 23       	and	r24, r24
    1754:	b1 f4       	brne	.+44     	; 0x1782 <KEYPAD_getPressedKey+0x190>
    				{
    					/*return pressed button value*/
    					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	88 2f       	mov	r24, r24
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	98 2f       	mov	r25, r24
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	89 0f       	add	r24, r25
    176a:	8f 5f       	subi	r24, 0xFF	; 255
    176c:	0e 94 ed 0b 	call	0x17da	; 0x17da <KEYPAD_4x4_adjustKeyNumber>
    			DIO_U8SetPinValue(&rowPins[row]);

    		}/*end of for loop*/
    	}

}
    1770:	a9 96       	adiw	r28, 0x29	; 41
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret
    		{
    			/*set current row pin low to test all col pins to find out which button has been pressed*/
    			rowPins[row].value = DIO_PIN_LOW;
    			DIO_U8SetPinValue(&rowPins[row]);
    			/*for loop to scan and test all keypad row pins*/
    			for (col = 0 ; col < 4 ; col++)
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	8f 5f       	subi	r24, 0xFF	; 255
    1786:	8b 83       	std	Y+3, r24	; 0x03
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	84 30       	cpi	r24, 0x04	; 4
    178c:	78 f2       	brcs	.-98     	; 0x172c <KEYPAD_getPressedKey+0x13a>
    					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    					//return keymap[i][j];
    				}
    			}/*end of for loop*/
    			/*set current column pin HIGH again*/
    			rowPins[row].value = DIO_PIN_HIGH;
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9c 01       	movw	r18, r24
    1796:	22 0f       	add	r18, r18
    1798:	33 1f       	adc	r19, r19
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	ce 01       	movw	r24, r28
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	82 0f       	add	r24, r18
    17a4:	93 1f       	adc	r25, r19
    17a6:	fc 01       	movw	r30, r24
    17a8:	76 96       	adiw	r30, 0x16	; 22
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	80 83       	st	Z, r24
    			DIO_U8SetPinValue(&rowPins[row]);
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9c 01       	movw	r18, r24
    17b6:	22 0f       	add	r18, r18
    17b8:	33 1f       	adc	r19, r19
    17ba:	22 0f       	add	r18, r18
    17bc:	33 1f       	adc	r19, r19
    17be:	ce 01       	movw	r24, r28
    17c0:	44 96       	adiw	r24, 0x14	; 20
    17c2:	82 0f       	add	r24, r18
    17c4:	93 1f       	adc	r25, r19
    17c6:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
    }

    while(1)
    	{
    	/*for loop to scan all keypad columns*/
    		for (row = 0 ; row < 4 ; row++)
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	8f 5f       	subi	r24, 0xFF	; 255
    17ce:	8a 83       	std	Y+2, r24	; 0x02
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	84 30       	cpi	r24, 0x04	; 4
    17d4:	08 f4       	brcc	.+2      	; 0x17d8 <KEYPAD_getPressedKey+0x1e6>
    17d6:	8b cf       	rjmp	.-234    	; 0x16ee <KEYPAD_getPressedKey+0xfc>
    17d8:	88 cf       	rjmp	.-240    	; 0x16ea <KEYPAD_getPressedKey+0xf8>

000017da <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static u8 KEYPAD_4x4_adjustKeyNumber(u8 button_number)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
    17e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 keypad_button = 0;
    17e8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	3c 83       	std	Y+4, r19	; 0x04
    17f2:	2b 83       	std	Y+3, r18	; 0x03
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	88 30       	cpi	r24, 0x08	; 8
    17fa:	91 05       	cpc	r25, r1
    17fc:	09 f4       	brne	.+2      	; 0x1800 <KEYPAD_4x4_adjustKeyNumber+0x26>
    17fe:	70 c0       	rjmp	.+224    	; 0x18e0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1800:	2b 81       	ldd	r18, Y+3	; 0x03
    1802:	3c 81       	ldd	r19, Y+4	; 0x04
    1804:	29 30       	cpi	r18, 0x09	; 9
    1806:	31 05       	cpc	r19, r1
    1808:	5c f5       	brge	.+86     	; 0x1860 <KEYPAD_4x4_adjustKeyNumber+0x86>
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	9c 81       	ldd	r25, Y+4	; 0x04
    180e:	84 30       	cpi	r24, 0x04	; 4
    1810:	91 05       	cpc	r25, r1
    1812:	09 f4       	brne	.+2      	; 0x1816 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1814:	59 c0       	rjmp	.+178    	; 0x18c8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1816:	2b 81       	ldd	r18, Y+3	; 0x03
    1818:	3c 81       	ldd	r19, Y+4	; 0x04
    181a:	25 30       	cpi	r18, 0x05	; 5
    181c:	31 05       	cpc	r19, r1
    181e:	9c f4       	brge	.+38     	; 0x1846 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	82 30       	cpi	r24, 0x02	; 2
    1826:	91 05       	cpc	r25, r1
    1828:	09 f4       	brne	.+2      	; 0x182c <KEYPAD_4x4_adjustKeyNumber+0x52>
    182a:	48 c0       	rjmp	.+144    	; 0x18bc <KEYPAD_4x4_adjustKeyNumber+0xe2>
    182c:	2b 81       	ldd	r18, Y+3	; 0x03
    182e:	3c 81       	ldd	r19, Y+4	; 0x04
    1830:	23 30       	cpi	r18, 0x03	; 3
    1832:	31 05       	cpc	r19, r1
    1834:	0c f0       	brlt	.+2      	; 0x1838 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1836:	45 c0       	rjmp	.+138    	; 0x18c2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	91 05       	cpc	r25, r1
    1840:	09 f4       	brne	.+2      	; 0x1844 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1842:	39 c0       	rjmp	.+114    	; 0x18b6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1844:	67 c0       	rjmp	.+206    	; 0x1914 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1846:	2b 81       	ldd	r18, Y+3	; 0x03
    1848:	3c 81       	ldd	r19, Y+4	; 0x04
    184a:	26 30       	cpi	r18, 0x06	; 6
    184c:	31 05       	cpc	r19, r1
    184e:	09 f4       	brne	.+2      	; 0x1852 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1850:	41 c0       	rjmp	.+130    	; 0x18d4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	9c 81       	ldd	r25, Y+4	; 0x04
    1856:	87 30       	cpi	r24, 0x07	; 7
    1858:	91 05       	cpc	r25, r1
    185a:	0c f0       	brlt	.+2      	; 0x185e <KEYPAD_4x4_adjustKeyNumber+0x84>
    185c:	3e c0       	rjmp	.+124    	; 0x18da <KEYPAD_4x4_adjustKeyNumber+0x100>
    185e:	37 c0       	rjmp	.+110    	; 0x18ce <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1860:	2b 81       	ldd	r18, Y+3	; 0x03
    1862:	3c 81       	ldd	r19, Y+4	; 0x04
    1864:	2c 30       	cpi	r18, 0x0C	; 12
    1866:	31 05       	cpc	r19, r1
    1868:	09 f4       	brne	.+2      	; 0x186c <KEYPAD_4x4_adjustKeyNumber+0x92>
    186a:	46 c0       	rjmp	.+140    	; 0x18f8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	8d 30       	cpi	r24, 0x0D	; 13
    1872:	91 05       	cpc	r25, r1
    1874:	5c f4       	brge	.+22     	; 0x188c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1876:	2b 81       	ldd	r18, Y+3	; 0x03
    1878:	3c 81       	ldd	r19, Y+4	; 0x04
    187a:	2a 30       	cpi	r18, 0x0A	; 10
    187c:	31 05       	cpc	r19, r1
    187e:	b1 f1       	breq	.+108    	; 0x18ec <KEYPAD_4x4_adjustKeyNumber+0x112>
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	9c 81       	ldd	r25, Y+4	; 0x04
    1884:	8b 30       	cpi	r24, 0x0B	; 11
    1886:	91 05       	cpc	r25, r1
    1888:	a4 f5       	brge	.+104    	; 0x18f2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    188a:	2d c0       	rjmp	.+90     	; 0x18e6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    188c:	2b 81       	ldd	r18, Y+3	; 0x03
    188e:	3c 81       	ldd	r19, Y+4	; 0x04
    1890:	2e 30       	cpi	r18, 0x0E	; 14
    1892:	31 05       	cpc	r19, r1
    1894:	b9 f1       	breq	.+110    	; 0x1904 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	8e 30       	cpi	r24, 0x0E	; 14
    189c:	91 05       	cpc	r25, r1
    189e:	7c f1       	brlt	.+94     	; 0x18fe <KEYPAD_4x4_adjustKeyNumber+0x124>
    18a0:	2b 81       	ldd	r18, Y+3	; 0x03
    18a2:	3c 81       	ldd	r19, Y+4	; 0x04
    18a4:	2f 30       	cpi	r18, 0x0F	; 15
    18a6:	31 05       	cpc	r19, r1
    18a8:	79 f1       	breq	.+94     	; 0x1908 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	80 31       	cpi	r24, 0x10	; 16
    18b0:	91 05       	cpc	r25, r1
    18b2:	69 f1       	breq	.+90     	; 0x190e <KEYPAD_4x4_adjustKeyNumber+0x134>
    18b4:	2f c0       	rjmp	.+94     	; 0x1914 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    18b6:	87 e0       	ldi	r24, 0x07	; 7
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	2e c0       	rjmp	.+92     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    18bc:	88 e0       	ldi	r24, 0x08	; 8
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	2b c0       	rjmp	.+86     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    18c2:	89 e0       	ldi	r24, 0x09	; 9
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	28 c0       	rjmp	.+80     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    18c8:	85 e2       	ldi	r24, 0x25	; 37
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	25 c0       	rjmp	.+74     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    18ce:	84 e0       	ldi	r24, 0x04	; 4
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	22 c0       	rjmp	.+68     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    18d4:	85 e0       	ldi	r24, 0x05	; 5
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	1f c0       	rjmp	.+62     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    18da:	86 e0       	ldi	r24, 0x06	; 6
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	1c c0       	rjmp	.+56     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    18e0:	8a e2       	ldi	r24, 0x2A	; 42
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	19 c0       	rjmp	.+50     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	16 c0       	rjmp	.+44     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	13 c0       	rjmp	.+38     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    18f2:	83 e0       	ldi	r24, 0x03	; 3
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	10 c0       	rjmp	.+32     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    18f8:	8d e2       	ldi	r24, 0x2D	; 45
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	0d c0       	rjmp	.+26     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    18fe:	8d e0       	ldi	r24, 0x0D	; 13
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	0a c0       	rjmp	.+20     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1904:	19 82       	std	Y+1, r1	; 0x01
    1906:	08 c0       	rjmp	.+16     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1908:	8d e3       	ldi	r24, 0x3D	; 61
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	05 c0       	rjmp	.+10     	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    190e:	8b e2       	ldi	r24, 0x2B	; 43
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
}
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <testCallback>:
#include "../MCAL/EXTI/EXTI_interface.h"
#include "../MCAL/GIE/GIE_interface.h"
#include <util/delay.h>


void testCallback(void){
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <testCallback+0x6>
    192e:	00 d0       	rcall	.+0      	; 0x1930 <testCallback+0x8>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
	DIO_Config pinTest;
	pinTest.port= DIO_PORTA;
    1934:	19 82       	std	Y+1, r1	; 0x01
	pinTest.pin= DIO_PIN6;
    1936:	86 e0       	ldi	r24, 0x06	; 6
    1938:	8a 83       	std	Y+2, r24	; 0x02
	DIO_U8TogglePin(&pinTest);
    193a:	ce 01       	movw	r24, r28
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	0e 94 ae 08 	call	0x115c	; 0x115c <DIO_U8TogglePin>
}
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <init>:


void init(){
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	00 d0       	rcall	.+0      	; 0x1956 <init+0x6>
    1956:	00 d0       	rcall	.+0      	; 0x1958 <init+0x8>
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
	DIO_Config pinTest;
	pinTest.port= DIO_PORTD;
    195c:	83 e0       	ldi	r24, 0x03	; 3
    195e:	89 83       	std	Y+1, r24	; 0x01
	pinTest.direction= DIO_PIN_INPUT;
    1960:	1b 82       	std	Y+3, r1	; 0x03
	pinTest.pin= DIO_PIN3;
    1962:	83 e0       	ldi	r24, 0x03	; 3
    1964:	8a 83       	std	Y+2, r24	; 0x02
	pinTest.value = DIO_PIN_HIGH;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	8c 83       	std	Y+4, r24	; 0x04
	DIO_U8SetPinDirection(&pinTest);
    196a:	ce 01       	movw	r24, r28
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
	DIO_U8SetPinValue(&pinTest);
    1972:	ce 01       	movw	r24, r28
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	0e 94 23 08 	call	0x1046	; 0x1046 <DIO_U8SetPinValue>
	pinTest.port= DIO_PORTA;
    197a:	19 82       	std	Y+1, r1	; 0x01
	pinTest.direction= DIO_PIN_OUTPUT;
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	8b 83       	std	Y+3, r24	; 0x03
	pinTest.pin= DIO_PIN6;
    1980:	86 e0       	ldi	r24, 0x06	; 6
    1982:	8a 83       	std	Y+2, r24	; 0x02
	DIO_U8SetPinDirection(&pinTest);
    1984:	ce 01       	movw	r24, r28
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	0e 94 71 07 	call	0xee2	; 0xee2 <DIO_U8SetPinDirection>
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <main>:

int main(void) {
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	2f 97       	sbiw	r28, 0x0f	; 15
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
	// Enable global interrupts
	//GIE_enable();
	//EXTI_enable(EXTI_INT1_ID,FALLING_EDGE);
	//EXTI_setCallBack(EXTI_INT1_ID,testCallback);
	// Initialize the 7-segment display
	segment_Init();
    19ae:	0e 94 a2 09 	call	0x1344	; 0x1344 <segment_Init>
	u8 key;


	while (1) {

		key = KEYPAD_getPressedKey();
    19b2:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <KEYPAD_getPressedKey>
    19b6:	8f 87       	std	Y+15, r24	; 0x0f
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	aa ef       	ldi	r26, 0xFA	; 250
    19be:	b3 e4       	ldi	r27, 0x43	; 67
    19c0:	8b 87       	std	Y+11, r24	; 0x0b
    19c2:	9c 87       	std	Y+12, r25	; 0x0c
    19c4:	ad 87       	std	Y+13, r26	; 0x0d
    19c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    19cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	4a e7       	ldi	r20, 0x7A	; 122
    19d6:	53 e4       	ldi	r21, 0x43	; 67
    19d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	8f 83       	std	Y+7, r24	; 0x07
    19e2:	98 87       	std	Y+8, r25	; 0x08
    19e4:	a9 87       	std	Y+9, r26	; 0x09
    19e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19e8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ea:	78 85       	ldd	r23, Y+8	; 0x08
    19ec:	89 85       	ldd	r24, Y+9	; 0x09
    19ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e8       	ldi	r20, 0x80	; 128
    19f6:	5f e3       	ldi	r21, 0x3F	; 63
    19f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fc:	88 23       	and	r24, r24
    19fe:	2c f4       	brge	.+10     	; 0x1a0a <main+0x70>
		__ticks = 1;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
    1a08:	3f c0       	rjmp	.+126    	; 0x1a88 <main+0xee>
	else if (__tmp > 65535)
    1a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0c:	78 85       	ldd	r23, Y+8	; 0x08
    1a0e:	89 85       	ldd	r24, Y+9	; 0x09
    1a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	3f ef       	ldi	r19, 0xFF	; 255
    1a16:	4f e7       	ldi	r20, 0x7F	; 127
    1a18:	57 e4       	ldi	r21, 0x47	; 71
    1a1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a1e:	18 16       	cp	r1, r24
    1a20:	4c f5       	brge	.+82     	; 0x1a74 <main+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e2       	ldi	r20, 0x20	; 32
    1a30:	51 e4       	ldi	r21, 0x41	; 65
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	9e 83       	std	Y+6, r25	; 0x06
    1a48:	8d 83       	std	Y+5, r24	; 0x05
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <main+0xd0>
    1a4c:	89 e1       	ldi	r24, 0x19	; 25
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	9c 83       	std	Y+4, r25	; 0x04
    1a52:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	9c 81       	ldd	r25, Y+4	; 0x04
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <main+0xbe>
    1a5c:	9c 83       	std	Y+4, r25	; 0x04
    1a5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
    1a62:	9e 81       	ldd	r25, Y+6	; 0x06
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	00 97       	sbiw	r24, 0x00	; 0
    1a70:	69 f7       	brne	.-38     	; 0x1a4c <main+0xb2>
    1a72:	14 c0       	rjmp	.+40     	; 0x1a9c <main+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a74:	6f 81       	ldd	r22, Y+7	; 0x07
    1a76:	78 85       	ldd	r23, Y+8	; 0x08
    1a78:	89 85       	ldd	r24, Y+9	; 0x09
    1a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9e 83       	std	Y+6, r25	; 0x06
    1a86:	8d 83       	std	Y+5, r24	; 0x05
    1a88:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <main+0xfa>
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		segment_Num(key,0);
    1a9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <segment_Num>
    1aa4:	86 cf       	rjmp	.-244    	; 0x19b2 <main+0x18>

00001aa6 <__prologue_saves__>:
    1aa6:	2f 92       	push	r2
    1aa8:	3f 92       	push	r3
    1aaa:	4f 92       	push	r4
    1aac:	5f 92       	push	r5
    1aae:	6f 92       	push	r6
    1ab0:	7f 92       	push	r7
    1ab2:	8f 92       	push	r8
    1ab4:	9f 92       	push	r9
    1ab6:	af 92       	push	r10
    1ab8:	bf 92       	push	r11
    1aba:	cf 92       	push	r12
    1abc:	df 92       	push	r13
    1abe:	ef 92       	push	r14
    1ac0:	ff 92       	push	r15
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	ca 1b       	sub	r28, r26
    1ad0:	db 0b       	sbc	r29, r27
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	09 94       	ijmp

00001ade <__epilogue_restores__>:
    1ade:	2a 88       	ldd	r2, Y+18	; 0x12
    1ae0:	39 88       	ldd	r3, Y+17	; 0x11
    1ae2:	48 88       	ldd	r4, Y+16	; 0x10
    1ae4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ae6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ae8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aea:	8c 84       	ldd	r8, Y+12	; 0x0c
    1aec:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aee:	aa 84       	ldd	r10, Y+10	; 0x0a
    1af0:	b9 84       	ldd	r11, Y+9	; 0x09
    1af2:	c8 84       	ldd	r12, Y+8	; 0x08
    1af4:	df 80       	ldd	r13, Y+7	; 0x07
    1af6:	ee 80       	ldd	r14, Y+6	; 0x06
    1af8:	fd 80       	ldd	r15, Y+5	; 0x05
    1afa:	0c 81       	ldd	r16, Y+4	; 0x04
    1afc:	1b 81       	ldd	r17, Y+3	; 0x03
    1afe:	aa 81       	ldd	r26, Y+2	; 0x02
    1b00:	b9 81       	ldd	r27, Y+1	; 0x01
    1b02:	ce 0f       	add	r28, r30
    1b04:	d1 1d       	adc	r29, r1
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	ed 01       	movw	r28, r26
    1b12:	08 95       	ret

00001b14 <_exit>:
    1b14:	f8 94       	cli

00001b16 <__stop_program>:
    1b16:	ff cf       	rjmp	.-2      	; 0x1b16 <__stop_program>
